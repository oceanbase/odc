// Generated from OBParser.g4 by ANTLR 4.9.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class OBParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		UnderlineUTF8MB3=1, UnderlineASCII=2, UnderlineTIS620=3, ROLE=4, JSON_QUERY=5, 
		QUOTA_NAME=6, PQ_DISTINCT=7, ADMIN=8, ALLOW=9, NO_MV_REWRITE=10, EUCLIDEAN=11, 
		STSTOKEN=12, REWRITE=13, NO_COALESCE_AGGR=14, VECTOR_DISTANCE=15, PARTITION_TYPE=16, 
		DOT=17, TASK_ID=18, COMPUTATION=19, MANHATTAN=20, AUTO_REFRESH=21, ARRAY=22, 
		SINGLE=23, SHARED_STORAGE_DEST=24, DISALLOW=25, UnderlineST_ASMVT=26, 
		WITH_PULLUP=27, NO_DECORRELATE=28, CONDITIONAL=29, WO_PULLUP=30, RB_AND_AGG=31, 
		COMPRESSION_CODE=32, FILE_BLOCK_SIZE=33, APPROXIMATE=34, MAX_NET_BANDWIDTH=35, 
		MULTIVALUE=36, SHARED_STORAGE_INFO=37, RB_OR_AGG=38, DATA_SOURCE=39, PROJECT_NAME=40, 
		VECTOR=41, ENDPOINT=42, DATA_DISK_SIZE=43, BUFFER_SIZE=44, PROPERTIES=45, 
		ATTRIBUTE=46, ASIS=47, SCALARS=48, USER_SPECIFIED=49, ACCESS_INFO=50, 
		ROARINGBITMAP=51, VALIDATION=52, COSINE=53, DECORRELATE=54, SUM_OPNSIZE=55, 
		ACCESSKEY=56, MICRO_INDEX_CLUSTERED=57, AUTO_INCREMENT_CACHE_SIZE=58, 
		ACCESSTYPE=59, PQ_GBY=60, EXTERNAL_STORAGE_DEST=61, OVERWRITE=62, MV_REWRITE=63, 
		LAST_REFRESH_SCN=64, COALESCE_AGGR=65, RESOURCE_GROUP=66, WITHOUT=67, 
		MAX_FILE_SIZE=68, APPROX=69, MISMATCH=70, SS_MICRO_CACHE=71, OPTIMIZER_COSTS=72, 
		PAXOS_REPLICA_NUM=73, ACCESSID=74, UNCONDITIONAL=75, NET_BANDWIDTH_WEIGHT=76, 
		RB_BUILD_AGG=77, LeftBracket=78, RightBracket=79, ACCESS=80, OBJECT_ID=81, 
		ACCESSIBLE=82, ADD=83, AGAINST=84, ALTER=85, ALWAYS=86, AND=87, ANALYZE=88, 
		ALL=89, ALTER_HINT_BEGIN=90, NAMESPACE=91, AS=92, ASENSITIVE=93, ASC=94, 
		BETWEEN=95, BEFORE=96, BIGINT=97, BINARY=98, BLOB=99, BOTH=100, BY=101, 
		CALL=102, CASCADE=103, CASE=104, CHANGE=105, CHARACTER=106, CHECK=107, 
		CIPHER=108, WF_TOPN=109, CONDITION=110, CONSTRAINT=111, CONTINUE=112, 
		CONVERT=113, COLLATE=114, COLUMN=115, COLUMNS=116, LS=117, CREATE=118, 
		CROSS=119, CYCLE=120, CURRENT_DATE=121, CURRENT_TIME=122, CURRENT_TIMESTAMP=123, 
		CURRENT_USER=124, WITH_COLUMN_GROUP=125, CURSOR=126, DAY_HOUR=127, DAY_MICROSECOND=128, 
		DAY_MINUTE=129, DAY_SECOND=130, DATABASE=131, DATABASES=132, NUMBER=133, 
		DECIMAL=134, DECLARE=135, ROWID=136, DEFAULT=137, DELAYED=138, DELETE=139, 
		SYNCHRONOUS=140, IMMEDIATE=141, DESC=142, DESCRIBE=143, DETERMINISTIC=144, 
		DIV=145, DISTINCT=146, DISTINCTROW=147, DOUBLE=148, DROP=149, DUAL=150, 
		EACH=151, ENCLOSED=152, ELSE=153, ELSEIF=154, ESCAPED=155, EXISTS=156, 
		EXIT=157, EXPLAIN=158, FETCH=159, FIELDS=160, FOREIGN=161, FLOAT=162, 
		FLOAT4=163, FLOAT8=164, FOR=165, FORCE=166, FROM=167, FULL=168, FULLTEXT=169, 
		GET=170, GENERATED=171, GRANT=172, GROUP=173, HAVING=174, HIGH_PRIORITY=175, 
		HOUR_MICROSECOND=176, HOUR_MINUTE=177, HOUR_SECOND=178, ID=179, IF=180, 
		IN=181, INDEX=182, INNER=183, INFILE=184, INOUT=185, INCLUDING=186, INSENSITIVE=187, 
		INTEGER=188, INT1=189, INT2=190, INT3=191, LIB=192, INT4=193, INT8=194, 
		INTERVAL=195, INSERT=196, ORDINALITY=197, INTO=198, IO_AFTER_GTIDS=199, 
		IO_BEFORE_GTIDS=200, IS=201, ISSUER=202, ITERATE=203, JOIN=204, KEY=205, 
		KEYS=206, KILL=207, LANGUAGE=208, LEADING=209, LEAVE=210, LEFT=211, LIMIT=212, 
		LIKE=213, LINEAR=214, LINES=215, BISON_LIST=216, LOAD=217, LOCAL=218, 
		OPTIMIZER_FEATURES_ENABLE=219, LOCALTIME=220, LOCALTIMESTAMP=221, LOCK_=222, 
		LONG=223, UNLIMITED=224, LONGBLOB=225, LONGTEXT=226, LOOP=227, LOW_PRIORITY=228, 
		MASTER_BIND=229, MASTER_SSL_VERIFY_SERVER_CERT=230, MATCH=231, MAXVALUE=232, 
		MEDIUMBLOB=233, MEDIUMINT=234, MERGE=235, MEDIUMTEXT=236, MIDDLEINT=237, 
		MINUTE_MICROSECOND=238, MINUTE_SECOND=239, MOD=240, MODE=241, MODIFIES=242, 
		NATURAL=243, NO_WRITE_TO_BINLOG=244, ON=245, OPTION=246, OPTIMIZE=247, 
		OPTIONALLY=248, OR=249, ORDER=250, OUT=251, IOPS_WEIGHT=252, OUTER=253, 
		OUTFILE=254, PARSER=255, PROCEDURE=256, MIN_MAX=257, NO_USE_COLUMN_STORE_HINT=258, 
		PURGE=259, PARTITION=260, PRECISION=261, PRIMARY=262, PUBLIC=263, RANGE=264, 
		READ=265, READ_WRITE=266, READS=267, REAL=268, RELEASE=269, REFERENCES=270, 
		REGEXP=271, RENAME=272, REPLACE=273, REPEAT=274, REQUIRE=275, RESIGNAL=276, 
		RESTRICT=277, RETURN=278, REVOKE=279, RIGHT=280, ROWS=281, SECOND_MICROSECOND=282, 
		SELECT=283, SCHEMA=284, SCHEMAS=285, SEPARATOR=286, SET=287, REJECT=288, 
		SENSITIVE=289, SHOW=290, SIGNAL=291, SMALLINT=292, SPATIAL=293, SPECIFIC=294, 
		SQL=295, SQLEXCEPTION=296, SQLSTATE=297, SQLWARNING=298, SQL_BIG_RESULT=299, 
		SQL_CALC_FOUND_ROWS=300, SQL_SMALL_RESULT=301, SSL=302, STARTING=303, 
		NUMERIC=304, STORED=305, PLUS=306, STRAIGHT_JOIN=307, SUBJECT=308, SYSDATE=309, 
		TERMINATED=310, TEXT=311, TINYBLOB=312, TINYINT=313, TINYTEXT=314, TABLE=315, 
		TABLEGROUP=316, THEN=317, TO=318, TRAILING=319, TRIGGER=320, UNDO=321, 
		CALIBRATION=322, UNION=323, UNIQUE=324, UNLOCK=325, LINE_DELIMITER=326, 
		UNSIGNED=327, UPDATE=328, USAGE=329, GEOMCOLLECTION=330, USE=331, USING=332, 
		UTC_DATE=333, UTC_TIME=334, UTC_TIMESTAMP=335, VALUES=336, QUERY_RESPONSE_TIME=337, 
		VARBINARY=338, VARCHAR=339, VARYING=340, VIRTUAL=341, WHERE=342, REDUNDANCY=343, 
		WHEN=344, WHILE=345, CALIBRATION_INFO=346, SCN=347, WINDOW=348, WITH=349, 
		WRITE=350, XOR=351, X509=352, YEAR_MONTH=353, ZEROFILL=354, GLOBAL_ALIAS=355, 
		SESSION_ALIAS=356, UnderlineUTF8=357, UnderlineUTF8MB4=358, UnderlineGBK=359, 
		UnderlineGB18030=360, UnderlineBINARY=361, UnderlineUTF16=362, UnderlineLATIN1=363, 
		UnderlineGB18030_2022=364, STRONG=365, WEAK=366, CONNECT=367, FROZEN=368, 
		EXCEPT=369, MINUS=370, INTERSECT=371, ISNULL=372, NOT=373, NULLX=374, 
		INTNUM=375, AUDIT=376, WARNINGS=377, FORMAT=378, MINVALUE=379, EMPTY_FIELD_AS_NULL=380, 
		UNINSTALL=381, UNDOFILE=382, MASTER_SSL_CA=383, YEAR=384, DISCONNECT=385, 
		STOP=386, STORAGE_FORMAT_WORK_VERSION=387, SIZE=388, DISABLE_PARALLEL_DML=389, 
		AT=390, RELAY_LOG_POS=391, POOL=392, CURDATE=393, JSON_VALUE=394, ZONE_TYPE=395, 
		LOCATION=396, WEIGHT_STRING=397, CHANGED=398, MASTER_SSL_CAPATH=399, REWRITE_MERGE_VERSION=400, 
		NTH_VALUE=401, SERIAL=402, PROGRESSIVE_MERGE_NUM=403, QUEUE_TIME=404, 
		TABLET_MAX_SIZE=405, ILOGCACHE=406, AUTHORS=407, MIGRATE=408, CONSISTENT=409, 
		SUSPEND=410, REMOTE_OSS=411, SECURITY=412, SET_SLAVE_CLUSTER=413, FAST=414, 
		PREVIEW=415, BANDWIDTH=416, TRUNCATE=417, BACKUP_BACKUP_DEST=418, CONSTRAINT_SCHEMA=419, 
		STATEMENT=420, MASTER_SSL_CERT=421, TABLE_NAME=422, PRIORITY=423, DO=424, 
		MASTER_RETRY_COUNT=425, REPLICA=426, KILL_EXPR=427, RECOVERY=428, OLD_KEY=429, 
		DISABLE=430, PORT=431, REBUILD=432, FOLLOWER=433, LOWER_OVER=434, ROOT=435, 
		REDOFILE=436, MASTER_SERVER_ID=437, NCHAR=438, KEY_BLOCK_SIZE=439, SEQUENCE=440, 
		MIGRATION=441, SUBPARTITION=442, MYSQL_DRIVER=443, ROW_NUMBER=444, COMPRESSION=445, 
		BIT=446, MAX_DISK_SIZE=447, SAMPLE=448, UNLOCKED=449, CLASS_ORIGIN=450, 
		RUDUNDANT=451, STATEMENTS=452, ACTION=453, REDUNDANT=454, UPGRADE=455, 
		VALIDATE=456, START=457, TEMPTABLE=458, RECYCLEBIN=459, PROFILES=460, 
		TIMESTAMP_VALUE=461, ERRORS=462, LEAVES=463, UNDEFINED=464, EVERY=465, 
		SHARDING=466, BYTE=467, FLUSH=468, MIN_ROWS=469, ERROR_P=470, LOWER_THAN_LOG=471, 
		MAX_USER_CONNECTIONS=472, MAX_CPU=473, LOCKED=474, DOP=475, IO=476, BTREE=477, 
		SLOT_IDX=478, APPROXNUM=479, HASH=480, ROTATE=481, COLLATION=482, MASTER=483, 
		ENCRYPTION=484, MAX=485, TRANSACTION=486, SQL_TSI_MONTH=487, ARBITRATION=488, 
		IGNORE=489, MAX_QUERIES_PER_HOUR=490, COMMENT=491, CTX_ID=492, MIN_IOPS=493, 
		NVARCHAR=494, OFF=495, BIT_XOR=496, PAUSE=497, QUICK=498, PRETTY=499, 
		DUPLICATE=500, WAIT=501, FIELD_OPTIONALLY_ENCLOSED_BY=502, DES_KEY_FILE=503, 
		ENGINES=504, RETURNS=505, MASTER_USER=506, SOCKET=507, MASTER_DELAY=508, 
		FILE_ID=509, FIRST=510, TABLET=511, CLIENT=512, ENGINE_=513, EXCLUDING=514, 
		TABLES=515, TRADITIONAL=516, BOOTSTRAP=517, STDDEV=518, DATAFILE=519, 
		VARCHARACTER=520, INVOKER=521, DEPTH=522, NORMAL=523, LN=524, COLUMN_NAME=525, 
		TRIGGERS=526, ENABLE_PARALLEL_DML=527, RESET=528, EVENT=529, COALESCE=530, 
		RESPECT=531, STATUS=532, AUTO_INCREMENT_MODE=533, UNBOUNDED=534, WRAPPER=535, 
		TIMESTAMP=536, PARTITIONS=537, SUBSTR=538, CHUNK=539, FILEX=540, BACKUPSET=541, 
		PRIMARY_CLUSTER_ID=542, UNIT=543, NATIONAL_LITERAL=544, PRIVILEGES=545, 
		DEMAND=546, LOWER_ON=547, BACKUPPIECE=548, LESS=549, SWITCH=550, DIAGNOSTICS=551, 
		REDO_BUFFER_SIZE=552, NO=553, MAJOR=554, ACTIVE=555, ROUTINE=556, FOLLOWING=557, 
		DEFAULT_LOB_INROW_THRESHOLD=558, LOB_INROW_THRESHOLD=559, SCHEMA_ID=560, 
		LATERAL=561, ROLLBACK=562, READ_ONLY=563, MEMBER=564, PARTITION_ID=565, 
		DUMP=566, EXTERNAL=567, APPROX_COUNT_DISTINCT_SYNOPSIS=568, GROUPING=569, 
		OF=570, SLOG=571, OJ=572, ARCHIVELOG=573, MAX_CONNECTIONS_PER_HOUR=574, 
		ASYNCHRONOUS=575, ENCODING=576, SECOND=577, UNKNOWN=578, POINT=579, PL=580, 
		MEMSTORE_PERCENT=581, STD=582, POLYGON=583, PS=584, OLD=585, TABLE_ID=586, 
		CONTEXT=587, FINAL_COUNT=588, MASTER_CONNECT_RETRY=589, POSITION=590, 
		DISCARD=591, PREV=592, RECOVER=593, PROCESS=594, DEALLOCATE=595, OLD_PASSWORD=596, 
		FAILOVER=597, P_NSEQ=598, LISTAGG=599, SLOW=600, NOAUDIT=601, SUM=602, 
		OPTIONS=603, MIN=604, RT=605, RELOAD=606, ONE=607, DELAY_KEY_WRITE=608, 
		ORIG_DEFAULT=609, RLIKE=610, INDEXED=611, RETURNING=612, SQL_TSI_HOUR=613, 
		TIMESTAMPDIFF=614, RESTORE=615, OFFSET=616, TEMPORARY=617, VARIANCE=618, 
		SNAPSHOT=619, STATISTICS=620, SERVER_TYPE=621, COMMITTED=622, INDEXES=623, 
		FREEZE=624, SCOPE=625, IDC=626, VIEW=627, ONE_SHOT=628, ACCOUNT=629, LOCALITY=630, 
		REVERSE=631, UP=632, CLUSTER_ID=633, NOARCHIVELOG=634, BEGIN_OUTLINE_DATA=635, 
		MAX_SIZE=636, PAGE=637, NAME=638, ROW_COUNT=639, LAST=640, WASH=641, LOGONLY_REPLICA_NUM=642, 
		DELAY=643, SUBDATE=644, INCREMENTAL=645, ROLLING=646, VERIFY=647, CONTAINS=648, 
		GENERAL=649, VISIBLE=650, SIGNED=651, SERVER=652, NEXT=653, ENDS=654, 
		GLOBAL=655, ROOTSERVICE_LIST=656, SHUTDOWN=657, VERBOSE=658, CLUSTER_NAME=659, 
		MASTER_PORT=660, MYSQL_ERRNO=661, LOWER_COMMA=662, XA=663, TIME=664, DATETIME=665, 
		NOMINVALUE=666, BOOL=667, DIRECTORY=668, DATA_TABLE_ID=669, SEQUENCES=670, 
		PRETTY_COLOR=671, VALID=672, MASTER_SSL_KEY=673, MASTER_PASSWORD=674, 
		PLAN=675, SHARE=676, MULTIPOLYGON=677, STDDEV_SAMP=678, USE_BLOOM_FILTER=679, 
		CONSTRAINT_CATALOG=680, CLUSTER=681, EXCHANGE=682, GRANTS=683, CAST=684, 
		SERVER_PORT=685, SQL_CACHE=686, MAX_USED_PART_ID=687, HYBRID_HIST=688, 
		INSTANCE=689, FUNCTION=690, NOWAIT=691, INVISIBLE=692, DENSE_RANK=693, 
		COUNT=694, BLOCKING=695, NAMES=696, MY_NAME=697, CHAR=698, LOWER_THAN_NEG=699, 
		P_ENTITY=700, ISOLATE=701, MAX_ROWS=702, CTXCAT=703, ISOLATION=704, REPLICATION=705, 
		DECRYPTION=706, REMOVE=707, STATS_AUTO_RECALC=708, CONSISTENT_MODE=709, 
		MODIFY=710, USE_COLUMN_STORE_HINT=711, UNCOMMITTED=712, PHYSICAL=713, 
		NO_WAIT=714, BACKUP_COPIES=715, UNIT_NUM=716, PERCENTAGE=717, MAX_IOPS=718, 
		SPFILE=719, REPEATABLE=720, COMPLETION=721, CONDENSED=722, INPUT=723, 
		ROOTTABLE=724, SUBSTRING=725, ZONE=726, BACKED=727, SERVICE=728, TEMPLATE=729, 
		DATE_SUB=730, EXPIRE_INFO=731, EXPIRE=732, ENABLE=733, HOSTS=734, SCHEMA_NAME=735, 
		EXPANSION=736, REORGANIZE=737, BLOCK_SIZE=738, TRIM_SPACE=739, INNER_PARSE=740, 
		MINOR=741, RESUME=742, INT=743, COMPLETE=744, STATS_PERSISTENT=745, NODEGROUP=746, 
		PARTITIONING=747, BIT_AND=748, SUPER=749, TIMES=750, COMMIT=751, SAVEPOINT=752, 
		UNTIL=753, USER=754, LEAK_RATE=755, MEMTABLE=756, CHARSET=757, MOVE=758, 
		XML=759, PATH=760, IPC=761, TRIM=762, PERFORMANCE=763, RANK=764, VAR_POP=765, 
		DEFAULT_AUTH=766, EXTENT_SIZE=767, BINLOG=768, LEAK_MOD=769, CLOG=770, 
		GEOMETRYCOLLECTION=771, STORAGE=772, MEDIUM=773, USE_FRM=774, CLIENT_VERSION=775, 
		MASTER_HEARTBEAT_PERIOD=776, SUBPARTITIONS=777, CUBE=778, FRAGMENTATION=779, 
		BALANCE=780, QUERY=781, POLICY=782, THROTTLE=783, SQL_TSI_QUARTER=784, 
		REPAIR=785, MASTER_SSL_CIPHER=786, KEY_VERSION=787, CATALOG_NAME=788, 
		NDBCLUSTER=789, CONNECTION=790, COMPACT=791, SYNCHRONIZATION=792, AVAILABILITY=793, 
		INCR=794, CANCEL=795, SIMPLE=796, BEGIN=797, VARIABLES=798, SQL_TSI_WEEK=799, 
		P_CHUNK=800, SYSTEM=801, ROOTSERVICE=802, PLUGIN_DIR=803, ASCII=804, INFO=805, 
		SKIP_HEADER=806, SQL_THREAD=807, TYPES=808, LEADER=809, LOWER_KEY=810, 
		FOUND=811, EXTRACT=812, FIXED=813, CACHE=814, KV_ATTRIBUTES=815, CURRENT=816, 
		STACKED=817, RETURNED_SQLSTATE=818, SKIP_INDEX=819, END=820, PRESERVE=821, 
		BADFILE=822, LOG_DISK_SIZE=823, SQL_BUFFER_RESULT=824, JSON=825, SOME=826, 
		INDEX_TABLE_ID=827, PATTERN=828, RECOVERY_WINDOW=829, FREQUENCY=830, PQ_MAP=831, 
		LOCKS=832, MANUAL=833, GEOMETRY=834, IDENTIFIED=835, NO_PARALLEL=836, 
		STORAGE_FORMAT_VERSION=837, OVER=838, MAX_SESSION_NUM=839, USER_RESOURCES=840, 
		BACKUPROUND=841, DESTINATION=842, SONAME=843, OUTLINE=844, MASTER_LOG_FILE=845, 
		NOMAXVALUE=846, ESTIMATE=847, SLAVE=848, SKIP_BLANK_LINES=849, GTS=850, 
		EXPORT=851, AVG_ROW_LENGTH=852, ENFORCED=853, FLASHBACK=854, SESSION_USER=855, 
		TABLEGROUPS=856, CURTIME=857, REPLICA_TYPE=858, AGGREGATE=859, TRANSFER=860, 
		JSON_ARRAYAGG=861, PERCENT_RANK=862, ENUM=863, NATIONAL=864, RECYCLE=865, 
		REGION=866, MATERIALIZE=867, MUTEX=868, PARALLEL=869, NOPARALLEL=870, 
		LOWER_PARENS=871, MONITOR=872, NDB=873, SYSTEM_USER=874, MAXIMIZE=875, 
		MAX_UPDATES_PER_HOUR=876, CURSOR_NAME=877, CONCURRENT=878, DUMPFILE=879, 
		COMPRESSED=880, LINESTRING=881, DYNAMIC=882, CHAIN=883, NEG=884, INCREMENT=885, 
		LAG=886, BASELINE_ID=887, NEW=888, SQL_TSI_YEAR=889, THAN=890, CPU=891, 
		HOST=892, VALUE=893, LOGS=894, SERIALIZABLE=895, AUTO_INCREMENT=896, BACKUP=897, 
		LOGFILE=898, ROW_FORMAT=899, SET_MASTER_CLUSTER=900, MINUTE=901, SWAPS=902, 
		TASK=903, INNODB=904, IO_THREAD=905, HISTOGRAM=906, PCTFREE=907, BC2HOST=908, 
		PARAMETERS=909, OBJECT=910, TABLESPACE=911, OBCONFIG_URL=912, AUTO=913, 
		PASSWORD=914, LOWER_THAN_BY_ACCESS_SESSION=915, ROW=916, MESSAGE_TEXT=917, 
		DISK=918, FAULTS=919, HOUR=920, REFRESH=921, COLUMN_STAT=922, ANY=923, 
		UNIT_GROUP=924, TTL=925, HIGHER_PARENS=926, ERROR_CODE=927, PHASE=928, 
		ENTITY=929, PROFILE=930, LAST_VALUE=931, RESTART=932, TRACE=933, LOGICAL_READS=934, 
		DATE_ADD=935, BLOCK_INDEX=936, SERVER_IP=937, CODE=938, PLUGINS=939, ADDDATE=940, 
		VIRTUAL_COLUMN_ID=941, COLUMN_FORMAT=942, MAX_MEMORY=943, NESTED=944, 
		CLEAN=945, MASTER_SSL=946, CLEAR=947, END_OUTLINE_DATA=948, SORTKEY=949, 
		CHECKSUM=950, INSTALL=951, MONTH=952, NEVER=953, AFTER=954, CLOSE=955, 
		JSON_OBJECTAGG=956, SET_TP=957, OWNER=958, BLOOM_FILTER=959, ILOG=960, 
		META=961, STARTS=962, PLANREGRESS=963, AUTOEXTEND_SIZE=964, TABLET_ID=965, 
		SOURCE=966, POW=967, IGNORE_SERVER_IDS=968, REPLICA_NUM=969, LOWER_THAN_COMP=970, 
		BINDING=971, MICROSECOND=972, UNDO_BUFFER_SIZE=973, SWITCHOVER=974, EXTENDED_NOADDR=975, 
		GLOBAL_NAME=976, SPLIT=977, BASELINE=978, MEMORY=979, DESCRIPTION=980, 
		SEED=981, RTREE=982, RESOURCE=983, STDDEV_POP=984, RUN=985, OBSOLETE=986, 
		SQL_AFTER_GTIDS=987, OPEN=988, SQL_TSI_DAY=989, STRING=990, RELAY_THREAD=991, 
		BREADTH=992, NOCACHE=993, PRIMARY_ROOTSERVICE_LIST=994, UNUSUAL=995, RELAYLOG=996, 
		SQL_BEFORE_GTIDS=997, PRIMARY_ZONE=998, TABLE_CHECKSUM=999, ZONE_LIST=1000, 
		DATABASE_ID=1001, TP_NO=1002, NETWORK=1003, PROTECTION=1004, HIDDEN_=1005, 
		BOOLEAN=1006, AVG=1007, MULTILINESTRING=1008, APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE=1009, 
		NOW=1010, BIT_OR=1011, PROXY=1012, DUPLICATE_SCOPE=1013, STATS_SAMPLE_PAGES=1014, 
		TABLET_SIZE=1015, BASE=1016, KVCACHE=1017, RELAY=1018, MEMORY_SIZE=1019, 
		CONTRIBUTORS=1020, EMPTY=1021, PARTIAL=1022, REPORT=1023, ESCAPE=1024, 
		CLONE=1025, MASTER_AUTO_POSITION=1026, DISKGROUP=1027, CALC_PARTITION_ID=1028, 
		TP_NAME=1029, ACTIVATE=1030, SQL_AFTER_MTS_GAPS=1031, EFFECTIVE=1032, 
		FIRST_VALUE=1033, SQL_TSI_MINUTE=1034, UNICODE=1035, QUARTER=1036, ANALYSE=1037, 
		DEFINER=1038, NONE=1039, PROCESSLIST=1040, TYPE=1041, INSERT_METHOD=1042, 
		EXTENDED=1043, LOG=1044, WHENEVER=1045, LEVEL=1046, TIME_ZONE_INFO=1047, 
		TIMESTAMPADD=1048, LOWER_INTO=1049, GET_FORMAT=1050, PREPARE=1051, MATERIALIZED=1052, 
		STANDBY=1053, WORK=1054, HANDLER=1055, CUME_DIST=1056, LEAK=1057, INITIAL_SIZE=1058, 
		RELAY_LOG_FILE=1059, STORING=1060, IMPORT=1061, MIN_MEMORY=1062, HELP=1063, 
		CREATE_TIMESTAMP=1064, COMPUTE=1065, RANDOM=1066, SOUNDS=1067, TABLE_MODE=1068, 
		COPY=1069, SESSION=1070, DAG=1071, NOCYCLE=1072, SQL_NO_CACHE=1073, EXECUTE=1074, 
		PRECEDING=1075, SWITCHES=1076, PACK_KEYS=1077, ENABLE_EXTENDED_ROWID=1078, 
		SQL_ID=1079, NOORDER=1080, TENANT_ID=1081, CHECKPOINT=1082, DAY=1083, 
		GROUP_CONCAT=1084, JSON_TABLE=1085, LEAD=1086, EVENTS=1087, RECURSIVE=1088, 
		ONLY=1089, TABLEGROUP_ID=1090, TOP_K_FRE_HIST=1091, MASTER_SSL_CRL=1092, 
		RESOURCE_POOL=1093, RESOURCE_POOL_LIST=1094, TRACING=1095, NTILE=1096, 
		NULL_IF_EXETERNAL=1097, BUCKETS=1098, SKEWONLY=1099, IS_TENANT_SYS_POOL=1100, 
		INLINE=1101, SCHEDULE=1102, JOB=1103, SRID=1104, MASTER_LOG_POS=1105, 
		SUBCLASS_ORIGIN=1106, MULTIPOINT=1107, BLOCK=1108, SQL_TSI_SECOND=1109, 
		DATE=1110, ROLLUP=1111, MIN_CPU=1112, OCCUR=1113, DATA=1114, SUCCESSFUL=1115, 
		REDO_TRANSPORT_OPTIONS=1116, FIELD_DELIMITER=1117, MASTER_HOST=1118, VAR_SAMP=1119, 
		ALGORITHM=1120, EXPIRED=1121, CONSTRAINT_NAME=1122, APPROX_COUNT_DISTINCT=1123, 
		BASIC=1124, DEFAULT_TABLEGROUP=1125, LIST_=1126, NO_PX_JOIN_FILTER=1127, 
		WEEK=1128, LINK=1129, STATEMENT_ID=1130, NULLS=1131, MASTER_SSL_CRLPATH=1132, 
		CASCADED=1133, PLUGIN=1134, ENCRYPTED=1135, TENANT=1136, DECIMAL_VAL=1137, 
		ST_ASMVT=1138, STORE=1139, BOOL_VALUE=1140, LOG_RESTORE_SOURCE=1141, ENABLE_ARBITRATION_SERVICE=1142, 
		At=1143, LeftBrace=1144, RightBrace=1145, Quote=1146, PARSER_SYNTAX_ERROR=1147, 
		HEX_STRING_VALUE=1148, DATE_VALUE=1149, HINT_VALUE=1150, Comma=1151, Plus=1152, 
		And=1153, Or=1154, Star=1155, Not=1156, LeftParen=1157, Minus=1158, Div=1159, 
		Caret=1160, Colon=1161, Dot=1162, Mod=1163, RightParen=1164, Tilde=1165, 
		DELIMITER=1166, CNNOP=1167, AND_OP=1168, COMP_EQ=1169, SET_VAR=1170, COMP_NSEQ=1171, 
		COMP_GE=1172, COMP_GT=1173, COMP_LE=1174, COMP_LT=1175, COMP_NE=1176, 
		SHIFT_LEFT=1177, SHIFT_RIGHT=1178, JSON_EXTRACT=1179, JSON_EXTRACT_UNQUOTED=1180, 
		QUESTIONMARK=1181, SYSTEM_VARIABLE=1182, USER_VARIABLE=1183, NAME_OB=1184, 
		STRING_VALUE=1185, In_c_comment=1186, ANTLR_SKIP=1187, Blank=1188, LOAD_DATA_HINT_BEGIN=1189, 
		REPLACE_HINT_BEGIN=1190, INSERT_HINT_BEGIN=1191, SELECT_HINT_BEGIN=1192, 
		UPDATE_HINT_BEGIN=1193, DELETE_HINT_BEGIN=1194, HINT_END=1195, NO_REWRITE=1196, 
		HOTSPOT=1197, ORDERED=1198, USE_HASH_AGGREGATION=1199, NO_USE_HASH_AGGREGATION=1200, 
		NO_USE_JIT=1201, USE_LATE_MATERIALIZATION=1202, NO_USE_LATE_MATERIALIZATION=1203, 
		TRACE_LOG=1204, USE_PX=1205, NO_USE_PX=1206, READ_CONSISTENCY=1207, INDEX_HINT=1208, 
		QUERY_TIMEOUT=1209, FROZEN_VERSION=1210, TOPK=1211, LOG_LEVEL=1212, LEADING_HINT=1213, 
		FULL_HINT=1214, USE_PLAN_CACHE=1215, USE_MERGE=1216, NO_USE_MERGE=1217, 
		USE_HASH=1218, NO_USE_HASH=1219, USE_NL=1220, PX_JOIN_FILTER=1221, NO_USE_NL=1222, 
		USE_BNL=1223, NO_USE_BNL=1224, USE_NL_MATERIALIZATION=1225, NO_USE_NL_MATERIALIZATION=1226, 
		MERGE_HINT=1227, NO_MERGE_HINT=1228, NO_EXPAND=1229, USE_CONCAT=1230, 
		UNNEST=1231, NO_UNNEST=1232, PLACE_GROUP_BY=1233, NO_PLACE_GROUP_BY=1234, 
		NO_PRED_DEDUCE=1235, USE_JIT=1236, STAT=1237, TRANS_PARAM=1238, FORCE_REFRESH_LOCATION_CACHE=1239, 
		QB_NAME=1240, MAX_CONCURRENT=1241, LOAD_BATCH_SIZE=1242, PQ_DISTRIBUTE=1243, 
		RANDOM_LOCAL=1244, BROADCAST=1245, LIST=1246, HINT_HINT_BEGIN=1247, ALL_META=1248, 
		ALL_USER=1249, BEGI=1250, REMAP=1251, HIDDEN=1252;
	public static final int
		RULE_sql_stmt = 0, RULE_stmt_list = 1, RULE_stmt = 2, RULE_pl_expr_stmt = 3, 
		RULE_switchover_tenant_stmt = 4, RULE_switchover_clause = 5, RULE_recover_tenant_stmt = 6, 
		RULE_recover_point_clause = 7, RULE_transfer_partition_stmt = 8, RULE_transfer_partition_clause = 9, 
		RULE_part_info = 10, RULE_cancel_transfer_partition_clause = 11, RULE_expr_list = 12, 
		RULE_expr_as_list = 13, RULE_expr_with_opt_alias = 14, RULE_column_ref = 15, 
		RULE_complex_string_literal = 16, RULE_charset_introducer = 17, RULE_literal = 18, 
		RULE_number_literal = 19, RULE_expr_const = 20, RULE_conf_const = 21, 
		RULE_global_or_session_alias = 22, RULE_bool_pri = 23, RULE_predicate = 24, 
		RULE_string_val_list = 25, RULE_bit_expr = 26, RULE_simple_expr = 27, 
		RULE_expr = 28, RULE_not = 29, RULE_any_expr = 30, RULE_in_expr = 31, 
		RULE_case_expr = 32, RULE_window_function = 33, RULE_first_or_last = 34, 
		RULE_respect_or_ignore = 35, RULE_win_fun_first_last_params = 36, RULE_new_generalized_window_clause = 37, 
		RULE_new_generalized_window_clause_with_blanket = 38, RULE_named_windows = 39, 
		RULE_named_window = 40, RULE_generalized_window_clause = 41, RULE_win_rows_or_range = 42, 
		RULE_win_preceding_or_following = 43, RULE_win_interval = 44, RULE_win_bounding = 45, 
		RULE_win_window = 46, RULE_when_clause_list = 47, RULE_when_clause = 48, 
		RULE_case_default = 49, RULE_func_expr = 50, RULE_vector_distance_expr = 51, 
		RULE_vector_distance_metric = 52, RULE_mvt_param = 53, RULE_sys_interval_func = 54, 
		RULE_utc_timestamp_func = 55, RULE_utc_time_func = 56, RULE_utc_date_func = 57, 
		RULE_sysdate_func = 58, RULE_cur_timestamp_func = 59, RULE_now_synonyms_func = 60, 
		RULE_cur_time_func = 61, RULE_cur_date_func = 62, RULE_substr_or_substring = 63, 
		RULE_substr_params = 64, RULE_date_params = 65, RULE_timestamp_params = 66, 
		RULE_ws_level_list_or_range = 67, RULE_ws_level_list = 68, RULE_ws_level_list_item = 69, 
		RULE_ws_level_range = 70, RULE_ws_level_number = 71, RULE_ws_level_flags = 72, 
		RULE_ws_nweights = 73, RULE_ws_level_flag_desc = 74, RULE_ws_level_flag_reverse = 75, 
		RULE_delete_stmt = 76, RULE_delete_basic_stmt = 77, RULE_delete_option_list = 78, 
		RULE_delete_option = 79, RULE_multi_delete_table = 80, RULE_update_stmt = 81, 
		RULE_update_basic_stmt = 82, RULE_update_asgn_list = 83, RULE_update_asgn_factor = 84, 
		RULE_create_resource_stmt = 85, RULE_opt_resource_unit_option_list = 86, 
		RULE_resource_unit_option = 87, RULE_opt_create_resource_pool_option_list = 88, 
		RULE_create_resource_pool_option = 89, RULE_alter_resource_pool_option_list = 90, 
		RULE_unit_id_list = 91, RULE_id_list = 92, RULE_alter_resource_pool_option = 93, 
		RULE_alter_resource_stmt = 94, RULE_drop_resource_stmt = 95, RULE_create_tenant_stmt = 96, 
		RULE_create_standby_tenant_stmt = 97, RULE_log_restore_source_option = 98, 
		RULE_opt_tenant_option_list = 99, RULE_tenant_option = 100, RULE_zone_list = 101, 
		RULE_resource_pool_list = 102, RULE_alter_tenant_stmt = 103, RULE_create_tenant_snapshot_stmt = 104, 
		RULE_snapshot_name = 105, RULE_drop_tenant_snapshot_stmt = 106, RULE_clone_tenant_stmt = 107, 
		RULE_clone_snapshot_option = 108, RULE_clone_tenant_option = 109, RULE_clone_tenant_option_list = 110, 
		RULE_drop_tenant_stmt = 111, RULE_create_restore_point_stmt = 112, RULE_drop_restore_point_stmt = 113, 
		RULE_create_database_stmt = 114, RULE_database_key = 115, RULE_database_factor = 116, 
		RULE_database_option_list = 117, RULE_databases_expr = 118, RULE_charset_key = 119, 
		RULE_database_option = 120, RULE_read_only_or_write = 121, RULE_drop_database_stmt = 122, 
		RULE_alter_database_stmt = 123, RULE_load_data_stmt = 124, RULE_load_data_with_opt_hint = 125, 
		RULE_compression_name = 126, RULE_lines_or_rows = 127, RULE_field_or_vars_list = 128, 
		RULE_field_or_vars = 129, RULE_load_set_list = 130, RULE_load_set_element = 131, 
		RULE_load_data_extended_option_list = 132, RULE_load_data_extended_option = 133, 
		RULE_use_database_stmt = 134, RULE_special_table_type = 135, RULE_create_table_like_stmt = 136, 
		RULE_create_table_stmt = 137, RULE_ignore_or_replace = 138, RULE_ret_type = 139, 
		RULE_create_function_stmt = 140, RULE_drop_function_stmt = 141, RULE_drop_procedure_stmt = 142, 
		RULE_drop_trigger_stmt = 143, RULE_table_element_list = 144, RULE_table_element = 145, 
		RULE_out_of_line_constraint = 146, RULE_references_clause = 147, RULE_out_of_line_index = 148, 
		RULE_out_of_line_primary_index = 149, RULE_out_of_line_unique_index = 150, 
		RULE_opt_reference_option_list = 151, RULE_reference_option = 152, RULE_reference_action = 153, 
		RULE_match_action = 154, RULE_column_definition = 155, RULE_opt_generated_option_list = 156, 
		RULE_opt_generated_column_attribute_list = 157, RULE_generated_column_attribute = 158, 
		RULE_column_definition_ref = 159, RULE_column_definition_list = 160, RULE_cast_data_type = 161, 
		RULE_get_format_unit = 162, RULE_precision_int_num = 163, RULE_precision_decimal_num = 164, 
		RULE_data_type_precision = 165, RULE_data_type = 166, RULE_string_list = 167, 
		RULE_text_string = 168, RULE_collection_type_i = 169, RULE_json_type_i = 170, 
		RULE_roaringbitmap_type_i = 171, RULE_vector_type_i = 172, RULE_bit_type_i = 173, 
		RULE_int_type_i = 174, RULE_float_type_i = 175, RULE_number_type_i = 176, 
		RULE_text_type_i = 177, RULE_character_type_i = 178, RULE_bool_type_i = 179, 
		RULE_geo_type_i = 180, RULE_datetime_type_i = 181, RULE_date_year_type_i = 182, 
		RULE_blob_type_i = 183, RULE_binary_type_i = 184, RULE_string_length_i = 185, 
		RULE_collation_name = 186, RULE_trans_param_name = 187, RULE_trans_param_value = 188, 
		RULE_charset_name = 189, RULE_charset_name_or_default = 190, RULE_collation = 191, 
		RULE_opt_column_attribute_list = 192, RULE_column_attribute = 193, RULE_now_or_signed_literal = 194, 
		RULE_signed_literal = 195, RULE_opt_comma = 196, RULE_table_option_list_space_seperated = 197, 
		RULE_table_option_list = 198, RULE_primary_zone_name = 199, RULE_tablespace = 200, 
		RULE_locality_name = 201, RULE_table_option = 202, RULE_merge_insert_types = 203, 
		RULE_parallel_option = 204, RULE_ttl_definition = 205, RULE_ttl_expr = 206, 
		RULE_ttl_unit = 207, RULE_relation_name_or_string = 208, RULE_opt_equal_mark = 209, 
		RULE_partition_option = 210, RULE_auto_partition_option = 211, RULE_column_group_element = 212, 
		RULE_column_group_list = 213, RULE_with_column_group = 214, RULE_partition_size = 215, 
		RULE_auto_partition_type = 216, RULE_auto_range_type = 217, RULE_hash_partition_option = 218, 
		RULE_list_partition_option = 219, RULE_key_partition_option = 220, RULE_range_partition_option = 221, 
		RULE_partition_options = 222, RULE_partition_num = 223, RULE_aux_column_list = 224, 
		RULE_vertical_column_name = 225, RULE_column_name_list = 226, RULE_subpartition_option = 227, 
		RULE_subpartition_template_option = 228, RULE_subpartition_individual_option = 229, 
		RULE_opt_hash_partition_list = 230, RULE_hash_partition_list = 231, RULE_subpartition_list = 232, 
		RULE_hash_partition_element = 233, RULE_opt_range_partition_list = 234, 
		RULE_range_partition_list = 235, RULE_range_partition_element = 236, RULE_opt_list_partition_list = 237, 
		RULE_list_partition_list = 238, RULE_list_partition_element = 239, RULE_opt_hash_subpartition_list = 240, 
		RULE_hash_subpartition_list = 241, RULE_partition_attributes_option = 242, 
		RULE_hash_subpartition_element = 243, RULE_opt_range_subpartition_list = 244, 
		RULE_range_subpartition_list = 245, RULE_range_subpartition_element = 246, 
		RULE_opt_list_subpartition_list = 247, RULE_list_subpartition_list = 248, 
		RULE_list_subpartition_element = 249, RULE_list_partition_expr = 250, 
		RULE_list_expr = 251, RULE_range_partition_expr = 252, RULE_range_expr_list = 253, 
		RULE_range_expr = 254, RULE_int_or_decimal = 255, RULE_tg_hash_partition_option = 256, 
		RULE_tg_key_partition_option = 257, RULE_tg_range_partition_option = 258, 
		RULE_tg_list_partition_option = 259, RULE_tg_subpartition_option = 260, 
		RULE_tg_subpartition_template_option = 261, RULE_tg_subpartition_individual_option = 262, 
		RULE_row_format_option = 263, RULE_external_properties_list = 264, RULE_external_properties = 265, 
		RULE_external_properties_key = 266, RULE_external_file_format_list = 267, 
		RULE_external_file_format = 268, RULE_create_tablegroup_stmt = 269, RULE_drop_tablegroup_stmt = 270, 
		RULE_alter_tablegroup_stmt = 271, RULE_tablegroup_option_list_space_seperated = 272, 
		RULE_tablegroup_option_list = 273, RULE_tablegroup_option = 274, RULE_alter_tablegroup_actions = 275, 
		RULE_alter_tablegroup_action = 276, RULE_default_tablegroup = 277, RULE_create_view_stmt = 278, 
		RULE_create_mview_stmt = 279, RULE_create_mview_opts = 280, RULE_mview_enable_disable = 281, 
		RULE_mview_refresh_opt = 282, RULE_mv_refresh_on_clause = 283, RULE_mv_refresh_method = 284, 
		RULE_mv_refresh_mode = 285, RULE_mv_refresh_interval = 286, RULE_mv_start_clause = 287, 
		RULE_mv_next_clause = 288, RULE_view_attribute = 289, RULE_view_check_option = 290, 
		RULE_view_algorithm = 291, RULE_view_select_stmt = 292, RULE_view_name = 293, 
		RULE_mv_column_list = 294, RULE_opt_tablet_id = 295, RULE_opt_tablet_id_no_empty = 296, 
		RULE_create_index_stmt = 297, RULE_index_name = 298, RULE_check_state = 299, 
		RULE_opt_constraint_name = 300, RULE_constraint_name = 301, RULE_sort_column_list = 302, 
		RULE_sort_column_key = 303, RULE_opt_index_options = 304, RULE_index_option = 305, 
		RULE_index_using_algorithm = 306, RULE_create_mlog_stmt = 307, RULE_opt_mlog_options = 308, 
		RULE_mlog_option = 309, RULE_mlog_with_values = 310, RULE_mlog_with_special_columns = 311, 
		RULE_mlog_with_special_column_list = 312, RULE_mlog_with_special_column = 313, 
		RULE_mlog_with_reference_columns = 314, RULE_mlog_with_reference_column_list = 315, 
		RULE_mlog_with_reference_column = 316, RULE_mlog_including_or_excluding = 317, 
		RULE_mlog_purge_values = 318, RULE_mlog_purge_immediate_sync_or_async = 319, 
		RULE_mlog_purge_start = 320, RULE_mlog_purge_next = 321, RULE_drop_mlog_stmt = 322, 
		RULE_drop_table_stmt = 323, RULE_table_or_tables = 324, RULE_drop_view_stmt = 325, 
		RULE_table_list = 326, RULE_drop_index_stmt = 327, RULE_insert_stmt = 328, 
		RULE_single_table_insert = 329, RULE_values_clause = 330, RULE_value_or_values = 331, 
		RULE_replace_with_opt_hint = 332, RULE_insert_with_opt_hint = 333, RULE_column_list = 334, 
		RULE_insert_vals_list = 335, RULE_insert_vals = 336, RULE_expr_or_default = 337, 
		RULE_select_stmt = 338, RULE_select_with_parens = 339, RULE_select_no_parens = 340, 
		RULE_no_table_select = 341, RULE_select_clause = 342, RULE_select_clause_set_with_order_and_limit = 343, 
		RULE_select_clause_set = 344, RULE_select_clause_set_right = 345, RULE_select_clause_set_left = 346, 
		RULE_no_table_select_with_order_and_limit = 347, RULE_opt_approx = 348, 
		RULE_simple_select_with_order_and_limit = 349, RULE_select_with_parens_with_order_and_limit = 350, 
		RULE_select_with_opt_hint = 351, RULE_update_with_opt_hint = 352, RULE_delete_with_opt_hint = 353, 
		RULE_simple_select = 354, RULE_set_type_union = 355, RULE_set_type_other = 356, 
		RULE_set_type = 357, RULE_set_expression_option = 358, RULE_opt_hint_value = 359, 
		RULE_limit_clause = 360, RULE_into_clause = 361, RULE_into_opt = 362, 
		RULE_into_var_list = 363, RULE_into_var = 364, RULE_field_opt = 365, RULE_field_term_list = 366, 
		RULE_field_term = 367, RULE_file_opt = 368, RULE_file_option_list = 369, 
		RULE_file_option = 370, RULE_file_partition_opt = 371, RULE_file_size_const = 372, 
		RULE_line_opt = 373, RULE_line_term_list = 374, RULE_line_term = 375, 
		RULE_hint_list_with_end = 376, RULE_opt_hint_list = 377, RULE_hint_options = 378, 
		RULE_name_list = 379, RULE_hint_option = 380, RULE_consistency_level = 381, 
		RULE_use_plan_cache_type = 382, RULE_use_jit_type = 383, RULE_distribute_method = 384, 
		RULE_limit_expr = 385, RULE_for_update_clause = 386, RULE_opt_lock_in_share_mode = 387, 
		RULE_opt_for_update_wait = 388, RULE_parameterized_trim = 389, RULE_groupby_clause = 390, 
		RULE_sort_list_for_group_by = 391, RULE_sort_key_for_group_by = 392, RULE_order_by = 393, 
		RULE_sort_list = 394, RULE_sort_key = 395, RULE_query_expression_option_list = 396, 
		RULE_query_expression_option = 397, RULE_projection = 398, RULE_select_expr_list = 399, 
		RULE_from_list = 400, RULE_table_references = 401, RULE_table_references_paren = 402, 
		RULE_table_reference = 403, RULE_table_factor = 404, RULE_tbl_name = 405, 
		RULE_dml_table_name = 406, RULE_seed = 407, RULE_sample_percent = 408, 
		RULE_sample_clause = 409, RULE_table_subquery = 410, RULE_table_subquery_alias = 411, 
		RULE_use_partition = 412, RULE_external_table_partitions = 413, RULE_external_table_partition = 414, 
		RULE_use_flashback = 415, RULE_index_hint_type = 416, RULE_key_or_index = 417, 
		RULE_index_hint_scope = 418, RULE_index_element = 419, RULE_index_list = 420, 
		RULE_index_hint_definition = 421, RULE_index_hint_list = 422, RULE_relation_factor = 423, 
		RULE_relation_with_star_list = 424, RULE_relation_factor_with_star = 425, 
		RULE_normal_relation_factor = 426, RULE_dot_relation_factor = 427, RULE_relation_factor_in_hint = 428, 
		RULE_qb_name_option = 429, RULE_relation_factor_in_hint_list = 430, RULE_relation_sep_option = 431, 
		RULE_relation_factor_in_pq_hint = 432, RULE_relation_factor_in_leading_hint = 433, 
		RULE_relation_factor_in_leading_hint_list = 434, RULE_relation_factor_in_leading_hint_list_entry = 435, 
		RULE_relation_factor_in_use_join_hint_list = 436, RULE_tracing_num_list = 437, 
		RULE_join_condition = 438, RULE_joined_table = 439, RULE_natural_join_type = 440, 
		RULE_inner_join_type = 441, RULE_outer_join_type = 442, RULE_with_clause = 443, 
		RULE_with_list = 444, RULE_common_table_expr = 445, RULE_alias_name_list = 446, 
		RULE_column_alias_name = 447, RULE_table_values_clause = 448, RULE_table_values_clause_with_order_by_and_limit = 449, 
		RULE_values_row_list = 450, RULE_row_value = 451, RULE_analyze_stmt = 452, 
		RULE_analyze_statistics_clause = 453, RULE_opt_analyze_for_clause_list = 454, 
		RULE_opt_analyze_for_clause_element = 455, RULE_sample_option = 456, RULE_for_all = 457, 
		RULE_size_clause = 458, RULE_for_columns = 459, RULE_for_columns_list = 460, 
		RULE_for_columns_item = 461, RULE_column_clause = 462, RULE_create_outline_stmt = 463, 
		RULE_alter_outline_stmt = 464, RULE_drop_outline_stmt = 465, RULE_explain_stmt = 466, 
		RULE_explain_or_desc = 467, RULE_explainable_stmt = 468, RULE_format_name = 469, 
		RULE_show_stmt = 470, RULE_check_table_options = 471, RULE_check_table_option = 472, 
		RULE_get_diagnostics_stmt = 473, RULE_get_condition_diagnostics_stmt = 474, 
		RULE_condition_arg = 475, RULE_condition_information_item_list = 476, 
		RULE_condition_information_item = 477, RULE_condition_information_item_name = 478, 
		RULE_get_statement_diagnostics_stmt = 479, RULE_statement_information_item_list = 480, 
		RULE_statement_information_item = 481, RULE_statement_information_item_name = 482, 
		RULE_databases_or_schemas = 483, RULE_opt_for_grant_user = 484, RULE_opt_storage = 485, 
		RULE_columns_or_fields = 486, RULE_database_or_schema = 487, RULE_index_or_indexes_or_keys = 488, 
		RULE_from_or_in = 489, RULE_calibration_info_list = 490, RULE_opt_show_engine = 491, 
		RULE_help_stmt = 492, RULE_create_tablespace_stmt = 493, RULE_permanent_tablespace = 494, 
		RULE_permanent_tablespace_option = 495, RULE_opt_tablespace_option = 496, 
		RULE_opt_tablespace_engine = 497, RULE_drop_tablespace_stmt = 498, RULE_alter_tablespace_options = 499, 
		RULE_alter_tablespace_action = 500, RULE_alter_tablespace_actions = 501, 
		RULE_opt_alter_tablespace_options = 502, RULE_opt_alter_tablespace_option = 503, 
		RULE_alter_tablespace_stmt = 504, RULE_rotate_master_key_stmt = 505, RULE_permanent_tablespace_options = 506, 
		RULE_opt_tablespace_options = 507, RULE_create_user_stmt = 508, RULE_user_specification_list = 509, 
		RULE_user_specification = 510, RULE_user_specification_without_password = 511, 
		RULE_user_specification_with_password = 512, RULE_require_specification = 513, 
		RULE_resource_option_list = 514, RULE_resource_option = 515, RULE_tls_option_list = 516, 
		RULE_tls_option = 517, RULE_user = 518, RULE_opt_host_name = 519, RULE_user_host_or_current_user = 520, 
		RULE_user_with_host_name = 521, RULE_password = 522, RULE_drop_user_stmt = 523, 
		RULE_user_list = 524, RULE_create_role_stmt = 525, RULE_role_list = 526, 
		RULE_user_specification_without_password_list = 527, RULE_drop_role_stmt = 528, 
		RULE_role_with_host = 529, RULE_role = 530, RULE_set_password_stmt = 531, 
		RULE_opt_for_user = 532, RULE_rename_user_stmt = 533, RULE_rename_info = 534, 
		RULE_rename_list = 535, RULE_lock_user_stmt = 536, RULE_lock_spec_mysql57 = 537, 
		RULE_lock_tables_stmt = 538, RULE_unlock_tables_stmt = 539, RULE_lock_table_list = 540, 
		RULE_lock_table = 541, RULE_lock_type = 542, RULE_create_sequence_stmt = 543, 
		RULE_sequence_option_list = 544, RULE_sequence_option = 545, RULE_simple_num = 546, 
		RULE_drop_sequence_stmt = 547, RULE_alter_sequence_stmt = 548, RULE_create_dblink_stmt = 549, 
		RULE_drop_dblink_stmt = 550, RULE_begin_stmt = 551, RULE_xa_begin_stmt = 552, 
		RULE_xa_end_stmt = 553, RULE_xa_prepare_stmt = 554, RULE_xa_commit_stmt = 555, 
		RULE_xa_rollback_stmt = 556, RULE_commit_stmt = 557, RULE_rollback_stmt = 558, 
		RULE_kill_stmt = 559, RULE_grant_stmt = 560, RULE_grant_privileges = 561, 
		RULE_role_or_priv_list = 562, RULE_role_or_priv = 563, RULE_object_type = 564, 
		RULE_priv_level = 565, RULE_grant_options = 566, RULE_revoke_stmt = 567, 
		RULE_prepare_stmt = 568, RULE_stmt_name = 569, RULE_preparable_stmt = 570, 
		RULE_variable_set_stmt = 571, RULE_sys_var_and_val_list = 572, RULE_var_and_val_list = 573, 
		RULE_set_expr_or_default = 574, RULE_var_and_val = 575, RULE_sys_var_and_val = 576, 
		RULE_scope_or_scope_alias = 577, RULE_to_or_eq = 578, RULE_set_role_stmt = 579, 
		RULE_default_set_role_clause = 580, RULE_set_role_clause = 581, RULE_execute_stmt = 582, 
		RULE_argument_list = 583, RULE_argument = 584, RULE_deallocate_prepare_stmt = 585, 
		RULE_deallocate_or_drop = 586, RULE_truncate_table_stmt = 587, RULE_audit_stmt = 588, 
		RULE_audit_or_noaudit = 589, RULE_audit_clause = 590, RULE_audit_operation_clause = 591, 
		RULE_audit_all_shortcut_list = 592, RULE_auditing_on_clause = 593, RULE_audit_user_list = 594, 
		RULE_audit_user_with_host_name = 595, RULE_audit_user = 596, RULE_auditing_by_user_clause = 597, 
		RULE_op_audit_tail_clause = 598, RULE_audit_by_session_access_option = 599, 
		RULE_audit_whenever_option = 600, RULE_audit_all_shortcut = 601, RULE_rename_table_stmt = 602, 
		RULE_rename_table_actions = 603, RULE_rename_table_action = 604, RULE_alter_table_stmt = 605, 
		RULE_alter_external_table_action = 606, RULE_add_external_table_partition_actions = 607, 
		RULE_add_external_table_partition_action = 608, RULE_alter_table_actions = 609, 
		RULE_alter_table_action = 610, RULE_alter_constraint_option = 611, RULE_alter_partition_option = 612, 
		RULE_opt_partition_range_or_list = 613, RULE_alter_tg_partition_option = 614, 
		RULE_drop_partition_name_list = 615, RULE_modify_partition_info = 616, 
		RULE_modify_tg_partition_info = 617, RULE_alter_index_option = 618, RULE_visibility_option = 619, 
		RULE_alter_column_group_action = 620, RULE_alter_column_option = 621, 
		RULE_alter_tablegroup_option = 622, RULE_alter_column_behavior = 623, 
		RULE_flashback_stmt = 624, RULE_purge_stmt = 625, RULE_optimize_stmt = 626, 
		RULE_dump_memory_stmt = 627, RULE_alter_system_stmt = 628, RULE_opt_sql_throttle_using_cond = 629, 
		RULE_sql_throttle_one_or_more_metrics = 630, RULE_sql_throttle_metric = 631, 
		RULE_change_tenant_name_or_tenant_id = 632, RULE_cache_type = 633, RULE_balance_task_type = 634, 
		RULE_tenant_list_tuple = 635, RULE_tenant_name_list = 636, RULE_backup_tenant_name_list = 637, 
		RULE_flush_scope = 638, RULE_server_info_list = 639, RULE_server_info = 640, 
		RULE_shared_storage_info = 641, RULE_server_action = 642, RULE_server_list = 643, 
		RULE_zone_action = 644, RULE_ip_port = 645, RULE_zone_desc = 646, RULE_policy_name = 647, 
		RULE_server_or_zone = 648, RULE_add_or_alter_zone_option = 649, RULE_add_or_alter_zone_options = 650, 
		RULE_alter_or_change_or_modify = 651, RULE_opt_path_info = 652, RULE_opt_storage_use_for = 653, 
		RULE_opt_scope_type = 654, RULE_partition_id_desc = 655, RULE_ls = 656, 
		RULE_ls_server_or_server_or_zone_or_tenant = 657, RULE_migrate_action = 658, 
		RULE_change_actions = 659, RULE_change_action = 660, RULE_replica_type = 661, 
		RULE_memstore_percent = 662, RULE_suspend_or_resume = 663, RULE_baseline_id_expr = 664, 
		RULE_sql_id_expr = 665, RULE_sql_id_or_schema_id_expr = 666, RULE_namespace_expr = 667, 
		RULE_baseline_asgn_factor = 668, RULE_tenant_name = 669, RULE_cache_name = 670, 
		RULE_file_id = 671, RULE_cancel_task_type = 672, RULE_alter_system_set_parameter_actions = 673, 
		RULE_alter_system_set_parameter_action = 674, RULE_alter_system_settp_actions = 675, 
		RULE_settp_option = 676, RULE_cluster_role = 677, RULE_partition_role = 678, 
		RULE_ls_role = 679, RULE_upgrade_action = 680, RULE_mock_stmt = 681, RULE_plugin_name = 682, 
		RULE_install_plugin_stmt = 683, RULE_uninstall_plugin_stmt = 684, RULE_flush_stmt = 685, 
		RULE_flush_options = 686, RULE_flush_options_list = 687, RULE_flush_option = 688, 
		RULE_handler_stmt = 689, RULE_handler_read_or_scan = 690, RULE_handler_scan_function = 691, 
		RULE_handler_rkey_function = 692, RULE_handler_rkey_mode = 693, RULE_show_plugin_stmt = 694, 
		RULE_create_server_stmt = 695, RULE_server_options_list = 696, RULE_server_option = 697, 
		RULE_alter_server_stmt = 698, RULE_drop_server_stmt = 699, RULE_create_logfile_group_stmt = 700, 
		RULE_logfile_group_info = 701, RULE_add_log_file = 702, RULE_lg_undofile = 703, 
		RULE_lg_redofile = 704, RULE_logfile_group_option_list = 705, RULE_logfile_group_options = 706, 
		RULE_logfile_group_option = 707, RULE_opt_ts_initial_size = 708, RULE_opt_ts_undo_buffer_size = 709, 
		RULE_opt_ts_redo_buffer_size = 710, RULE_opt_ts_nodegroup = 711, RULE_opt_ts_comment = 712, 
		RULE_alter_logfile_group_stmt = 713, RULE_alter_logfile_group_info = 714, 
		RULE_alter_logfile_group_option_list = 715, RULE_alter_logfile_group_options = 716, 
		RULE_alter_logfile_group_option = 717, RULE_drop_logfile_group_stmt = 718, 
		RULE_drop_ts_options_list = 719, RULE_drop_ts_options = 720, RULE_drop_ts_option = 721, 
		RULE_ts_wait = 722, RULE_opt_ts_engine = 723, RULE_method_opt = 724, RULE_method_list = 725, 
		RULE_method = 726, RULE_set_names_stmt = 727, RULE_set_charset_stmt = 728, 
		RULE_set_transaction_stmt = 729, RULE_transaction_characteristics = 730, 
		RULE_transaction_access_mode = 731, RULE_isolation_level = 732, RULE_opt_encrypt_key = 733, 
		RULE_create_savepoint_stmt = 734, RULE_rollback_savepoint_stmt = 735, 
		RULE_release_savepoint_stmt = 736, RULE_alter_cluster_stmt = 737, RULE_cluster_define = 738, 
		RULE_cluster_option_list = 739, RULE_cluster_option = 740, RULE_cluster_action = 741, 
		RULE_switchover_cluster_stmt = 742, RULE_commit_switchover_clause = 743, 
		RULE_protection_mode_stmt = 744, RULE_protection_mode_option = 745, RULE_cluster_name = 746, 
		RULE_disconnect_cluster_stmt = 747, RULE_var_name = 748, RULE_new_or_old = 749, 
		RULE_new_or_old_column_ref = 750, RULE_column_name = 751, RULE_relation_name = 752, 
		RULE_function_name = 753, RULE_column_label = 754, RULE_date_unit = 755, 
		RULE_service_name_stmt = 756, RULE_service_op = 757, RULE_json_table_expr = 758, 
		RULE_mock_jt_on_error_on_empty = 759, RULE_jt_column_list = 760, RULE_json_table_column_def = 761, 
		RULE_json_table_ordinality_column_def = 762, RULE_json_table_exists_column_def = 763, 
		RULE_json_table_value_column_def = 764, RULE_json_table_nested_column_def = 765, 
		RULE_opt_value_on_empty_or_error_or_mismatch = 766, RULE_opt_on_mismatch = 767, 
		RULE_vec_index_params = 768, RULE_vec_index_param = 769, RULE_vec_index_param_value = 770, 
		RULE_json_query_expr = 771, RULE_json_query_opt = 772, RULE_scalars_opt = 773, 
		RULE_wrapper_opts = 774, RULE_json_query_on_opt = 775, RULE_opt_response_query = 776, 
		RULE_on_mismatch_query = 777, RULE_on_error_query = 778, RULE_on_empty_query = 779, 
		RULE_json_value_expr = 780, RULE_json_value_opt = 781, RULE_json_value_on_opt = 782, 
		RULE_opt_on_empty_or_error = 783, RULE_on_empty = 784, RULE_on_error = 785, 
		RULE_json_on_response = 786, RULE_opt_skip_index_type_list = 787, RULE_skip_index_type = 788, 
		RULE_lob_chunk_size = 789, RULE_lob_storage_parameter = 790, RULE_lob_storage_parameters = 791, 
		RULE_lob_storage_clause = 792, RULE_unreserved_keyword = 793, RULE_unreserved_keyword_for_role_name = 794, 
		RULE_unreserved_keyword_normal = 795, RULE_unreserved_keyword_special = 796, 
		RULE_unreserved_keyword_extra = 797, RULE_unreserved_keyword_ambiguous_roles = 798, 
		RULE_mysql_reserved_keyword = 799, RULE_empty = 800, RULE_forward_expr = 801, 
		RULE_forward_sql_stmt = 802;
	private static String[] makeRuleNames() {
		return new String[] {
			"sql_stmt", "stmt_list", "stmt", "pl_expr_stmt", "switchover_tenant_stmt", 
			"switchover_clause", "recover_tenant_stmt", "recover_point_clause", "transfer_partition_stmt", 
			"transfer_partition_clause", "part_info", "cancel_transfer_partition_clause", 
			"expr_list", "expr_as_list", "expr_with_opt_alias", "column_ref", "complex_string_literal", 
			"charset_introducer", "literal", "number_literal", "expr_const", "conf_const", 
			"global_or_session_alias", "bool_pri", "predicate", "string_val_list", 
			"bit_expr", "simple_expr", "expr", "not", "any_expr", "in_expr", "case_expr", 
			"window_function", "first_or_last", "respect_or_ignore", "win_fun_first_last_params", 
			"new_generalized_window_clause", "new_generalized_window_clause_with_blanket", 
			"named_windows", "named_window", "generalized_window_clause", "win_rows_or_range", 
			"win_preceding_or_following", "win_interval", "win_bounding", "win_window", 
			"when_clause_list", "when_clause", "case_default", "func_expr", "vector_distance_expr", 
			"vector_distance_metric", "mvt_param", "sys_interval_func", "utc_timestamp_func", 
			"utc_time_func", "utc_date_func", "sysdate_func", "cur_timestamp_func", 
			"now_synonyms_func", "cur_time_func", "cur_date_func", "substr_or_substring", 
			"substr_params", "date_params", "timestamp_params", "ws_level_list_or_range", 
			"ws_level_list", "ws_level_list_item", "ws_level_range", "ws_level_number", 
			"ws_level_flags", "ws_nweights", "ws_level_flag_desc", "ws_level_flag_reverse", 
			"delete_stmt", "delete_basic_stmt", "delete_option_list", "delete_option", 
			"multi_delete_table", "update_stmt", "update_basic_stmt", "update_asgn_list", 
			"update_asgn_factor", "create_resource_stmt", "opt_resource_unit_option_list", 
			"resource_unit_option", "opt_create_resource_pool_option_list", "create_resource_pool_option", 
			"alter_resource_pool_option_list", "unit_id_list", "id_list", "alter_resource_pool_option", 
			"alter_resource_stmt", "drop_resource_stmt", "create_tenant_stmt", "create_standby_tenant_stmt", 
			"log_restore_source_option", "opt_tenant_option_list", "tenant_option", 
			"zone_list", "resource_pool_list", "alter_tenant_stmt", "create_tenant_snapshot_stmt", 
			"snapshot_name", "drop_tenant_snapshot_stmt", "clone_tenant_stmt", "clone_snapshot_option", 
			"clone_tenant_option", "clone_tenant_option_list", "drop_tenant_stmt", 
			"create_restore_point_stmt", "drop_restore_point_stmt", "create_database_stmt", 
			"database_key", "database_factor", "database_option_list", "databases_expr", 
			"charset_key", "database_option", "read_only_or_write", "drop_database_stmt", 
			"alter_database_stmt", "load_data_stmt", "load_data_with_opt_hint", "compression_name", 
			"lines_or_rows", "field_or_vars_list", "field_or_vars", "load_set_list", 
			"load_set_element", "load_data_extended_option_list", "load_data_extended_option", 
			"use_database_stmt", "special_table_type", "create_table_like_stmt", 
			"create_table_stmt", "ignore_or_replace", "ret_type", "create_function_stmt", 
			"drop_function_stmt", "drop_procedure_stmt", "drop_trigger_stmt", "table_element_list", 
			"table_element", "out_of_line_constraint", "references_clause", "out_of_line_index", 
			"out_of_line_primary_index", "out_of_line_unique_index", "opt_reference_option_list", 
			"reference_option", "reference_action", "match_action", "column_definition", 
			"opt_generated_option_list", "opt_generated_column_attribute_list", "generated_column_attribute", 
			"column_definition_ref", "column_definition_list", "cast_data_type", 
			"get_format_unit", "precision_int_num", "precision_decimal_num", "data_type_precision", 
			"data_type", "string_list", "text_string", "collection_type_i", "json_type_i", 
			"roaringbitmap_type_i", "vector_type_i", "bit_type_i", "int_type_i", 
			"float_type_i", "number_type_i", "text_type_i", "character_type_i", "bool_type_i", 
			"geo_type_i", "datetime_type_i", "date_year_type_i", "blob_type_i", "binary_type_i", 
			"string_length_i", "collation_name", "trans_param_name", "trans_param_value", 
			"charset_name", "charset_name_or_default", "collation", "opt_column_attribute_list", 
			"column_attribute", "now_or_signed_literal", "signed_literal", "opt_comma", 
			"table_option_list_space_seperated", "table_option_list", "primary_zone_name", 
			"tablespace", "locality_name", "table_option", "merge_insert_types", 
			"parallel_option", "ttl_definition", "ttl_expr", "ttl_unit", "relation_name_or_string", 
			"opt_equal_mark", "partition_option", "auto_partition_option", "column_group_element", 
			"column_group_list", "with_column_group", "partition_size", "auto_partition_type", 
			"auto_range_type", "hash_partition_option", "list_partition_option", 
			"key_partition_option", "range_partition_option", "partition_options", 
			"partition_num", "aux_column_list", "vertical_column_name", "column_name_list", 
			"subpartition_option", "subpartition_template_option", "subpartition_individual_option", 
			"opt_hash_partition_list", "hash_partition_list", "subpartition_list", 
			"hash_partition_element", "opt_range_partition_list", "range_partition_list", 
			"range_partition_element", "opt_list_partition_list", "list_partition_list", 
			"list_partition_element", "opt_hash_subpartition_list", "hash_subpartition_list", 
			"partition_attributes_option", "hash_subpartition_element", "opt_range_subpartition_list", 
			"range_subpartition_list", "range_subpartition_element", "opt_list_subpartition_list", 
			"list_subpartition_list", "list_subpartition_element", "list_partition_expr", 
			"list_expr", "range_partition_expr", "range_expr_list", "range_expr", 
			"int_or_decimal", "tg_hash_partition_option", "tg_key_partition_option", 
			"tg_range_partition_option", "tg_list_partition_option", "tg_subpartition_option", 
			"tg_subpartition_template_option", "tg_subpartition_individual_option", 
			"row_format_option", "external_properties_list", "external_properties", 
			"external_properties_key", "external_file_format_list", "external_file_format", 
			"create_tablegroup_stmt", "drop_tablegroup_stmt", "alter_tablegroup_stmt", 
			"tablegroup_option_list_space_seperated", "tablegroup_option_list", "tablegroup_option", 
			"alter_tablegroup_actions", "alter_tablegroup_action", "default_tablegroup", 
			"create_view_stmt", "create_mview_stmt", "create_mview_opts", "mview_enable_disable", 
			"mview_refresh_opt", "mv_refresh_on_clause", "mv_refresh_method", "mv_refresh_mode", 
			"mv_refresh_interval", "mv_start_clause", "mv_next_clause", "view_attribute", 
			"view_check_option", "view_algorithm", "view_select_stmt", "view_name", 
			"mv_column_list", "opt_tablet_id", "opt_tablet_id_no_empty", "create_index_stmt", 
			"index_name", "check_state", "opt_constraint_name", "constraint_name", 
			"sort_column_list", "sort_column_key", "opt_index_options", "index_option", 
			"index_using_algorithm", "create_mlog_stmt", "opt_mlog_options", "mlog_option", 
			"mlog_with_values", "mlog_with_special_columns", "mlog_with_special_column_list", 
			"mlog_with_special_column", "mlog_with_reference_columns", "mlog_with_reference_column_list", 
			"mlog_with_reference_column", "mlog_including_or_excluding", "mlog_purge_values", 
			"mlog_purge_immediate_sync_or_async", "mlog_purge_start", "mlog_purge_next", 
			"drop_mlog_stmt", "drop_table_stmt", "table_or_tables", "drop_view_stmt", 
			"table_list", "drop_index_stmt", "insert_stmt", "single_table_insert", 
			"values_clause", "value_or_values", "replace_with_opt_hint", "insert_with_opt_hint", 
			"column_list", "insert_vals_list", "insert_vals", "expr_or_default", 
			"select_stmt", "select_with_parens", "select_no_parens", "no_table_select", 
			"select_clause", "select_clause_set_with_order_and_limit", "select_clause_set", 
			"select_clause_set_right", "select_clause_set_left", "no_table_select_with_order_and_limit", 
			"opt_approx", "simple_select_with_order_and_limit", "select_with_parens_with_order_and_limit", 
			"select_with_opt_hint", "update_with_opt_hint", "delete_with_opt_hint", 
			"simple_select", "set_type_union", "set_type_other", "set_type", "set_expression_option", 
			"opt_hint_value", "limit_clause", "into_clause", "into_opt", "into_var_list", 
			"into_var", "field_opt", "field_term_list", "field_term", "file_opt", 
			"file_option_list", "file_option", "file_partition_opt", "file_size_const", 
			"line_opt", "line_term_list", "line_term", "hint_list_with_end", "opt_hint_list", 
			"hint_options", "name_list", "hint_option", "consistency_level", "use_plan_cache_type", 
			"use_jit_type", "distribute_method", "limit_expr", "for_update_clause", 
			"opt_lock_in_share_mode", "opt_for_update_wait", "parameterized_trim", 
			"groupby_clause", "sort_list_for_group_by", "sort_key_for_group_by", 
			"order_by", "sort_list", "sort_key", "query_expression_option_list", 
			"query_expression_option", "projection", "select_expr_list", "from_list", 
			"table_references", "table_references_paren", "table_reference", "table_factor", 
			"tbl_name", "dml_table_name", "seed", "sample_percent", "sample_clause", 
			"table_subquery", "table_subquery_alias", "use_partition", "external_table_partitions", 
			"external_table_partition", "use_flashback", "index_hint_type", "key_or_index", 
			"index_hint_scope", "index_element", "index_list", "index_hint_definition", 
			"index_hint_list", "relation_factor", "relation_with_star_list", "relation_factor_with_star", 
			"normal_relation_factor", "dot_relation_factor", "relation_factor_in_hint", 
			"qb_name_option", "relation_factor_in_hint_list", "relation_sep_option", 
			"relation_factor_in_pq_hint", "relation_factor_in_leading_hint", "relation_factor_in_leading_hint_list", 
			"relation_factor_in_leading_hint_list_entry", "relation_factor_in_use_join_hint_list", 
			"tracing_num_list", "join_condition", "joined_table", "natural_join_type", 
			"inner_join_type", "outer_join_type", "with_clause", "with_list", "common_table_expr", 
			"alias_name_list", "column_alias_name", "table_values_clause", "table_values_clause_with_order_by_and_limit", 
			"values_row_list", "row_value", "analyze_stmt", "analyze_statistics_clause", 
			"opt_analyze_for_clause_list", "opt_analyze_for_clause_element", "sample_option", 
			"for_all", "size_clause", "for_columns", "for_columns_list", "for_columns_item", 
			"column_clause", "create_outline_stmt", "alter_outline_stmt", "drop_outline_stmt", 
			"explain_stmt", "explain_or_desc", "explainable_stmt", "format_name", 
			"show_stmt", "check_table_options", "check_table_option", "get_diagnostics_stmt", 
			"get_condition_diagnostics_stmt", "condition_arg", "condition_information_item_list", 
			"condition_information_item", "condition_information_item_name", "get_statement_diagnostics_stmt", 
			"statement_information_item_list", "statement_information_item", "statement_information_item_name", 
			"databases_or_schemas", "opt_for_grant_user", "opt_storage", "columns_or_fields", 
			"database_or_schema", "index_or_indexes_or_keys", "from_or_in", "calibration_info_list", 
			"opt_show_engine", "help_stmt", "create_tablespace_stmt", "permanent_tablespace", 
			"permanent_tablespace_option", "opt_tablespace_option", "opt_tablespace_engine", 
			"drop_tablespace_stmt", "alter_tablespace_options", "alter_tablespace_action", 
			"alter_tablespace_actions", "opt_alter_tablespace_options", "opt_alter_tablespace_option", 
			"alter_tablespace_stmt", "rotate_master_key_stmt", "permanent_tablespace_options", 
			"opt_tablespace_options", "create_user_stmt", "user_specification_list", 
			"user_specification", "user_specification_without_password", "user_specification_with_password", 
			"require_specification", "resource_option_list", "resource_option", "tls_option_list", 
			"tls_option", "user", "opt_host_name", "user_host_or_current_user", "user_with_host_name", 
			"password", "drop_user_stmt", "user_list", "create_role_stmt", "role_list", 
			"user_specification_without_password_list", "drop_role_stmt", "role_with_host", 
			"role", "set_password_stmt", "opt_for_user", "rename_user_stmt", "rename_info", 
			"rename_list", "lock_user_stmt", "lock_spec_mysql57", "lock_tables_stmt", 
			"unlock_tables_stmt", "lock_table_list", "lock_table", "lock_type", "create_sequence_stmt", 
			"sequence_option_list", "sequence_option", "simple_num", "drop_sequence_stmt", 
			"alter_sequence_stmt", "create_dblink_stmt", "drop_dblink_stmt", "begin_stmt", 
			"xa_begin_stmt", "xa_end_stmt", "xa_prepare_stmt", "xa_commit_stmt", 
			"xa_rollback_stmt", "commit_stmt", "rollback_stmt", "kill_stmt", "grant_stmt", 
			"grant_privileges", "role_or_priv_list", "role_or_priv", "object_type", 
			"priv_level", "grant_options", "revoke_stmt", "prepare_stmt", "stmt_name", 
			"preparable_stmt", "variable_set_stmt", "sys_var_and_val_list", "var_and_val_list", 
			"set_expr_or_default", "var_and_val", "sys_var_and_val", "scope_or_scope_alias", 
			"to_or_eq", "set_role_stmt", "default_set_role_clause", "set_role_clause", 
			"execute_stmt", "argument_list", "argument", "deallocate_prepare_stmt", 
			"deallocate_or_drop", "truncate_table_stmt", "audit_stmt", "audit_or_noaudit", 
			"audit_clause", "audit_operation_clause", "audit_all_shortcut_list", 
			"auditing_on_clause", "audit_user_list", "audit_user_with_host_name", 
			"audit_user", "auditing_by_user_clause", "op_audit_tail_clause", "audit_by_session_access_option", 
			"audit_whenever_option", "audit_all_shortcut", "rename_table_stmt", "rename_table_actions", 
			"rename_table_action", "alter_table_stmt", "alter_external_table_action", 
			"add_external_table_partition_actions", "add_external_table_partition_action", 
			"alter_table_actions", "alter_table_action", "alter_constraint_option", 
			"alter_partition_option", "opt_partition_range_or_list", "alter_tg_partition_option", 
			"drop_partition_name_list", "modify_partition_info", "modify_tg_partition_info", 
			"alter_index_option", "visibility_option", "alter_column_group_action", 
			"alter_column_option", "alter_tablegroup_option", "alter_column_behavior", 
			"flashback_stmt", "purge_stmt", "optimize_stmt", "dump_memory_stmt", 
			"alter_system_stmt", "opt_sql_throttle_using_cond", "sql_throttle_one_or_more_metrics", 
			"sql_throttle_metric", "change_tenant_name_or_tenant_id", "cache_type", 
			"balance_task_type", "tenant_list_tuple", "tenant_name_list", "backup_tenant_name_list", 
			"flush_scope", "server_info_list", "server_info", "shared_storage_info", 
			"server_action", "server_list", "zone_action", "ip_port", "zone_desc", 
			"policy_name", "server_or_zone", "add_or_alter_zone_option", "add_or_alter_zone_options", 
			"alter_or_change_or_modify", "opt_path_info", "opt_storage_use_for", 
			"opt_scope_type", "partition_id_desc", "ls", "ls_server_or_server_or_zone_or_tenant", 
			"migrate_action", "change_actions", "change_action", "replica_type", 
			"memstore_percent", "suspend_or_resume", "baseline_id_expr", "sql_id_expr", 
			"sql_id_or_schema_id_expr", "namespace_expr", "baseline_asgn_factor", 
			"tenant_name", "cache_name", "file_id", "cancel_task_type", "alter_system_set_parameter_actions", 
			"alter_system_set_parameter_action", "alter_system_settp_actions", "settp_option", 
			"cluster_role", "partition_role", "ls_role", "upgrade_action", "mock_stmt", 
			"plugin_name", "install_plugin_stmt", "uninstall_plugin_stmt", "flush_stmt", 
			"flush_options", "flush_options_list", "flush_option", "handler_stmt", 
			"handler_read_or_scan", "handler_scan_function", "handler_rkey_function", 
			"handler_rkey_mode", "show_plugin_stmt", "create_server_stmt", "server_options_list", 
			"server_option", "alter_server_stmt", "drop_server_stmt", "create_logfile_group_stmt", 
			"logfile_group_info", "add_log_file", "lg_undofile", "lg_redofile", "logfile_group_option_list", 
			"logfile_group_options", "logfile_group_option", "opt_ts_initial_size", 
			"opt_ts_undo_buffer_size", "opt_ts_redo_buffer_size", "opt_ts_nodegroup", 
			"opt_ts_comment", "alter_logfile_group_stmt", "alter_logfile_group_info", 
			"alter_logfile_group_option_list", "alter_logfile_group_options", "alter_logfile_group_option", 
			"drop_logfile_group_stmt", "drop_ts_options_list", "drop_ts_options", 
			"drop_ts_option", "ts_wait", "opt_ts_engine", "method_opt", "method_list", 
			"method", "set_names_stmt", "set_charset_stmt", "set_transaction_stmt", 
			"transaction_characteristics", "transaction_access_mode", "isolation_level", 
			"opt_encrypt_key", "create_savepoint_stmt", "rollback_savepoint_stmt", 
			"release_savepoint_stmt", "alter_cluster_stmt", "cluster_define", "cluster_option_list", 
			"cluster_option", "cluster_action", "switchover_cluster_stmt", "commit_switchover_clause", 
			"protection_mode_stmt", "protection_mode_option", "cluster_name", "disconnect_cluster_stmt", 
			"var_name", "new_or_old", "new_or_old_column_ref", "column_name", "relation_name", 
			"function_name", "column_label", "date_unit", "service_name_stmt", "service_op", 
			"json_table_expr", "mock_jt_on_error_on_empty", "jt_column_list", "json_table_column_def", 
			"json_table_ordinality_column_def", "json_table_exists_column_def", "json_table_value_column_def", 
			"json_table_nested_column_def", "opt_value_on_empty_or_error_or_mismatch", 
			"opt_on_mismatch", "vec_index_params", "vec_index_param", "vec_index_param_value", 
			"json_query_expr", "json_query_opt", "scalars_opt", "wrapper_opts", "json_query_on_opt", 
			"opt_response_query", "on_mismatch_query", "on_error_query", "on_empty_query", 
			"json_value_expr", "json_value_opt", "json_value_on_opt", "opt_on_empty_or_error", 
			"on_empty", "on_error", "json_on_response", "opt_skip_index_type_list", 
			"skip_index_type", "lob_chunk_size", "lob_storage_parameter", "lob_storage_parameters", 
			"lob_storage_clause", "unreserved_keyword", "unreserved_keyword_for_role_name", 
			"unreserved_keyword_normal", "unreserved_keyword_special", "unreserved_keyword_extra", 
			"unreserved_keyword_ambiguous_roles", "mysql_reserved_keyword", "empty", 
			"forward_expr", "forward_sql_stmt"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, "'['", "']'", null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "'@'", "'{'", "'}'", "'''", null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, "'||'", "'&&'", "'='", "':='", "'<=>'", "'>='", 
			"'>'", "'<='", "'<'", null, "'<<'", "'>>'", "'->'", "'->>'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "UnderlineUTF8MB3", "UnderlineASCII", "UnderlineTIS620", "ROLE", 
			"JSON_QUERY", "QUOTA_NAME", "PQ_DISTINCT", "ADMIN", "ALLOW", "NO_MV_REWRITE", 
			"EUCLIDEAN", "STSTOKEN", "REWRITE", "NO_COALESCE_AGGR", "VECTOR_DISTANCE", 
			"PARTITION_TYPE", "DOT", "TASK_ID", "COMPUTATION", "MANHATTAN", "AUTO_REFRESH", 
			"ARRAY", "SINGLE", "SHARED_STORAGE_DEST", "DISALLOW", "UnderlineST_ASMVT", 
			"WITH_PULLUP", "NO_DECORRELATE", "CONDITIONAL", "WO_PULLUP", "RB_AND_AGG", 
			"COMPRESSION_CODE", "FILE_BLOCK_SIZE", "APPROXIMATE", "MAX_NET_BANDWIDTH", 
			"MULTIVALUE", "SHARED_STORAGE_INFO", "RB_OR_AGG", "DATA_SOURCE", "PROJECT_NAME", 
			"VECTOR", "ENDPOINT", "DATA_DISK_SIZE", "BUFFER_SIZE", "PROPERTIES", 
			"ATTRIBUTE", "ASIS", "SCALARS", "USER_SPECIFIED", "ACCESS_INFO", "ROARINGBITMAP", 
			"VALIDATION", "COSINE", "DECORRELATE", "SUM_OPNSIZE", "ACCESSKEY", "MICRO_INDEX_CLUSTERED", 
			"AUTO_INCREMENT_CACHE_SIZE", "ACCESSTYPE", "PQ_GBY", "EXTERNAL_STORAGE_DEST", 
			"OVERWRITE", "MV_REWRITE", "LAST_REFRESH_SCN", "COALESCE_AGGR", "RESOURCE_GROUP", 
			"WITHOUT", "MAX_FILE_SIZE", "APPROX", "MISMATCH", "SS_MICRO_CACHE", "OPTIMIZER_COSTS", 
			"PAXOS_REPLICA_NUM", "ACCESSID", "UNCONDITIONAL", "NET_BANDWIDTH_WEIGHT", 
			"RB_BUILD_AGG", "LeftBracket", "RightBracket", "ACCESS", "OBJECT_ID", 
			"ACCESSIBLE", "ADD", "AGAINST", "ALTER", "ALWAYS", "AND", "ANALYZE", 
			"ALL", "ALTER_HINT_BEGIN", "NAMESPACE", "AS", "ASENSITIVE", "ASC", "BETWEEN", 
			"BEFORE", "BIGINT", "BINARY", "BLOB", "BOTH", "BY", "CALL", "CASCADE", 
			"CASE", "CHANGE", "CHARACTER", "CHECK", "CIPHER", "WF_TOPN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "COLLATE", "COLUMN", "COLUMNS", 
			"LS", "CREATE", "CROSS", "CYCLE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "WITH_COLUMN_GROUP", "CURSOR", "DAY_HOUR", "DAY_MICROSECOND", 
			"DAY_MINUTE", "DAY_SECOND", "DATABASE", "DATABASES", "NUMBER", "DECIMAL", 
			"DECLARE", "ROWID", "DEFAULT", "DELAYED", "DELETE", "SYNCHRONOUS", "IMMEDIATE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIV", "DISTINCT", "DISTINCTROW", 
			"DOUBLE", "DROP", "DUAL", "EACH", "ENCLOSED", "ELSE", "ELSEIF", "ESCAPED", 
			"EXISTS", "EXIT", "EXPLAIN", "FETCH", "FIELDS", "FOREIGN", "FLOAT", "FLOAT4", 
			"FLOAT8", "FOR", "FORCE", "FROM", "FULL", "FULLTEXT", "GET", "GENERATED", 
			"GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HOUR_MICROSECOND", "HOUR_MINUTE", 
			"HOUR_SECOND", "ID", "IF", "IN", "INDEX", "INNER", "INFILE", "INOUT", 
			"INCLUDING", "INSENSITIVE", "INTEGER", "INT1", "INT2", "INT3", "LIB", 
			"INT4", "INT8", "INTERVAL", "INSERT", "ORDINALITY", "INTO", "IO_AFTER_GTIDS", 
			"IO_BEFORE_GTIDS", "IS", "ISSUER", "ITERATE", "JOIN", "KEY", "KEYS", 
			"KILL", "LANGUAGE", "LEADING", "LEAVE", "LEFT", "LIMIT", "LIKE", "LINEAR", 
			"LINES", "BISON_LIST", "LOAD", "LOCAL", "OPTIMIZER_FEATURES_ENABLE", 
			"LOCALTIME", "LOCALTIMESTAMP", "LOCK_", "LONG", "UNLIMITED", "LONGBLOB", 
			"LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MEDIUMBLOB", "MEDIUMINT", "MERGE", "MEDIUMTEXT", 
			"MIDDLEINT", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MOD", "MODE", "MODIFIES", 
			"NATURAL", "NO_WRITE_TO_BINLOG", "ON", "OPTION", "OPTIMIZE", "OPTIONALLY", 
			"OR", "ORDER", "OUT", "IOPS_WEIGHT", "OUTER", "OUTFILE", "PARSER", "PROCEDURE", 
			"MIN_MAX", "NO_USE_COLUMN_STORE_HINT", "PURGE", "PARTITION", "PRECISION", 
			"PRIMARY", "PUBLIC", "RANGE", "READ", "READ_WRITE", "READS", "REAL", 
			"RELEASE", "REFERENCES", "REGEXP", "RENAME", "REPLACE", "REPEAT", "REQUIRE", 
			"RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "ROWS", "SECOND_MICROSECOND", 
			"SELECT", "SCHEMA", "SCHEMAS", "SEPARATOR", "SET", "REJECT", "SENSITIVE", 
			"SHOW", "SIGNAL", "SMALLINT", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STARTING", "NUMERIC", "STORED", "PLUS", "STRAIGHT_JOIN", "SUBJECT", 
			"SYSDATE", "TERMINATED", "TEXT", "TINYBLOB", "TINYINT", "TINYTEXT", "TABLE", 
			"TABLEGROUP", "THEN", "TO", "TRAILING", "TRIGGER", "UNDO", "CALIBRATION", 
			"UNION", "UNIQUE", "UNLOCK", "LINE_DELIMITER", "UNSIGNED", "UPDATE", 
			"USAGE", "GEOMCOLLECTION", "USE", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
			"VALUES", "QUERY_RESPONSE_TIME", "VARBINARY", "VARCHAR", "VARYING", "VIRTUAL", 
			"WHERE", "REDUNDANCY", "WHEN", "WHILE", "CALIBRATION_INFO", "SCN", "WINDOW", 
			"WITH", "WRITE", "XOR", "X509", "YEAR_MONTH", "ZEROFILL", "GLOBAL_ALIAS", 
			"SESSION_ALIAS", "UnderlineUTF8", "UnderlineUTF8MB4", "UnderlineGBK", 
			"UnderlineGB18030", "UnderlineBINARY", "UnderlineUTF16", "UnderlineLATIN1", 
			"UnderlineGB18030_2022", "STRONG", "WEAK", "CONNECT", "FROZEN", "EXCEPT", 
			"MINUS", "INTERSECT", "ISNULL", "NOT", "NULLX", "INTNUM", "AUDIT", "WARNINGS", 
			"FORMAT", "MINVALUE", "EMPTY_FIELD_AS_NULL", "UNINSTALL", "UNDOFILE", 
			"MASTER_SSL_CA", "YEAR", "DISCONNECT", "STOP", "STORAGE_FORMAT_WORK_VERSION", 
			"SIZE", "DISABLE_PARALLEL_DML", "AT", "RELAY_LOG_POS", "POOL", "CURDATE", 
			"JSON_VALUE", "ZONE_TYPE", "LOCATION", "WEIGHT_STRING", "CHANGED", "MASTER_SSL_CAPATH", 
			"REWRITE_MERGE_VERSION", "NTH_VALUE", "SERIAL", "PROGRESSIVE_MERGE_NUM", 
			"QUEUE_TIME", "TABLET_MAX_SIZE", "ILOGCACHE", "AUTHORS", "MIGRATE", "CONSISTENT", 
			"SUSPEND", "REMOTE_OSS", "SECURITY", "SET_SLAVE_CLUSTER", "FAST", "PREVIEW", 
			"BANDWIDTH", "TRUNCATE", "BACKUP_BACKUP_DEST", "CONSTRAINT_SCHEMA", "STATEMENT", 
			"MASTER_SSL_CERT", "TABLE_NAME", "PRIORITY", "DO", "MASTER_RETRY_COUNT", 
			"REPLICA", "KILL_EXPR", "RECOVERY", "OLD_KEY", "DISABLE", "PORT", "REBUILD", 
			"FOLLOWER", "LOWER_OVER", "ROOT", "REDOFILE", "MASTER_SERVER_ID", "NCHAR", 
			"KEY_BLOCK_SIZE", "SEQUENCE", "MIGRATION", "SUBPARTITION", "MYSQL_DRIVER", 
			"ROW_NUMBER", "COMPRESSION", "BIT", "MAX_DISK_SIZE", "SAMPLE", "UNLOCKED", 
			"CLASS_ORIGIN", "RUDUNDANT", "STATEMENTS", "ACTION", "REDUNDANT", "UPGRADE", 
			"VALIDATE", "START", "TEMPTABLE", "RECYCLEBIN", "PROFILES", "TIMESTAMP_VALUE", 
			"ERRORS", "LEAVES", "UNDEFINED", "EVERY", "SHARDING", "BYTE", "FLUSH", 
			"MIN_ROWS", "ERROR_P", "LOWER_THAN_LOG", "MAX_USER_CONNECTIONS", "MAX_CPU", 
			"LOCKED", "DOP", "IO", "BTREE", "SLOT_IDX", "APPROXNUM", "HASH", "ROTATE", 
			"COLLATION", "MASTER", "ENCRYPTION", "MAX", "TRANSACTION", "SQL_TSI_MONTH", 
			"ARBITRATION", "IGNORE", "MAX_QUERIES_PER_HOUR", "COMMENT", "CTX_ID", 
			"MIN_IOPS", "NVARCHAR", "OFF", "BIT_XOR", "PAUSE", "QUICK", "PRETTY", 
			"DUPLICATE", "WAIT", "FIELD_OPTIONALLY_ENCLOSED_BY", "DES_KEY_FILE", 
			"ENGINES", "RETURNS", "MASTER_USER", "SOCKET", "MASTER_DELAY", "FILE_ID", 
			"FIRST", "TABLET", "CLIENT", "ENGINE_", "EXCLUDING", "TABLES", "TRADITIONAL", 
			"BOOTSTRAP", "STDDEV", "DATAFILE", "VARCHARACTER", "INVOKER", "DEPTH", 
			"NORMAL", "LN", "COLUMN_NAME", "TRIGGERS", "ENABLE_PARALLEL_DML", "RESET", 
			"EVENT", "COALESCE", "RESPECT", "STATUS", "AUTO_INCREMENT_MODE", "UNBOUNDED", 
			"WRAPPER", "TIMESTAMP", "PARTITIONS", "SUBSTR", "CHUNK", "FILEX", "BACKUPSET", 
			"PRIMARY_CLUSTER_ID", "UNIT", "NATIONAL_LITERAL", "PRIVILEGES", "DEMAND", 
			"LOWER_ON", "BACKUPPIECE", "LESS", "SWITCH", "DIAGNOSTICS", "REDO_BUFFER_SIZE", 
			"NO", "MAJOR", "ACTIVE", "ROUTINE", "FOLLOWING", "DEFAULT_LOB_INROW_THRESHOLD", 
			"LOB_INROW_THRESHOLD", "SCHEMA_ID", "LATERAL", "ROLLBACK", "READ_ONLY", 
			"MEMBER", "PARTITION_ID", "DUMP", "EXTERNAL", "APPROX_COUNT_DISTINCT_SYNOPSIS", 
			"GROUPING", "OF", "SLOG", "OJ", "ARCHIVELOG", "MAX_CONNECTIONS_PER_HOUR", 
			"ASYNCHRONOUS", "ENCODING", "SECOND", "UNKNOWN", "POINT", "PL", "MEMSTORE_PERCENT", 
			"STD", "POLYGON", "PS", "OLD", "TABLE_ID", "CONTEXT", "FINAL_COUNT", 
			"MASTER_CONNECT_RETRY", "POSITION", "DISCARD", "PREV", "RECOVER", "PROCESS", 
			"DEALLOCATE", "OLD_PASSWORD", "FAILOVER", "P_NSEQ", "LISTAGG", "SLOW", 
			"NOAUDIT", "SUM", "OPTIONS", "MIN", "RT", "RELOAD", "ONE", "DELAY_KEY_WRITE", 
			"ORIG_DEFAULT", "RLIKE", "INDEXED", "RETURNING", "SQL_TSI_HOUR", "TIMESTAMPDIFF", 
			"RESTORE", "OFFSET", "TEMPORARY", "VARIANCE", "SNAPSHOT", "STATISTICS", 
			"SERVER_TYPE", "COMMITTED", "INDEXES", "FREEZE", "SCOPE", "IDC", "VIEW", 
			"ONE_SHOT", "ACCOUNT", "LOCALITY", "REVERSE", "UP", "CLUSTER_ID", "NOARCHIVELOG", 
			"BEGIN_OUTLINE_DATA", "MAX_SIZE", "PAGE", "NAME", "ROW_COUNT", "LAST", 
			"WASH", "LOGONLY_REPLICA_NUM", "DELAY", "SUBDATE", "INCREMENTAL", "ROLLING", 
			"VERIFY", "CONTAINS", "GENERAL", "VISIBLE", "SIGNED", "SERVER", "NEXT", 
			"ENDS", "GLOBAL", "ROOTSERVICE_LIST", "SHUTDOWN", "VERBOSE", "CLUSTER_NAME", 
			"MASTER_PORT", "MYSQL_ERRNO", "LOWER_COMMA", "XA", "TIME", "DATETIME", 
			"NOMINVALUE", "BOOL", "DIRECTORY", "DATA_TABLE_ID", "SEQUENCES", "PRETTY_COLOR", 
			"VALID", "MASTER_SSL_KEY", "MASTER_PASSWORD", "PLAN", "SHARE", "MULTIPOLYGON", 
			"STDDEV_SAMP", "USE_BLOOM_FILTER", "CONSTRAINT_CATALOG", "CLUSTER", "EXCHANGE", 
			"GRANTS", "CAST", "SERVER_PORT", "SQL_CACHE", "MAX_USED_PART_ID", "HYBRID_HIST", 
			"INSTANCE", "FUNCTION", "NOWAIT", "INVISIBLE", "DENSE_RANK", "COUNT", 
			"BLOCKING", "NAMES", "MY_NAME", "CHAR", "LOWER_THAN_NEG", "P_ENTITY", 
			"ISOLATE", "MAX_ROWS", "CTXCAT", "ISOLATION", "REPLICATION", "DECRYPTION", 
			"REMOVE", "STATS_AUTO_RECALC", "CONSISTENT_MODE", "MODIFY", "USE_COLUMN_STORE_HINT", 
			"UNCOMMITTED", "PHYSICAL", "NO_WAIT", "BACKUP_COPIES", "UNIT_NUM", "PERCENTAGE", 
			"MAX_IOPS", "SPFILE", "REPEATABLE", "COMPLETION", "CONDENSED", "INPUT", 
			"ROOTTABLE", "SUBSTRING", "ZONE", "BACKED", "SERVICE", "TEMPLATE", "DATE_SUB", 
			"EXPIRE_INFO", "EXPIRE", "ENABLE", "HOSTS", "SCHEMA_NAME", "EXPANSION", 
			"REORGANIZE", "BLOCK_SIZE", "TRIM_SPACE", "INNER_PARSE", "MINOR", "RESUME", 
			"INT", "COMPLETE", "STATS_PERSISTENT", "NODEGROUP", "PARTITIONING", "BIT_AND", 
			"SUPER", "TIMES", "COMMIT", "SAVEPOINT", "UNTIL", "USER", "LEAK_RATE", 
			"MEMTABLE", "CHARSET", "MOVE", "XML", "PATH", "IPC", "TRIM", "PERFORMANCE", 
			"RANK", "VAR_POP", "DEFAULT_AUTH", "EXTENT_SIZE", "BINLOG", "LEAK_MOD", 
			"CLOG", "GEOMETRYCOLLECTION", "STORAGE", "MEDIUM", "USE_FRM", "CLIENT_VERSION", 
			"MASTER_HEARTBEAT_PERIOD", "SUBPARTITIONS", "CUBE", "FRAGMENTATION", 
			"BALANCE", "QUERY", "POLICY", "THROTTLE", "SQL_TSI_QUARTER", "REPAIR", 
			"MASTER_SSL_CIPHER", "KEY_VERSION", "CATALOG_NAME", "NDBCLUSTER", "CONNECTION", 
			"COMPACT", "SYNCHRONIZATION", "AVAILABILITY", "INCR", "CANCEL", "SIMPLE", 
			"BEGIN", "VARIABLES", "SQL_TSI_WEEK", "P_CHUNK", "SYSTEM", "ROOTSERVICE", 
			"PLUGIN_DIR", "ASCII", "INFO", "SKIP_HEADER", "SQL_THREAD", "TYPES", 
			"LEADER", "LOWER_KEY", "FOUND", "EXTRACT", "FIXED", "CACHE", "KV_ATTRIBUTES", 
			"CURRENT", "STACKED", "RETURNED_SQLSTATE", "SKIP_INDEX", "END", "PRESERVE", 
			"BADFILE", "LOG_DISK_SIZE", "SQL_BUFFER_RESULT", "JSON", "SOME", "INDEX_TABLE_ID", 
			"PATTERN", "RECOVERY_WINDOW", "FREQUENCY", "PQ_MAP", "LOCKS", "MANUAL", 
			"GEOMETRY", "IDENTIFIED", "NO_PARALLEL", "STORAGE_FORMAT_VERSION", "OVER", 
			"MAX_SESSION_NUM", "USER_RESOURCES", "BACKUPROUND", "DESTINATION", "SONAME", 
			"OUTLINE", "MASTER_LOG_FILE", "NOMAXVALUE", "ESTIMATE", "SLAVE", "SKIP_BLANK_LINES", 
			"GTS", "EXPORT", "AVG_ROW_LENGTH", "ENFORCED", "FLASHBACK", "SESSION_USER", 
			"TABLEGROUPS", "CURTIME", "REPLICA_TYPE", "AGGREGATE", "TRANSFER", "JSON_ARRAYAGG", 
			"PERCENT_RANK", "ENUM", "NATIONAL", "RECYCLE", "REGION", "MATERIALIZE", 
			"MUTEX", "PARALLEL", "NOPARALLEL", "LOWER_PARENS", "MONITOR", "NDB", 
			"SYSTEM_USER", "MAXIMIZE", "MAX_UPDATES_PER_HOUR", "CURSOR_NAME", "CONCURRENT", 
			"DUMPFILE", "COMPRESSED", "LINESTRING", "DYNAMIC", "CHAIN", "NEG", "INCREMENT", 
			"LAG", "BASELINE_ID", "NEW", "SQL_TSI_YEAR", "THAN", "CPU", "HOST", "VALUE", 
			"LOGS", "SERIALIZABLE", "AUTO_INCREMENT", "BACKUP", "LOGFILE", "ROW_FORMAT", 
			"SET_MASTER_CLUSTER", "MINUTE", "SWAPS", "TASK", "INNODB", "IO_THREAD", 
			"HISTOGRAM", "PCTFREE", "BC2HOST", "PARAMETERS", "OBJECT", "TABLESPACE", 
			"OBCONFIG_URL", "AUTO", "PASSWORD", "LOWER_THAN_BY_ACCESS_SESSION", "ROW", 
			"MESSAGE_TEXT", "DISK", "FAULTS", "HOUR", "REFRESH", "COLUMN_STAT", "ANY", 
			"UNIT_GROUP", "TTL", "HIGHER_PARENS", "ERROR_CODE", "PHASE", "ENTITY", 
			"PROFILE", "LAST_VALUE", "RESTART", "TRACE", "LOGICAL_READS", "DATE_ADD", 
			"BLOCK_INDEX", "SERVER_IP", "CODE", "PLUGINS", "ADDDATE", "VIRTUAL_COLUMN_ID", 
			"COLUMN_FORMAT", "MAX_MEMORY", "NESTED", "CLEAN", "MASTER_SSL", "CLEAR", 
			"END_OUTLINE_DATA", "SORTKEY", "CHECKSUM", "INSTALL", "MONTH", "NEVER", 
			"AFTER", "CLOSE", "JSON_OBJECTAGG", "SET_TP", "OWNER", "BLOOM_FILTER", 
			"ILOG", "META", "STARTS", "PLANREGRESS", "AUTOEXTEND_SIZE", "TABLET_ID", 
			"SOURCE", "POW", "IGNORE_SERVER_IDS", "REPLICA_NUM", "LOWER_THAN_COMP", 
			"BINDING", "MICROSECOND", "UNDO_BUFFER_SIZE", "SWITCHOVER", "EXTENDED_NOADDR", 
			"GLOBAL_NAME", "SPLIT", "BASELINE", "MEMORY", "DESCRIPTION", "SEED", 
			"RTREE", "RESOURCE", "STDDEV_POP", "RUN", "OBSOLETE", "SQL_AFTER_GTIDS", 
			"OPEN", "SQL_TSI_DAY", "STRING", "RELAY_THREAD", "BREADTH", "NOCACHE", 
			"PRIMARY_ROOTSERVICE_LIST", "UNUSUAL", "RELAYLOG", "SQL_BEFORE_GTIDS", 
			"PRIMARY_ZONE", "TABLE_CHECKSUM", "ZONE_LIST", "DATABASE_ID", "TP_NO", 
			"NETWORK", "PROTECTION", "HIDDEN_", "BOOLEAN", "AVG", "MULTILINESTRING", 
			"APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE", "NOW", "BIT_OR", "PROXY", "DUPLICATE_SCOPE", 
			"STATS_SAMPLE_PAGES", "TABLET_SIZE", "BASE", "KVCACHE", "RELAY", "MEMORY_SIZE", 
			"CONTRIBUTORS", "EMPTY", "PARTIAL", "REPORT", "ESCAPE", "CLONE", "MASTER_AUTO_POSITION", 
			"DISKGROUP", "CALC_PARTITION_ID", "TP_NAME", "ACTIVATE", "SQL_AFTER_MTS_GAPS", 
			"EFFECTIVE", "FIRST_VALUE", "SQL_TSI_MINUTE", "UNICODE", "QUARTER", "ANALYSE", 
			"DEFINER", "NONE", "PROCESSLIST", "TYPE", "INSERT_METHOD", "EXTENDED", 
			"LOG", "WHENEVER", "LEVEL", "TIME_ZONE_INFO", "TIMESTAMPADD", "LOWER_INTO", 
			"GET_FORMAT", "PREPARE", "MATERIALIZED", "STANDBY", "WORK", "HANDLER", 
			"CUME_DIST", "LEAK", "INITIAL_SIZE", "RELAY_LOG_FILE", "STORING", "IMPORT", 
			"MIN_MEMORY", "HELP", "CREATE_TIMESTAMP", "COMPUTE", "RANDOM", "SOUNDS", 
			"TABLE_MODE", "COPY", "SESSION", "DAG", "NOCYCLE", "SQL_NO_CACHE", "EXECUTE", 
			"PRECEDING", "SWITCHES", "PACK_KEYS", "ENABLE_EXTENDED_ROWID", "SQL_ID", 
			"NOORDER", "TENANT_ID", "CHECKPOINT", "DAY", "GROUP_CONCAT", "JSON_TABLE", 
			"LEAD", "EVENTS", "RECURSIVE", "ONLY", "TABLEGROUP_ID", "TOP_K_FRE_HIST", 
			"MASTER_SSL_CRL", "RESOURCE_POOL", "RESOURCE_POOL_LIST", "TRACING", "NTILE", 
			"NULL_IF_EXETERNAL", "BUCKETS", "SKEWONLY", "IS_TENANT_SYS_POOL", "INLINE", 
			"SCHEDULE", "JOB", "SRID", "MASTER_LOG_POS", "SUBCLASS_ORIGIN", "MULTIPOINT", 
			"BLOCK", "SQL_TSI_SECOND", "DATE", "ROLLUP", "MIN_CPU", "OCCUR", "DATA", 
			"SUCCESSFUL", "REDO_TRANSPORT_OPTIONS", "FIELD_DELIMITER", "MASTER_HOST", 
			"VAR_SAMP", "ALGORITHM", "EXPIRED", "CONSTRAINT_NAME", "APPROX_COUNT_DISTINCT", 
			"BASIC", "DEFAULT_TABLEGROUP", "LIST_", "NO_PX_JOIN_FILTER", "WEEK", 
			"LINK", "STATEMENT_ID", "NULLS", "MASTER_SSL_CRLPATH", "CASCADED", "PLUGIN", 
			"ENCRYPTED", "TENANT", "DECIMAL_VAL", "ST_ASMVT", "STORE", "BOOL_VALUE", 
			"LOG_RESTORE_SOURCE", "ENABLE_ARBITRATION_SERVICE", "At", "LeftBrace", 
			"RightBrace", "Quote", "PARSER_SYNTAX_ERROR", "HEX_STRING_VALUE", "DATE_VALUE", 
			"HINT_VALUE", "Comma", "Plus", "And", "Or", "Star", "Not", "LeftParen", 
			"Minus", "Div", "Caret", "Colon", "Dot", "Mod", "RightParen", "Tilde", 
			"DELIMITER", "CNNOP", "AND_OP", "COMP_EQ", "SET_VAR", "COMP_NSEQ", "COMP_GE", 
			"COMP_GT", "COMP_LE", "COMP_LT", "COMP_NE", "SHIFT_LEFT", "SHIFT_RIGHT", 
			"JSON_EXTRACT", "JSON_EXTRACT_UNQUOTED", "QUESTIONMARK", "SYSTEM_VARIABLE", 
			"USER_VARIABLE", "NAME_OB", "STRING_VALUE", "In_c_comment", "ANTLR_SKIP", 
			"Blank", "LOAD_DATA_HINT_BEGIN", "REPLACE_HINT_BEGIN", "INSERT_HINT_BEGIN", 
			"SELECT_HINT_BEGIN", "UPDATE_HINT_BEGIN", "DELETE_HINT_BEGIN", "HINT_END", 
			"NO_REWRITE", "HOTSPOT", "ORDERED", "USE_HASH_AGGREGATION", "NO_USE_HASH_AGGREGATION", 
			"NO_USE_JIT", "USE_LATE_MATERIALIZATION", "NO_USE_LATE_MATERIALIZATION", 
			"TRACE_LOG", "USE_PX", "NO_USE_PX", "READ_CONSISTENCY", "INDEX_HINT", 
			"QUERY_TIMEOUT", "FROZEN_VERSION", "TOPK", "LOG_LEVEL", "LEADING_HINT", 
			"FULL_HINT", "USE_PLAN_CACHE", "USE_MERGE", "NO_USE_MERGE", "USE_HASH", 
			"NO_USE_HASH", "USE_NL", "PX_JOIN_FILTER", "NO_USE_NL", "USE_BNL", "NO_USE_BNL", 
			"USE_NL_MATERIALIZATION", "NO_USE_NL_MATERIALIZATION", "MERGE_HINT", 
			"NO_MERGE_HINT", "NO_EXPAND", "USE_CONCAT", "UNNEST", "NO_UNNEST", "PLACE_GROUP_BY", 
			"NO_PLACE_GROUP_BY", "NO_PRED_DEDUCE", "USE_JIT", "STAT", "TRANS_PARAM", 
			"FORCE_REFRESH_LOCATION_CACHE", "QB_NAME", "MAX_CONCURRENT", "LOAD_BATCH_SIZE", 
			"PQ_DISTRIBUTE", "RANDOM_LOCAL", "BROADCAST", "LIST", "HINT_HINT_BEGIN", 
			"ALL_META", "ALL_USER", "BEGI", "REMAP", "HIDDEN"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "OBParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }


	public boolean is_pl_parse_ = false;
	public boolean is_pl_parse_expr_ = false;

	public OBParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Sql_stmtContext extends ParserRuleContext {
		public Stmt_listContext stmt_list() {
			return getRuleContext(Stmt_listContext.class,0);
		}
		public Sql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSql_stmt(this);
		}
	}

	public final Sql_stmtContext sql_stmt() throws RecognitionException {
		Sql_stmtContext _localctx = new Sql_stmtContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1606);
			stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_listContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(OBParser.EOF, 0); }
		public TerminalNode DELIMITER() { return getToken(OBParser.DELIMITER, 0); }
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterStmt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitStmt_list(this);
		}
	}

	public final Stmt_listContext stmt_list() throws RecognitionException {
		Stmt_listContext _localctx = new Stmt_listContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_stmt_list);
		try {
			setState(1618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1608);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1609);
				match(DELIMITER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1610);
				stmt();
				setState(1611);
				match(EOF);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1613);
				stmt();
				setState(1614);
				match(DELIMITER);
				setState(1616);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(1615);
					match(EOF);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return getRuleContext(Create_table_stmtContext.class,0);
		}
		public Create_function_stmtContext create_function_stmt() {
			return getRuleContext(Create_function_stmtContext.class,0);
		}
		public Drop_function_stmtContext drop_function_stmt() {
			return getRuleContext(Drop_function_stmtContext.class,0);
		}
		public Drop_procedure_stmtContext drop_procedure_stmt() {
			return getRuleContext(Drop_procedure_stmtContext.class,0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return getRuleContext(Drop_trigger_stmtContext.class,0);
		}
		public Create_table_like_stmtContext create_table_like_stmt() {
			return getRuleContext(Create_table_like_stmtContext.class,0);
		}
		public Create_database_stmtContext create_database_stmt() {
			return getRuleContext(Create_database_stmtContext.class,0);
		}
		public Drop_database_stmtContext drop_database_stmt() {
			return getRuleContext(Drop_database_stmtContext.class,0);
		}
		public Alter_database_stmtContext alter_database_stmt() {
			return getRuleContext(Alter_database_stmtContext.class,0);
		}
		public Use_database_stmtContext use_database_stmt() {
			return getRuleContext(Use_database_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return getRuleContext(Drop_table_stmtContext.class,0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return getRuleContext(Drop_view_stmtContext.class,0);
		}
		public Explain_stmtContext explain_stmt() {
			return getRuleContext(Explain_stmtContext.class,0);
		}
		public Create_outline_stmtContext create_outline_stmt() {
			return getRuleContext(Create_outline_stmtContext.class,0);
		}
		public Alter_outline_stmtContext alter_outline_stmt() {
			return getRuleContext(Alter_outline_stmtContext.class,0);
		}
		public Drop_outline_stmtContext drop_outline_stmt() {
			return getRuleContext(Drop_outline_stmtContext.class,0);
		}
		public Show_stmtContext show_stmt() {
			return getRuleContext(Show_stmtContext.class,0);
		}
		public Prepare_stmtContext prepare_stmt() {
			return getRuleContext(Prepare_stmtContext.class,0);
		}
		public Variable_set_stmtContext variable_set_stmt() {
			return getRuleContext(Variable_set_stmtContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Alter_table_stmtContext alter_table_stmt() {
			return getRuleContext(Alter_table_stmtContext.class,0);
		}
		public Alter_system_stmtContext alter_system_stmt() {
			return getRuleContext(Alter_system_stmtContext.class,0);
		}
		public Audit_stmtContext audit_stmt() {
			return getRuleContext(Audit_stmtContext.class,0);
		}
		public Deallocate_prepare_stmtContext deallocate_prepare_stmt() {
			return getRuleContext(Deallocate_prepare_stmtContext.class,0);
		}
		public Create_user_stmtContext create_user_stmt() {
			return getRuleContext(Create_user_stmtContext.class,0);
		}
		public Drop_user_stmtContext drop_user_stmt() {
			return getRuleContext(Drop_user_stmtContext.class,0);
		}
		public Create_role_stmtContext create_role_stmt() {
			return getRuleContext(Create_role_stmtContext.class,0);
		}
		public Drop_role_stmtContext drop_role_stmt() {
			return getRuleContext(Drop_role_stmtContext.class,0);
		}
		public Set_role_stmtContext set_role_stmt() {
			return getRuleContext(Set_role_stmtContext.class,0);
		}
		public Set_password_stmtContext set_password_stmt() {
			return getRuleContext(Set_password_stmtContext.class,0);
		}
		public Rename_user_stmtContext rename_user_stmt() {
			return getRuleContext(Rename_user_stmtContext.class,0);
		}
		public Lock_user_stmtContext lock_user_stmt() {
			return getRuleContext(Lock_user_stmtContext.class,0);
		}
		public Grant_stmtContext grant_stmt() {
			return getRuleContext(Grant_stmtContext.class,0);
		}
		public Revoke_stmtContext revoke_stmt() {
			return getRuleContext(Revoke_stmtContext.class,0);
		}
		public Begin_stmtContext begin_stmt() {
			return getRuleContext(Begin_stmtContext.class,0);
		}
		public Commit_stmtContext commit_stmt() {
			return getRuleContext(Commit_stmtContext.class,0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return getRuleContext(Rollback_stmtContext.class,0);
		}
		public Create_tablespace_stmtContext create_tablespace_stmt() {
			return getRuleContext(Create_tablespace_stmtContext.class,0);
		}
		public Drop_tablespace_stmtContext drop_tablespace_stmt() {
			return getRuleContext(Drop_tablespace_stmtContext.class,0);
		}
		public Alter_tablespace_stmtContext alter_tablespace_stmt() {
			return getRuleContext(Alter_tablespace_stmtContext.class,0);
		}
		public Rotate_master_key_stmtContext rotate_master_key_stmt() {
			return getRuleContext(Rotate_master_key_stmtContext.class,0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return getRuleContext(Create_index_stmtContext.class,0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return getRuleContext(Drop_index_stmtContext.class,0);
		}
		public Kill_stmtContext kill_stmt() {
			return getRuleContext(Kill_stmtContext.class,0);
		}
		public Create_mlog_stmtContext create_mlog_stmt() {
			return getRuleContext(Create_mlog_stmtContext.class,0);
		}
		public Drop_mlog_stmtContext drop_mlog_stmt() {
			return getRuleContext(Drop_mlog_stmtContext.class,0);
		}
		public Help_stmtContext help_stmt() {
			return getRuleContext(Help_stmtContext.class,0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return getRuleContext(Create_view_stmtContext.class,0);
		}
		public Create_mview_stmtContext create_mview_stmt() {
			return getRuleContext(Create_mview_stmtContext.class,0);
		}
		public Create_tenant_stmtContext create_tenant_stmt() {
			return getRuleContext(Create_tenant_stmtContext.class,0);
		}
		public Create_standby_tenant_stmtContext create_standby_tenant_stmt() {
			return getRuleContext(Create_standby_tenant_stmtContext.class,0);
		}
		public Alter_tenant_stmtContext alter_tenant_stmt() {
			return getRuleContext(Alter_tenant_stmtContext.class,0);
		}
		public Drop_tenant_stmtContext drop_tenant_stmt() {
			return getRuleContext(Drop_tenant_stmtContext.class,0);
		}
		public Create_restore_point_stmtContext create_restore_point_stmt() {
			return getRuleContext(Create_restore_point_stmtContext.class,0);
		}
		public Drop_restore_point_stmtContext drop_restore_point_stmt() {
			return getRuleContext(Drop_restore_point_stmtContext.class,0);
		}
		public Create_resource_stmtContext create_resource_stmt() {
			return getRuleContext(Create_resource_stmtContext.class,0);
		}
		public Alter_resource_stmtContext alter_resource_stmt() {
			return getRuleContext(Alter_resource_stmtContext.class,0);
		}
		public Drop_resource_stmtContext drop_resource_stmt() {
			return getRuleContext(Drop_resource_stmtContext.class,0);
		}
		public Set_names_stmtContext set_names_stmt() {
			return getRuleContext(Set_names_stmtContext.class,0);
		}
		public Set_charset_stmtContext set_charset_stmt() {
			return getRuleContext(Set_charset_stmtContext.class,0);
		}
		public Create_tablegroup_stmtContext create_tablegroup_stmt() {
			return getRuleContext(Create_tablegroup_stmtContext.class,0);
		}
		public Drop_tablegroup_stmtContext drop_tablegroup_stmt() {
			return getRuleContext(Drop_tablegroup_stmtContext.class,0);
		}
		public Alter_tablegroup_stmtContext alter_tablegroup_stmt() {
			return getRuleContext(Alter_tablegroup_stmtContext.class,0);
		}
		public Rename_table_stmtContext rename_table_stmt() {
			return getRuleContext(Rename_table_stmtContext.class,0);
		}
		public Truncate_table_stmtContext truncate_table_stmt() {
			return getRuleContext(Truncate_table_stmtContext.class,0);
		}
		public Set_transaction_stmtContext set_transaction_stmt() {
			return getRuleContext(Set_transaction_stmtContext.class,0);
		}
		public Create_savepoint_stmtContext create_savepoint_stmt() {
			return getRuleContext(Create_savepoint_stmtContext.class,0);
		}
		public Rollback_savepoint_stmtContext rollback_savepoint_stmt() {
			return getRuleContext(Rollback_savepoint_stmtContext.class,0);
		}
		public Release_savepoint_stmtContext release_savepoint_stmt() {
			return getRuleContext(Release_savepoint_stmtContext.class,0);
		}
		public Lock_tables_stmtContext lock_tables_stmt() {
			return getRuleContext(Lock_tables_stmtContext.class,0);
		}
		public Unlock_tables_stmtContext unlock_tables_stmt() {
			return getRuleContext(Unlock_tables_stmtContext.class,0);
		}
		public Flashback_stmtContext flashback_stmt() {
			return getRuleContext(Flashback_stmtContext.class,0);
		}
		public Purge_stmtContext purge_stmt() {
			return getRuleContext(Purge_stmtContext.class,0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return getRuleContext(Analyze_stmtContext.class,0);
		}
		public Load_data_stmtContext load_data_stmt() {
			return getRuleContext(Load_data_stmtContext.class,0);
		}
		public Create_dblink_stmtContext create_dblink_stmt() {
			return getRuleContext(Create_dblink_stmtContext.class,0);
		}
		public Drop_dblink_stmtContext drop_dblink_stmt() {
			return getRuleContext(Drop_dblink_stmtContext.class,0);
		}
		public Create_sequence_stmtContext create_sequence_stmt() {
			return getRuleContext(Create_sequence_stmtContext.class,0);
		}
		public Alter_sequence_stmtContext alter_sequence_stmt() {
			return getRuleContext(Alter_sequence_stmtContext.class,0);
		}
		public Drop_sequence_stmtContext drop_sequence_stmt() {
			return getRuleContext(Drop_sequence_stmtContext.class,0);
		}
		public Xa_begin_stmtContext xa_begin_stmt() {
			return getRuleContext(Xa_begin_stmtContext.class,0);
		}
		public Xa_end_stmtContext xa_end_stmt() {
			return getRuleContext(Xa_end_stmtContext.class,0);
		}
		public Xa_prepare_stmtContext xa_prepare_stmt() {
			return getRuleContext(Xa_prepare_stmtContext.class,0);
		}
		public Xa_commit_stmtContext xa_commit_stmt() {
			return getRuleContext(Xa_commit_stmtContext.class,0);
		}
		public Xa_rollback_stmtContext xa_rollback_stmt() {
			return getRuleContext(Xa_rollback_stmtContext.class,0);
		}
		public Switchover_cluster_stmtContext switchover_cluster_stmt() {
			return getRuleContext(Switchover_cluster_stmtContext.class,0);
		}
		public Disconnect_cluster_stmtContext disconnect_cluster_stmt() {
			return getRuleContext(Disconnect_cluster_stmtContext.class,0);
		}
		public Alter_cluster_stmtContext alter_cluster_stmt() {
			return getRuleContext(Alter_cluster_stmtContext.class,0);
		}
		public Optimize_stmtContext optimize_stmt() {
			return getRuleContext(Optimize_stmtContext.class,0);
		}
		public Dump_memory_stmtContext dump_memory_stmt() {
			return getRuleContext(Dump_memory_stmtContext.class,0);
		}
		public Protection_mode_stmtContext protection_mode_stmt() {
			return getRuleContext(Protection_mode_stmtContext.class,0);
		}
		public Get_diagnostics_stmtContext get_diagnostics_stmt() {
			return getRuleContext(Get_diagnostics_stmtContext.class,0);
		}
		public Pl_expr_stmtContext pl_expr_stmt() {
			return getRuleContext(Pl_expr_stmtContext.class,0);
		}
		public Method_optContext method_opt() {
			return getRuleContext(Method_optContext.class,0);
		}
		public Switchover_tenant_stmtContext switchover_tenant_stmt() {
			return getRuleContext(Switchover_tenant_stmtContext.class,0);
		}
		public Recover_tenant_stmtContext recover_tenant_stmt() {
			return getRuleContext(Recover_tenant_stmtContext.class,0);
		}
		public Transfer_partition_stmtContext transfer_partition_stmt() {
			return getRuleContext(Transfer_partition_stmtContext.class,0);
		}
		public Create_tenant_snapshot_stmtContext create_tenant_snapshot_stmt() {
			return getRuleContext(Create_tenant_snapshot_stmtContext.class,0);
		}
		public Drop_tenant_snapshot_stmtContext drop_tenant_snapshot_stmt() {
			return getRuleContext(Drop_tenant_snapshot_stmtContext.class,0);
		}
		public Clone_tenant_stmtContext clone_tenant_stmt() {
			return getRuleContext(Clone_tenant_stmtContext.class,0);
		}
		public Mock_stmtContext mock_stmt() {
			return getRuleContext(Mock_stmtContext.class,0);
		}
		public Service_name_stmtContext service_name_stmt() {
			return getRuleContext(Service_name_stmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitStmt(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stmt);
		try {
			setState(1726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1620);
				select_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1621);
				insert_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1622);
				create_table_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1623);
				create_function_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1624);
				drop_function_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1625);
				drop_procedure_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1626);
				drop_trigger_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1627);
				create_table_like_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1628);
				create_database_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1629);
				drop_database_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1630);
				alter_database_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1631);
				use_database_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1632);
				update_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1633);
				delete_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1634);
				drop_table_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1635);
				drop_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1636);
				explain_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1637);
				create_outline_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1638);
				alter_outline_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1639);
				drop_outline_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1640);
				show_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1641);
				prepare_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1642);
				variable_set_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1643);
				execute_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1644);
				alter_table_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1645);
				alter_system_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1646);
				audit_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1647);
				deallocate_prepare_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1648);
				create_user_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1649);
				drop_user_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1650);
				create_role_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1651);
				drop_role_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1652);
				set_role_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1653);
				set_password_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1654);
				rename_user_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1655);
				lock_user_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1656);
				grant_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1657);
				revoke_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1658);
				begin_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1659);
				commit_stmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1660);
				rollback_stmt();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1661);
				create_tablespace_stmt();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1662);
				drop_tablespace_stmt();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1663);
				alter_tablespace_stmt();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1664);
				rotate_master_key_stmt();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1665);
				create_index_stmt();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1666);
				drop_index_stmt();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1667);
				kill_stmt();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1668);
				create_mlog_stmt();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1669);
				drop_mlog_stmt();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1670);
				help_stmt();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1671);
				create_view_stmt();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1672);
				create_mview_stmt();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1673);
				create_tenant_stmt();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1674);
				create_standby_tenant_stmt();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1675);
				alter_tenant_stmt();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1676);
				drop_tenant_stmt();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1677);
				create_restore_point_stmt();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1678);
				drop_restore_point_stmt();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1679);
				create_resource_stmt();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1680);
				alter_resource_stmt();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1681);
				drop_resource_stmt();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1682);
				set_names_stmt();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1683);
				set_charset_stmt();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1684);
				create_tablegroup_stmt();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1685);
				drop_tablegroup_stmt();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1686);
				alter_tablegroup_stmt();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1687);
				rename_table_stmt();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1688);
				truncate_table_stmt();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1689);
				set_transaction_stmt();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1690);
				create_savepoint_stmt();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1691);
				rollback_savepoint_stmt();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1692);
				release_savepoint_stmt();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1693);
				lock_tables_stmt();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1694);
				unlock_tables_stmt();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1695);
				flashback_stmt();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1696);
				purge_stmt();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1697);
				analyze_stmt();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1698);
				load_data_stmt();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1699);
				create_dblink_stmt();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1700);
				drop_dblink_stmt();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1701);
				create_sequence_stmt();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1702);
				alter_sequence_stmt();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1703);
				drop_sequence_stmt();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1704);
				xa_begin_stmt();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1705);
				xa_end_stmt();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1706);
				xa_prepare_stmt();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1707);
				xa_commit_stmt();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1708);
				xa_rollback_stmt();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1709);
				switchover_cluster_stmt();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1710);
				disconnect_cluster_stmt();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1711);
				alter_cluster_stmt();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1712);
				optimize_stmt();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1713);
				dump_memory_stmt();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1714);
				protection_mode_stmt();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1715);
				get_diagnostics_stmt();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1716);
				pl_expr_stmt();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1717);
				method_opt();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1718);
				switchover_tenant_stmt();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1719);
				recover_tenant_stmt();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1720);
				transfer_partition_stmt();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1721);
				create_tenant_snapshot_stmt();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1722);
				drop_tenant_snapshot_stmt();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1723);
				clone_tenant_stmt();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1724);
				mock_stmt();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1725);
				service_name_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pl_expr_stmtContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(OBParser.DO, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Pl_expr_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pl_expr_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPl_expr_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPl_expr_stmt(this);
		}
	}

	public final Pl_expr_stmtContext pl_expr_stmt() throws RecognitionException {
		Pl_expr_stmtContext _localctx = new Pl_expr_stmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_pl_expr_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728);
			match(DO);
			setState(1729);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchover_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public Switchover_clauseContext switchover_clause() {
			return getRuleContext(Switchover_clauseContext.class,0);
		}
		public Switchover_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchover_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSwitchover_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSwitchover_tenant_stmt(this);
		}
	}

	public final Switchover_tenant_stmtContext switchover_tenant_stmt() throws RecognitionException {
		Switchover_tenant_stmtContext _localctx = new Switchover_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_switchover_tenant_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			match(ALTER);
			setState(1732);
			match(SYSTEM);
			setState(1733);
			switchover_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchover_clauseContext extends ParserRuleContext {
		public TerminalNode ACTIVATE() { return getToken(OBParser.ACTIVATE, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public TerminalNode SWITCHOVER() { return getToken(OBParser.SWITCHOVER, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public Switchover_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchover_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSwitchover_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSwitchover_clause(this);
		}
	}

	public final Switchover_clauseContext switchover_clause() throws RecognitionException {
		Switchover_clauseContext _localctx = new Switchover_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_switchover_clause);
		int _la;
		try {
			setState(1752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1735);
				match(ACTIVATE);
				setState(1736);
				match(STANDBY);
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(1737);
					tenant_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1740);
				match(SWITCHOVER);
				setState(1741);
				match(TO);
				setState(1742);
				match(PRIMARY);
				setState(1744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(1743);
					tenant_name();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1746);
				match(SWITCHOVER);
				setState(1747);
				match(TO);
				setState(1748);
				match(STANDBY);
				setState(1750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(1749);
					tenant_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recover_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode RECOVER() { return getToken(OBParser.RECOVER, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public Recover_point_clauseContext recover_point_clause() {
			return getRuleContext(Recover_point_clauseContext.class,0);
		}
		public Recover_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recover_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRecover_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRecover_tenant_stmt(this);
		}
	}

	public final Recover_tenant_stmtContext recover_tenant_stmt() throws RecognitionException {
		Recover_tenant_stmtContext _localctx = new Recover_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_recover_tenant_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(ALTER);
			setState(1755);
			match(SYSTEM);
			setState(1756);
			match(RECOVER);
			setState(1757);
			match(STANDBY);
			setState(1759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TENANT) {
				{
				setState(1758);
				tenant_name();
				}
			}

			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL || _la==CANCEL) {
				{
				setState(1761);
				recover_point_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recover_point_clauseContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(OBParser.UNTIL, 0); }
		public TerminalNode TIME() { return getToken(OBParser.TIME, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode SCN() { return getToken(OBParser.SCN, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode UNLIMITED() { return getToken(OBParser.UNLIMITED, 0); }
		public TerminalNode CANCEL() { return getToken(OBParser.CANCEL, 0); }
		public Recover_point_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recover_point_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRecover_point_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRecover_point_clause(this);
		}
	}

	public final Recover_point_clauseContext recover_point_clause() throws RecognitionException {
		Recover_point_clauseContext _localctx = new Recover_point_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_recover_point_clause);
		try {
			setState(1775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1764);
				match(UNTIL);
				setState(1765);
				match(TIME);
				setState(1766);
				match(COMP_EQ);
				setState(1767);
				match(STRING_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1768);
				match(UNTIL);
				setState(1769);
				match(SCN);
				setState(1770);
				match(COMP_EQ);
				setState(1771);
				match(INTNUM);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1772);
				match(UNTIL);
				setState(1773);
				match(UNLIMITED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1774);
				match(CANCEL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transfer_partition_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public Transfer_partition_clauseContext transfer_partition_clause() {
			return getRuleContext(Transfer_partition_clauseContext.class,0);
		}
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public TerminalNode CANCEL() { return getToken(OBParser.CANCEL, 0); }
		public TerminalNode TRANSFER() { return getToken(OBParser.TRANSFER, 0); }
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public Cancel_transfer_partition_clauseContext cancel_transfer_partition_clause() {
			return getRuleContext(Cancel_transfer_partition_clauseContext.class,0);
		}
		public TerminalNode BALANCE() { return getToken(OBParser.BALANCE, 0); }
		public TerminalNode JOB() { return getToken(OBParser.JOB, 0); }
		public Transfer_partition_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transfer_partition_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTransfer_partition_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTransfer_partition_stmt(this);
		}
	}

	public final Transfer_partition_stmtContext transfer_partition_stmt() throws RecognitionException {
		Transfer_partition_stmtContext _localctx = new Transfer_partition_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_transfer_partition_stmt);
		int _la;
		try {
			setState(1800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1777);
				match(ALTER);
				setState(1778);
				match(SYSTEM);
				setState(1779);
				transfer_partition_clause();
				setState(1781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(1780);
					tenant_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1783);
				match(ALTER);
				setState(1784);
				match(SYSTEM);
				setState(1785);
				match(CANCEL);
				setState(1786);
				match(TRANSFER);
				setState(1787);
				match(PARTITION);
				setState(1788);
				cancel_transfer_partition_clause();
				setState(1790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(1789);
					tenant_name();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1792);
				match(ALTER);
				setState(1793);
				match(SYSTEM);
				setState(1794);
				match(CANCEL);
				setState(1795);
				match(BALANCE);
				setState(1796);
				match(JOB);
				setState(1798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(1797);
					tenant_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transfer_partition_clauseContext extends ParserRuleContext {
		public TerminalNode TRANSFER() { return getToken(OBParser.TRANSFER, 0); }
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public Part_infoContext part_info() {
			return getRuleContext(Part_infoContext.class,0);
		}
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode LS() { return getToken(OBParser.LS, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Transfer_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transfer_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTransfer_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTransfer_partition_clause(this);
		}
	}

	public final Transfer_partition_clauseContext transfer_partition_clause() throws RecognitionException {
		Transfer_partition_clauseContext _localctx = new Transfer_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_transfer_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1802);
			match(TRANSFER);
			setState(1803);
			match(PARTITION);
			setState(1804);
			part_info();
			setState(1805);
			match(TO);
			setState(1806);
			match(LS);
			setState(1807);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Part_infoContext extends ParserRuleContext {
		public TerminalNode TABLE_ID() { return getToken(OBParser.TABLE_ID, 0); }
		public List<Opt_equal_markContext> opt_equal_mark() {
			return getRuleContexts(Opt_equal_markContext.class);
		}
		public Opt_equal_markContext opt_equal_mark(int i) {
			return getRuleContext(Opt_equal_markContext.class,i);
		}
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode OBJECT_ID() { return getToken(OBParser.OBJECT_ID, 0); }
		public Part_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_part_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPart_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPart_info(this);
		}
	}

	public final Part_infoContext part_info() throws RecognitionException {
		Part_infoContext _localctx = new Part_infoContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_part_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1809);
			match(TABLE_ID);
			setState(1810);
			opt_equal_mark();
			setState(1811);
			match(INTNUM);
			setState(1812);
			match(Comma);
			setState(1813);
			match(OBJECT_ID);
			setState(1814);
			opt_equal_mark();
			setState(1815);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cancel_transfer_partition_clauseContext extends ParserRuleContext {
		public Part_infoContext part_info() {
			return getRuleContext(Part_infoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public Cancel_transfer_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cancel_transfer_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCancel_transfer_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCancel_transfer_partition_clause(this);
		}
	}

	public final Cancel_transfer_partition_clauseContext cancel_transfer_partition_clause() throws RecognitionException {
		Cancel_transfer_partition_clauseContext _localctx = new Cancel_transfer_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_cancel_transfer_partition_clause);
		try {
			setState(1819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1817);
				part_info();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1818);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExpr_list(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			expr(0);
			setState(1826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(1822);
				match(Comma);
				setState(1823);
				expr(0);
				}
				}
				setState(1828);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_as_listContext extends ParserRuleContext {
		public List<Expr_with_opt_aliasContext> expr_with_opt_alias() {
			return getRuleContexts(Expr_with_opt_aliasContext.class);
		}
		public Expr_with_opt_aliasContext expr_with_opt_alias(int i) {
			return getRuleContext(Expr_with_opt_aliasContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Expr_as_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_as_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExpr_as_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExpr_as_list(this);
		}
	}

	public final Expr_as_listContext expr_as_list() throws RecognitionException {
		Expr_as_listContext _localctx = new Expr_as_listContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_expr_as_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1829);
			expr_with_opt_alias();
			setState(1834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(1830);
				match(Comma);
				setState(1831);
				expr_with_opt_alias();
				}
				}
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_with_opt_aliasContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Column_labelContext column_label() {
			return getRuleContext(Column_labelContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Expr_with_opt_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_with_opt_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExpr_with_opt_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExpr_with_opt_alias(this);
		}
	}

	public final Expr_with_opt_aliasContext expr_with_opt_alias() throws RecognitionException {
		Expr_with_opt_aliasContext _localctx = new Expr_with_opt_aliasContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_expr_with_opt_alias);
		int _la;
		try {
			setState(1846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1837);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1838);
				expr(0);
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1839);
					match(AS);
					}
				}

				setState(1844);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case ACCESS:
				case OBJECT_ID:
				case AGAINST:
				case ALWAYS:
				case NAMESPACE:
				case CIPHER:
				case COLUMNS:
				case LS:
				case CYCLE:
				case NUMBER:
				case ROWID:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case FIELDS:
				case FULL:
				case ID:
				case INCLUDING:
				case LIB:
				case ORDINALITY:
				case ISSUER:
				case LANGUAGE:
				case BISON_LIST:
				case LOCAL:
				case UNLIMITED:
				case MERGE:
				case MODE:
				case IOPS_WEIGHT:
				case PARSER:
				case MIN_MAX:
				case PUBLIC:
				case ROWS:
				case REJECT:
				case PLUS:
				case SUBJECT:
				case SYSDATE:
				case TEXT:
				case CALIBRATION:
				case LINE_DELIMITER:
				case GEOMCOLLECTION:
				case QUERY_RESPONSE_TIME:
				case REDUNDANCY:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case X509:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case STORE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case NAME_OB:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(1842);
					column_label();
					}
					break;
				case STRING_VALUE:
					{
					setState(1843);
					match(STRING_VALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_refContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> Dot() { return getTokens(OBParser.Dot); }
		public TerminalNode Dot(int i) {
			return getToken(OBParser.Dot, i);
		}
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public List<Mysql_reserved_keywordContext> mysql_reserved_keyword() {
			return getRuleContexts(Mysql_reserved_keywordContext.class);
		}
		public Mysql_reserved_keywordContext mysql_reserved_keyword(int i) {
			return getRuleContext(Mysql_reserved_keywordContext.class,i);
		}
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public Column_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_ref(this);
		}
	}

	public final Column_refContext column_ref() throws RecognitionException {
		Column_refContext _localctx = new Column_refContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_column_ref);
		int _la;
		try {
			setState(1867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1848);
				column_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					setState(1850);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Dot) {
						{
						setState(1849);
						match(Dot);
						}
					}

					}
					break;
				case 2:
					{
					setState(1852);
					relation_name();
					setState(1853);
					match(Dot);
					}
					break;
				}
				setState(1859);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case ACCESS:
				case OBJECT_ID:
				case AGAINST:
				case ALWAYS:
				case NAMESPACE:
				case CIPHER:
				case COLUMNS:
				case LS:
				case CYCLE:
				case NUMBER:
				case ROWID:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case FIELDS:
				case FULL:
				case ID:
				case INCLUDING:
				case LIB:
				case ORDINALITY:
				case ISSUER:
				case LANGUAGE:
				case BISON_LIST:
				case LOCAL:
				case UNLIMITED:
				case MERGE:
				case MODE:
				case IOPS_WEIGHT:
				case PARSER:
				case MIN_MAX:
				case PUBLIC:
				case ROWS:
				case REJECT:
				case PLUS:
				case SUBJECT:
				case SYSDATE:
				case TEXT:
				case CALIBRATION:
				case LINE_DELIMITER:
				case GEOMCOLLECTION:
				case QUERY_RESPONSE_TIME:
				case REDUNDANCY:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case X509:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case STORE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case NAME_OB:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(1857);
					relation_name();
					}
					break;
				case ACCESSIBLE:
				case ADD:
				case ALTER:
				case AND:
				case ANALYZE:
				case AS:
				case ASENSITIVE:
				case ASC:
				case BETWEEN:
				case BEFORE:
				case BIGINT:
				case BINARY:
				case BLOB:
				case BY:
				case CALL:
				case CASCADE:
				case CASE:
				case CHANGE:
				case CHARACTER:
				case CHECK:
				case CONDITION:
				case CONSTRAINT:
				case CONTINUE:
				case CONVERT:
				case COLLATE:
				case COLUMN:
				case CREATE:
				case CROSS:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case DAY_HOUR:
				case DAY_MICROSECOND:
				case DAY_MINUTE:
				case DAY_SECOND:
				case DATABASE:
				case DATABASES:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DELAYED:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETERMINISTIC:
				case DIV:
				case DISTINCTROW:
				case DOUBLE:
				case DROP:
				case DUAL:
				case EACH:
				case ENCLOSED:
				case ELSE:
				case ELSEIF:
				case ESCAPED:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case FETCH:
				case FOREIGN:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case FOR:
				case FORCE:
				case FULLTEXT:
				case GET:
				case GENERATED:
				case GRANT:
				case GROUP:
				case HAVING:
				case HIGH_PRIORITY:
				case HOUR_MICROSECOND:
				case HOUR_MINUTE:
				case HOUR_SECOND:
				case IF:
				case IN:
				case INDEX:
				case INNER:
				case INFILE:
				case INOUT:
				case INSENSITIVE:
				case INTEGER:
				case INT1:
				case INT2:
				case INT3:
				case INT4:
				case INT8:
				case INTERVAL:
				case INSERT:
				case INTO:
				case IO_AFTER_GTIDS:
				case IO_BEFORE_GTIDS:
				case IS:
				case ITERATE:
				case JOIN:
				case KEY:
				case KEYS:
				case KILL:
				case LEAVE:
				case LEFT:
				case LIMIT:
				case LIKE:
				case LINEAR:
				case LINES:
				case LOAD:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LONG:
				case LONGBLOB:
				case LONGTEXT:
				case LOOP:
				case LOW_PRIORITY:
				case MASTER_BIND:
				case MASTER_SSL_VERIFY_SERVER_CERT:
				case MATCH:
				case MAXVALUE:
				case MEDIUMBLOB:
				case MEDIUMINT:
				case MEDIUMTEXT:
				case MIDDLEINT:
				case MINUTE_MICROSECOND:
				case MINUTE_SECOND:
				case MOD:
				case MODIFIES:
				case NATURAL:
				case NO_WRITE_TO_BINLOG:
				case ON:
				case OPTION:
				case OPTIMIZE:
				case OPTIONALLY:
				case OR:
				case ORDER:
				case OUT:
				case OUTER:
				case OUTFILE:
				case PROCEDURE:
				case PURGE:
				case PARTITION:
				case PRECISION:
				case PRIMARY:
				case RANGE:
				case READ:
				case READ_WRITE:
				case READS:
				case REAL:
				case RELEASE:
				case REFERENCES:
				case REGEXP:
				case RENAME:
				case REPLACE:
				case REPEAT:
				case REQUIRE:
				case RESIGNAL:
				case RESTRICT:
				case RETURN:
				case REVOKE:
				case RIGHT:
				case SECOND_MICROSECOND:
				case SCHEMA:
				case SCHEMAS:
				case SEPARATOR:
				case SET:
				case SENSITIVE:
				case SHOW:
				case SIGNAL:
				case SMALLINT:
				case SPATIAL:
				case SPECIFIC:
				case SQL:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQL_BIG_RESULT:
				case SQL_SMALL_RESULT:
				case SSL:
				case STARTING:
				case NUMERIC:
				case STORED:
				case STRAIGHT_JOIN:
				case TERMINATED:
				case TINYBLOB:
				case TINYINT:
				case TINYTEXT:
				case TABLE:
				case THEN:
				case TO:
				case TRIGGER:
				case UNDO:
				case UNION:
				case UNLOCK:
				case UNSIGNED:
				case UPDATE:
				case USAGE:
				case USE:
				case USING:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case VALUES:
				case VARBINARY:
				case VARCHAR:
				case VARYING:
				case VIRTUAL:
				case WHERE:
				case WHILE:
				case WITH:
				case WRITE:
				case XOR:
				case YEAR_MONTH:
				case ZEROFILL:
				case NOT:
				case IGNORE:
				case VARCHARACTER:
				case RLIKE:
				case CHAR:
				case INT:
					{
					setState(1858);
					mysql_reserved_keyword();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1861);
				match(Dot);
				setState(1865);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case ACCESS:
				case OBJECT_ID:
				case AGAINST:
				case ALWAYS:
				case NAMESPACE:
				case CIPHER:
				case COLUMNS:
				case LS:
				case CYCLE:
				case NUMBER:
				case ROWID:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case FIELDS:
				case FULL:
				case ID:
				case INCLUDING:
				case LIB:
				case ORDINALITY:
				case ISSUER:
				case LANGUAGE:
				case BISON_LIST:
				case LOCAL:
				case UNLIMITED:
				case MERGE:
				case MODE:
				case IOPS_WEIGHT:
				case PARSER:
				case MIN_MAX:
				case PUBLIC:
				case ROWS:
				case REJECT:
				case PLUS:
				case SUBJECT:
				case SYSDATE:
				case TEXT:
				case CALIBRATION:
				case LINE_DELIMITER:
				case GEOMCOLLECTION:
				case QUERY_RESPONSE_TIME:
				case REDUNDANCY:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case X509:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case STORE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case NAME_OB:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(1862);
					column_name();
					}
					break;
				case ACCESSIBLE:
				case ADD:
				case ALTER:
				case AND:
				case ANALYZE:
				case AS:
				case ASENSITIVE:
				case ASC:
				case BETWEEN:
				case BEFORE:
				case BIGINT:
				case BINARY:
				case BLOB:
				case BY:
				case CALL:
				case CASCADE:
				case CASE:
				case CHANGE:
				case CHARACTER:
				case CHECK:
				case CONDITION:
				case CONSTRAINT:
				case CONTINUE:
				case CONVERT:
				case COLLATE:
				case COLUMN:
				case CREATE:
				case CROSS:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case DAY_HOUR:
				case DAY_MICROSECOND:
				case DAY_MINUTE:
				case DAY_SECOND:
				case DATABASE:
				case DATABASES:
				case DECIMAL:
				case DECLARE:
				case DEFAULT:
				case DELAYED:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DETERMINISTIC:
				case DIV:
				case DISTINCTROW:
				case DOUBLE:
				case DROP:
				case DUAL:
				case EACH:
				case ENCLOSED:
				case ELSE:
				case ELSEIF:
				case ESCAPED:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case FETCH:
				case FOREIGN:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case FOR:
				case FORCE:
				case FULLTEXT:
				case GET:
				case GENERATED:
				case GRANT:
				case GROUP:
				case HAVING:
				case HIGH_PRIORITY:
				case HOUR_MICROSECOND:
				case HOUR_MINUTE:
				case HOUR_SECOND:
				case IF:
				case IN:
				case INDEX:
				case INNER:
				case INFILE:
				case INOUT:
				case INSENSITIVE:
				case INTEGER:
				case INT1:
				case INT2:
				case INT3:
				case INT4:
				case INT8:
				case INTERVAL:
				case INSERT:
				case INTO:
				case IO_AFTER_GTIDS:
				case IO_BEFORE_GTIDS:
				case IS:
				case ITERATE:
				case JOIN:
				case KEY:
				case KEYS:
				case KILL:
				case LEAVE:
				case LEFT:
				case LIMIT:
				case LIKE:
				case LINEAR:
				case LINES:
				case LOAD:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LONG:
				case LONGBLOB:
				case LONGTEXT:
				case LOOP:
				case LOW_PRIORITY:
				case MASTER_BIND:
				case MASTER_SSL_VERIFY_SERVER_CERT:
				case MATCH:
				case MAXVALUE:
				case MEDIUMBLOB:
				case MEDIUMINT:
				case MEDIUMTEXT:
				case MIDDLEINT:
				case MINUTE_MICROSECOND:
				case MINUTE_SECOND:
				case MOD:
				case MODIFIES:
				case NATURAL:
				case NO_WRITE_TO_BINLOG:
				case ON:
				case OPTION:
				case OPTIMIZE:
				case OPTIONALLY:
				case OR:
				case ORDER:
				case OUT:
				case OUTER:
				case OUTFILE:
				case PROCEDURE:
				case PURGE:
				case PARTITION:
				case PRECISION:
				case PRIMARY:
				case RANGE:
				case READ:
				case READ_WRITE:
				case READS:
				case REAL:
				case RELEASE:
				case REFERENCES:
				case REGEXP:
				case RENAME:
				case REPLACE:
				case REPEAT:
				case REQUIRE:
				case RESIGNAL:
				case RESTRICT:
				case RETURN:
				case REVOKE:
				case RIGHT:
				case SECOND_MICROSECOND:
				case SCHEMA:
				case SCHEMAS:
				case SEPARATOR:
				case SET:
				case SENSITIVE:
				case SHOW:
				case SIGNAL:
				case SMALLINT:
				case SPATIAL:
				case SPECIFIC:
				case SQL:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQL_BIG_RESULT:
				case SQL_SMALL_RESULT:
				case SSL:
				case STARTING:
				case NUMERIC:
				case STORED:
				case STRAIGHT_JOIN:
				case TERMINATED:
				case TINYBLOB:
				case TINYINT:
				case TINYTEXT:
				case TABLE:
				case THEN:
				case TO:
				case TRIGGER:
				case UNDO:
				case UNION:
				case UNLOCK:
				case UNSIGNED:
				case UPDATE:
				case USAGE:
				case USE:
				case USING:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case VALUES:
				case VARBINARY:
				case VARCHAR:
				case VARYING:
				case VIRTUAL:
				case WHERE:
				case WHILE:
				case WITH:
				case WRITE:
				case XOR:
				case YEAR_MONTH:
				case ZEROFILL:
				case NOT:
				case IGNORE:
				case VARCHARACTER:
				case RLIKE:
				case CHAR:
				case INT:
					{
					setState(1863);
					mysql_reserved_keyword();
					}
					break;
				case Star:
					{
					setState(1864);
					match(Star);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Complex_string_literalContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Charset_introducerContext charset_introducer() {
			return getRuleContext(Charset_introducerContext.class,0);
		}
		public TerminalNode PARSER_SYNTAX_ERROR() { return getToken(OBParser.PARSER_SYNTAX_ERROR, 0); }
		public String_val_listContext string_val_list() {
			return getRuleContext(String_val_listContext.class,0);
		}
		public TerminalNode NATIONAL_LITERAL() { return getToken(OBParser.NATIONAL_LITERAL, 0); }
		public Complex_string_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complex_string_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterComplex_string_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitComplex_string_literal(this);
		}
	}

	public final Complex_string_literalContext complex_string_literal() throws RecognitionException {
		Complex_string_literalContext _localctx = new Complex_string_literalContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_complex_string_literal);
		int _la;
		try {
			setState(1879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620))) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & ((1L << (UnderlineUTF8 - 357)) | (1L << (UnderlineUTF8MB4 - 357)) | (1L << (UnderlineGBK - 357)) | (1L << (UnderlineGB18030 - 357)) | (1L << (UnderlineBINARY - 357)) | (1L << (UnderlineUTF16 - 357)) | (1L << (UnderlineLATIN1 - 357)) | (1L << (UnderlineGB18030_2022 - 357)))) != 0)) {
					{
					setState(1869);
					charset_introducer();
					}
				}

				setState(1872);
				match(STRING_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1873);
				charset_introducer();
				setState(1874);
				match(PARSER_SYNTAX_ERROR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1876);
				match(STRING_VALUE);
				setState(1877);
				string_val_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1878);
				match(NATIONAL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Charset_introducerContext extends ParserRuleContext {
		public TerminalNode UnderlineUTF8() { return getToken(OBParser.UnderlineUTF8, 0); }
		public TerminalNode UnderlineUTF8MB4() { return getToken(OBParser.UnderlineUTF8MB4, 0); }
		public TerminalNode UnderlineUTF8MB3() { return getToken(OBParser.UnderlineUTF8MB3, 0); }
		public TerminalNode UnderlineBINARY() { return getToken(OBParser.UnderlineBINARY, 0); }
		public TerminalNode UnderlineGBK() { return getToken(OBParser.UnderlineGBK, 0); }
		public TerminalNode UnderlineLATIN1() { return getToken(OBParser.UnderlineLATIN1, 0); }
		public TerminalNode UnderlineASCII() { return getToken(OBParser.UnderlineASCII, 0); }
		public TerminalNode UnderlineTIS620() { return getToken(OBParser.UnderlineTIS620, 0); }
		public TerminalNode UnderlineGB18030() { return getToken(OBParser.UnderlineGB18030, 0); }
		public TerminalNode UnderlineGB18030_2022() { return getToken(OBParser.UnderlineGB18030_2022, 0); }
		public TerminalNode UnderlineUTF16() { return getToken(OBParser.UnderlineUTF16, 0); }
		public Charset_introducerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset_introducer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCharset_introducer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCharset_introducer(this);
		}
	}

	public final Charset_introducerContext charset_introducer() throws RecognitionException {
		Charset_introducerContext _localctx = new Charset_introducerContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_charset_introducer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1881);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620))) != 0) || ((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & ((1L << (UnderlineUTF8 - 357)) | (1L << (UnderlineUTF8MB4 - 357)) | (1L << (UnderlineGBK - 357)) | (1L << (UnderlineGB18030 - 357)) | (1L << (UnderlineBINARY - 357)) | (1L << (UnderlineUTF16 - 357)) | (1L << (UnderlineLATIN1 - 357)) | (1L << (UnderlineGB18030_2022 - 357)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public Complex_string_literalContext complex_string_literal() {
			return getRuleContext(Complex_string_literalContext.class,0);
		}
		public TerminalNode DATE_VALUE() { return getToken(OBParser.DATE_VALUE, 0); }
		public TerminalNode TIMESTAMP_VALUE() { return getToken(OBParser.TIMESTAMP_VALUE, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode HEX_STRING_VALUE() { return getToken(OBParser.HEX_STRING_VALUE, 0); }
		public TerminalNode APPROXNUM() { return getToken(OBParser.APPROXNUM, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode PARSER_SYNTAX_ERROR() { return getToken(OBParser.PARSER_SYNTAX_ERROR, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLiteral(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_literal);
		try {
			setState(1893);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UnderlineUTF8MB3:
			case UnderlineASCII:
			case UnderlineTIS620:
			case UnderlineUTF8:
			case UnderlineUTF8MB4:
			case UnderlineGBK:
			case UnderlineGB18030:
			case UnderlineBINARY:
			case UnderlineUTF16:
			case UnderlineLATIN1:
			case UnderlineGB18030_2022:
			case NATIONAL_LITERAL:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1883);
				complex_string_literal();
				}
				break;
			case DATE_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1884);
				match(DATE_VALUE);
				}
				break;
			case TIMESTAMP_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1885);
				match(TIMESTAMP_VALUE);
				}
				break;
			case INTNUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(1886);
				match(INTNUM);
				}
				break;
			case HEX_STRING_VALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1887);
				match(HEX_STRING_VALUE);
				}
				break;
			case APPROXNUM:
				enterOuterAlt(_localctx, 6);
				{
				setState(1888);
				match(APPROXNUM);
				}
				break;
			case DECIMAL_VAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(1889);
				match(DECIMAL_VAL);
				}
				break;
			case BOOL_VALUE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1890);
				match(BOOL_VALUE);
				}
				break;
			case NULLX:
				enterOuterAlt(_localctx, 9);
				{
				setState(1891);
				match(NULLX);
				}
				break;
			case PARSER_SYNTAX_ERROR:
				enterOuterAlt(_localctx, 10);
				{
				setState(1892);
				match(PARSER_SYNTAX_ERROR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_literalContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public Number_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNumber_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNumber_literal(this);
		}
	}

	public final Number_literalContext number_literal() throws RecognitionException {
		Number_literalContext _localctx = new Number_literalContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_number_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1895);
			_la = _input.LA(1);
			if ( !(_la==INTNUM || _la==DECIMAL_VAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_constContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode SYSTEM_VARIABLE() { return getToken(OBParser.SYSTEM_VARIABLE, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(OBParser.QUESTIONMARK, 0); }
		public Global_or_session_aliasContext global_or_session_alias() {
			return getRuleContext(Global_or_session_aliasContext.class,0);
		}
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Expr_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExpr_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExpr_const(this);
		}
	}

	public final Expr_constContext expr_const() throws RecognitionException {
		Expr_constContext _localctx = new Expr_constContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_expr_const);
		try {
			setState(1904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UnderlineUTF8MB3:
			case UnderlineASCII:
			case UnderlineTIS620:
			case UnderlineUTF8:
			case UnderlineUTF8MB4:
			case UnderlineGBK:
			case UnderlineGB18030:
			case UnderlineBINARY:
			case UnderlineUTF16:
			case UnderlineLATIN1:
			case UnderlineGB18030_2022:
			case NULLX:
			case INTNUM:
			case TIMESTAMP_VALUE:
			case APPROXNUM:
			case NATIONAL_LITERAL:
			case DECIMAL_VAL:
			case BOOL_VALUE:
			case PARSER_SYNTAX_ERROR:
			case HEX_STRING_VALUE:
			case DATE_VALUE:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1897);
				literal();
				}
				break;
			case SYSTEM_VARIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1898);
				match(SYSTEM_VARIABLE);
				}
				break;
			case QUESTIONMARK:
				enterOuterAlt(_localctx, 3);
				{
				setState(1899);
				match(QUESTIONMARK);
				}
				break;
			case GLOBAL_ALIAS:
			case SESSION_ALIAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(1900);
				global_or_session_alias();
				setState(1901);
				match(Dot);
				setState(1902);
				column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conf_constContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode DATE_VALUE() { return getToken(OBParser.DATE_VALUE, 0); }
		public TerminalNode TIMESTAMP_VALUE() { return getToken(OBParser.TIMESTAMP_VALUE, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public TerminalNode APPROXNUM() { return getToken(OBParser.APPROXNUM, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode SYSTEM_VARIABLE() { return getToken(OBParser.SYSTEM_VARIABLE, 0); }
		public Global_or_session_aliasContext global_or_session_alias() {
			return getRuleContext(Global_or_session_aliasContext.class,0);
		}
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Conf_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conf_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterConf_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitConf_const(this);
		}
	}

	public final Conf_constContext conf_const() throws RecognitionException {
		Conf_constContext _localctx = new Conf_constContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_conf_const);
		int _la;
		try {
			setState(1925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1906);
				match(STRING_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1907);
				match(DATE_VALUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1908);
				match(TIMESTAMP_VALUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Minus) {
					{
					setState(1909);
					match(Minus);
					}
				}

				setState(1912);
				match(INTNUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1913);
				match(APPROXNUM);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Minus) {
					{
					setState(1914);
					match(Minus);
					}
				}

				setState(1917);
				match(DECIMAL_VAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1918);
				match(BOOL_VALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1919);
				match(NULLX);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1920);
				match(SYSTEM_VARIABLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1921);
				global_or_session_alias();
				setState(1922);
				match(Dot);
				setState(1923);
				column_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_or_session_aliasContext extends ParserRuleContext {
		public TerminalNode GLOBAL_ALIAS() { return getToken(OBParser.GLOBAL_ALIAS, 0); }
		public TerminalNode SESSION_ALIAS() { return getToken(OBParser.SESSION_ALIAS, 0); }
		public Global_or_session_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_or_session_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGlobal_or_session_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGlobal_or_session_alias(this);
		}
	}

	public final Global_or_session_aliasContext global_or_session_alias() throws RecognitionException {
		Global_or_session_aliasContext _localctx = new Global_or_session_aliasContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_global_or_session_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1927);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_ALIAS || _la==SESSION_ALIAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_priContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Bool_priContext bool_pri() {
			return getRuleContext(Bool_priContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode COMP_GE() { return getToken(OBParser.COMP_GE, 0); }
		public TerminalNode COMP_GT() { return getToken(OBParser.COMP_GT, 0); }
		public TerminalNode COMP_LE() { return getToken(OBParser.COMP_LE, 0); }
		public TerminalNode COMP_LT() { return getToken(OBParser.COMP_LT, 0); }
		public TerminalNode COMP_NE() { return getToken(OBParser.COMP_NE, 0); }
		public TerminalNode COMP_NSEQ() { return getToken(OBParser.COMP_NSEQ, 0); }
		public TerminalNode IS() { return getToken(OBParser.IS, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(OBParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(OBParser.SOME, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Any_exprContext any_expr() {
			return getRuleContext(Any_exprContext.class,0);
		}
		public Bool_priContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_pri; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBool_pri(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBool_pri(this);
		}
	}

	public final Bool_priContext bool_pri() throws RecognitionException {
		return bool_pri(0);
	}

	private Bool_priContext bool_pri(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bool_priContext _localctx = new Bool_priContext(_ctx, _parentState);
		Bool_priContext _prevctx = _localctx;
		int _startState = 46;
		enterRecursionRule(_localctx, 46, RULE_bool_pri, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1930);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(1958);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1956);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						_localctx = new Bool_priContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_pri);
						setState(1932);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1933);
						_la = _input.LA(1);
						if ( !(((((_la - 1169)) & ~0x3f) == 0 && ((1L << (_la - 1169)) & ((1L << (COMP_EQ - 1169)) | (1L << (COMP_NSEQ - 1169)) | (1L << (COMP_GE - 1169)) | (1L << (COMP_GT - 1169)) | (1L << (COMP_LE - 1169)) | (1L << (COMP_LT - 1169)) | (1L << (COMP_NE - 1169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1934);
						predicate();
						}
						break;
					case 2:
						{
						_localctx = new Bool_priContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_pri);
						setState(1935);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1936);
						match(IS);
						setState(1938);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(1937);
							not();
							}
						}

						setState(1940);
						match(NULLX);
						}
						break;
					case 3:
						{
						_localctx = new Bool_priContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_pri);
						setState(1941);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1942);
						_la = _input.LA(1);
						if ( !(((((_la - 1172)) & ~0x3f) == 0 && ((1L << (_la - 1172)) & ((1L << (COMP_GE - 1172)) | (1L << (COMP_GT - 1172)) | (1L << (COMP_LE - 1172)) | (1L << (COMP_LT - 1172)) | (1L << (COMP_NE - 1172)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1943);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==SOME || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1944);
						select_with_parens();
						}
						break;
					case 4:
						{
						_localctx = new Bool_priContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_pri);
						setState(1945);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1946);
						_la = _input.LA(1);
						if ( !(((((_la - 1169)) & ~0x3f) == 0 && ((1L << (_la - 1169)) & ((1L << (COMP_EQ - 1169)) | (1L << (COMP_GE - 1169)) | (1L << (COMP_GT - 1169)) | (1L << (COMP_LE - 1169)) | (1L << (COMP_LT - 1169)) | (1L << (COMP_NE - 1169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1947);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==SOME || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1948);
						match(LeftParen);
						setState(1949);
						select_no_parens();
						setState(1950);
						match(RightParen);
						}
						break;
					case 5:
						{
						_localctx = new Bool_priContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_pri);
						setState(1952);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(1953);
						_la = _input.LA(1);
						if ( !(((((_la - 1169)) & ~0x3f) == 0 && ((1L << (_la - 1169)) & ((1L << (COMP_EQ - 1169)) | (1L << (COMP_GE - 1169)) | (1L << (COMP_GT - 1169)) | (1L << (COMP_LE - 1169)) | (1L << (COMP_LT - 1169)) | (1L << (COMP_NE - 1169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1954);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==SOME || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1955);
						any_expr();
						}
						break;
					}
					} 
				}
				setState(1960);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<Bit_exprContext> bit_expr() {
			return getRuleContexts(Bit_exprContext.class);
		}
		public Bit_exprContext bit_expr(int i) {
			return getRuleContext(Bit_exprContext.class,i);
		}
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public In_exprContext in_expr() {
			return getRuleContext(In_exprContext.class,0);
		}
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(OBParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(OBParser.AND, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(OBParser.LIKE, 0); }
		public List<Simple_exprContext> simple_expr() {
			return getRuleContexts(Simple_exprContext.class);
		}
		public Simple_exprContext simple_expr(int i) {
			return getRuleContext(Simple_exprContext.class,i);
		}
		public List<String_val_listContext> string_val_list() {
			return getRuleContexts(String_val_listContext.class);
		}
		public String_val_listContext string_val_list(int i) {
			return getRuleContext(String_val_listContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(OBParser.ESCAPE, 0); }
		public TerminalNode REGEXP() { return getToken(OBParser.REGEXP, 0); }
		public TerminalNode MEMBER() { return getToken(OBParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(OBParser.OF, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_predicate);
		int _la;
		try {
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1961);
				bit_expr(0);
				setState(1963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1962);
					not();
					}
				}

				setState(1965);
				match(IN);
				setState(1966);
				in_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1968);
				bit_expr(0);
				setState(1970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1969);
					not();
					}
				}

				setState(1972);
				match(BETWEEN);
				setState(1973);
				bit_expr(0);
				setState(1974);
				match(AND);
				setState(1975);
				predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1977);
				bit_expr(0);
				setState(1979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1978);
					not();
					}
				}

				setState(1981);
				match(LIKE);
				setState(1984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1982);
					simple_expr(0);
					}
					break;
				case 2:
					{
					setState(1983);
					string_val_list();
					}
					break;
				}
				setState(1992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(1988);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
					case 1:
						{
						setState(1986);
						match(ESCAPE);
						setState(1987);
						simple_expr(0);
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(1990);
					match(ESCAPE);
					setState(1991);
					string_val_list();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1994);
				bit_expr(0);
				setState(1996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1995);
					not();
					}
				}

				setState(1998);
				match(REGEXP);
				setState(2001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(1999);
					string_val_list();
					}
					break;
				case 2:
					{
					setState(2000);
					bit_expr(0);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2003);
				bit_expr(0);
				setState(2004);
				match(MEMBER);
				setState(2005);
				match(OF);
				setState(2006);
				match(LeftParen);
				setState(2007);
				simple_expr(0);
				setState(2008);
				match(RightParen);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2010);
				bit_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_val_listContext extends ParserRuleContext {
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public String_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterString_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitString_val_list(this);
		}
	}

	public final String_val_listContext string_val_list() throws RecognitionException {
		String_val_listContext _localctx = new String_val_listContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_string_val_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2014); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2013);
					match(STRING_VALUE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2016); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,44,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_exprContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Date_unitContext date_unit() {
			return getRuleContext(Date_unitContext.class,0);
		}
		public TerminalNode Plus() { return getToken(OBParser.Plus, 0); }
		public List<Bit_exprContext> bit_expr() {
			return getRuleContexts(Bit_exprContext.class);
		}
		public Bit_exprContext bit_expr(int i) {
			return getRuleContext(Bit_exprContext.class,i);
		}
		public Simple_exprContext simple_expr() {
			return getRuleContext(Simple_exprContext.class,0);
		}
		public TerminalNode And() { return getToken(OBParser.And, 0); }
		public TerminalNode Caret() { return getToken(OBParser.Caret, 0); }
		public TerminalNode DIV() { return getToken(OBParser.DIV, 0); }
		public TerminalNode Div() { return getToken(OBParser.Div, 0); }
		public TerminalNode MOD() { return getToken(OBParser.MOD, 0); }
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public TerminalNode Mod() { return getToken(OBParser.Mod, 0); }
		public TerminalNode Or() { return getToken(OBParser.Or, 0); }
		public TerminalNode SHIFT_LEFT() { return getToken(OBParser.SHIFT_LEFT, 0); }
		public TerminalNode SHIFT_RIGHT() { return getToken(OBParser.SHIFT_RIGHT, 0); }
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public Bit_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBit_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBit_expr(this);
		}
	}

	public final Bit_exprContext bit_expr() throws RecognitionException {
		return bit_expr(0);
	}

	private Bit_exprContext bit_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bit_exprContext _localctx = new Bit_exprContext(_ctx, _parentState);
		Bit_exprContext _prevctx = _localctx;
		int _startState = 52;
		enterRecursionRule(_localctx, 52, RULE_bit_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				setState(2019);
				match(INTERVAL);
				setState(2020);
				expr(0);
				setState(2021);
				date_unit();
				setState(2022);
				match(Plus);
				setState(2023);
				bit_expr(4);
				}
				break;
			case 2:
				{
				setState(2025);
				simple_expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2039);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2037);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
					case 1:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(2028);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2029);
						_la = _input.LA(1);
						if ( !(_la==DIV || _la==MOD || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (And - 1152)) | (1L << (Or - 1152)) | (1L << (Star - 1152)) | (1L << (Minus - 1152)) | (1L << (Div - 1152)) | (1L << (Caret - 1152)) | (1L << (Mod - 1152)) | (1L << (SHIFT_LEFT - 1152)) | (1L << (SHIFT_RIGHT - 1152)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2030);
						bit_expr(3);
						}
						break;
					case 2:
						{
						_localctx = new Bit_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bit_expr);
						setState(2031);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2032);
						_la = _input.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2033);
						match(INTERVAL);
						setState(2034);
						expr(0);
						setState(2035);
						date_unit();
						}
						break;
					}
					} 
				}
				setState(2041);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,47,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Simple_exprContext extends ParserRuleContext {
		public Column_refContext column_ref() {
			return getRuleContext(Column_refContext.class,0);
		}
		public Expr_constContext expr_const() {
			return getRuleContext(Expr_constContext.class,0);
		}
		public List<Simple_exprContext> simple_expr() {
			return getRuleContexts(Simple_exprContext.class);
		}
		public Simple_exprContext simple_expr(int i) {
			return getRuleContext(Simple_exprContext.class,i);
		}
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public TerminalNode Plus() { return getToken(OBParser.Plus, 0); }
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public TerminalNode Tilde() { return getToken(OBParser.Tilde, 0); }
		public TerminalNode Not() { return getToken(OBParser.Not, 0); }
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public List<TerminalNode> LeftParen() { return getTokens(OBParser.LeftParen); }
		public TerminalNode LeftParen(int i) {
			return getToken(OBParser.LeftParen, i);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public List<TerminalNode> RightParen() { return getTokens(OBParser.RightParen); }
		public TerminalNode RightParen(int i) {
			return getToken(OBParser.RightParen, i);
		}
		public TerminalNode ROW() { return getToken(OBParser.ROW, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode MATCH() { return getToken(OBParser.MATCH, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode AGAINST() { return getToken(OBParser.AGAINST, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public TerminalNode NATURAL() { return getToken(OBParser.NATURAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(OBParser.LANGUAGE, 0); }
		public TerminalNode MODE() { return getToken(OBParser.MODE, 0); }
		public TerminalNode BOOLEAN() { return getToken(OBParser.BOOLEAN, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode QUERY() { return getToken(OBParser.QUERY, 0); }
		public TerminalNode EXPANSION() { return getToken(OBParser.EXPANSION, 0); }
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public Func_exprContext func_expr() {
			return getRuleContext(Func_exprContext.class,0);
		}
		public Window_functionContext window_function() {
			return getRuleContext(Window_functionContext.class,0);
		}
		public TerminalNode LeftBrace() { return getToken(OBParser.LeftBrace, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightBrace() { return getToken(OBParser.RightBrace, 0); }
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public Complex_string_literalContext complex_string_literal() {
			return getRuleContext(Complex_string_literalContext.class,0);
		}
		public TerminalNode JSON_EXTRACT() { return getToken(OBParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_EXTRACT_UNQUOTED() { return getToken(OBParser.JSON_EXTRACT_UNQUOTED, 0); }
		public List<TerminalNode> Dot() { return getTokens(OBParser.Dot); }
		public TerminalNode Dot(int i) {
			return getToken(OBParser.Dot, i);
		}
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public TerminalNode LeftBracket() { return getToken(OBParser.LeftBracket, 0); }
		public TerminalNode RightBracket() { return getToken(OBParser.RightBracket, 0); }
		public TerminalNode CNNOP() { return getToken(OBParser.CNNOP, 0); }
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public Simple_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSimple_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSimple_expr(this);
		}
	}

	public final Simple_exprContext simple_expr() throws RecognitionException {
		return simple_expr(0);
	}

	private Simple_exprContext simple_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Simple_exprContext _localctx = new Simple_exprContext(_ctx, _parentState);
		Simple_exprContext _prevctx = _localctx;
		int _startState = 54;
		enterRecursionRule(_localctx, 54, RULE_simple_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				setState(2043);
				column_ref();
				}
				break;
			case 2:
				{
				setState(2044);
				expr_const();
				}
				break;
			case 3:
				{
				setState(2045);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NOT || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (Minus - 1152)) | (1L << (Tilde - 1152)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2046);
				simple_expr(13);
				}
				break;
			case 4:
				{
				setState(2048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(2047);
					match(ROW);
					}
				}

				setState(2050);
				match(LeftParen);
				setState(2051);
				expr_list();
				setState(2052);
				match(RightParen);
				}
				break;
			case 5:
				{
				setState(2055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS) {
					{
					setState(2054);
					match(EXISTS);
					}
				}

				setState(2057);
				select_with_parens();
				}
				break;
			case 6:
				{
				setState(2058);
				match(MATCH);
				setState(2059);
				match(LeftParen);
				setState(2060);
				column_list();
				setState(2061);
				match(RightParen);
				setState(2062);
				match(AGAINST);
				setState(2063);
				match(LeftParen);
				setState(2064);
				match(STRING_VALUE);
				setState(2080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					{
					setState(2065);
					match(IN);
					setState(2066);
					match(NATURAL);
					setState(2067);
					match(LANGUAGE);
					setState(2068);
					match(MODE);
					setState(2072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2069);
						match(WITH);
						setState(2070);
						match(QUERY);
						setState(2071);
						match(EXPANSION);
						}
					}

					}
					}
					break;
				case 2:
					{
					{
					setState(2074);
					match(IN);
					setState(2075);
					match(BOOLEAN);
					setState(2076);
					match(MODE);
					}
					}
					break;
				case 3:
					{
					{
					setState(2077);
					match(WITH);
					setState(2078);
					match(QUERY);
					setState(2079);
					match(EXPANSION);
					}
					}
					break;
				}
				setState(2082);
				match(RightParen);
				}
				break;
			case 7:
				{
				setState(2084);
				case_expr();
				}
				break;
			case 8:
				{
				setState(2085);
				func_expr();
				}
				break;
			case 9:
				{
				setState(2086);
				window_function();
				}
				break;
			case 10:
				{
				setState(2087);
				match(LeftBrace);
				setState(2088);
				relation_name();
				setState(2089);
				expr(0);
				setState(2090);
				match(RightBrace);
				}
				break;
			case 11:
				{
				setState(2092);
				match(USER_VARIABLE);
				}
				break;
			case 12:
				{
				setState(2093);
				column_definition_ref();
				setState(2094);
				_la = _input.LA(1);
				if ( !(_la==JSON_EXTRACT || _la==JSON_EXTRACT_UNQUOTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2095);
				complex_string_literal();
				}
				break;
			case 13:
				{
				setState(2097);
				relation_name();
				setState(2098);
				match(Dot);
				setState(2099);
				relation_name();
				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Dot) {
					{
					setState(2100);
					match(Dot);
					setState(2101);
					relation_name();
					}
				}

				setState(2104);
				match(USER_VARIABLE);
				}
				break;
			case 14:
				{
				setState(2106);
				match(ARRAY);
				setState(2107);
				match(LeftParen);
				setState(2108);
				expr_list();
				setState(2109);
				match(RightParen);
				}
				break;
			case 15:
				{
				setState(2111);
				match(LeftBracket);
				setState(2112);
				expr_list();
				setState(2113);
				match(RightBracket);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2124);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2122);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
					case 1:
						{
						_localctx = new Simple_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_expr);
						setState(2117);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(2118);
						match(CNNOP);
						setState(2119);
						simple_expr(15);
						}
						break;
					case 2:
						{
						_localctx = new Simple_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simple_expr);
						setState(2120);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(2121);
						collation();
						}
						break;
					}
					} 
				}
				setState(2126);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode SET_VAR() { return getToken(OBParser.SET_VAR, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Bool_priContext bool_pri() {
			return getRuleContext(Bool_priContext.class,0);
		}
		public TerminalNode IS() { return getToken(OBParser.IS, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(OBParser.UNKNOWN, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode AND() { return getToken(OBParser.AND, 0); }
		public TerminalNode AND_OP() { return getToken(OBParser.AND_OP, 0); }
		public TerminalNode CNNOP() { return getToken(OBParser.CNNOP, 0); }
		public TerminalNode OR() { return getToken(OBParser.OR, 0); }
		public TerminalNode XOR() { return getToken(OBParser.XOR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExpr(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 56;
		enterRecursionRule(_localctx, 56, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				setState(2131);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
					{
					setState(2128);
					match(NOT);
					}
					break;
				case USER_VARIABLE:
					{
					setState(2129);
					match(USER_VARIABLE);
					setState(2130);
					match(SET_VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2133);
				expr(4);
				}
				break;
			case 2:
				{
				setState(2134);
				match(LeftParen);
				setState(2135);
				expr(0);
				setState(2136);
				match(RightParen);
				}
				break;
			case 3:
				{
				setState(2138);
				bool_pri(0);
				setState(2144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(2139);
					match(IS);
					setState(2141);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(2140);
						not();
						}
					}

					setState(2143);
					_la = _input.LA(1);
					if ( !(_la==UNKNOWN || _la==BOOL_VALUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2153);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,60,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expr);
					setState(2148);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2149);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR || _la==XOR || _la==CNNOP || _la==AND_OP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2150);
					expr(2);
					}
					} 
				}
				setState(2155);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,60,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class NotContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public NotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNot(this);
		}
	}

	public final NotContext not() throws RecognitionException {
		NotContext _localctx = new NotContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_not);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2156);
			match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Any_exprContext extends ParserRuleContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Any_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_any_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAny_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAny_expr(this);
		}
	}

	public final Any_exprContext any_expr() throws RecognitionException {
		Any_exprContext _localctx = new Any_exprContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_any_expr);
		try {
			setState(2163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2158);
				select_with_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2159);
				match(LeftParen);
				setState(2160);
				expr_list();
				setState(2161);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_exprContext extends ParserRuleContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public In_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIn_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIn_expr(this);
		}
	}

	public final In_exprContext in_expr() throws RecognitionException {
		In_exprContext _localctx = new In_exprContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_in_expr);
		try {
			setState(2170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2165);
				select_with_parens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2166);
				match(LeftParen);
				setState(2167);
				expr_list();
				setState(2168);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(OBParser.CASE, 0); }
		public When_clause_listContext when_clause_list() {
			return getRuleContext(When_clause_listContext.class,0);
		}
		public TerminalNode END() { return getToken(OBParser.END, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Case_defaultContext case_default() {
			return getRuleContext(Case_defaultContext.class,0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCase_expr(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_case_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2172);
			match(CASE);
			setState(2174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
				{
				setState(2173);
				expr(0);
				}
			}

			setState(2176);
			when_clause_list();
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2177);
				case_default();
				}
			}

			setState(2180);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_functionContext extends ParserRuleContext {
		public Token func_name;
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode OVER() { return getToken(OBParser.OVER, 0); }
		public New_generalized_window_clauseContext new_generalized_window_clause() {
			return getRuleContext(New_generalized_window_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(OBParser.COUNT, 0); }
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OBParser.DISTINCT, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode APPROX_COUNT_DISTINCT() { return getToken(OBParser.APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_SYNOPSIS() { return getToken(OBParser.APPROX_COUNT_DISTINCT_SYNOPSIS, 0); }
		public TerminalNode NTILE() { return getToken(OBParser.NTILE, 0); }
		public TerminalNode SUM() { return getToken(OBParser.SUM, 0); }
		public TerminalNode MAX() { return getToken(OBParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(OBParser.MIN, 0); }
		public TerminalNode AVG() { return getToken(OBParser.AVG, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(OBParser.JSON_ARRAYAGG, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE() { return getToken(OBParser.APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode JSON_OBJECTAGG() { return getToken(OBParser.JSON_OBJECTAGG, 0); }
		public TerminalNode STD() { return getToken(OBParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(OBParser.STDDEV, 0); }
		public TerminalNode VARIANCE() { return getToken(OBParser.VARIANCE, 0); }
		public TerminalNode STDDEV_POP() { return getToken(OBParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(OBParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(OBParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(OBParser.VAR_SAMP, 0); }
		public TerminalNode BIT_AND() { return getToken(OBParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(OBParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(OBParser.BIT_XOR, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(OBParser.GROUP_CONCAT, 0); }
		public TerminalNode LISTAGG() { return getToken(OBParser.LISTAGG, 0); }
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public TerminalNode SEPARATOR() { return getToken(OBParser.SEPARATOR, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode RANK() { return getToken(OBParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(OBParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(OBParser.PERCENT_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(OBParser.ROW_NUMBER, 0); }
		public TerminalNode CUME_DIST() { return getToken(OBParser.CUME_DIST, 0); }
		public Win_fun_first_last_paramsContext win_fun_first_last_params() {
			return getRuleContext(Win_fun_first_last_paramsContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(OBParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(OBParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(OBParser.LEAD, 0); }
		public TerminalNode LAG() { return getToken(OBParser.LAG, 0); }
		public TerminalNode NTH_VALUE() { return getToken(OBParser.NTH_VALUE, 0); }
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public First_or_lastContext first_or_last() {
			return getRuleContext(First_or_lastContext.class,0);
		}
		public Respect_or_ignoreContext respect_or_ignore() {
			return getRuleContext(Respect_or_ignoreContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(OBParser.NULLS, 0); }
		public List<Bit_exprContext> bit_expr() {
			return getRuleContexts(Bit_exprContext.class);
		}
		public Bit_exprContext bit_expr(int i) {
			return getRuleContext(Bit_exprContext.class,i);
		}
		public TerminalNode TOP_K_FRE_HIST() { return getToken(OBParser.TOP_K_FRE_HIST, 0); }
		public TerminalNode HYBRID_HIST() { return getToken(OBParser.HYBRID_HIST, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWindow_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWindow_function(this);
		}
	}

	public final Window_functionContext window_function() throws RecognitionException {
		Window_functionContext _localctx = new Window_functionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_window_function);
		int _la;
		try {
			setState(2303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2182);
				((Window_functionContext)_localctx).func_name = match(COUNT);
				setState(2183);
				match(LeftParen);
				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2184);
					match(ALL);
					}
				}

				setState(2189);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Star:
					{
					setState(2187);
					match(Star);
					}
					break;
				case UnderlineUTF8MB3:
				case UnderlineASCII:
				case UnderlineTIS620:
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case LeftBracket:
				case ACCESS:
				case OBJECT_ID:
				case ACCESSIBLE:
				case ADD:
				case AGAINST:
				case ALTER:
				case ALWAYS:
				case AND:
				case ANALYZE:
				case NAMESPACE:
				case AS:
				case ASENSITIVE:
				case ASC:
				case BETWEEN:
				case BEFORE:
				case BIGINT:
				case BINARY:
				case BLOB:
				case BY:
				case CALL:
				case CASCADE:
				case CASE:
				case CHANGE:
				case CHARACTER:
				case CHECK:
				case CIPHER:
				case CONDITION:
				case CONSTRAINT:
				case CONTINUE:
				case CONVERT:
				case COLLATE:
				case COLUMN:
				case COLUMNS:
				case LS:
				case CREATE:
				case CROSS:
				case CYCLE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case DAY_HOUR:
				case DAY_MICROSECOND:
				case DAY_MINUTE:
				case DAY_SECOND:
				case DATABASE:
				case DATABASES:
				case NUMBER:
				case DECIMAL:
				case DECLARE:
				case ROWID:
				case DEFAULT:
				case DELAYED:
				case DELETE:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case DESC:
				case DESCRIBE:
				case DETERMINISTIC:
				case DIV:
				case DISTINCTROW:
				case DOUBLE:
				case DROP:
				case DUAL:
				case EACH:
				case ENCLOSED:
				case ELSE:
				case ELSEIF:
				case ESCAPED:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case FETCH:
				case FIELDS:
				case FOREIGN:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case FOR:
				case FORCE:
				case FULL:
				case FULLTEXT:
				case GET:
				case GENERATED:
				case GRANT:
				case GROUP:
				case HAVING:
				case HIGH_PRIORITY:
				case HOUR_MICROSECOND:
				case HOUR_MINUTE:
				case HOUR_SECOND:
				case ID:
				case IF:
				case IN:
				case INDEX:
				case INNER:
				case INFILE:
				case INOUT:
				case INCLUDING:
				case INSENSITIVE:
				case INTEGER:
				case INT1:
				case INT2:
				case INT3:
				case LIB:
				case INT4:
				case INT8:
				case INTERVAL:
				case INSERT:
				case ORDINALITY:
				case INTO:
				case IO_AFTER_GTIDS:
				case IO_BEFORE_GTIDS:
				case IS:
				case ISSUER:
				case ITERATE:
				case JOIN:
				case KEY:
				case KEYS:
				case KILL:
				case LANGUAGE:
				case LEAVE:
				case LEFT:
				case LIMIT:
				case LIKE:
				case LINEAR:
				case LINES:
				case BISON_LIST:
				case LOAD:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LONG:
				case UNLIMITED:
				case LONGBLOB:
				case LONGTEXT:
				case LOOP:
				case LOW_PRIORITY:
				case MASTER_BIND:
				case MASTER_SSL_VERIFY_SERVER_CERT:
				case MATCH:
				case MAXVALUE:
				case MEDIUMBLOB:
				case MEDIUMINT:
				case MERGE:
				case MEDIUMTEXT:
				case MIDDLEINT:
				case MINUTE_MICROSECOND:
				case MINUTE_SECOND:
				case MOD:
				case MODE:
				case MODIFIES:
				case NATURAL:
				case NO_WRITE_TO_BINLOG:
				case ON:
				case OPTION:
				case OPTIMIZE:
				case OPTIONALLY:
				case OR:
				case ORDER:
				case OUT:
				case IOPS_WEIGHT:
				case OUTER:
				case OUTFILE:
				case PARSER:
				case PROCEDURE:
				case MIN_MAX:
				case PURGE:
				case PARTITION:
				case PRECISION:
				case PRIMARY:
				case PUBLIC:
				case RANGE:
				case READ:
				case READ_WRITE:
				case READS:
				case REAL:
				case RELEASE:
				case REFERENCES:
				case REGEXP:
				case RENAME:
				case REPLACE:
				case REPEAT:
				case REQUIRE:
				case RESIGNAL:
				case RESTRICT:
				case RETURN:
				case REVOKE:
				case RIGHT:
				case ROWS:
				case SECOND_MICROSECOND:
				case SCHEMA:
				case SCHEMAS:
				case SEPARATOR:
				case SET:
				case REJECT:
				case SENSITIVE:
				case SHOW:
				case SIGNAL:
				case SMALLINT:
				case SPATIAL:
				case SPECIFIC:
				case SQL:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQL_BIG_RESULT:
				case SQL_SMALL_RESULT:
				case SSL:
				case STARTING:
				case NUMERIC:
				case STORED:
				case PLUS:
				case STRAIGHT_JOIN:
				case SUBJECT:
				case SYSDATE:
				case TERMINATED:
				case TEXT:
				case TINYBLOB:
				case TINYINT:
				case TINYTEXT:
				case TABLE:
				case THEN:
				case TO:
				case TRIGGER:
				case UNDO:
				case CALIBRATION:
				case UNION:
				case UNLOCK:
				case LINE_DELIMITER:
				case UNSIGNED:
				case UPDATE:
				case USAGE:
				case GEOMCOLLECTION:
				case USE:
				case USING:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case VALUES:
				case QUERY_RESPONSE_TIME:
				case VARBINARY:
				case VARCHAR:
				case VARYING:
				case VIRTUAL:
				case WHERE:
				case REDUNDANCY:
				case WHILE:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case WITH:
				case WRITE:
				case XOR:
				case X509:
				case YEAR_MONTH:
				case ZEROFILL:
				case GLOBAL_ALIAS:
				case SESSION_ALIAS:
				case UnderlineUTF8:
				case UnderlineUTF8MB4:
				case UnderlineGBK:
				case UnderlineGB18030:
				case UnderlineBINARY:
				case UnderlineUTF16:
				case UnderlineLATIN1:
				case UnderlineGB18030_2022:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case NOT:
				case NULLX:
				case INTNUM:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case TIMESTAMP_VALUE:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case APPROXNUM:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case IGNORE:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case VARCHARACTER:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case NATIONAL_LITERAL:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case RLIKE:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case CHAR:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case INT:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case RANDOM:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case DECIMAL_VAL:
				case ST_ASMVT:
				case STORE:
				case BOOL_VALUE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case LeftBrace:
				case PARSER_SYNTAX_ERROR:
				case HEX_STRING_VALUE:
				case DATE_VALUE:
				case Plus:
				case Not:
				case LeftParen:
				case Minus:
				case Dot:
				case Tilde:
				case QUESTIONMARK:
				case SYSTEM_VARIABLE:
				case USER_VARIABLE:
				case NAME_OB:
				case STRING_VALUE:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(2188);
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2191);
				match(RightParen);
				setState(2192);
				match(OVER);
				setState(2193);
				new_generalized_window_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2194);
				((Window_functionContext)_localctx).func_name = match(COUNT);
				setState(2195);
				match(LeftParen);
				setState(2196);
				match(DISTINCT);
				setState(2197);
				expr_list();
				setState(2198);
				match(RightParen);
				setState(2199);
				match(OVER);
				setState(2200);
				new_generalized_window_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2202);
				((Window_functionContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==APPROX_COUNT_DISTINCT_SYNOPSIS || _la==NTILE || _la==APPROX_COUNT_DISTINCT) ) {
					((Window_functionContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2203);
				match(LeftParen);
				setState(2204);
				expr_list();
				setState(2205);
				match(RightParen);
				setState(2206);
				match(OVER);
				setState(2207);
				new_generalized_window_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2209);
				((Window_functionContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX || _la==SUM || _la==MIN || _la==JSON_ARRAYAGG || _la==AVG || _la==APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE) ) {
					((Window_functionContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2210);
				match(LeftParen);
				setState(2212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT || _la==UNIQUE) {
					{
					setState(2211);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2214);
				expr(0);
				setState(2215);
				match(RightParen);
				setState(2216);
				match(OVER);
				setState(2217);
				new_generalized_window_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2219);
				((Window_functionContext)_localctx).func_name = match(JSON_OBJECTAGG);
				setState(2220);
				match(LeftParen);
				setState(2221);
				expr(0);
				setState(2222);
				match(Comma);
				setState(2223);
				expr(0);
				setState(2224);
				match(RightParen);
				setState(2225);
				match(OVER);
				setState(2226);
				new_generalized_window_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2228);
				((Window_functionContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIT_XOR || _la==STDDEV || _la==STD || _la==VARIANCE || _la==STDDEV_SAMP || _la==BIT_AND || _la==VAR_POP || _la==STDDEV_POP || _la==BIT_OR || _la==VAR_SAMP) ) {
					((Window_functionContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2229);
				match(LeftParen);
				setState(2231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2230);
					match(ALL);
					}
				}

				setState(2233);
				expr(0);
				setState(2234);
				match(RightParen);
				setState(2235);
				match(OVER);
				setState(2236);
				new_generalized_window_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2238);
				((Window_functionContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LISTAGG || _la==GROUP_CONCAT) ) {
					((Window_functionContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2239);
				match(LeftParen);
				setState(2241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT || _la==UNIQUE) {
					{
					setState(2240);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2243);
				expr_list();
				setState(2245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2244);
					order_by();
					}
				}

				setState(2249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(2247);
					match(SEPARATOR);
					setState(2248);
					match(STRING_VALUE);
					}
				}

				setState(2251);
				match(RightParen);
				setState(2252);
				match(OVER);
				setState(2253);
				new_generalized_window_clause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2255);
				((Window_functionContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ROW_NUMBER || _la==DENSE_RANK || _la==RANK || _la==PERCENT_RANK || _la==CUME_DIST) ) {
					((Window_functionContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2256);
				match(LeftParen);
				setState(2257);
				match(RightParen);
				setState(2258);
				match(OVER);
				setState(2259);
				new_generalized_window_clause();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2260);
				((Window_functionContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LAST_VALUE || _la==FIRST_VALUE || _la==LEAD) ) {
					((Window_functionContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2261);
				win_fun_first_last_params();
				setState(2262);
				match(OVER);
				setState(2263);
				new_generalized_window_clause();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2265);
				((Window_functionContext)_localctx).func_name = match(NTH_VALUE);
				setState(2266);
				match(LeftParen);
				setState(2267);
				expr(0);
				setState(2268);
				match(Comma);
				setState(2269);
				expr(0);
				setState(2270);
				match(RightParen);
				setState(2273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(2271);
					match(FROM);
					setState(2272);
					first_or_last();
					}
				}

				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(2275);
					respect_or_ignore();
					setState(2276);
					match(NULLS);
					}
				}

				setState(2280);
				match(OVER);
				setState(2281);
				new_generalized_window_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2283);
				((Window_functionContext)_localctx).func_name = match(TOP_K_FRE_HIST);
				setState(2284);
				match(LeftParen);
				setState(2285);
				bit_expr(0);
				setState(2286);
				match(Comma);
				setState(2287);
				bit_expr(0);
				setState(2288);
				match(Comma);
				setState(2289);
				bit_expr(0);
				setState(2290);
				match(RightParen);
				setState(2291);
				match(OVER);
				setState(2292);
				new_generalized_window_clause();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2294);
				((Window_functionContext)_localctx).func_name = match(HYBRID_HIST);
				setState(2295);
				match(LeftParen);
				setState(2296);
				bit_expr(0);
				setState(2297);
				match(Comma);
				setState(2298);
				bit_expr(0);
				setState(2299);
				match(RightParen);
				setState(2300);
				match(OVER);
				setState(2301);
				new_generalized_window_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_or_lastContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(OBParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(OBParser.LAST, 0); }
		public First_or_lastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_or_last; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFirst_or_last(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFirst_or_last(this);
		}
	}

	public final First_or_lastContext first_or_last() throws RecognitionException {
		First_or_lastContext _localctx = new First_or_lastContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_first_or_last);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignoreContext extends ParserRuleContext {
		public TerminalNode RESPECT() { return getToken(OBParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public Respect_or_ignoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRespect_or_ignore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRespect_or_ignore(this);
		}
	}

	public final Respect_or_ignoreContext respect_or_ignore() throws RecognitionException {
		Respect_or_ignoreContext _localctx = new Respect_or_ignoreContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_respect_or_ignore);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2307);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Win_fun_first_last_paramsContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Respect_or_ignoreContext respect_or_ignore() {
			return getRuleContext(Respect_or_ignoreContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(OBParser.NULLS, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Win_fun_first_last_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_win_fun_first_last_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWin_fun_first_last_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWin_fun_first_last_params(this);
		}
	}

	public final Win_fun_first_last_paramsContext win_fun_first_last_params() throws RecognitionException {
		Win_fun_first_last_paramsContext _localctx = new Win_fun_first_last_paramsContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_win_fun_first_last_params);
		int _la;
		try {
			setState(2323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2309);
				match(LeftParen);
				setState(2310);
				expr(0);
				setState(2311);
				respect_or_ignore();
				setState(2312);
				match(NULLS);
				setState(2313);
				match(RightParen);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2315);
				match(LeftParen);
				setState(2316);
				expr(0);
				setState(2317);
				match(RightParen);
				setState(2321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(2318);
					respect_or_ignore();
					setState(2319);
					match(NULLS);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_generalized_window_clauseContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public New_generalized_window_clause_with_blanketContext new_generalized_window_clause_with_blanket() {
			return getRuleContext(New_generalized_window_clause_with_blanketContext.class,0);
		}
		public New_generalized_window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_generalized_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNew_generalized_window_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNew_generalized_window_clause(this);
		}
	}

	public final New_generalized_window_clauseContext new_generalized_window_clause() throws RecognitionException {
		New_generalized_window_clauseContext _localctx = new New_generalized_window_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_new_generalized_window_clause);
		try {
			setState(2327);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(2325);
				match(NAME_OB);
				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(2326);
				new_generalized_window_clause_with_blanket();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_generalized_window_clause_with_blanketContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Generalized_window_clauseContext generalized_window_clause() {
			return getRuleContext(Generalized_window_clauseContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public New_generalized_window_clause_with_blanketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_generalized_window_clause_with_blanket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNew_generalized_window_clause_with_blanket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNew_generalized_window_clause_with_blanket(this);
		}
	}

	public final New_generalized_window_clause_with_blanketContext new_generalized_window_clause_with_blanket() throws RecognitionException {
		New_generalized_window_clause_with_blanketContext _localctx = new New_generalized_window_clause_with_blanketContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_new_generalized_window_clause_with_blanket);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2329);
			match(LeftParen);
			setState(2331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME_OB) {
				{
				setState(2330);
				match(NAME_OB);
				}
			}

			setState(2333);
			generalized_window_clause();
			setState(2334);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_windowsContext extends ParserRuleContext {
		public List<Named_windowContext> named_window() {
			return getRuleContexts(Named_windowContext.class);
		}
		public Named_windowContext named_window(int i) {
			return getRuleContext(Named_windowContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Named_windowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_windows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNamed_windows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNamed_windows(this);
		}
	}

	public final Named_windowsContext named_windows() throws RecognitionException {
		Named_windowsContext _localctx = new Named_windowsContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_named_windows);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2336);
			named_window();
			setState(2341);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2337);
					match(Comma);
					setState(2338);
					named_window();
					}
					} 
				}
				setState(2343);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_windowContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public New_generalized_window_clause_with_blanketContext new_generalized_window_clause_with_blanket() {
			return getRuleContext(New_generalized_window_clause_with_blanketContext.class,0);
		}
		public Named_windowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_window; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNamed_window(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNamed_window(this);
		}
	}

	public final Named_windowContext named_window() throws RecognitionException {
		Named_windowContext _localctx = new Named_windowContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_named_window);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2344);
			match(NAME_OB);
			setState(2345);
			match(AS);
			setState(2346);
			new_generalized_window_clause_with_blanket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generalized_window_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Win_windowContext win_window() {
			return getRuleContext(Win_windowContext.class,0);
		}
		public Generalized_window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalized_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGeneralized_window_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGeneralized_window_clause(this);
		}
	}

	public final Generalized_window_clauseContext generalized_window_clause() throws RecognitionException {
		Generalized_window_clauseContext _localctx = new Generalized_window_clauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_generalized_window_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2348);
				match(PARTITION);
				setState(2349);
				match(BY);
				setState(2350);
				expr_list();
				}
			}

			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2353);
				order_by();
				}
			}

			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(2356);
				win_window();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Win_rows_or_rangeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(OBParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public Win_rows_or_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_win_rows_or_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWin_rows_or_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWin_rows_or_range(this);
		}
	}

	public final Win_rows_or_rangeContext win_rows_or_range() throws RecognitionException {
		Win_rows_or_rangeContext _localctx = new Win_rows_or_rangeContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_win_rows_or_range);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Win_preceding_or_followingContext extends ParserRuleContext {
		public TerminalNode PRECEDING() { return getToken(OBParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(OBParser.FOLLOWING, 0); }
		public Win_preceding_or_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_win_preceding_or_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWin_preceding_or_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWin_preceding_or_following(this);
		}
	}

	public final Win_preceding_or_followingContext win_preceding_or_following() throws RecognitionException {
		Win_preceding_or_followingContext _localctx = new Win_preceding_or_followingContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_win_preceding_or_following);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Win_intervalContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public Date_unitContext date_unit() {
			return getRuleContext(Date_unitContext.class,0);
		}
		public Win_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_win_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWin_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWin_interval(this);
		}
	}

	public final Win_intervalContext win_interval() throws RecognitionException {
		Win_intervalContext _localctx = new Win_intervalContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_win_interval);
		try {
			setState(2368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2363);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2364);
				match(INTERVAL);
				setState(2365);
				expr(0);
				setState(2366);
				date_unit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Win_boundingContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(OBParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(OBParser.ROW, 0); }
		public Win_intervalContext win_interval() {
			return getRuleContext(Win_intervalContext.class,0);
		}
		public Win_preceding_or_followingContext win_preceding_or_following() {
			return getRuleContext(Win_preceding_or_followingContext.class,0);
		}
		public Win_boundingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_win_bounding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWin_bounding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWin_bounding(this);
		}
	}

	public final Win_boundingContext win_bounding() throws RecognitionException {
		Win_boundingContext _localctx = new Win_boundingContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_win_bounding);
		try {
			setState(2375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2370);
				match(CURRENT);
				setState(2371);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2372);
				win_interval();
				setState(2373);
				win_preceding_or_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Win_windowContext extends ParserRuleContext {
		public Win_rows_or_rangeContext win_rows_or_range() {
			return getRuleContext(Win_rows_or_rangeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(OBParser.BETWEEN, 0); }
		public List<Win_boundingContext> win_bounding() {
			return getRuleContexts(Win_boundingContext.class);
		}
		public Win_boundingContext win_bounding(int i) {
			return getRuleContext(Win_boundingContext.class,i);
		}
		public TerminalNode AND() { return getToken(OBParser.AND, 0); }
		public Win_windowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_win_window; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWin_window(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWin_window(this);
		}
	}

	public final Win_windowContext win_window() throws RecognitionException {
		Win_windowContext _localctx = new Win_windowContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_win_window);
		try {
			setState(2386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2377);
				win_rows_or_range();
				setState(2378);
				match(BETWEEN);
				setState(2379);
				win_bounding();
				setState(2380);
				match(AND);
				setState(2381);
				win_bounding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2383);
				win_rows_or_range();
				setState(2384);
				win_bounding();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clause_listContext extends ParserRuleContext {
		public List<When_clauseContext> when_clause() {
			return getRuleContexts(When_clauseContext.class);
		}
		public When_clauseContext when_clause(int i) {
			return getRuleContext(When_clauseContext.class,i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWhen_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWhen_clause_list(this);
		}
	}

	public final When_clause_listContext when_clause_list() throws RecognitionException {
		When_clause_listContext _localctx = new When_clause_listContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_when_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2389); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2388);
				when_clause();
				}
				}
				setState(2391); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OBParser.WHEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(OBParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWhen_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWhen_clause(this);
		}
	}

	public final When_clauseContext when_clause() throws RecognitionException {
		When_clauseContext _localctx = new When_clauseContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2393);
			match(WHEN);
			setState(2394);
			expr(0);
			setState(2395);
			match(THEN);
			setState(2396);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_defaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(OBParser.ELSE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCase_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCase_default(this);
		}
	}

	public final Case_defaultContext case_default() throws RecognitionException {
		Case_defaultContext _localctx = new Case_defaultContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_case_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			match(ELSE);
			setState(2399);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_exprContext extends ParserRuleContext {
		public Func_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_expr; }
	 
		public Func_exprContext() { }
		public void copyFrom(Func_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Simple_func_exprContext extends Func_exprContext {
		public Token func_name;
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode COUNT() { return getToken(OBParser.COUNT, 0); }
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(OBParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT() { return getToken(OBParser.APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_SYNOPSIS() { return getToken(OBParser.APPROX_COUNT_DISTINCT_SYNOPSIS, 0); }
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public TerminalNode SUM() { return getToken(OBParser.SUM, 0); }
		public TerminalNode MAX() { return getToken(OBParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(OBParser.MIN, 0); }
		public TerminalNode AVG() { return getToken(OBParser.AVG, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(OBParser.JSON_ARRAYAGG, 0); }
		public TerminalNode STD() { return getToken(OBParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(OBParser.STDDEV, 0); }
		public TerminalNode VARIANCE() { return getToken(OBParser.VARIANCE, 0); }
		public TerminalNode STDDEV_POP() { return getToken(OBParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(OBParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(OBParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(OBParser.VAR_SAMP, 0); }
		public TerminalNode BIT_AND() { return getToken(OBParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(OBParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(OBParser.BIT_XOR, 0); }
		public TerminalNode GROUPING() { return getToken(OBParser.GROUPING, 0); }
		public TerminalNode ISNULL() { return getToken(OBParser.ISNULL, 0); }
		public TerminalNode DATE() { return getToken(OBParser.DATE, 0); }
		public TerminalNode YEAR() { return getToken(OBParser.YEAR, 0); }
		public TerminalNode TIME() { return getToken(OBParser.TIME, 0); }
		public TerminalNode MONTH() { return getToken(OBParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(OBParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(OBParser.DAY, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OBParser.TIMESTAMP, 0); }
		public List<Bit_exprContext> bit_expr() {
			return getRuleContexts(Bit_exprContext.class);
		}
		public Bit_exprContext bit_expr(int i) {
			return getRuleContext(Bit_exprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode TOP_K_FRE_HIST() { return getToken(OBParser.TOP_K_FRE_HIST, 0); }
		public TerminalNode HYBRID_HIST() { return getToken(OBParser.HYBRID_HIST, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(OBParser.INSERT, 0); }
		public TerminalNode ADDDATE() { return getToken(OBParser.ADDDATE, 0); }
		public TerminalNode SUBDATE() { return getToken(OBParser.SUBDATE, 0); }
		public TerminalNode LEFT() { return getToken(OBParser.LEFT, 0); }
		public TerminalNode LOG() { return getToken(OBParser.LOG, 0); }
		public TerminalNode MOD() { return getToken(OBParser.MOD, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(OBParser.JSON_OBJECTAGG, 0); }
		public TerminalNode QUARTER() { return getToken(OBParser.QUARTER, 0); }
		public TerminalNode SECOND() { return getToken(OBParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(OBParser.MINUTE, 0); }
		public TerminalNode MICROSECOND() { return getToken(OBParser.MICROSECOND, 0); }
		public TerminalNode HOUR() { return getToken(OBParser.HOUR, 0); }
		public TerminalNode ASCII() { return getToken(OBParser.ASCII, 0); }
		public TerminalNode LN() { return getToken(OBParser.LN, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE() { return getToken(OBParser.APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE, 0); }
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Expr_as_listContext expr_as_list() {
			return getRuleContext(Expr_as_listContext.class,0);
		}
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public TerminalNode CALC_PARTITION_ID() { return getToken(OBParser.CALC_PARTITION_ID, 0); }
		public TerminalNode POINT() { return getToken(OBParser.POINT, 0); }
		public TerminalNode LINESTRING() { return getToken(OBParser.LINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(OBParser.MULTIPOINT, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(OBParser.MULTILINESTRING, 0); }
		public TerminalNode POLYGON() { return getToken(OBParser.POLYGON, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(OBParser.MULTIPOLYGON, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(OBParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(OBParser.GEOMCOLLECTION, 0); }
		public Column_refContext column_ref() {
			return getRuleContext(Column_refContext.class,0);
		}
		public TerminalNode ST_ASMVT() { return getToken(OBParser.ST_ASMVT, 0); }
		public List<Mvt_paramContext> mvt_param() {
			return getRuleContexts(Mvt_paramContext.class);
		}
		public Mvt_paramContext mvt_param(int i) {
			return getRuleContext(Mvt_paramContext.class,i);
		}
		public TerminalNode UnderlineST_ASMVT() { return getToken(OBParser.UnderlineST_ASMVT, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode LAST_REFRESH_SCN() { return getToken(OBParser.LAST_REFRESH_SCN, 0); }
		public TerminalNode SUM_OPNSIZE() { return getToken(OBParser.SUM_OPNSIZE, 0); }
		public TerminalNode RB_BUILD_AGG() { return getToken(OBParser.RB_BUILD_AGG, 0); }
		public TerminalNode RB_OR_AGG() { return getToken(OBParser.RB_OR_AGG, 0); }
		public TerminalNode RB_AND_AGG() { return getToken(OBParser.RB_AND_AGG, 0); }
		public Simple_func_exprContext(Func_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSimple_func_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSimple_func_expr(this);
		}
	}
	public static class Complex_func_exprContext extends Func_exprContext {
		public TerminalNode GROUP_CONCAT() { return getToken(OBParser.GROUP_CONCAT, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public TerminalNode SEPARATOR() { return getToken(OBParser.SEPARATOR, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode DISTINCT() { return getToken(OBParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public Cur_timestamp_funcContext cur_timestamp_func() {
			return getRuleContext(Cur_timestamp_funcContext.class,0);
		}
		public Sysdate_funcContext sysdate_func() {
			return getRuleContext(Sysdate_funcContext.class,0);
		}
		public Cur_time_funcContext cur_time_func() {
			return getRuleContext(Cur_time_funcContext.class,0);
		}
		public Cur_date_funcContext cur_date_func() {
			return getRuleContext(Cur_date_funcContext.class,0);
		}
		public Utc_timestamp_funcContext utc_timestamp_func() {
			return getRuleContext(Utc_timestamp_funcContext.class,0);
		}
		public Utc_time_funcContext utc_time_func() {
			return getRuleContext(Utc_time_funcContext.class,0);
		}
		public Utc_date_funcContext utc_date_func() {
			return getRuleContext(Utc_date_funcContext.class,0);
		}
		public TerminalNode CAST() { return getToken(OBParser.CAST, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Cast_data_typeContext cast_data_type() {
			return getRuleContext(Cast_data_typeContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public TerminalNode CONVERT() { return getToken(OBParser.CONVERT, 0); }
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(OBParser.POSITION, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public Substr_or_substringContext substr_or_substring() {
			return getRuleContext(Substr_or_substringContext.class,0);
		}
		public Substr_paramsContext substr_params() {
			return getRuleContext(Substr_paramsContext.class,0);
		}
		public TerminalNode TRIM() { return getToken(OBParser.TRIM, 0); }
		public Parameterized_trimContext parameterized_trim() {
			return getRuleContext(Parameterized_trimContext.class,0);
		}
		public TerminalNode GET_FORMAT() { return getToken(OBParser.GET_FORMAT, 0); }
		public Get_format_unitContext get_format_unit() {
			return getRuleContext(Get_format_unitContext.class,0);
		}
		public Date_paramsContext date_params() {
			return getRuleContext(Date_paramsContext.class,0);
		}
		public TerminalNode DATE_ADD() { return getToken(OBParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(OBParser.DATE_SUB, 0); }
		public TerminalNode ADDDATE() { return getToken(OBParser.ADDDATE, 0); }
		public TerminalNode SUBDATE() { return getToken(OBParser.SUBDATE, 0); }
		public Timestamp_paramsContext timestamp_params() {
			return getRuleContext(Timestamp_paramsContext.class,0);
		}
		public TerminalNode TIMESTAMPDIFF() { return getToken(OBParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(OBParser.TIMESTAMPADD, 0); }
		public TerminalNode EXTRACT() { return getToken(OBParser.EXTRACT, 0); }
		public Date_unitContext date_unit() {
			return getRuleContext(Date_unitContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public Sys_interval_funcContext sys_interval_func() {
			return getRuleContext(Sys_interval_funcContext.class,0);
		}
		public TerminalNode WEIGHT_STRING() { return getToken(OBParser.WEIGHT_STRING, 0); }
		public Ws_nweightsContext ws_nweights() {
			return getRuleContext(Ws_nweightsContext.class,0);
		}
		public TerminalNode LEVEL() { return getToken(OBParser.LEVEL, 0); }
		public Ws_level_list_or_rangeContext ws_level_list_or_range() {
			return getRuleContext(Ws_level_list_or_rangeContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public Json_value_exprContext json_value_expr() {
			return getRuleContext(Json_value_exprContext.class,0);
		}
		public Json_query_exprContext json_query_expr() {
			return getRuleContext(Json_query_exprContext.class,0);
		}
		public Vector_distance_exprContext vector_distance_expr() {
			return getRuleContext(Vector_distance_exprContext.class,0);
		}
		public Complex_func_exprContext(Func_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterComplex_func_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitComplex_func_expr(this);
		}
	}

	public final Func_exprContext func_expr() throws RecognitionException {
		Func_exprContext _localctx = new Func_exprContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_func_expr);
		int _la;
		try {
			setState(2826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2401);
				((Simple_func_exprContext)_localctx).func_name = match(COUNT);
				setState(2402);
				match(LeftParen);
				setState(2404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2403);
					match(ALL);
					}
				}

				setState(2408);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Star:
					{
					setState(2406);
					match(Star);
					}
					break;
				case UnderlineUTF8MB3:
				case UnderlineASCII:
				case UnderlineTIS620:
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case LeftBracket:
				case ACCESS:
				case OBJECT_ID:
				case ACCESSIBLE:
				case ADD:
				case AGAINST:
				case ALTER:
				case ALWAYS:
				case AND:
				case ANALYZE:
				case NAMESPACE:
				case AS:
				case ASENSITIVE:
				case ASC:
				case BETWEEN:
				case BEFORE:
				case BIGINT:
				case BINARY:
				case BLOB:
				case BY:
				case CALL:
				case CASCADE:
				case CASE:
				case CHANGE:
				case CHARACTER:
				case CHECK:
				case CIPHER:
				case CONDITION:
				case CONSTRAINT:
				case CONTINUE:
				case CONVERT:
				case COLLATE:
				case COLUMN:
				case COLUMNS:
				case LS:
				case CREATE:
				case CROSS:
				case CYCLE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case CURSOR:
				case DAY_HOUR:
				case DAY_MICROSECOND:
				case DAY_MINUTE:
				case DAY_SECOND:
				case DATABASE:
				case DATABASES:
				case NUMBER:
				case DECIMAL:
				case DECLARE:
				case ROWID:
				case DEFAULT:
				case DELAYED:
				case DELETE:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case DESC:
				case DESCRIBE:
				case DETERMINISTIC:
				case DIV:
				case DISTINCTROW:
				case DOUBLE:
				case DROP:
				case DUAL:
				case EACH:
				case ENCLOSED:
				case ELSE:
				case ELSEIF:
				case ESCAPED:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case FETCH:
				case FIELDS:
				case FOREIGN:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case FOR:
				case FORCE:
				case FULL:
				case FULLTEXT:
				case GET:
				case GENERATED:
				case GRANT:
				case GROUP:
				case HAVING:
				case HIGH_PRIORITY:
				case HOUR_MICROSECOND:
				case HOUR_MINUTE:
				case HOUR_SECOND:
				case ID:
				case IF:
				case IN:
				case INDEX:
				case INNER:
				case INFILE:
				case INOUT:
				case INCLUDING:
				case INSENSITIVE:
				case INTEGER:
				case INT1:
				case INT2:
				case INT3:
				case LIB:
				case INT4:
				case INT8:
				case INTERVAL:
				case INSERT:
				case ORDINALITY:
				case INTO:
				case IO_AFTER_GTIDS:
				case IO_BEFORE_GTIDS:
				case IS:
				case ISSUER:
				case ITERATE:
				case JOIN:
				case KEY:
				case KEYS:
				case KILL:
				case LANGUAGE:
				case LEAVE:
				case LEFT:
				case LIMIT:
				case LIKE:
				case LINEAR:
				case LINES:
				case BISON_LIST:
				case LOAD:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LONG:
				case UNLIMITED:
				case LONGBLOB:
				case LONGTEXT:
				case LOOP:
				case LOW_PRIORITY:
				case MASTER_BIND:
				case MASTER_SSL_VERIFY_SERVER_CERT:
				case MATCH:
				case MAXVALUE:
				case MEDIUMBLOB:
				case MEDIUMINT:
				case MERGE:
				case MEDIUMTEXT:
				case MIDDLEINT:
				case MINUTE_MICROSECOND:
				case MINUTE_SECOND:
				case MOD:
				case MODE:
				case MODIFIES:
				case NATURAL:
				case NO_WRITE_TO_BINLOG:
				case ON:
				case OPTION:
				case OPTIMIZE:
				case OPTIONALLY:
				case OR:
				case ORDER:
				case OUT:
				case IOPS_WEIGHT:
				case OUTER:
				case OUTFILE:
				case PARSER:
				case PROCEDURE:
				case MIN_MAX:
				case PURGE:
				case PARTITION:
				case PRECISION:
				case PRIMARY:
				case PUBLIC:
				case RANGE:
				case READ:
				case READ_WRITE:
				case READS:
				case REAL:
				case RELEASE:
				case REFERENCES:
				case REGEXP:
				case RENAME:
				case REPLACE:
				case REPEAT:
				case REQUIRE:
				case RESIGNAL:
				case RESTRICT:
				case RETURN:
				case REVOKE:
				case RIGHT:
				case ROWS:
				case SECOND_MICROSECOND:
				case SCHEMA:
				case SCHEMAS:
				case SEPARATOR:
				case SET:
				case REJECT:
				case SENSITIVE:
				case SHOW:
				case SIGNAL:
				case SMALLINT:
				case SPATIAL:
				case SPECIFIC:
				case SQL:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQL_BIG_RESULT:
				case SQL_SMALL_RESULT:
				case SSL:
				case STARTING:
				case NUMERIC:
				case STORED:
				case PLUS:
				case STRAIGHT_JOIN:
				case SUBJECT:
				case SYSDATE:
				case TERMINATED:
				case TEXT:
				case TINYBLOB:
				case TINYINT:
				case TINYTEXT:
				case TABLE:
				case THEN:
				case TO:
				case TRIGGER:
				case UNDO:
				case CALIBRATION:
				case UNION:
				case UNLOCK:
				case LINE_DELIMITER:
				case UNSIGNED:
				case UPDATE:
				case USAGE:
				case GEOMCOLLECTION:
				case USE:
				case USING:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case VALUES:
				case QUERY_RESPONSE_TIME:
				case VARBINARY:
				case VARCHAR:
				case VARYING:
				case VIRTUAL:
				case WHERE:
				case REDUNDANCY:
				case WHILE:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case WITH:
				case WRITE:
				case XOR:
				case X509:
				case YEAR_MONTH:
				case ZEROFILL:
				case GLOBAL_ALIAS:
				case SESSION_ALIAS:
				case UnderlineUTF8:
				case UnderlineUTF8MB4:
				case UnderlineGBK:
				case UnderlineGB18030:
				case UnderlineBINARY:
				case UnderlineUTF16:
				case UnderlineLATIN1:
				case UnderlineGB18030_2022:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case NOT:
				case NULLX:
				case INTNUM:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case TIMESTAMP_VALUE:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case APPROXNUM:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case IGNORE:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case VARCHARACTER:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case NATIONAL_LITERAL:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case RLIKE:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case CHAR:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case INT:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case RANDOM:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case DECIMAL_VAL:
				case ST_ASMVT:
				case STORE:
				case BOOL_VALUE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case LeftBrace:
				case PARSER_SYNTAX_ERROR:
				case HEX_STRING_VALUE:
				case DATE_VALUE:
				case Plus:
				case Not:
				case LeftParen:
				case Minus:
				case Dot:
				case Tilde:
				case QUESTIONMARK:
				case SYSTEM_VARIABLE:
				case USER_VARIABLE:
				case NAME_OB:
				case STRING_VALUE:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(2407);
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2410);
				match(RightParen);
				}
				break;
			case 2:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2411);
				((Simple_func_exprContext)_localctx).func_name = match(COUNT);
				setState(2412);
				match(LeftParen);
				setState(2413);
				_la = _input.LA(1);
				if ( !(_la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2414);
				expr_list();
				setState(2415);
				match(RightParen);
				}
				break;
			case 3:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2417);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==APPROX_COUNT_DISTINCT_SYNOPSIS || _la==APPROX_COUNT_DISTINCT) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2418);
				match(LeftParen);
				setState(2419);
				expr_list();
				setState(2420);
				match(RightParen);
				}
				break;
			case 4:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2422);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX || _la==SUM || _la==MIN || _la==JSON_ARRAYAGG || _la==AVG) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2423);
				match(LeftParen);
				setState(2425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT || _la==UNIQUE) {
					{
					setState(2424);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2427);
				expr(0);
				setState(2428);
				match(RightParen);
				}
				break;
			case 5:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2430);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIT_XOR || _la==STDDEV || _la==STD || _la==VARIANCE || _la==STDDEV_SAMP || _la==COUNT || _la==BIT_AND || _la==VAR_POP || _la==STDDEV_POP || _la==BIT_OR || _la==VAR_SAMP) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2431);
				match(LeftParen);
				setState(2433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2432);
					match(ALL);
					}
				}

				setState(2435);
				expr(0);
				setState(2436);
				match(RightParen);
				}
				break;
			case 6:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2438);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ISNULL || _la==YEAR || _la==TIMESTAMP || _la==GROUPING || _la==TIME || _la==MONTH || ((((_la - 1083)) & ~0x3f) == 0 && ((1L << (_la - 1083)) & ((1L << (DAY - 1083)) | (1L << (DATE - 1083)) | (1L << (WEEK - 1083)))) != 0)) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2439);
				match(LeftParen);
				setState(2440);
				expr(0);
				setState(2441);
				match(RightParen);
				}
				break;
			case 7:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2443);
				match(GROUP_CONCAT);
				setState(2444);
				match(LeftParen);
				setState(2446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT || _la==UNIQUE) {
					{
					setState(2445);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2448);
				expr_list();
				setState(2450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2449);
					order_by();
					}
				}

				setState(2454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(2452);
					match(SEPARATOR);
					setState(2453);
					match(STRING_VALUE);
					}
				}

				setState(2456);
				match(RightParen);
				}
				break;
			case 8:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2458);
				((Simple_func_exprContext)_localctx).func_name = match(TOP_K_FRE_HIST);
				setState(2459);
				match(LeftParen);
				setState(2460);
				bit_expr(0);
				setState(2461);
				match(Comma);
				setState(2462);
				bit_expr(0);
				setState(2463);
				match(Comma);
				setState(2464);
				bit_expr(0);
				setState(2465);
				match(RightParen);
				}
				break;
			case 9:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2467);
				((Simple_func_exprContext)_localctx).func_name = match(HYBRID_HIST);
				setState(2468);
				match(LeftParen);
				setState(2469);
				bit_expr(0);
				setState(2470);
				match(Comma);
				setState(2471);
				bit_expr(0);
				setState(2472);
				match(RightParen);
				}
				break;
			case 10:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2474);
				((Simple_func_exprContext)_localctx).func_name = match(IF);
				setState(2475);
				match(LeftParen);
				setState(2476);
				expr(0);
				setState(2477);
				match(Comma);
				setState(2478);
				expr(0);
				setState(2479);
				match(Comma);
				setState(2480);
				expr(0);
				setState(2481);
				match(RightParen);
				}
				break;
			case 11:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2483);
				cur_timestamp_func();
				}
				break;
			case 12:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2484);
				sysdate_func();
				}
				break;
			case 13:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2485);
				cur_time_func();
				}
				break;
			case 14:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2486);
				cur_date_func();
				}
				break;
			case 15:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2487);
				utc_timestamp_func();
				}
				break;
			case 16:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2488);
				utc_time_func();
				}
				break;
			case 17:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2489);
				utc_date_func();
				}
				break;
			case 18:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2490);
				match(CAST);
				setState(2491);
				match(LeftParen);
				setState(2492);
				expr(0);
				setState(2493);
				match(AS);
				setState(2494);
				cast_data_type();
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARRAY) {
					{
					setState(2495);
					match(ARRAY);
					}
				}

				setState(2498);
				match(RightParen);
				}
				break;
			case 19:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2500);
				((Simple_func_exprContext)_localctx).func_name = match(INSERT);
				setState(2501);
				match(LeftParen);
				setState(2502);
				expr(0);
				setState(2503);
				match(Comma);
				setState(2504);
				expr(0);
				setState(2505);
				match(Comma);
				setState(2506);
				expr(0);
				setState(2507);
				match(Comma);
				setState(2508);
				expr(0);
				setState(2509);
				match(RightParen);
				}
				break;
			case 20:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2511);
				match(CONVERT);
				setState(2512);
				match(LeftParen);
				setState(2513);
				expr(0);
				setState(2514);
				match(Comma);
				setState(2515);
				cast_data_type();
				setState(2516);
				match(RightParen);
				}
				break;
			case 21:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2518);
				match(CONVERT);
				setState(2519);
				match(LeftParen);
				setState(2520);
				expr(0);
				setState(2521);
				match(USING);
				setState(2522);
				charset_name();
				setState(2523);
				match(RightParen);
				}
				break;
			case 22:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2525);
				match(POSITION);
				setState(2526);
				match(LeftParen);
				setState(2527);
				bit_expr(0);
				setState(2528);
				match(IN);
				setState(2529);
				expr(0);
				setState(2530);
				match(RightParen);
				}
				break;
			case 23:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2532);
				substr_or_substring();
				setState(2533);
				match(LeftParen);
				setState(2534);
				substr_params();
				setState(2535);
				match(RightParen);
				}
				break;
			case 24:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2537);
				match(TRIM);
				setState(2538);
				match(LeftParen);
				setState(2539);
				parameterized_trim();
				setState(2540);
				match(RightParen);
				}
				break;
			case 25:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2542);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==MOD || _la==TIMESTAMP || _la==SUBDATE || _la==ADDDATE || _la==JSON_OBJECTAGG || _la==LOG || _la==WEEK) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2543);
				match(LeftParen);
				setState(2544);
				expr(0);
				setState(2545);
				match(Comma);
				setState(2546);
				expr(0);
				setState(2547);
				match(RightParen);
				}
				break;
			case 26:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2549);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LN || _la==SECOND || _la==ASCII || _la==MINUTE || _la==HOUR || _la==MICROSECOND || _la==APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE || _la==QUARTER || _la==LOG) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2550);
				match(LeftParen);
				setState(2551);
				expr(0);
				setState(2552);
				match(RightParen);
				}
				break;
			case 27:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2554);
				match(GET_FORMAT);
				setState(2555);
				match(LeftParen);
				setState(2556);
				get_format_unit();
				setState(2557);
				match(Comma);
				setState(2558);
				expr(0);
				setState(2559);
				match(RightParen);
				}
				break;
			case 28:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2561);
				_la = _input.LA(1);
				if ( !(_la==SUBDATE || _la==DATE_SUB || _la==DATE_ADD || _la==ADDDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2562);
				match(LeftParen);
				setState(2563);
				date_params();
				setState(2564);
				match(RightParen);
				}
				break;
			case 29:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2566);
				((Simple_func_exprContext)_localctx).func_name = match(SUBDATE);
				setState(2567);
				match(LeftParen);
				setState(2568);
				expr(0);
				setState(2569);
				match(Comma);
				setState(2570);
				expr(0);
				setState(2571);
				match(RightParen);
				}
				break;
			case 30:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2573);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMPDIFF || _la==TIMESTAMPADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2574);
				match(LeftParen);
				setState(2575);
				timestamp_params();
				setState(2576);
				match(RightParen);
				}
				break;
			case 31:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2578);
				match(EXTRACT);
				setState(2579);
				match(LeftParen);
				setState(2580);
				date_unit();
				setState(2581);
				match(FROM);
				setState(2582);
				expr(0);
				setState(2583);
				match(RightParen);
				}
				break;
			case 32:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2585);
				((Simple_func_exprContext)_localctx).func_name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==VALUES) ) {
					((Simple_func_exprContext)_localctx).func_name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2586);
				match(LeftParen);
				setState(2587);
				column_definition_ref();
				setState(2588);
				match(RightParen);
				}
				break;
			case 33:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2590);
				match(CHARACTER);
				setState(2591);
				match(LeftParen);
				setState(2592);
				expr_list();
				setState(2593);
				match(USING);
				setState(2594);
				charset_name();
				setState(2595);
				match(RightParen);
				}
				break;
			case 34:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2597);
				function_name();
				setState(2598);
				match(LeftParen);
				setState(2600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
					{
					setState(2599);
					expr_as_list();
					}
				}

				setState(2602);
				match(RightParen);
				}
				break;
			case 35:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2604);
				relation_name();
				setState(2605);
				match(Dot);
				setState(2606);
				function_name();
				setState(2607);
				match(LeftParen);
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
					{
					setState(2608);
					expr_as_list();
					}
				}

				setState(2611);
				match(RightParen);
				}
				break;
			case 36:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2613);
				sys_interval_func();
				}
				break;
			case 37:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2614);
				((Simple_func_exprContext)_localctx).func_name = match(CALC_PARTITION_ID);
				setState(2615);
				match(LeftParen);
				setState(2616);
				bit_expr(0);
				setState(2617);
				match(Comma);
				setState(2618);
				bit_expr(0);
				setState(2619);
				match(RightParen);
				}
				break;
			case 38:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2621);
				((Simple_func_exprContext)_localctx).func_name = match(CALC_PARTITION_ID);
				setState(2622);
				match(LeftParen);
				setState(2623);
				bit_expr(0);
				setState(2624);
				match(Comma);
				setState(2625);
				bit_expr(0);
				setState(2626);
				match(Comma);
				setState(2627);
				bit_expr(0);
				setState(2628);
				match(RightParen);
				}
				break;
			case 39:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2630);
				match(WEIGHT_STRING);
				setState(2631);
				match(LeftParen);
				setState(2632);
				expr(0);
				setState(2636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2633);
					match(AS);
					setState(2634);
					match(CHARACTER);
					setState(2635);
					ws_nweights();
					}
				}

				setState(2640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(2638);
					match(LEVEL);
					setState(2639);
					ws_level_list_or_range();
					}
				}

				setState(2642);
				match(RightParen);
				}
				break;
			case 40:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2644);
				match(WEIGHT_STRING);
				setState(2645);
				match(LeftParen);
				setState(2646);
				expr(0);
				setState(2647);
				match(AS);
				setState(2648);
				match(BINARY);
				setState(2649);
				ws_nweights();
				setState(2650);
				match(RightParen);
				}
				break;
			case 41:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2652);
				match(WEIGHT_STRING);
				setState(2653);
				match(LeftParen);
				setState(2654);
				expr(0);
				setState(2655);
				match(Comma);
				setState(2656);
				match(INTNUM);
				setState(2657);
				match(Comma);
				setState(2658);
				match(INTNUM);
				setState(2659);
				match(Comma);
				setState(2660);
				match(INTNUM);
				setState(2661);
				match(Comma);
				setState(2662);
				match(INTNUM);
				setState(2663);
				match(RightParen);
				}
				break;
			case 42:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2665);
				json_value_expr();
				}
				break;
			case 43:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2666);
				json_query_expr();
				}
				break;
			case 44:
				_localctx = new Complex_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2667);
				vector_distance_expr();
				}
				break;
			case 45:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2668);
				((Simple_func_exprContext)_localctx).func_name = match(POINT);
				setState(2669);
				match(LeftParen);
				setState(2670);
				expr(0);
				setState(2671);
				match(Comma);
				setState(2672);
				expr(0);
				setState(2673);
				match(RightParen);
				}
				break;
			case 46:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2675);
				((Simple_func_exprContext)_localctx).func_name = match(LINESTRING);
				setState(2676);
				match(LeftParen);
				setState(2677);
				expr_list();
				setState(2678);
				match(RightParen);
				}
				break;
			case 47:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2680);
				((Simple_func_exprContext)_localctx).func_name = match(MULTIPOINT);
				setState(2681);
				match(LeftParen);
				setState(2682);
				expr_list();
				setState(2683);
				match(RightParen);
				}
				break;
			case 48:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(2685);
				((Simple_func_exprContext)_localctx).func_name = match(MULTILINESTRING);
				setState(2686);
				match(LeftParen);
				setState(2687);
				expr_list();
				setState(2688);
				match(RightParen);
				}
				break;
			case 49:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(2690);
				((Simple_func_exprContext)_localctx).func_name = match(POLYGON);
				setState(2691);
				match(LeftParen);
				setState(2692);
				expr_list();
				setState(2693);
				match(RightParen);
				}
				break;
			case 50:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(2695);
				((Simple_func_exprContext)_localctx).func_name = match(MULTIPOLYGON);
				setState(2696);
				match(LeftParen);
				setState(2697);
				expr_list();
				setState(2698);
				match(RightParen);
				}
				break;
			case 51:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(2700);
				((Simple_func_exprContext)_localctx).func_name = match(GEOMETRYCOLLECTION);
				setState(2701);
				match(LeftParen);
				setState(2703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
					{
					setState(2702);
					expr_list();
					}
				}

				setState(2705);
				match(RightParen);
				}
				break;
			case 52:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 52);
				{
				setState(2706);
				((Simple_func_exprContext)_localctx).func_name = match(GEOMCOLLECTION);
				setState(2707);
				match(LeftParen);
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
					{
					setState(2708);
					expr_list();
					}
				}

				setState(2711);
				match(RightParen);
				}
				break;
			case 53:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 53);
				{
				setState(2712);
				((Simple_func_exprContext)_localctx).func_name = match(ST_ASMVT);
				setState(2713);
				match(LeftParen);
				setState(2714);
				column_ref();
				setState(2715);
				match(RightParen);
				}
				break;
			case 54:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 54);
				{
				setState(2717);
				((Simple_func_exprContext)_localctx).func_name = match(ST_ASMVT);
				setState(2718);
				match(LeftParen);
				setState(2719);
				column_ref();
				setState(2720);
				match(Comma);
				setState(2721);
				mvt_param();
				setState(2722);
				match(RightParen);
				}
				break;
			case 55:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 55);
				{
				setState(2724);
				((Simple_func_exprContext)_localctx).func_name = match(ST_ASMVT);
				setState(2725);
				match(LeftParen);
				setState(2726);
				column_ref();
				setState(2727);
				match(Comma);
				setState(2728);
				mvt_param();
				setState(2729);
				match(Comma);
				setState(2730);
				mvt_param();
				setState(2731);
				match(RightParen);
				}
				break;
			case 56:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 56);
				{
				setState(2733);
				((Simple_func_exprContext)_localctx).func_name = match(ST_ASMVT);
				setState(2734);
				match(LeftParen);
				setState(2735);
				column_ref();
				setState(2736);
				match(Comma);
				setState(2737);
				mvt_param();
				setState(2738);
				match(Comma);
				setState(2739);
				mvt_param();
				setState(2740);
				match(Comma);
				setState(2741);
				mvt_param();
				setState(2742);
				match(RightParen);
				}
				break;
			case 57:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 57);
				{
				setState(2744);
				((Simple_func_exprContext)_localctx).func_name = match(ST_ASMVT);
				setState(2745);
				match(LeftParen);
				setState(2746);
				column_ref();
				setState(2747);
				match(Comma);
				setState(2748);
				mvt_param();
				setState(2749);
				match(Comma);
				setState(2750);
				mvt_param();
				setState(2751);
				match(Comma);
				setState(2752);
				mvt_param();
				setState(2753);
				match(Comma);
				setState(2754);
				mvt_param();
				setState(2755);
				match(RightParen);
				}
				break;
			case 58:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 58);
				{
				setState(2757);
				((Simple_func_exprContext)_localctx).func_name = match(UnderlineST_ASMVT);
				setState(2758);
				match(LeftParen);
				setState(2759);
				column_ref();
				setState(2760);
				match(RightParen);
				}
				break;
			case 59:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 59);
				{
				setState(2762);
				((Simple_func_exprContext)_localctx).func_name = match(UnderlineST_ASMVT);
				setState(2763);
				match(LeftParen);
				setState(2764);
				column_ref();
				setState(2765);
				match(Comma);
				setState(2766);
				mvt_param();
				setState(2767);
				match(RightParen);
				}
				break;
			case 60:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 60);
				{
				setState(2769);
				((Simple_func_exprContext)_localctx).func_name = match(UnderlineST_ASMVT);
				setState(2770);
				match(LeftParen);
				setState(2771);
				column_ref();
				setState(2772);
				match(Comma);
				setState(2773);
				mvt_param();
				setState(2774);
				match(Comma);
				setState(2775);
				mvt_param();
				setState(2776);
				match(RightParen);
				}
				break;
			case 61:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 61);
				{
				setState(2778);
				((Simple_func_exprContext)_localctx).func_name = match(UnderlineST_ASMVT);
				setState(2779);
				match(LeftParen);
				setState(2780);
				column_ref();
				setState(2781);
				match(Comma);
				setState(2782);
				mvt_param();
				setState(2783);
				match(Comma);
				setState(2784);
				mvt_param();
				setState(2785);
				match(Comma);
				setState(2786);
				mvt_param();
				setState(2787);
				match(RightParen);
				}
				break;
			case 62:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 62);
				{
				setState(2789);
				((Simple_func_exprContext)_localctx).func_name = match(UnderlineST_ASMVT);
				setState(2790);
				match(LeftParen);
				setState(2791);
				column_ref();
				setState(2792);
				match(Comma);
				setState(2793);
				mvt_param();
				setState(2794);
				match(Comma);
				setState(2795);
				mvt_param();
				setState(2796);
				match(Comma);
				setState(2797);
				mvt_param();
				setState(2798);
				match(Comma);
				setState(2799);
				mvt_param();
				setState(2800);
				match(RightParen);
				}
				break;
			case 63:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 63);
				{
				setState(2802);
				((Simple_func_exprContext)_localctx).func_name = match(LAST_REFRESH_SCN);
				setState(2803);
				match(LeftParen);
				setState(2804);
				match(INTNUM);
				setState(2805);
				match(RightParen);
				}
				break;
			case 64:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 64);
				{
				setState(2806);
				((Simple_func_exprContext)_localctx).func_name = match(SUM_OPNSIZE);
				setState(2807);
				match(LeftParen);
				setState(2808);
				expr(0);
				setState(2809);
				match(RightParen);
				}
				break;
			case 65:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 65);
				{
				setState(2811);
				((Simple_func_exprContext)_localctx).func_name = match(RB_BUILD_AGG);
				setState(2812);
				match(LeftParen);
				setState(2813);
				expr(0);
				setState(2814);
				match(RightParen);
				}
				break;
			case 66:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 66);
				{
				setState(2816);
				((Simple_func_exprContext)_localctx).func_name = match(RB_OR_AGG);
				setState(2817);
				match(LeftParen);
				setState(2818);
				expr(0);
				setState(2819);
				match(RightParen);
				}
				break;
			case 67:
				_localctx = new Simple_func_exprContext(_localctx);
				enterOuterAlt(_localctx, 67);
				{
				setState(2821);
				((Simple_func_exprContext)_localctx).func_name = match(RB_AND_AGG);
				setState(2822);
				match(LeftParen);
				setState(2823);
				expr(0);
				setState(2824);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_distance_exprContext extends ParserRuleContext {
		public TerminalNode VECTOR_DISTANCE() { return getToken(OBParser.VECTOR_DISTANCE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Vector_distance_metricContext vector_distance_metric() {
			return getRuleContext(Vector_distance_metricContext.class,0);
		}
		public Vector_distance_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_distance_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVector_distance_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVector_distance_expr(this);
		}
	}

	public final Vector_distance_exprContext vector_distance_expr() throws RecognitionException {
		Vector_distance_exprContext _localctx = new Vector_distance_exprContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_vector_distance_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			match(VECTOR_DISTANCE);
			setState(2829);
			match(LeftParen);
			setState(2830);
			expr(0);
			setState(2831);
			match(Comma);
			setState(2832);
			expr(0);
			setState(2835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(2833);
				match(Comma);
				setState(2834);
				vector_distance_metric();
				}
			}

			setState(2837);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_distance_metricContext extends ParserRuleContext {
		public TerminalNode COSINE() { return getToken(OBParser.COSINE, 0); }
		public TerminalNode DOT() { return getToken(OBParser.DOT, 0); }
		public TerminalNode EUCLIDEAN() { return getToken(OBParser.EUCLIDEAN, 0); }
		public TerminalNode MANHATTAN() { return getToken(OBParser.MANHATTAN, 0); }
		public Vector_distance_metricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_distance_metric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVector_distance_metric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVector_distance_metric(this);
		}
	}

	public final Vector_distance_metricContext vector_distance_metric() throws RecognitionException {
		Vector_distance_metricContext _localctx = new Vector_distance_metricContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_vector_distance_metric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EUCLIDEAN) | (1L << DOT) | (1L << MANHATTAN) | (1L << COSINE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mvt_paramContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Mvt_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mvt_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMvt_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMvt_param(this);
		}
	}

	public final Mvt_paramContext mvt_param() throws RecognitionException {
		Mvt_paramContext _localctx = new Mvt_paramContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_mvt_param);
		int _la;
		try {
			setState(2849);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2841);
				match(STRING_VALUE);
				}
				break;
			case INTNUM:
			case Minus:
				enterOuterAlt(_localctx, 2);
				{
				setState(2843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Minus) {
					{
					setState(2842);
					match(Minus);
					}
				}

				setState(2845);
				match(INTNUM);
				}
				break;
			case NULLX:
				enterOuterAlt(_localctx, 3);
				{
				setState(2846);
				match(NULLX);
				}
				break;
			case NAME_OB:
				enterOuterAlt(_localctx, 4);
				{
				setState(2847);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2848);
				unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sys_interval_funcContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public Sys_interval_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sys_interval_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSys_interval_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSys_interval_func(this);
		}
	}

	public final Sys_interval_funcContext sys_interval_func() throws RecognitionException {
		Sys_interval_funcContext _localctx = new Sys_interval_funcContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_sys_interval_func);
		int _la;
		try {
			setState(2867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTERVAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2851);
				match(INTERVAL);
				setState(2852);
				match(LeftParen);
				setState(2853);
				expr(0);
				setState(2856); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2854);
					match(Comma);
					setState(2855);
					expr(0);
					}
					}
					setState(2858); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==Comma );
				setState(2860);
				match(RightParen);
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2862);
				match(CHECK);
				setState(2863);
				match(LeftParen);
				setState(2864);
				expr(0);
				setState(2865);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Utc_timestamp_funcContext extends ParserRuleContext {
		public TerminalNode UTC_TIMESTAMP() { return getToken(OBParser.UTC_TIMESTAMP, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Utc_timestamp_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utc_timestamp_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUtc_timestamp_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUtc_timestamp_func(this);
		}
	}

	public final Utc_timestamp_funcContext utc_timestamp_func() throws RecognitionException {
		Utc_timestamp_funcContext _localctx = new Utc_timestamp_funcContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_utc_timestamp_func);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869);
			match(UTC_TIMESTAMP);
			setState(2875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(2870);
				match(LeftParen);
				setState(2872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTNUM) {
					{
					setState(2871);
					match(INTNUM);
					}
				}

				setState(2874);
				match(RightParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Utc_time_funcContext extends ParserRuleContext {
		public TerminalNode UTC_TIME() { return getToken(OBParser.UTC_TIME, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Utc_time_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utc_time_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUtc_time_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUtc_time_func(this);
		}
	}

	public final Utc_time_funcContext utc_time_func() throws RecognitionException {
		Utc_time_funcContext _localctx = new Utc_time_funcContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_utc_time_func);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			match(UTC_TIME);
			setState(2883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				setState(2878);
				match(LeftParen);
				setState(2880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTNUM) {
					{
					setState(2879);
					match(INTNUM);
					}
				}

				setState(2882);
				match(RightParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Utc_date_funcContext extends ParserRuleContext {
		public TerminalNode UTC_DATE() { return getToken(OBParser.UTC_DATE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Utc_date_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utc_date_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUtc_date_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUtc_date_func(this);
		}
	}

	public final Utc_date_funcContext utc_date_func() throws RecognitionException {
		Utc_date_funcContext _localctx = new Utc_date_funcContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_utc_date_func);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2885);
			match(UTC_DATE);
			setState(2888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(2886);
				match(LeftParen);
				setState(2887);
				match(RightParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sysdate_funcContext extends ParserRuleContext {
		public TerminalNode SYSDATE() { return getToken(OBParser.SYSDATE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Sysdate_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sysdate_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSysdate_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSysdate_func(this);
		}
	}

	public final Sysdate_funcContext sysdate_func() throws RecognitionException {
		Sysdate_funcContext _localctx = new Sysdate_funcContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_sysdate_func);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2890);
			match(SYSDATE);
			setState(2891);
			match(LeftParen);
			setState(2893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTNUM) {
				{
				setState(2892);
				match(INTNUM);
				}
			}

			setState(2895);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cur_timestamp_funcContext extends ParserRuleContext {
		public Now_synonyms_funcContext now_synonyms_func() {
			return getRuleContext(Now_synonyms_funcContext.class,0);
		}
		public TerminalNode NOW() { return getToken(OBParser.NOW, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Cur_timestamp_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cur_timestamp_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCur_timestamp_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCur_timestamp_func(this);
		}
	}

	public final Cur_timestamp_funcContext cur_timestamp_func() throws RecognitionException {
		Cur_timestamp_funcContext _localctx = new Cur_timestamp_funcContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_cur_timestamp_func);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2899);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(2897);
				now_synonyms_func();
				}
				break;
			case NOW:
				{
				setState(2898);
				match(NOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(2901);
				match(LeftParen);
				setState(2903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTNUM) {
					{
					setState(2902);
					match(INTNUM);
					}
				}

				setState(2905);
				match(RightParen);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Now_synonyms_funcContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OBParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(OBParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(OBParser.LOCALTIMESTAMP, 0); }
		public Now_synonyms_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_now_synonyms_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNow_synonyms_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNow_synonyms_func(this);
		}
	}

	public final Now_synonyms_funcContext now_synonyms_func() throws RecognitionException {
		Now_synonyms_funcContext _localctx = new Now_synonyms_funcContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_now_synonyms_func);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_TIMESTAMP || _la==LOCALTIME || _la==LOCALTIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cur_time_funcContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode CURTIME() { return getToken(OBParser.CURTIME, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(OBParser.CURRENT_TIME, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Cur_time_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cur_time_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCur_time_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCur_time_func(this);
		}
	}

	public final Cur_time_funcContext cur_time_func() throws RecognitionException {
		Cur_time_funcContext _localctx = new Cur_time_funcContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_cur_time_func);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2910);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_TIME || _la==CURTIME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2911);
			match(LeftParen);
			setState(2913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTNUM) {
				{
				setState(2912);
				match(INTNUM);
				}
			}

			setState(2915);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cur_date_funcContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode CURDATE() { return getToken(OBParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(OBParser.CURRENT_DATE, 0); }
		public Cur_date_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cur_date_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCur_date_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCur_date_func(this);
		}
	}

	public final Cur_date_funcContext cur_date_func() throws RecognitionException {
		Cur_date_funcContext _localctx = new Cur_date_funcContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_cur_date_func);
		int _la;
		try {
			setState(2921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2917);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_DATE || _la==CURDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2918);
				match(LeftParen);
				setState(2919);
				match(RightParen);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2920);
				match(CURRENT_DATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_or_substringContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(OBParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(OBParser.SUBSTRING, 0); }
		public Substr_or_substringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_or_substring; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSubstr_or_substring(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSubstr_or_substring(this);
		}
	}

	public final Substr_or_substringContext substr_or_substring() throws RecognitionException {
		Substr_or_substringContext _localctx = new Substr_or_substringContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_substr_or_substring);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2923);
			_la = _input.LA(1);
			if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substr_paramsContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public Substr_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substr_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSubstr_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSubstr_params(this);
		}
	}

	public final Substr_paramsContext substr_params() throws RecognitionException {
		Substr_paramsContext _localctx = new Substr_paramsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_substr_params);
		int _la;
		try {
			setState(2939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2925);
				expr(0);
				setState(2926);
				match(Comma);
				setState(2927);
				expr(0);
				setState(2930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Comma) {
					{
					setState(2928);
					match(Comma);
					setState(2929);
					expr(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2932);
				expr(0);
				setState(2933);
				match(FROM);
				setState(2934);
				expr(0);
				setState(2937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2935);
					match(FOR);
					setState(2936);
					expr(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_paramsContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public Date_unitContext date_unit() {
			return getRuleContext(Date_unitContext.class,0);
		}
		public Date_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDate_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDate_params(this);
		}
	}

	public final Date_paramsContext date_params() throws RecognitionException {
		Date_paramsContext _localctx = new Date_paramsContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_date_params);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2941);
			expr(0);
			setState(2942);
			match(Comma);
			setState(2943);
			match(INTERVAL);
			setState(2944);
			expr(0);
			setState(2945);
			date_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_paramsContext extends ParserRuleContext {
		public Date_unitContext date_unit() {
			return getRuleContext(Date_unitContext.class,0);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Timestamp_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTimestamp_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTimestamp_params(this);
		}
	}

	public final Timestamp_paramsContext timestamp_params() throws RecognitionException {
		Timestamp_paramsContext _localctx = new Timestamp_paramsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_timestamp_params);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			date_unit();
			setState(2948);
			match(Comma);
			setState(2949);
			expr(0);
			setState(2950);
			match(Comma);
			setState(2951);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_list_or_rangeContext extends ParserRuleContext {
		public Ws_level_listContext ws_level_list() {
			return getRuleContext(Ws_level_listContext.class,0);
		}
		public Ws_level_rangeContext ws_level_range() {
			return getRuleContext(Ws_level_rangeContext.class,0);
		}
		public Ws_level_list_or_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_list_or_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_list_or_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_list_or_range(this);
		}
	}

	public final Ws_level_list_or_rangeContext ws_level_list_or_range() throws RecognitionException {
		Ws_level_list_or_rangeContext _localctx = new Ws_level_list_or_rangeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_ws_level_list_or_range);
		try {
			setState(2955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2953);
				ws_level_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2954);
				ws_level_range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_listContext extends ParserRuleContext {
		public List<Ws_level_list_itemContext> ws_level_list_item() {
			return getRuleContexts(Ws_level_list_itemContext.class);
		}
		public Ws_level_list_itemContext ws_level_list_item(int i) {
			return getRuleContext(Ws_level_list_itemContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Ws_level_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_list(this);
		}
	}

	public final Ws_level_listContext ws_level_list() throws RecognitionException {
		Ws_level_listContext _localctx = new Ws_level_listContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_ws_level_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			ws_level_list_item();
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(2958);
				match(Comma);
				setState(2959);
				ws_level_list_item();
				}
				}
				setState(2964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_list_itemContext extends ParserRuleContext {
		public Ws_level_numberContext ws_level_number() {
			return getRuleContext(Ws_level_numberContext.class,0);
		}
		public Ws_level_flagsContext ws_level_flags() {
			return getRuleContext(Ws_level_flagsContext.class,0);
		}
		public Ws_level_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_list_item(this);
		}
	}

	public final Ws_level_list_itemContext ws_level_list_item() throws RecognitionException {
		Ws_level_list_itemContext _localctx = new Ws_level_list_itemContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_ws_level_list_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2965);
			ws_level_number();
			setState(2966);
			ws_level_flags();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_rangeContext extends ParserRuleContext {
		public List<Ws_level_numberContext> ws_level_number() {
			return getRuleContexts(Ws_level_numberContext.class);
		}
		public Ws_level_numberContext ws_level_number(int i) {
			return getRuleContext(Ws_level_numberContext.class,i);
		}
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public Ws_level_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_range(this);
		}
	}

	public final Ws_level_rangeContext ws_level_range() throws RecognitionException {
		Ws_level_rangeContext _localctx = new Ws_level_rangeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_ws_level_range);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2968);
			ws_level_number();
			setState(2969);
			match(Minus);
			setState(2970);
			ws_level_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_numberContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Ws_level_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_number(this);
		}
	}

	public final Ws_level_numberContext ws_level_number() throws RecognitionException {
		Ws_level_numberContext _localctx = new Ws_level_numberContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_ws_level_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2972);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_flagsContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Ws_level_flag_descContext ws_level_flag_desc() {
			return getRuleContext(Ws_level_flag_descContext.class,0);
		}
		public Ws_level_flag_reverseContext ws_level_flag_reverse() {
			return getRuleContext(Ws_level_flag_reverseContext.class,0);
		}
		public Ws_level_flagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_flags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_flags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_flags(this);
		}
	}

	public final Ws_level_flagsContext ws_level_flags() throws RecognitionException {
		Ws_level_flagsContext _localctx = new Ws_level_flagsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_ws_level_flags);
		int _la;
		try {
			setState(2980);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Comma:
			case RightParen:
				enterOuterAlt(_localctx, 1);
				{
				setState(2974);
				empty();
				}
				break;
			case ASC:
			case DESC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2975);
				ws_level_flag_desc();
				setState(2977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REVERSE) {
					{
					setState(2976);
					ws_level_flag_reverse();
					}
				}

				}
				break;
			case REVERSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2979);
				ws_level_flag_reverse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_nweightsContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Ws_nweightsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_nweights; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_nweights(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_nweights(this);
		}
	}

	public final Ws_nweightsContext ws_nweights() throws RecognitionException {
		Ws_nweightsContext _localctx = new Ws_nweightsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_ws_nweights);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(LeftParen);
			setState(2983);
			match(INTNUM);
			setState(2984);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_flag_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(OBParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OBParser.DESC, 0); }
		public Ws_level_flag_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_flag_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_flag_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_flag_desc(this);
		}
	}

	public final Ws_level_flag_descContext ws_level_flag_desc() throws RecognitionException {
		Ws_level_flag_descContext _localctx = new Ws_level_flag_descContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_ws_level_flag_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2986);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ws_level_flag_reverseContext extends ParserRuleContext {
		public TerminalNode REVERSE() { return getToken(OBParser.REVERSE, 0); }
		public Ws_level_flag_reverseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ws_level_flag_reverse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWs_level_flag_reverse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWs_level_flag_reverse(this);
		}
	}

	public final Ws_level_flag_reverseContext ws_level_flag_reverse() throws RecognitionException {
		Ws_level_flag_reverseContext _localctx = new Ws_level_flag_reverseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_ws_level_flag_reverse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			match(REVERSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_stmtContext extends ParserRuleContext {
		public Delete_basic_stmtContext delete_basic_stmt() {
			return getRuleContext(Delete_basic_stmtContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDelete_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDelete_stmt(this);
		}
	}

	public final Delete_stmtContext delete_stmt() throws RecognitionException {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_delete_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2990);
				with_clause();
				}
			}

			setState(2993);
			delete_basic_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_basic_stmtContext extends ParserRuleContext {
		public Delete_with_opt_hintContext delete_with_opt_hint() {
			return getRuleContext(Delete_with_opt_hintContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public Tbl_nameContext tbl_name() {
			return getRuleContext(Tbl_nameContext.class,0);
		}
		public Delete_option_listContext delete_option_list() {
			return getRuleContext(Delete_option_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public Opt_hint_valueContext opt_hint_value() {
			return getRuleContext(Opt_hint_valueContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Multi_delete_tableContext multi_delete_table() {
			return getRuleContext(Multi_delete_tableContext.class,0);
		}
		public Delete_basic_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_basic_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDelete_basic_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDelete_basic_stmt(this);
		}
	}

	public final Delete_basic_stmtContext delete_basic_stmt() throws RecognitionException {
		Delete_basic_stmtContext _localctx = new Delete_basic_stmtContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_delete_basic_stmt);
		int _la;
		try {
			setState(3024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2995);
				delete_with_opt_hint();
				setState(2997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY || _la==QUICK) {
					{
					setState(2996);
					delete_option_list();
					}
				}

				setState(2999);
				match(FROM);
				setState(3000);
				tbl_name();
				setState(3005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3001);
					match(WHERE);
					setState(3002);
					opt_hint_value();
					setState(3003);
					expr(0);
					}
				}

				setState(3008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3007);
					order_by();
					}
				}

				setState(3011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3010);
					limit_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3013);
				delete_with_opt_hint();
				setState(3015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(3014);
					delete_option_list();
					}
					break;
				}
				setState(3017);
				multi_delete_table();
				setState(3022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3018);
					match(WHERE);
					setState(3019);
					opt_hint_value();
					setState(3020);
					expr(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_option_listContext extends ParserRuleContext {
		public List<Delete_optionContext> delete_option() {
			return getRuleContexts(Delete_optionContext.class);
		}
		public Delete_optionContext delete_option(int i) {
			return getRuleContext(Delete_optionContext.class,i);
		}
		public Delete_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDelete_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDelete_option_list(this);
		}
	}

	public final Delete_option_listContext delete_option_list() throws RecognitionException {
		Delete_option_listContext _localctx = new Delete_option_listContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_delete_option_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3027); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3026);
					delete_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3029); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_optionContext extends ParserRuleContext {
		public TerminalNode QUICK() { return getToken(OBParser.QUICK, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(OBParser.LOW_PRIORITY, 0); }
		public Delete_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDelete_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDelete_option(this);
		}
	}

	public final Delete_optionContext delete_option() throws RecognitionException {
		Delete_optionContext _localctx = new Delete_optionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_delete_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3031);
			_la = _input.LA(1);
			if ( !(_la==LOW_PRIORITY || _la==QUICK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_delete_tableContext extends ParserRuleContext {
		public Relation_with_star_listContext relation_with_star_list() {
			return getRuleContext(Relation_with_star_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public Table_referencesContext table_references() {
			return getRuleContext(Table_referencesContext.class,0);
		}
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public Multi_delete_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_delete_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMulti_delete_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMulti_delete_table(this);
		}
	}

	public final Multi_delete_tableContext multi_delete_table() throws RecognitionException {
		Multi_delete_tableContext _localctx = new Multi_delete_tableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_multi_delete_table);
		try {
			setState(3042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				relation_with_star_list();
				setState(3034);
				match(FROM);
				setState(3035);
				table_references();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(3037);
				match(FROM);
				setState(3038);
				relation_with_star_list();
				setState(3039);
				match(USING);
				setState(3040);
				table_references();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_stmtContext extends ParserRuleContext {
		public Update_basic_stmtContext update_basic_stmt() {
			return getRuleContext(Update_basic_stmtContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUpdate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUpdate_stmt(this);
		}
	}

	public final Update_stmtContext update_stmt() throws RecognitionException {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_update_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3044);
				with_clause();
				}
			}

			setState(3047);
			update_basic_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_basic_stmtContext extends ParserRuleContext {
		public Update_with_opt_hintContext update_with_opt_hint() {
			return getRuleContext(Update_with_opt_hintContext.class,0);
		}
		public Table_referencesContext table_references() {
			return getRuleContext(Table_referencesContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Update_asgn_listContext update_asgn_list() {
			return getRuleContext(Update_asgn_listContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OBParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public Opt_hint_valueContext opt_hint_value() {
			return getRuleContext(Opt_hint_valueContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Update_basic_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_basic_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUpdate_basic_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUpdate_basic_stmt(this);
		}
	}

	public final Update_basic_stmtContext update_basic_stmt() throws RecognitionException {
		Update_basic_stmtContext _localctx = new Update_basic_stmtContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_update_basic_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			update_with_opt_hint();
			setState(3051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3050);
				match(LOW_PRIORITY);
				}
			}

			setState(3054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3053);
				match(IGNORE);
				}
			}

			setState(3056);
			table_references();
			setState(3057);
			match(SET);
			setState(3058);
			update_asgn_list();
			setState(3063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3059);
				match(WHERE);
				setState(3060);
				opt_hint_value();
				setState(3061);
				expr(0);
				}
			}

			setState(3066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3065);
				order_by();
				}
			}

			setState(3069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3068);
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_asgn_listContext extends ParserRuleContext {
		public List<Update_asgn_factorContext> update_asgn_factor() {
			return getRuleContexts(Update_asgn_factorContext.class);
		}
		public Update_asgn_factorContext update_asgn_factor(int i) {
			return getRuleContext(Update_asgn_factorContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Update_asgn_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_asgn_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUpdate_asgn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUpdate_asgn_list(this);
		}
	}

	public final Update_asgn_listContext update_asgn_list() throws RecognitionException {
		Update_asgn_listContext _localctx = new Update_asgn_listContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_update_asgn_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			update_asgn_factor();
			setState(3076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3072);
				match(Comma);
				setState(3073);
				update_asgn_factor();
				}
				}
				setState(3078);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_asgn_factorContext extends ParserRuleContext {
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Expr_or_defaultContext expr_or_default() {
			return getRuleContext(Expr_or_defaultContext.class,0);
		}
		public Update_asgn_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_asgn_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUpdate_asgn_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUpdate_asgn_factor(this);
		}
	}

	public final Update_asgn_factorContext update_asgn_factor() throws RecognitionException {
		Update_asgn_factorContext _localctx = new Update_asgn_factorContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_update_asgn_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3079);
			column_definition_ref();
			setState(3080);
			match(COMP_EQ);
			setState(3081);
			expr_or_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(OBParser.RESOURCE, 0); }
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Resource_unit_optionContext resource_unit_option() {
			return getRuleContext(Resource_unit_optionContext.class,0);
		}
		public Opt_resource_unit_option_listContext opt_resource_unit_option_list() {
			return getRuleContext(Opt_resource_unit_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode POOL() { return getToken(OBParser.POOL, 0); }
		public Create_resource_pool_optionContext create_resource_pool_option() {
			return getRuleContext(Create_resource_pool_optionContext.class,0);
		}
		public Opt_create_resource_pool_option_listContext opt_create_resource_pool_option_list() {
			return getRuleContext(Opt_create_resource_pool_option_listContext.class,0);
		}
		public Create_resource_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_resource_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_resource_stmt(this);
		}
	}

	public final Create_resource_stmtContext create_resource_stmt() throws RecognitionException {
		Create_resource_stmtContext _localctx = new Create_resource_stmtContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_resource_stmt);
		int _la;
		try {
			setState(3117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3083);
				match(CREATE);
				setState(3084);
				match(RESOURCE);
				setState(3085);
				match(UNIT);
				setState(3090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3086);
					match(IF);
					setState(3087);
					not();
					setState(3088);
					match(EXISTS);
					}
				}

				setState(3092);
				relation_name();
				setState(3098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(3093);
					resource_unit_option();
					}
					break;
				case 2:
					{
					{
					setState(3094);
					opt_resource_unit_option_list(0);
					setState(3095);
					match(Comma);
					setState(3096);
					resource_unit_option();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3100);
				match(CREATE);
				setState(3101);
				match(RESOURCE);
				setState(3102);
				match(POOL);
				setState(3107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3103);
					match(IF);
					setState(3104);
					not();
					setState(3105);
					match(EXISTS);
					}
				}

				setState(3109);
				relation_name();
				setState(3115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(3110);
					create_resource_pool_option();
					}
					break;
				case 2:
					{
					{
					setState(3111);
					opt_create_resource_pool_option_list();
					setState(3112);
					match(Comma);
					setState(3113);
					create_resource_pool_option();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_resource_unit_option_listContext extends ParserRuleContext {
		public Resource_unit_optionContext resource_unit_option() {
			return getRuleContext(Resource_unit_optionContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Opt_resource_unit_option_listContext opt_resource_unit_option_list() {
			return getRuleContext(Opt_resource_unit_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Opt_resource_unit_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_resource_unit_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_resource_unit_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_resource_unit_option_list(this);
		}
	}

	public final Opt_resource_unit_option_listContext opt_resource_unit_option_list() throws RecognitionException {
		return opt_resource_unit_option_list(0);
	}

	private Opt_resource_unit_option_listContext opt_resource_unit_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_resource_unit_option_listContext _localctx = new Opt_resource_unit_option_listContext(_ctx, _parentState);
		Opt_resource_unit_option_listContext _prevctx = _localctx;
		int _startState = 172;
		enterRecursionRule(_localctx, 172, RULE_opt_resource_unit_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(3120);
				resource_unit_option();
				}
				break;
			case 2:
				{
				setState(3121);
				empty();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3129);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_resource_unit_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_resource_unit_option_list);
					setState(3124);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3125);
					match(Comma);
					setState(3126);
					resource_unit_option();
					}
					} 
				}
				setState(3131);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Resource_unit_optionContext extends ParserRuleContext {
		public Conf_constContext conf_const() {
			return getRuleContext(Conf_constContext.class,0);
		}
		public TerminalNode MIN_CPU() { return getToken(OBParser.MIN_CPU, 0); }
		public TerminalNode MIN_IOPS() { return getToken(OBParser.MIN_IOPS, 0); }
		public TerminalNode MIN_MEMORY() { return getToken(OBParser.MIN_MEMORY, 0); }
		public TerminalNode MAX_CPU() { return getToken(OBParser.MAX_CPU, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(OBParser.MAX_MEMORY, 0); }
		public TerminalNode MAX_IOPS() { return getToken(OBParser.MAX_IOPS, 0); }
		public TerminalNode MAX_DISK_SIZE() { return getToken(OBParser.MAX_DISK_SIZE, 0); }
		public TerminalNode MAX_SESSION_NUM() { return getToken(OBParser.MAX_SESSION_NUM, 0); }
		public TerminalNode MEMORY_SIZE() { return getToken(OBParser.MEMORY_SIZE, 0); }
		public TerminalNode IOPS_WEIGHT() { return getToken(OBParser.IOPS_WEIGHT, 0); }
		public TerminalNode LOG_DISK_SIZE() { return getToken(OBParser.LOG_DISK_SIZE, 0); }
		public TerminalNode DATA_DISK_SIZE() { return getToken(OBParser.DATA_DISK_SIZE, 0); }
		public TerminalNode MAX_NET_BANDWIDTH() { return getToken(OBParser.MAX_NET_BANDWIDTH, 0); }
		public TerminalNode NET_BANDWIDTH_WEIGHT() { return getToken(OBParser.NET_BANDWIDTH_WEIGHT, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Resource_unit_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_unit_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterResource_unit_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitResource_unit_option(this);
		}
	}

	public final Resource_unit_optionContext resource_unit_option() throws RecognitionException {
		Resource_unit_optionContext _localctx = new Resource_unit_optionContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_resource_unit_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			_la = _input.LA(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (MAX_NET_BANDWIDTH - 35)) | (1L << (DATA_DISK_SIZE - 35)) | (1L << (NET_BANDWIDTH_WEIGHT - 35)))) != 0) || _la==IOPS_WEIGHT || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (MAX_DISK_SIZE - 447)) | (1L << (MAX_CPU - 447)) | (1L << (MIN_IOPS - 447)))) != 0) || _la==MAX_IOPS || _la==LOG_DISK_SIZE || _la==MAX_SESSION_NUM || _la==MAX_MEMORY || _la==MEMORY_SIZE || _la==MIN_MEMORY || _la==MIN_CPU) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(3133);
				match(COMP_EQ);
				}
			}

			setState(3136);
			conf_const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_create_resource_pool_option_listContext extends ParserRuleContext {
		public List<Create_resource_pool_optionContext> create_resource_pool_option() {
			return getRuleContexts(Create_resource_pool_optionContext.class);
		}
		public Create_resource_pool_optionContext create_resource_pool_option(int i) {
			return getRuleContext(Create_resource_pool_optionContext.class,i);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Opt_create_resource_pool_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_create_resource_pool_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_create_resource_pool_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_create_resource_pool_option_list(this);
		}
	}

	public final Opt_create_resource_pool_option_listContext opt_create_resource_pool_option_list() throws RecognitionException {
		Opt_create_resource_pool_option_listContext _localctx = new Opt_create_resource_pool_option_listContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_opt_create_resource_pool_option_list);
		try {
			int _alt;
			setState(3148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3138);
				create_resource_pool_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3139);
				empty();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3140);
				create_resource_pool_option();
				setState(3145);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,150,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3141);
						match(Comma);
						setState(3142);
						create_resource_pool_option();
						}
						} 
					}
					setState(3147);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,150,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_pool_optionContext extends ParserRuleContext {
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode UNIT_NUM() { return getToken(OBParser.UNIT_NUM, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode ZONE_LIST() { return getToken(OBParser.ZONE_LIST, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Zone_listContext zone_list() {
			return getRuleContext(Zone_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode REPLICA_TYPE() { return getToken(OBParser.REPLICA_TYPE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Create_resource_pool_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_resource_pool_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_resource_pool_option(this);
		}
	}

	public final Create_resource_pool_optionContext create_resource_pool_option() throws RecognitionException {
		Create_resource_pool_optionContext _localctx = new Create_resource_pool_optionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_create_resource_pool_option);
		int _la;
		try {
			setState(3173);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				match(UNIT);
				setState(3152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3151);
					match(COMP_EQ);
					}
				}

				setState(3154);
				relation_name_or_string();
				}
				break;
			case UNIT_NUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(3155);
				match(UNIT_NUM);
				setState(3157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3156);
					match(COMP_EQ);
					}
				}

				setState(3159);
				match(INTNUM);
				}
				break;
			case ZONE_LIST:
				enterOuterAlt(_localctx, 3);
				{
				setState(3160);
				match(ZONE_LIST);
				setState(3162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3161);
					match(COMP_EQ);
					}
				}

				setState(3164);
				match(LeftParen);
				setState(3165);
				zone_list();
				setState(3166);
				match(RightParen);
				}
				break;
			case REPLICA_TYPE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3168);
				match(REPLICA_TYPE);
				setState(3170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3169);
					match(COMP_EQ);
					}
				}

				setState(3172);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_pool_option_listContext extends ParserRuleContext {
		public List<Alter_resource_pool_optionContext> alter_resource_pool_option() {
			return getRuleContexts(Alter_resource_pool_optionContext.class);
		}
		public Alter_resource_pool_optionContext alter_resource_pool_option(int i) {
			return getRuleContext(Alter_resource_pool_optionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Alter_resource_pool_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_pool_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_resource_pool_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_resource_pool_option_list(this);
		}
	}

	public final Alter_resource_pool_option_listContext alter_resource_pool_option_list() throws RecognitionException {
		Alter_resource_pool_option_listContext _localctx = new Alter_resource_pool_option_listContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_alter_resource_pool_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3175);
			alter_resource_pool_option();
			setState(3180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3176);
				match(Comma);
				setState(3177);
				alter_resource_pool_option();
				}
				}
				setState(3182);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_id_listContext extends ParserRuleContext {
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Unit_id_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_id_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnit_id_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnit_id_list(this);
		}
	}

	public final Unit_id_listContext unit_id_list() throws RecognitionException {
		Unit_id_listContext _localctx = new Unit_id_listContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_unit_id_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3183);
			match(INTNUM);
			setState(3188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3184);
				match(Comma);
				setState(3185);
				match(INTNUM);
				}
				}
				setState(3190);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_listContext extends ParserRuleContext {
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Id_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterId_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitId_list(this);
		}
	}

	public final Id_listContext id_list() throws RecognitionException {
		Id_listContext _localctx = new Id_listContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_id_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3191);
			match(INTNUM);
			setState(3196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3192);
				match(Comma);
				setState(3193);
				match(INTNUM);
				}
				}
				setState(3198);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_pool_optionContext extends ParserRuleContext {
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode UNIT_NUM() { return getToken(OBParser.UNIT_NUM, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Unit_id_listContext unit_id_list() {
			return getRuleContext(Unit_id_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode ZONE_LIST() { return getToken(OBParser.ZONE_LIST, 0); }
		public Zone_listContext zone_list() {
			return getRuleContext(Zone_listContext.class,0);
		}
		public Alter_resource_pool_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_pool_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_resource_pool_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_resource_pool_option(this);
		}
	}

	public final Alter_resource_pool_optionContext alter_resource_pool_option() throws RecognitionException {
		Alter_resource_pool_optionContext _localctx = new Alter_resource_pool_optionContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_alter_resource_pool_option);
		int _la;
		try {
			setState(3226);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3199);
				match(UNIT);
				setState(3201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3200);
					match(COMP_EQ);
					}
				}

				setState(3203);
				relation_name_or_string();
				}
				break;
			case UNIT_NUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(3204);
				match(UNIT_NUM);
				setState(3206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3205);
					match(COMP_EQ);
					}
				}

				setState(3208);
				match(INTNUM);
				setState(3216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DELETE) {
					{
					setState(3209);
					match(DELETE);
					setState(3210);
					match(UNIT);
					setState(3211);
					opt_equal_mark();
					setState(3212);
					match(LeftParen);
					setState(3213);
					unit_id_list();
					setState(3214);
					match(RightParen);
					}
				}

				}
				break;
			case ZONE_LIST:
				enterOuterAlt(_localctx, 3);
				{
				setState(3218);
				match(ZONE_LIST);
				setState(3220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3219);
					match(COMP_EQ);
					}
				}

				setState(3222);
				match(LeftParen);
				setState(3223);
				zone_list();
				setState(3224);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(OBParser.RESOURCE, 0); }
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Resource_unit_optionContext resource_unit_option() {
			return getRuleContext(Resource_unit_optionContext.class,0);
		}
		public Opt_resource_unit_option_listContext opt_resource_unit_option_list() {
			return getRuleContext(Opt_resource_unit_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode POOL() { return getToken(OBParser.POOL, 0); }
		public Alter_resource_pool_option_listContext alter_resource_pool_option_list() {
			return getRuleContext(Alter_resource_pool_option_listContext.class,0);
		}
		public TerminalNode SPLIT() { return getToken(OBParser.SPLIT, 0); }
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public List<TerminalNode> LeftParen() { return getTokens(OBParser.LeftParen); }
		public TerminalNode LeftParen(int i) {
			return getToken(OBParser.LeftParen, i);
		}
		public List<Resource_pool_listContext> resource_pool_list() {
			return getRuleContexts(Resource_pool_listContext.class);
		}
		public Resource_pool_listContext resource_pool_list(int i) {
			return getRuleContext(Resource_pool_listContext.class,i);
		}
		public List<TerminalNode> RightParen() { return getTokens(OBParser.RightParen); }
		public TerminalNode RightParen(int i) {
			return getToken(OBParser.RightParen, i);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Zone_listContext zone_list() {
			return getRuleContext(Zone_listContext.class,0);
		}
		public TerminalNode MERGE() { return getToken(OBParser.MERGE, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public TerminalNode UNIT_NUM() { return getToken(OBParser.UNIT_NUM, 0); }
		public List<Opt_equal_markContext> opt_equal_mark() {
			return getRuleContexts(Opt_equal_markContext.class);
		}
		public Opt_equal_markContext opt_equal_mark(int i) {
			return getRuleContext(Opt_equal_markContext.class,i);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode UNIT_GROUP() { return getToken(OBParser.UNIT_GROUP, 0); }
		public Id_listContext id_list() {
			return getRuleContext(Id_listContext.class,0);
		}
		public Alter_resource_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_resource_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_resource_stmt(this);
		}
	}

	public final Alter_resource_stmtContext alter_resource_stmt() throws RecognitionException {
		Alter_resource_stmtContext _localctx = new Alter_resource_stmtContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_alter_resource_stmt);
		int _la;
		try {
			setState(3287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3228);
				match(ALTER);
				setState(3229);
				match(RESOURCE);
				setState(3230);
				match(UNIT);
				setState(3231);
				relation_name();
				setState(3237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(3232);
					resource_unit_option();
					}
					break;
				case 2:
					{
					{
					setState(3233);
					opt_resource_unit_option_list(0);
					setState(3234);
					match(Comma);
					setState(3235);
					resource_unit_option();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3239);
				match(ALTER);
				setState(3240);
				match(RESOURCE);
				setState(3241);
				match(POOL);
				setState(3242);
				relation_name();
				setState(3243);
				alter_resource_pool_option_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3245);
				match(ALTER);
				setState(3246);
				match(RESOURCE);
				setState(3247);
				match(POOL);
				setState(3248);
				relation_name();
				setState(3249);
				match(SPLIT);
				setState(3250);
				match(INTO);
				setState(3251);
				match(LeftParen);
				setState(3252);
				resource_pool_list();
				setState(3253);
				match(RightParen);
				setState(3254);
				match(ON);
				setState(3255);
				match(LeftParen);
				setState(3256);
				zone_list();
				setState(3257);
				match(RightParen);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3259);
				match(ALTER);
				setState(3260);
				match(RESOURCE);
				setState(3261);
				match(POOL);
				setState(3262);
				match(MERGE);
				setState(3263);
				match(LeftParen);
				setState(3264);
				resource_pool_list();
				setState(3265);
				match(RightParen);
				setState(3266);
				match(INTO);
				setState(3267);
				match(LeftParen);
				setState(3268);
				resource_pool_list();
				setState(3269);
				match(RightParen);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3271);
				match(ALTER);
				setState(3272);
				match(RESOURCE);
				setState(3273);
				match(TENANT);
				setState(3274);
				relation_name();
				setState(3275);
				match(UNIT_NUM);
				setState(3276);
				opt_equal_mark();
				setState(3277);
				match(INTNUM);
				setState(3285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DELETE) {
					{
					setState(3278);
					match(DELETE);
					setState(3279);
					match(UNIT_GROUP);
					setState(3280);
					opt_equal_mark();
					setState(3281);
					match(LeftParen);
					setState(3282);
					id_list();
					setState(3283);
					match(RightParen);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(OBParser.RESOURCE, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public TerminalNode POOL() { return getToken(OBParser.POOL, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_resource_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_resource_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_resource_stmt(this);
		}
	}

	public final Drop_resource_stmtContext drop_resource_stmt() throws RecognitionException {
		Drop_resource_stmtContext _localctx = new Drop_resource_stmtContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_drop_resource_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3289);
			match(DROP);
			setState(3290);
			match(RESOURCE);
			setState(3291);
			_la = _input.LA(1);
			if ( !(_la==POOL || _la==UNIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3292);
				match(IF);
				setState(3293);
				match(EXISTS);
				}
			}

			setState(3296);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Tenant_optionContext tenant_option() {
			return getRuleContext(Tenant_optionContext.class,0);
		}
		public Opt_tenant_option_listContext opt_tenant_option_list() {
			return getRuleContext(Opt_tenant_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Sys_var_and_val_listContext sys_var_and_val_list() {
			return getRuleContext(Sys_var_and_val_listContext.class,0);
		}
		public TerminalNode VARIABLES() { return getToken(OBParser.VARIABLES, 0); }
		public Create_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_tenant_stmt(this);
		}
	}

	public final Create_tenant_stmtContext create_tenant_stmt() throws RecognitionException {
		Create_tenant_stmtContext _localctx = new Create_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_tenant_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3298);
			match(CREATE);
			setState(3299);
			match(TENANT);
			setState(3304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3300);
				match(IF);
				setState(3301);
				not();
				setState(3302);
				match(EXISTS);
				}
			}

			setState(3306);
			relation_name();
			setState(3312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(3307);
				tenant_option();
				}
				break;
			case 2:
				{
				{
				setState(3308);
				opt_tenant_option_list(0);
				setState(3309);
				match(Comma);
				setState(3310);
				tenant_option();
				}
				}
				break;
			}
			setState(3321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				{
				setState(3314);
				match(SET);
				setState(3315);
				sys_var_and_val_list();
				}
				}
				break;
			case 2:
				{
				{
				setState(3316);
				match(SET);
				setState(3317);
				match(VARIABLES);
				setState(3318);
				sys_var_and_val_list();
				}
				}
				break;
			case 3:
				{
				{
				setState(3319);
				match(VARIABLES);
				setState(3320);
				sys_var_and_val_list();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_standby_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Log_restore_source_optionContext log_restore_source_option() {
			return getRuleContext(Log_restore_source_optionContext.class,0);
		}
		public Tenant_optionContext tenant_option() {
			return getRuleContext(Tenant_optionContext.class,0);
		}
		public Opt_tenant_option_listContext opt_tenant_option_list() {
			return getRuleContext(Opt_tenant_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Create_standby_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_standby_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_standby_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_standby_tenant_stmt(this);
		}
	}

	public final Create_standby_tenant_stmtContext create_standby_tenant_stmt() throws RecognitionException {
		Create_standby_tenant_stmtContext _localctx = new Create_standby_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_standby_tenant_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			match(CREATE);
			setState(3324);
			match(STANDBY);
			setState(3325);
			match(TENANT);
			setState(3330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3326);
				match(IF);
				setState(3327);
				not();
				setState(3328);
				match(EXISTS);
				}
			}

			setState(3332);
			relation_name();
			setState(3334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(3333);
				log_restore_source_option();
				}
				break;
			}
			setState(3341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(3336);
				tenant_option();
				}
				break;
			case 2:
				{
				{
				setState(3337);
				opt_tenant_option_list(0);
				setState(3338);
				match(Comma);
				setState(3339);
				tenant_option();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Log_restore_source_optionContext extends ParserRuleContext {
		public TerminalNode LOG_RESTORE_SOURCE() { return getToken(OBParser.LOG_RESTORE_SOURCE, 0); }
		public Conf_constContext conf_const() {
			return getRuleContext(Conf_constContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Log_restore_source_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_restore_source_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLog_restore_source_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLog_restore_source_option(this);
		}
	}

	public final Log_restore_source_optionContext log_restore_source_option() throws RecognitionException {
		Log_restore_source_optionContext _localctx = new Log_restore_source_optionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_log_restore_source_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3343);
			match(LOG_RESTORE_SOURCE);
			setState(3345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(3344);
				match(COMP_EQ);
				}
			}

			setState(3347);
			conf_const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tenant_option_listContext extends ParserRuleContext {
		public Tenant_optionContext tenant_option() {
			return getRuleContext(Tenant_optionContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Opt_tenant_option_listContext opt_tenant_option_list() {
			return getRuleContext(Opt_tenant_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Opt_tenant_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_tenant_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_tenant_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_tenant_option_list(this);
		}
	}

	public final Opt_tenant_option_listContext opt_tenant_option_list() throws RecognitionException {
		return opt_tenant_option_list(0);
	}

	private Opt_tenant_option_listContext opt_tenant_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_tenant_option_listContext _localctx = new Opt_tenant_option_listContext(_ctx, _parentState);
		Opt_tenant_option_listContext _prevctx = _localctx;
		int _startState = 198;
		enterRecursionRule(_localctx, 198, RULE_opt_tenant_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(3350);
				tenant_option();
				}
				break;
			case 2:
				{
				setState(3351);
				empty();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3359);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_tenant_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_tenant_option_list);
					setState(3354);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3355);
					match(Comma);
					setState(3356);
					tenant_option();
					}
					} 
				}
				setState(3361);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Tenant_optionContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode LOGONLY_REPLICA_NUM() { return getToken(OBParser.LOGONLY_REPLICA_NUM, 0); }
		public TerminalNode REPLICA_NUM() { return getToken(OBParser.REPLICA_NUM, 0); }
		public TerminalNode REWRITE_MERGE_VERSION() { return getToken(OBParser.REWRITE_MERGE_VERSION, 0); }
		public TerminalNode STORAGE_FORMAT_VERSION() { return getToken(OBParser.STORAGE_FORMAT_VERSION, 0); }
		public TerminalNode STORAGE_FORMAT_WORK_VERSION() { return getToken(OBParser.STORAGE_FORMAT_WORK_VERSION, 0); }
		public TerminalNode PROGRESSIVE_MERGE_NUM() { return getToken(OBParser.PROGRESSIVE_MERGE_NUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode LOCALITY() { return getToken(OBParser.LOCALITY, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode PRIMARY_ZONE() { return getToken(OBParser.PRIMARY_ZONE, 0); }
		public Primary_zone_nameContext primary_zone_name() {
			return getRuleContext(Primary_zone_nameContext.class,0);
		}
		public TerminalNode RESOURCE_POOL_LIST() { return getToken(OBParser.RESOURCE_POOL_LIST, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Resource_pool_listContext resource_pool_list() {
			return getRuleContext(Resource_pool_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode ENABLE_ARBITRATION_SERVICE() { return getToken(OBParser.ENABLE_ARBITRATION_SERVICE, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode ZONE_LIST() { return getToken(OBParser.ZONE_LIST, 0); }
		public Zone_listContext zone_list() {
			return getRuleContext(Zone_listContext.class,0);
		}
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(OBParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public Read_only_or_writeContext read_only_or_write() {
			return getRuleContext(Read_only_or_writeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public Default_tablegroupContext default_tablegroup() {
			return getRuleContext(Default_tablegroupContext.class,0);
		}
		public TerminalNode ENABLE_EXTENDED_ROWID() { return getToken(OBParser.ENABLE_EXTENDED_ROWID, 0); }
		public Tenant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tenant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTenant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTenant_option(this);
		}
	}

	public final Tenant_optionContext tenant_option() throws RecognitionException {
		Tenant_optionContext _localctx = new Tenant_optionContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_tenant_option);
		int _la;
		try {
			setState(3424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORAGE_FORMAT_WORK_VERSION:
			case REWRITE_MERGE_VERSION:
			case PROGRESSIVE_MERGE_NUM:
			case LOGONLY_REPLICA_NUM:
			case STORAGE_FORMAT_VERSION:
			case REPLICA_NUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(3362);
				_la = _input.LA(1);
				if ( !(((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (STORAGE_FORMAT_WORK_VERSION - 387)) | (1L << (REWRITE_MERGE_VERSION - 387)) | (1L << (PROGRESSIVE_MERGE_NUM - 387)))) != 0) || _la==LOGONLY_REPLICA_NUM || _la==STORAGE_FORMAT_VERSION || _la==REPLICA_NUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3363);
					match(COMP_EQ);
					}
				}

				setState(3366);
				match(INTNUM);
				}
				break;
			case LOCALITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3367);
				match(LOCALITY);
				setState(3369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3368);
					match(COMP_EQ);
					}
				}

				setState(3371);
				match(STRING_VALUE);
				setState(3373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					setState(3372);
					match(FORCE);
					}
					break;
				}
				}
				break;
			case PRIMARY_ZONE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3375);
				match(PRIMARY_ZONE);
				setState(3377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3376);
					match(COMP_EQ);
					}
				}

				setState(3379);
				primary_zone_name();
				}
				break;
			case RESOURCE_POOL_LIST:
				enterOuterAlt(_localctx, 4);
				{
				setState(3380);
				match(RESOURCE_POOL_LIST);
				setState(3382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3381);
					match(COMP_EQ);
					}
				}

				setState(3384);
				match(LeftParen);
				setState(3385);
				resource_pool_list();
				setState(3386);
				match(RightParen);
				}
				break;
			case ENABLE_ARBITRATION_SERVICE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3388);
				match(ENABLE_ARBITRATION_SERVICE);
				setState(3390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3389);
					match(COMP_EQ);
					}
				}

				setState(3392);
				match(BOOL_VALUE);
				}
				break;
			case ZONE_LIST:
				enterOuterAlt(_localctx, 6);
				{
				setState(3393);
				match(ZONE_LIST);
				setState(3395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3394);
					match(COMP_EQ);
					}
				}

				setState(3397);
				match(LeftParen);
				setState(3398);
				zone_list();
				setState(3399);
				match(RightParen);
				}
				break;
			case CHARACTER:
			case CHARSET:
				enterOuterAlt(_localctx, 7);
				{
				setState(3401);
				charset_key();
				setState(3403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3402);
					match(COMP_EQ);
					}
				}

				setState(3405);
				charset_name();
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(3407);
				match(COLLATE);
				setState(3409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3408);
					match(COMP_EQ);
					}
				}

				setState(3411);
				collation_name();
				}
				break;
			case READ:
				enterOuterAlt(_localctx, 9);
				{
				setState(3412);
				read_only_or_write();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 10);
				{
				setState(3413);
				match(COMMENT);
				setState(3415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3414);
					match(COMP_EQ);
					}
				}

				setState(3417);
				match(STRING_VALUE);
				}
				break;
			case DEFAULT:
			case TABLEGROUP:
				enterOuterAlt(_localctx, 11);
				{
				setState(3418);
				default_tablegroup();
				}
				break;
			case ENABLE_EXTENDED_ROWID:
				enterOuterAlt(_localctx, 12);
				{
				setState(3419);
				match(ENABLE_EXTENDED_ROWID);
				setState(3421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3420);
					match(COMP_EQ);
					}
				}

				setState(3423);
				match(BOOL_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_listContext extends ParserRuleContext {
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Zone_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterZone_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitZone_list(this);
		}
	}

	public final Zone_listContext zone_list() throws RecognitionException {
		Zone_listContext _localctx = new Zone_listContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_zone_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3426);
			match(STRING_VALUE);
			setState(3433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma || _la==STRING_VALUE) {
				{
				{
				setState(3428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Comma) {
					{
					setState(3427);
					match(Comma);
					}
				}

				setState(3430);
				match(STRING_VALUE);
				}
				}
				setState(3435);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resource_pool_listContext extends ParserRuleContext {
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Resource_pool_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_pool_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterResource_pool_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitResource_pool_list(this);
		}
	}

	public final Resource_pool_listContext resource_pool_list() throws RecognitionException {
		Resource_pool_listContext _localctx = new Resource_pool_listContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_resource_pool_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3436);
			match(STRING_VALUE);
			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3437);
				match(Comma);
				setState(3438);
				match(STRING_VALUE);
				}
				}
				setState(3443);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Tenant_optionContext tenant_option() {
			return getRuleContext(Tenant_optionContext.class,0);
		}
		public TerminalNode VARIABLES() { return getToken(OBParser.VARIABLES, 0); }
		public Sys_var_and_val_listContext sys_var_and_val_list() {
			return getRuleContext(Sys_var_and_val_listContext.class,0);
		}
		public Opt_tenant_option_listContext opt_tenant_option_list() {
			return getRuleContext(Opt_tenant_option_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public TerminalNode GLOBAL_NAME() { return getToken(OBParser.GLOBAL_NAME, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Lock_spec_mysql57Context lock_spec_mysql57() {
			return getRuleContext(Lock_spec_mysql57Context.class,0);
		}
		public Alter_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tenant_stmt(this);
		}
	}

	public final Alter_tenant_stmtContext alter_tenant_stmt() throws RecognitionException {
		Alter_tenant_stmtContext _localctx = new Alter_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alter_tenant_stmt);
		int _la;
		try {
			setState(3491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3444);
				match(ALTER);
				setState(3445);
				match(TENANT);
				setState(3446);
				relation_name();
				setState(3448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(3447);
					match(SET);
					}
					break;
				}
				setState(3455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					setState(3450);
					tenant_option();
					}
					break;
				case 2:
					{
					{
					setState(3451);
					opt_tenant_option_list(0);
					setState(3452);
					match(Comma);
					setState(3453);
					tenant_option();
					}
					}
					break;
				}
				setState(3459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLES) {
					{
					setState(3457);
					match(VARIABLES);
					setState(3458);
					sys_var_and_val_list();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3461);
				match(ALTER);
				setState(3462);
				match(TENANT);
				setState(3463);
				match(ALL);
				setState(3465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(3464);
					match(SET);
					}
					break;
				}
				setState(3472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					setState(3467);
					tenant_option();
					}
					break;
				case 2:
					{
					{
					setState(3468);
					opt_tenant_option_list(0);
					setState(3469);
					match(Comma);
					setState(3470);
					tenant_option();
					}
					}
					break;
				}
				setState(3476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLES) {
					{
					setState(3474);
					match(VARIABLES);
					setState(3475);
					sys_var_and_val_list();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3478);
				match(ALTER);
				setState(3479);
				match(TENANT);
				setState(3480);
				relation_name();
				setState(3481);
				match(RENAME);
				setState(3482);
				match(GLOBAL_NAME);
				setState(3483);
				match(TO);
				setState(3484);
				relation_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3486);
				match(ALTER);
				setState(3487);
				match(TENANT);
				setState(3488);
				relation_name();
				setState(3489);
				lock_spec_mysql57();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tenant_snapshot_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OBParser.SNAPSHOT, 0); }
		public Snapshot_nameContext snapshot_name() {
			return getRuleContext(Snapshot_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Create_tenant_snapshot_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tenant_snapshot_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_tenant_snapshot_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_tenant_snapshot_stmt(this);
		}
	}

	public final Create_tenant_snapshot_stmtContext create_tenant_snapshot_stmt() throws RecognitionException {
		Create_tenant_snapshot_stmtContext _localctx = new Create_tenant_snapshot_stmtContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_create_tenant_snapshot_stmt);
		try {
			setState(3503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3493);
				match(CREATE);
				setState(3494);
				match(SNAPSHOT);
				setState(3495);
				snapshot_name();
				setState(3496);
				match(FOR);
				setState(3497);
				match(TENANT);
				setState(3498);
				relation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3500);
				match(CREATE);
				setState(3501);
				match(SNAPSHOT);
				setState(3502);
				snapshot_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_nameContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Snapshot_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSnapshot_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSnapshot_name(this);
		}
	}

	public final Snapshot_nameContext snapshot_name() throws RecognitionException {
		Snapshot_nameContext _localctx = new Snapshot_nameContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_snapshot_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
				{
				setState(3505);
				relation_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tenant_snapshot_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OBParser.SNAPSHOT, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Drop_tenant_snapshot_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tenant_snapshot_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_tenant_snapshot_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_tenant_snapshot_stmt(this);
		}
	}

	public final Drop_tenant_snapshot_stmtContext drop_tenant_snapshot_stmt() throws RecognitionException {
		Drop_tenant_snapshot_stmtContext _localctx = new Drop_tenant_snapshot_stmtContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_tenant_snapshot_stmt);
		try {
			setState(3518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3508);
				match(DROP);
				setState(3509);
				match(SNAPSHOT);
				setState(3510);
				relation_name();
				setState(3511);
				match(FOR);
				setState(3512);
				match(TENANT);
				setState(3513);
				relation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3515);
				match(DROP);
				setState(3516);
				match(SNAPSHOT);
				setState(3517);
				relation_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clone_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public Clone_snapshot_optionContext clone_snapshot_option() {
			return getRuleContext(Clone_snapshot_optionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public Clone_tenant_option_listContext clone_tenant_option_list() {
			return getRuleContext(Clone_tenant_option_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Clone_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterClone_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitClone_tenant_stmt(this);
		}
	}

	public final Clone_tenant_stmtContext clone_tenant_stmt() throws RecognitionException {
		Clone_tenant_stmtContext _localctx = new Clone_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_clone_tenant_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			match(CREATE);
			setState(3521);
			match(TENANT);
			setState(3526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3522);
				match(IF);
				setState(3523);
				not();
				setState(3524);
				match(EXISTS);
				}
			}

			setState(3528);
			relation_name();
			setState(3529);
			match(FROM);
			setState(3530);
			relation_name();
			setState(3531);
			clone_snapshot_option();
			setState(3532);
			match(WITH);
			setState(3533);
			clone_tenant_option_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clone_snapshot_optionContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OBParser.SNAPSHOT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Clone_snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterClone_snapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitClone_snapshot_option(this);
		}
	}

	public final Clone_snapshot_optionContext clone_snapshot_option() throws RecognitionException {
		Clone_snapshot_optionContext _localctx = new Clone_snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_clone_snapshot_option);
		try {
			setState(3539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3535);
				match(USING);
				setState(3536);
				match(SNAPSHOT);
				setState(3537);
				relation_name();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(3538);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clone_tenant_optionContext extends ParserRuleContext {
		public TerminalNode RESOURCE_POOL() { return getToken(OBParser.RESOURCE_POOL, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public Clone_tenant_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone_tenant_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterClone_tenant_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitClone_tenant_option(this);
		}
	}

	public final Clone_tenant_optionContext clone_tenant_option() throws RecognitionException {
		Clone_tenant_optionContext _localctx = new Clone_tenant_optionContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_clone_tenant_option);
		try {
			setState(3549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESOURCE_POOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3541);
				match(RESOURCE_POOL);
				setState(3542);
				opt_equal_mark();
				setState(3543);
				relation_name_or_string();
				}
				break;
			case UNIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3545);
				match(UNIT);
				setState(3546);
				opt_equal_mark();
				setState(3547);
				relation_name_or_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clone_tenant_option_listContext extends ParserRuleContext {
		public List<Clone_tenant_optionContext> clone_tenant_option() {
			return getRuleContexts(Clone_tenant_optionContext.class);
		}
		public Clone_tenant_optionContext clone_tenant_option(int i) {
			return getRuleContext(Clone_tenant_optionContext.class,i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Clone_tenant_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone_tenant_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterClone_tenant_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitClone_tenant_option_list(this);
		}
	}

	public final Clone_tenant_option_listContext clone_tenant_option_list() throws RecognitionException {
		Clone_tenant_option_listContext _localctx = new Clone_tenant_option_listContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_clone_tenant_option_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			clone_tenant_option();
			setState(3552);
			match(Comma);
			setState(3553);
			clone_tenant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tenant_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode PURGE() { return getToken(OBParser.PURGE, 0); }
		public Drop_tenant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tenant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_tenant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_tenant_stmt(this);
		}
	}

	public final Drop_tenant_stmtContext drop_tenant_stmt() throws RecognitionException {
		Drop_tenant_stmtContext _localctx = new Drop_tenant_stmtContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_tenant_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3555);
			match(DROP);
			setState(3556);
			match(TENANT);
			setState(3559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3557);
				match(IF);
				setState(3558);
				match(EXISTS);
				}
			}

			setState(3561);
			relation_name();
			setState(3563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==PURGE) {
				{
				setState(3562);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==PURGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_restore_point_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode RESTORE() { return getToken(OBParser.RESTORE, 0); }
		public TerminalNode POINT() { return getToken(OBParser.POINT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Create_restore_point_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_restore_point_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_restore_point_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_restore_point_stmt(this);
		}
	}

	public final Create_restore_point_stmtContext create_restore_point_stmt() throws RecognitionException {
		Create_restore_point_stmtContext _localctx = new Create_restore_point_stmtContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_create_restore_point_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3565);
			match(CREATE);
			setState(3566);
			match(RESTORE);
			setState(3567);
			match(POINT);
			setState(3568);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_restore_point_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode RESTORE() { return getToken(OBParser.RESTORE, 0); }
		public TerminalNode POINT() { return getToken(OBParser.POINT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Drop_restore_point_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_restore_point_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_restore_point_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_restore_point_stmt(this);
		}
	}

	public final Drop_restore_point_stmtContext drop_restore_point_stmt() throws RecognitionException {
		Drop_restore_point_stmtContext _localctx = new Drop_restore_point_stmtContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_restore_point_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3570);
			match(DROP);
			setState(3571);
			match(RESTORE);
			setState(3572);
			match(POINT);
			setState(3573);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public Database_keyContext database_key() {
			return getRuleContext(Database_keyContext.class,0);
		}
		public Database_factorContext database_factor() {
			return getRuleContext(Database_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Database_option_listContext database_option_list() {
			return getRuleContext(Database_option_listContext.class,0);
		}
		public Create_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_database_stmt(this);
		}
	}

	public final Create_database_stmtContext create_database_stmt() throws RecognitionException {
		Create_database_stmtContext _localctx = new Create_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_create_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3575);
			match(CREATE);
			setState(3576);
			database_key();
			setState(3581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3577);
				match(IF);
				setState(3578);
				not();
				setState(3579);
				match(EXISTS);
				}
			}

			setState(3583);
			database_factor();
			setState(3585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CHARACTER - 106)) | (1L << (COLLATE - 106)) | (1L << (DEFAULT - 106)))) != 0) || _la==READ || _la==TABLEGROUP || _la==CHARSET || ((((_la - 969)) & ~0x3f) == 0 && ((1L << (_la - 969)) & ((1L << (REPLICA_NUM - 969)) | (1L << (PRIMARY_ZONE - 969)) | (1L << (DATABASE_ID - 969)))) != 0)) {
				{
				setState(3584);
				database_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_keyContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public Database_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabase_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabase_key(this);
		}
	}

	public final Database_keyContext database_key() throws RecognitionException {
		Database_keyContext _localctx = new Database_keyContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_database_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_factorContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Database_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabase_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabase_factor(this);
		}
	}

	public final Database_factorContext database_factor() throws RecognitionException {
		Database_factorContext _localctx = new Database_factorContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_database_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_option_listContext extends ParserRuleContext {
		public List<Database_optionContext> database_option() {
			return getRuleContexts(Database_optionContext.class);
		}
		public Database_optionContext database_option(int i) {
			return getRuleContext(Database_optionContext.class,i);
		}
		public Database_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabase_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabase_option_list(this);
		}
	}

	public final Database_option_listContext database_option_list() throws RecognitionException {
		Database_option_listContext _localctx = new Database_option_listContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_database_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3591);
				database_option();
				}
				}
				setState(3594); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CHARACTER - 106)) | (1L << (COLLATE - 106)) | (1L << (DEFAULT - 106)))) != 0) || _la==READ || _la==TABLEGROUP || _la==CHARSET || ((((_la - 969)) & ~0x3f) == 0 && ((1L << (_la - 969)) & ((1L << (REPLICA_NUM - 969)) | (1L << (PRIMARY_ZONE - 969)) | (1L << (DATABASE_ID - 969)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Databases_exprContext extends ParserRuleContext {
		public TerminalNode DATABASES() { return getToken(OBParser.DATABASES, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Databases_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databases_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabases_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabases_expr(this);
		}
	}

	public final Databases_exprContext databases_expr() throws RecognitionException {
		Databases_exprContext _localctx = new Databases_exprContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_databases_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			match(DATABASES);
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(3597);
				match(COMP_EQ);
				}
			}

			setState(3600);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Charset_keyContext extends ParserRuleContext {
		public TerminalNode CHARSET() { return getToken(OBParser.CHARSET, 0); }
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Charset_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCharset_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCharset_key(this);
		}
	}

	public final Charset_keyContext charset_key() throws RecognitionException {
		Charset_keyContext _localctx = new Charset_keyContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_charset_key);
		try {
			setState(3605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARSET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3602);
				match(CHARSET);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3603);
				match(CHARACTER);
				setState(3604);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionContext extends ParserRuleContext {
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode COLLATE() { return getToken(OBParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode REPLICA_NUM() { return getToken(OBParser.REPLICA_NUM, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode PRIMARY_ZONE() { return getToken(OBParser.PRIMARY_ZONE, 0); }
		public Primary_zone_nameContext primary_zone_name() {
			return getRuleContext(Primary_zone_nameContext.class,0);
		}
		public Read_only_or_writeContext read_only_or_write() {
			return getRuleContext(Read_only_or_writeContext.class,0);
		}
		public Default_tablegroupContext default_tablegroup() {
			return getRuleContext(Default_tablegroupContext.class,0);
		}
		public TerminalNode DATABASE_ID() { return getToken(OBParser.DATABASE_ID, 0); }
		public Database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabase_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabase_option(this);
		}
	}

	public final Database_optionContext database_option() throws RecognitionException {
		Database_optionContext _localctx = new Database_optionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_database_option);
		int _la;
		try {
			setState(3641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(3607);
					match(DEFAULT);
					}
				}

				setState(3610);
				charset_key();
				setState(3612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3611);
					match(COMP_EQ);
					}
				}

				setState(3614);
				charset_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(3616);
					match(DEFAULT);
					}
				}

				setState(3619);
				match(COLLATE);
				setState(3621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3620);
					match(COMP_EQ);
					}
				}

				setState(3623);
				collation_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3624);
				match(REPLICA_NUM);
				setState(3626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3625);
					match(COMP_EQ);
					}
				}

				setState(3628);
				match(INTNUM);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3629);
				match(PRIMARY_ZONE);
				setState(3631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3630);
					match(COMP_EQ);
					}
				}

				setState(3633);
				primary_zone_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3634);
				read_only_or_write();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3635);
				default_tablegroup();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3636);
				match(DATABASE_ID);
				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3637);
					match(COMP_EQ);
					}
				}

				setState(3640);
				match(INTNUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Read_only_or_writeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(OBParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(OBParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(OBParser.WRITE, 0); }
		public Read_only_or_writeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_read_only_or_write; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRead_only_or_write(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRead_only_or_write(this);
		}
	}

	public final Read_only_or_writeContext read_only_or_write() throws RecognitionException {
		Read_only_or_writeContext _localctx = new Read_only_or_writeContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_read_only_or_write);
		try {
			setState(3647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3643);
				match(READ);
				setState(3644);
				match(ONLY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3645);
				match(READ);
				setState(3646);
				match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Database_keyContext database_key() {
			return getRuleContext(Database_keyContext.class,0);
		}
		public Database_factorContext database_factor() {
			return getRuleContext(Database_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_database_stmt(this);
		}
	}

	public final Drop_database_stmtContext drop_database_stmt() throws RecognitionException {
		Drop_database_stmtContext _localctx = new Drop_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			match(DROP);
			setState(3650);
			database_key();
			setState(3653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3651);
				match(IF);
				setState(3652);
				match(EXISTS);
				}
			}

			setState(3655);
			database_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_database_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public Database_keyContext database_key() {
			return getRuleContext(Database_keyContext.class,0);
		}
		public Database_option_listContext database_option_list() {
			return getRuleContext(Database_option_listContext.class,0);
		}
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Alter_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_database_stmt(this);
		}
	}

	public final Alter_database_stmtContext alter_database_stmt() throws RecognitionException {
		Alter_database_stmtContext _localctx = new Alter_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_alter_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3657);
			match(ALTER);
			setState(3658);
			database_key();
			setState(3660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME_OB) {
				{
				setState(3659);
				match(NAME_OB);
				}
			}

			setState(3663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3662);
				match(SET);
				}
			}

			setState(3665);
			database_option_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_data_stmtContext extends ParserRuleContext {
		public Load_data_with_opt_hintContext load_data_with_opt_hint() {
			return getRuleContext(Load_data_with_opt_hintContext.class,0);
		}
		public TerminalNode INFILE() { return getToken(OBParser.INFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Field_optContext field_opt() {
			return getRuleContext(Field_optContext.class,0);
		}
		public Line_optContext line_opt() {
			return getRuleContext(Line_optContext.class,0);
		}
		public Use_partitionContext use_partition() {
			return getRuleContext(Use_partitionContext.class,0);
		}
		public TerminalNode COMPRESSION() { return getToken(OBParser.COMPRESSION, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public Compression_nameContext compression_name() {
			return getRuleContext(Compression_nameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(OBParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(OBParser.SET, i);
		}
		public Charset_name_or_defaultContext charset_name_or_default() {
			return getRuleContext(Charset_name_or_defaultContext.class,0);
		}
		public Load_set_listContext load_set_list() {
			return getRuleContext(Load_set_listContext.class,0);
		}
		public Load_data_extended_option_listContext load_data_extended_option_list() {
			return getRuleContext(Load_data_extended_option_listContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode REMOTE_OSS() { return getToken(OBParser.REMOTE_OSS, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(OBParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(OBParser.IGNORE, i);
		}
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Lines_or_rowsContext lines_or_rows() {
			return getRuleContext(Lines_or_rowsContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(OBParser.GENERATED, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Field_or_vars_listContext field_or_vars_list() {
			return getRuleContext(Field_or_vars_listContext.class,0);
		}
		public Load_data_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_data_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLoad_data_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLoad_data_stmt(this);
		}
	}

	public final Load_data_stmtContext load_data_stmt() throws RecognitionException {
		Load_data_stmtContext _localctx = new Load_data_stmtContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_load_data_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			load_data_with_opt_hint();
			setState(3669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==REMOTE_OSS) {
				{
				setState(3668);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==REMOTE_OSS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3671);
			match(INFILE);
			setState(3672);
			match(STRING_VALUE);
			setState(3674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE || _la==IGNORE) {
				{
				setState(3673);
				_la = _input.LA(1);
				if ( !(_la==REPLACE || _la==IGNORE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3676);
			match(INTO);
			setState(3677);
			match(TABLE);
			setState(3678);
			relation_factor();
			setState(3680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3679);
				use_partition();
				}
			}

			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESSION) {
				{
				setState(3682);
				match(COMPRESSION);
				setState(3683);
				opt_equal_mark();
				setState(3684);
				compression_name();
				}
			}

			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3688);
				match(CHARACTER);
				setState(3689);
				match(SET);
				setState(3690);
				charset_name_or_default();
				}
			}

			setState(3693);
			field_opt();
			setState(3694);
			line_opt();
			setState(3701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
				{
				{
				setState(3695);
				match(IGNORE);
				setState(3696);
				match(INTNUM);
				setState(3697);
				lines_or_rows();
				}
				}
				break;
			case GENERATED:
				{
				{
				setState(3698);
				match(GENERATED);
				setState(3699);
				match(INTNUM);
				setState(3700);
				lines_or_rows();
				}
				}
				break;
			case EOF:
			case SET:
			case REJECT:
			case BADFILE:
			case LOGFILE:
			case LeftParen:
			case DELIMITER:
				break;
			default:
				break;
			}
			setState(3709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				{
				setState(3703);
				match(LeftParen);
				setState(3704);
				match(RightParen);
				}
				}
				break;
			case 2:
				{
				{
				setState(3705);
				match(LeftParen);
				setState(3706);
				field_or_vars_list();
				setState(3707);
				match(RightParen);
				}
				}
				break;
			}
			setState(3713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3711);
				match(SET);
				setState(3712);
				load_set_list();
				}
			}

			setState(3716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT || _la==BADFILE || _la==LOGFILE) {
				{
				setState(3715);
				load_data_extended_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_data_with_opt_hintContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(OBParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(OBParser.DATA, 0); }
		public TerminalNode LOAD_DATA_HINT_BEGIN() { return getToken(OBParser.LOAD_DATA_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Load_data_with_opt_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_data_with_opt_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLoad_data_with_opt_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLoad_data_with_opt_hint(this);
		}
	}

	public final Load_data_with_opt_hintContext load_data_with_opt_hint() throws RecognitionException {
		Load_data_with_opt_hintContext _localctx = new Load_data_with_opt_hintContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_load_data_with_opt_hint);
		try {
			setState(3722);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3718);
				match(LOAD);
				setState(3719);
				match(DATA);
				}
				break;
			case LOAD_DATA_HINT_BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3720);
				match(LOAD_DATA_HINT_BEGIN);
				setState(3721);
				hint_list_with_end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compression_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Compression_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compression_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCompression_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCompression_name(this);
		}
	}

	public final Compression_nameContext compression_name() throws RecognitionException {
		Compression_nameContext _localctx = new Compression_nameContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_compression_name);
		try {
			setState(3726);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(3724);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3725);
				unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lines_or_rowsContext extends ParserRuleContext {
		public TerminalNode LINES() { return getToken(OBParser.LINES, 0); }
		public TerminalNode ROWS() { return getToken(OBParser.ROWS, 0); }
		public Lines_or_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lines_or_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLines_or_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLines_or_rows(this);
		}
	}

	public final Lines_or_rowsContext lines_or_rows() throws RecognitionException {
		Lines_or_rowsContext _localctx = new Lines_or_rowsContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_lines_or_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3728);
			_la = _input.LA(1);
			if ( !(_la==LINES || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_or_vars_listContext extends ParserRuleContext {
		public List<Field_or_varsContext> field_or_vars() {
			return getRuleContexts(Field_or_varsContext.class);
		}
		public Field_or_varsContext field_or_vars(int i) {
			return getRuleContext(Field_or_varsContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Field_or_vars_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_or_vars_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterField_or_vars_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitField_or_vars_list(this);
		}
	}

	public final Field_or_vars_listContext field_or_vars_list() throws RecognitionException {
		Field_or_vars_listContext _localctx = new Field_or_vars_listContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_field_or_vars_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3730);
			field_or_vars();
			setState(3735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3731);
				match(Comma);
				setState(3732);
				field_or_vars();
				}
				}
				setState(3737);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_or_varsContext extends ParserRuleContext {
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Field_or_varsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_or_vars; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterField_or_vars(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitField_or_vars(this);
		}
	}

	public final Field_or_varsContext field_or_vars() throws RecognitionException {
		Field_or_varsContext _localctx = new Field_or_varsContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_field_or_vars);
		try {
			setState(3740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3738);
				column_definition_ref();
				}
				break;
			case USER_VARIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3739);
				match(USER_VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_set_listContext extends ParserRuleContext {
		public List<Load_set_elementContext> load_set_element() {
			return getRuleContexts(Load_set_elementContext.class);
		}
		public Load_set_elementContext load_set_element(int i) {
			return getRuleContext(Load_set_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Load_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLoad_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLoad_set_list(this);
		}
	}

	public final Load_set_listContext load_set_list() throws RecognitionException {
		Load_set_listContext _localctx = new Load_set_listContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_load_set_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742);
			load_set_element();
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3743);
				match(Comma);
				setState(3744);
				load_set_element();
				}
				}
				setState(3749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_set_elementContext extends ParserRuleContext {
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Expr_or_defaultContext expr_or_default() {
			return getRuleContext(Expr_or_defaultContext.class,0);
		}
		public Load_set_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_set_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLoad_set_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLoad_set_element(this);
		}
	}

	public final Load_set_elementContext load_set_element() throws RecognitionException {
		Load_set_elementContext _localctx = new Load_set_elementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_load_set_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3750);
			column_definition_ref();
			setState(3751);
			match(COMP_EQ);
			setState(3752);
			expr_or_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_data_extended_option_listContext extends ParserRuleContext {
		public Load_data_extended_optionContext load_data_extended_option() {
			return getRuleContext(Load_data_extended_optionContext.class,0);
		}
		public Load_data_extended_option_listContext load_data_extended_option_list() {
			return getRuleContext(Load_data_extended_option_listContext.class,0);
		}
		public Load_data_extended_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_data_extended_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLoad_data_extended_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLoad_data_extended_option_list(this);
		}
	}

	public final Load_data_extended_option_listContext load_data_extended_option_list() throws RecognitionException {
		Load_data_extended_option_listContext _localctx = new Load_data_extended_option_listContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_load_data_extended_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3754);
			load_data_extended_option();
			setState(3756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT || _la==BADFILE || _la==LOGFILE) {
				{
				setState(3755);
				load_data_extended_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_data_extended_optionContext extends ParserRuleContext {
		public TerminalNode LOGFILE() { return getToken(OBParser.LOGFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode REJECT() { return getToken(OBParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(OBParser.LIMIT, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode BADFILE() { return getToken(OBParser.BADFILE, 0); }
		public Load_data_extended_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_data_extended_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLoad_data_extended_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLoad_data_extended_option(this);
		}
	}

	public final Load_data_extended_optionContext load_data_extended_option() throws RecognitionException {
		Load_data_extended_optionContext _localctx = new Load_data_extended_optionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_load_data_extended_option);
		int _la;
		try {
			setState(3774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOGFILE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3758);
				match(LOGFILE);
				setState(3760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3759);
					match(COMP_EQ);
					}
				}

				setState(3762);
				match(STRING_VALUE);
				}
				break;
			case REJECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3763);
				match(REJECT);
				setState(3764);
				match(LIMIT);
				setState(3766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3765);
					match(COMP_EQ);
					}
				}

				setState(3768);
				match(INTNUM);
				}
				break;
			case BADFILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3769);
				match(BADFILE);
				setState(3771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(3770);
					match(COMP_EQ);
					}
				}

				setState(3773);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_database_stmtContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(OBParser.USE, 0); }
		public Database_factorContext database_factor() {
			return getRuleContext(Database_factorContext.class,0);
		}
		public Use_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUse_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUse_database_stmt(this);
		}
	}

	public final Use_database_stmtContext use_database_stmt() throws RecognitionException {
		Use_database_stmtContext _localctx = new Use_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_use_database_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776);
			match(USE);
			setState(3777);
			database_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_table_typeContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(OBParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(OBParser.EXTERNAL, 0); }
		public Special_table_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_table_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSpecial_table_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSpecial_table_type(this);
		}
	}

	public final Special_table_typeContext special_table_type() throws RecognitionException {
		Special_table_typeContext _localctx = new Special_table_typeContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_special_table_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL || _la==TEMPORARY) {
				{
				setState(3779);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_like_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public Special_table_typeContext special_table_type() {
			return getRuleContext(Special_table_typeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public List<Relation_factorContext> relation_factor() {
			return getRuleContexts(Relation_factorContext.class);
		}
		public Relation_factorContext relation_factor(int i) {
			return getRuleContext(Relation_factorContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(OBParser.LIKE, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Create_table_like_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_like_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_table_like_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_table_like_stmt(this);
		}
	}

	public final Create_table_like_stmtContext create_table_like_stmt() throws RecognitionException {
		Create_table_like_stmtContext _localctx = new Create_table_like_stmtContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_create_table_like_stmt);
		int _la;
		try {
			setState(3810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3782);
				match(CREATE);
				setState(3783);
				special_table_type();
				setState(3784);
				match(TABLE);
				setState(3789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3785);
					match(IF);
					setState(3786);
					not();
					setState(3787);
					match(EXISTS);
					}
				}

				setState(3791);
				relation_factor();
				setState(3792);
				match(LIKE);
				setState(3793);
				relation_factor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3795);
				match(CREATE);
				setState(3796);
				special_table_type();
				setState(3797);
				match(TABLE);
				setState(3802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3798);
					match(IF);
					setState(3799);
					not();
					setState(3800);
					match(EXISTS);
					}
				}

				setState(3804);
				relation_factor();
				setState(3805);
				match(LeftParen);
				setState(3806);
				match(LIKE);
				setState(3807);
				relation_factor();
				setState(3808);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public Special_table_typeContext special_table_type() {
			return getRuleContext(Special_table_typeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Table_element_listContext table_element_list() {
			return getRuleContext(Table_element_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Table_option_listContext table_option_list() {
			return getRuleContext(Table_option_listContext.class,0);
		}
		public Partition_optionContext partition_option() {
			return getRuleContext(Partition_optionContext.class,0);
		}
		public Auto_partition_optionContext auto_partition_option() {
			return getRuleContext(Auto_partition_optionContext.class,0);
		}
		public With_column_groupContext with_column_group() {
			return getRuleContext(With_column_groupContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Ignore_or_replaceContext ignore_or_replace() {
			return getRuleContext(Ignore_or_replaceContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_table_stmt(this);
		}
	}

	public final Create_table_stmtContext create_table_stmt() throws RecognitionException {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_create_table_stmt);
		int _la;
		try {
			setState(3935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3812);
				match(CREATE);
				setState(3813);
				special_table_type();
				setState(3814);
				match(TABLE);
				setState(3819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3815);
					match(IF);
					setState(3816);
					not();
					setState(3817);
					match(EXISTS);
					}
				}

				setState(3821);
				relation_factor();
				setState(3822);
				match(LeftParen);
				setState(3823);
				table_element_list();
				setState(3824);
				match(RightParen);
				setState(3826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PARTITION_TYPE) | (1L << AUTO_REFRESH) | (1L << PROPERTIES) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CHARACTER - 106)) | (1L << (COLLATE - 106)) | (1L << (DEFAULT - 106)))) != 0) || _la==INDEX || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (READ - 265)) | (1L << (TABLEGROUP - 265)) | (1L << (UNION - 265)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (FORMAT - 378)) | (1L << (LOCATION - 378)) | (1L << (PROGRESSIVE_MERGE_NUM - 378)) | (1L << (KEY_BLOCK_SIZE - 378)))) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & ((1L << (COMPRESSION - 445)) | (1L << (MIN_ROWS - 445)) | (1L << (ENCRYPTION - 445)) | (1L << (COMMENT - 445)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (ENGINE_ - 513)) | (1L << (AUTO_INCREMENT_MODE - 513)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 513)) | (1L << (LOB_INROW_THRESHOLD - 513)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (LOCALITY - 586)))) != 0) || ((((_la - 679)) & ~0x3f) == 0 && ((1L << (_la - 679)) & ((1L << (USE_BLOOM_FILTER - 679)) | (1L << (MAX_USED_PART_ID - 679)) | (1L << (MAX_ROWS - 679)) | (1L << (STATS_AUTO_RECALC - 679)) | (1L << (EXPIRE_INFO - 679)) | (1L << (BLOCK_SIZE - 679)))) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (STATS_PERSISTENT - 745)) | (1L << (CHARSET - 745)) | (1L << (CONNECTION - 745)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (KV_ATTRIBUTES - 815)) | (1L << (JSON - 815)) | (1L << (PATTERN - 815)) | (1L << (STORAGE_FORMAT_VERSION - 815)) | (1L << (AVG_ROW_LENGTH - 815)) | (1L << (PARALLEL - 815)) | (1L << (NOPARALLEL - 815)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (PCTFREE - 896)) | (1L << (TABLESPACE - 896)) | (1L << (PASSWORD - 896)) | (1L << (TTL - 896)) | (1L << (SORTKEY - 896)) | (1L << (CHECKSUM - 896)))) != 0) || ((((_la - 969)) & ~0x3f) == 0 && ((1L << (_la - 969)) & ((1L << (REPLICA_NUM - 969)) | (1L << (PRIMARY_ZONE - 969)) | (1L << (DUPLICATE_SCOPE - 969)) | (1L << (STATS_SAMPLE_PAGES - 969)) | (1L << (TABLET_SIZE - 969)))) != 0) || ((((_la - 1042)) & ~0x3f) == 0 && ((1L << (_la - 1042)) & ((1L << (INSERT_METHOD - 1042)) | (1L << (TABLE_MODE - 1042)) | (1L << (PACK_KEYS - 1042)) | (1L << (ENABLE_EXTENDED_ROWID - 1042)))) != 0) || _la==DATA) {
					{
					setState(3825);
					table_option_list();
					}
				}

				setState(3830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(3828);
					partition_option();
					}
					break;
				case 2:
					{
					setState(3829);
					auto_partition_option();
					}
					break;
				}
				setState(3833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_COLUMN_GROUP) {
					{
					setState(3832);
					with_column_group();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3835);
				match(CREATE);
				setState(3836);
				special_table_type();
				setState(3837);
				match(TABLE);
				setState(3842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3838);
					match(IF);
					setState(3839);
					not();
					setState(3840);
					match(EXISTS);
					}
				}

				setState(3844);
				relation_factor();
				setState(3845);
				match(LeftParen);
				setState(3846);
				table_element_list();
				setState(3847);
				match(RightParen);
				setState(3849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PARTITION_TYPE) | (1L << AUTO_REFRESH) | (1L << PROPERTIES) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CHARACTER - 106)) | (1L << (COLLATE - 106)) | (1L << (DEFAULT - 106)))) != 0) || _la==INDEX || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (READ - 265)) | (1L << (TABLEGROUP - 265)) | (1L << (UNION - 265)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (FORMAT - 378)) | (1L << (LOCATION - 378)) | (1L << (PROGRESSIVE_MERGE_NUM - 378)) | (1L << (KEY_BLOCK_SIZE - 378)))) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & ((1L << (COMPRESSION - 445)) | (1L << (MIN_ROWS - 445)) | (1L << (ENCRYPTION - 445)) | (1L << (COMMENT - 445)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (ENGINE_ - 513)) | (1L << (AUTO_INCREMENT_MODE - 513)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 513)) | (1L << (LOB_INROW_THRESHOLD - 513)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (LOCALITY - 586)))) != 0) || ((((_la - 679)) & ~0x3f) == 0 && ((1L << (_la - 679)) & ((1L << (USE_BLOOM_FILTER - 679)) | (1L << (MAX_USED_PART_ID - 679)) | (1L << (MAX_ROWS - 679)) | (1L << (STATS_AUTO_RECALC - 679)) | (1L << (EXPIRE_INFO - 679)) | (1L << (BLOCK_SIZE - 679)))) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (STATS_PERSISTENT - 745)) | (1L << (CHARSET - 745)) | (1L << (CONNECTION - 745)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (KV_ATTRIBUTES - 815)) | (1L << (JSON - 815)) | (1L << (PATTERN - 815)) | (1L << (STORAGE_FORMAT_VERSION - 815)) | (1L << (AVG_ROW_LENGTH - 815)) | (1L << (PARALLEL - 815)) | (1L << (NOPARALLEL - 815)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (PCTFREE - 896)) | (1L << (TABLESPACE - 896)) | (1L << (PASSWORD - 896)) | (1L << (TTL - 896)) | (1L << (SORTKEY - 896)) | (1L << (CHECKSUM - 896)))) != 0) || ((((_la - 969)) & ~0x3f) == 0 && ((1L << (_la - 969)) & ((1L << (REPLICA_NUM - 969)) | (1L << (PRIMARY_ZONE - 969)) | (1L << (DUPLICATE_SCOPE - 969)) | (1L << (STATS_SAMPLE_PAGES - 969)) | (1L << (TABLET_SIZE - 969)))) != 0) || ((((_la - 1042)) & ~0x3f) == 0 && ((1L << (_la - 1042)) & ((1L << (INSERT_METHOD - 1042)) | (1L << (TABLE_MODE - 1042)) | (1L << (PACK_KEYS - 1042)) | (1L << (ENABLE_EXTENDED_ROWID - 1042)))) != 0) || _la==DATA) {
					{
					setState(3848);
					table_option_list();
					}
				}

				setState(3853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(3851);
					partition_option();
					}
					break;
				case 2:
					{
					setState(3852);
					auto_partition_option();
					}
					break;
				}
				setState(3859);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case WITH_COLUMN_GROUP:
				case SELECT:
				case VALUES:
				case WITH:
				case LeftParen:
				case SELECT_HINT_BEGIN:
					{
					setState(3856);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_COLUMN_GROUP) {
						{
						setState(3855);
						with_column_group();
						}
					}

					}
					break;
				case REPLACE:
				case IGNORE:
					{
					setState(3858);
					ignore_or_replace();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3861);
					match(AS);
					}
				}

				setState(3864);
				select_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3866);
				match(CREATE);
				setState(3867);
				special_table_type();
				setState(3868);
				match(TABLE);
				setState(3873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3869);
					match(IF);
					setState(3870);
					not();
					setState(3871);
					match(EXISTS);
					}
				}

				setState(3875);
				relation_factor();
				setState(3876);
				table_option_list();
				setState(3879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(3877);
					partition_option();
					}
					break;
				case 2:
					{
					setState(3878);
					auto_partition_option();
					}
					break;
				}
				setState(3885);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case WITH_COLUMN_GROUP:
				case SELECT:
				case VALUES:
				case WITH:
				case LeftParen:
				case SELECT_HINT_BEGIN:
					{
					setState(3882);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_COLUMN_GROUP) {
						{
						setState(3881);
						with_column_group();
						}
					}

					}
					break;
				case REPLACE:
				case IGNORE:
					{
					setState(3884);
					ignore_or_replace();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3887);
					match(AS);
					}
				}

				setState(3890);
				select_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3892);
				match(CREATE);
				setState(3893);
				special_table_type();
				setState(3894);
				match(TABLE);
				setState(3899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3895);
					match(IF);
					setState(3896);
					not();
					setState(3897);
					match(EXISTS);
					}
				}

				setState(3901);
				relation_factor();
				setState(3902);
				partition_option();
				setState(3907);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case WITH_COLUMN_GROUP:
				case SELECT:
				case VALUES:
				case WITH:
				case LeftParen:
				case SELECT_HINT_BEGIN:
					{
					setState(3904);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_COLUMN_GROUP) {
						{
						setState(3903);
						with_column_group();
						}
					}

					}
					break;
				case REPLACE:
				case IGNORE:
					{
					setState(3906);
					ignore_or_replace();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3909);
					match(AS);
					}
				}

				setState(3912);
				select_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3914);
				match(CREATE);
				setState(3915);
				special_table_type();
				setState(3916);
				match(TABLE);
				setState(3921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3917);
					match(IF);
					setState(3918);
					not();
					setState(3919);
					match(EXISTS);
					}
				}

				setState(3923);
				relation_factor();
				setState(3928);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case WITH_COLUMN_GROUP:
				case SELECT:
				case VALUES:
				case WITH:
				case LeftParen:
				case SELECT_HINT_BEGIN:
					{
					setState(3925);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_COLUMN_GROUP) {
						{
						setState(3924);
						with_column_group();
						}
					}

					}
					break;
				case REPLACE:
				case IGNORE:
					{
					setState(3927);
					ignore_or_replace();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3930);
					match(AS);
					}
				}

				setState(3933);
				select_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ignore_or_replaceContext extends ParserRuleContext {
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public Ignore_or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignore_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIgnore_or_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIgnore_or_replace(this);
		}
	}

	public final Ignore_or_replaceContext ignore_or_replace() throws RecognitionException {
		Ignore_or_replaceContext _localctx = new Ignore_or_replaceContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_ignore_or_replace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3937);
			_la = _input.LA(1);
			if ( !(_la==REPLACE || _la==IGNORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ret_typeContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(OBParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(OBParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(OBParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(OBParser.DECIMAL, 0); }
		public TerminalNode FIXED() { return getToken(OBParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(OBParser.NUMERIC, 0); }
		public Ret_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ret_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRet_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRet_type(this);
		}
	}

	public final Ret_typeContext ret_type() throws RecognitionException {
		Ret_typeContext _localctx = new Ret_typeContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_ret_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3939);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==INTEGER || _la==REAL || _la==NUMERIC || _la==FIXED || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(OBParser.FUNCTION, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode RETURNS() { return getToken(OBParser.RETURNS, 0); }
		public Ret_typeContext ret_type() {
			return getRuleContext(Ret_typeContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(OBParser.SONAME, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode AGGREGATE() { return getToken(OBParser.AGGREGATE, 0); }
		public Create_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_function_stmt(this);
		}
	}

	public final Create_function_stmtContext create_function_stmt() throws RecognitionException {
		Create_function_stmtContext _localctx = new Create_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_create_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3941);
			match(CREATE);
			setState(3943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(3942);
				match(AGGREGATE);
				}
			}

			setState(3945);
			match(FUNCTION);
			setState(3946);
			match(NAME_OB);
			setState(3947);
			match(RETURNS);
			setState(3948);
			ret_type();
			setState(3949);
			match(SONAME);
			setState(3950);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_function_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(OBParser.FUNCTION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_function_stmt(this);
		}
	}

	public final Drop_function_stmtContext drop_function_stmt() throws RecognitionException {
		Drop_function_stmtContext _localctx = new Drop_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3952);
			match(DROP);
			setState(3953);
			match(FUNCTION);
			setState(3956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3954);
				match(IF);
				setState(3955);
				match(EXISTS);
				}
			}

			setState(3958);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedure_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(OBParser.PROCEDURE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_procedure_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_procedure_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_procedure_stmt(this);
		}
	}

	public final Drop_procedure_stmtContext drop_procedure_stmt() throws RecognitionException {
		Drop_procedure_stmtContext _localctx = new Drop_procedure_stmtContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_procedure_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3960);
			match(DROP);
			setState(3961);
			match(PROCEDURE);
			setState(3964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3962);
				match(IF);
				setState(3963);
				match(EXISTS);
				}
			}

			setState(3966);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_trigger_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(OBParser.TRIGGER, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_trigger_stmt(this);
		}
	}

	public final Drop_trigger_stmtContext drop_trigger_stmt() throws RecognitionException {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3968);
			match(DROP);
			setState(3969);
			match(TRIGGER);
			setState(3972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3970);
				match(IF);
				setState(3971);
				match(EXISTS);
				}
			}

			setState(3974);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_element_listContext extends ParserRuleContext {
		public List<Table_elementContext> table_element() {
			return getRuleContexts(Table_elementContext.class);
		}
		public Table_elementContext table_element(int i) {
			return getRuleContext(Table_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Table_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_element_list(this);
		}
	}

	public final Table_element_listContext table_element_list() throws RecognitionException {
		Table_element_listContext _localctx = new Table_element_listContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_table_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			table_element();
			setState(3981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(3977);
				match(Comma);
				setState(3978);
				table_element();
				}
				}
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Out_of_line_indexContext out_of_line_index() {
			return getRuleContext(Out_of_line_indexContext.class,0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_table_element);
		try {
			setState(3987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3984);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3985);
				out_of_line_index();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3986);
				out_of_line_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public Out_of_line_primary_indexContext out_of_line_primary_index() {
			return getRuleContext(Out_of_line_primary_indexContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OBParser.CONSTRAINT, 0); }
		public Opt_constraint_nameContext opt_constraint_name() {
			return getRuleContext(Opt_constraint_nameContext.class,0);
		}
		public Out_of_line_unique_indexContext out_of_line_unique_index() {
			return getRuleContext(Out_of_line_unique_indexContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Check_stateContext check_state() {
			return getRuleContext(Check_stateContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(OBParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOut_of_line_constraint(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_out_of_line_constraint);
		int _la;
		try {
			setState(4024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3989);
					match(CONSTRAINT);
					setState(3990);
					opt_constraint_name();
					}
				}

				setState(3993);
				out_of_line_primary_index();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3994);
					match(CONSTRAINT);
					setState(3995);
					opt_constraint_name();
					}
				}

				setState(3998);
				out_of_line_unique_index();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3999);
					match(CONSTRAINT);
					setState(4000);
					opt_constraint_name();
					}
				}

				setState(4003);
				match(CHECK);
				setState(4004);
				match(LeftParen);
				setState(4005);
				expr(0);
				setState(4006);
				match(RightParen);
				setState(4008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					setState(4007);
					check_state();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4010);
					match(CONSTRAINT);
					setState(4011);
					opt_constraint_name();
					}
				}

				setState(4014);
				match(FOREIGN);
				setState(4015);
				match(KEY);
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(4016);
					index_name();
					}
				}

				setState(4019);
				match(LeftParen);
				setState(4020);
				column_name_list();
				setState(4021);
				match(RightParen);
				setState(4022);
				references_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(OBParser.REFERENCES, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode MATCH() { return getToken(OBParser.MATCH, 0); }
		public Match_actionContext match_action() {
			return getRuleContext(Match_actionContext.class,0);
		}
		public Opt_reference_option_listContext opt_reference_option_list() {
			return getRuleContext(Opt_reference_option_listContext.class,0);
		}
		public Reference_optionContext reference_option() {
			return getRuleContext(Reference_optionContext.class,0);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitReferences_clause(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_references_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4026);
			match(REFERENCES);
			setState(4027);
			relation_factor();
			setState(4028);
			match(LeftParen);
			setState(4029);
			column_name_list();
			setState(4030);
			match(RightParen);
			setState(4033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(4031);
				match(MATCH);
				setState(4032);
				match_action();
				}
				break;
			}
			setState(4038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(4035);
				opt_reference_option_list(0);
				setState(4036);
				reference_option();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_indexContext extends ParserRuleContext {
		public Key_or_indexContext key_or_index() {
			return getRuleContext(Key_or_indexContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Sort_column_listContext sort_column_list() {
			return getRuleContext(Sort_column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Index_using_algorithmContext index_using_algorithm() {
			return getRuleContext(Index_using_algorithmContext.class,0);
		}
		public Opt_index_optionsContext opt_index_options() {
			return getRuleContext(Opt_index_optionsContext.class,0);
		}
		public Partition_optionContext partition_option() {
			return getRuleContext(Partition_optionContext.class,0);
		}
		public Auto_partition_optionContext auto_partition_option() {
			return getRuleContext(Auto_partition_optionContext.class,0);
		}
		public With_column_groupContext with_column_group() {
			return getRuleContext(With_column_groupContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(OBParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(OBParser.SPATIAL, 0); }
		public TerminalNode VECTOR() { return getToken(OBParser.VECTOR, 0); }
		public Out_of_line_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOut_of_line_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOut_of_line_index(this);
		}
	}

	public final Out_of_line_indexContext out_of_line_index() throws RecognitionException {
		Out_of_line_indexContext _localctx = new Out_of_line_indexContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_out_of_line_index);
		int _la;
		try {
			setState(4094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4040);
				key_or_index();
				setState(4042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(4041);
					index_name();
					}
				}

				setState(4045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4044);
					index_using_algorithm();
					}
				}

				setState(4047);
				match(LeftParen);
				setState(4048);
				sort_column_list();
				setState(4049);
				match(RightParen);
				setState(4051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(4050);
					opt_index_options();
					}
					break;
				}
				setState(4055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(4053);
					partition_option();
					}
					break;
				case 2:
					{
					setState(4054);
					auto_partition_option();
					}
					break;
				}
				setState(4058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(4057);
					with_column_group();
					}
					break;
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4060);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(4061);
					key_or_index();
					}
				}

				setState(4065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(4064);
					index_name();
					}
				}

				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4067);
					index_using_algorithm();
					}
				}

				setState(4070);
				match(LeftParen);
				setState(4071);
				sort_column_list();
				setState(4072);
				match(RightParen);
				setState(4074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(4073);
					opt_index_options();
					}
					break;
				}
				setState(4078);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(4076);
					partition_option();
					}
					break;
				case 2:
					{
					setState(4077);
					auto_partition_option();
					}
					break;
				}
				setState(4081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(4080);
					with_column_group();
					}
					break;
				}
				}
				break;
			case VECTOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4083);
				match(VECTOR);
				setState(4084);
				key_or_index();
				setState(4086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(4085);
					index_name();
					}
				}

				setState(4088);
				match(LeftParen);
				setState(4089);
				sort_column_list();
				setState(4090);
				match(RightParen);
				setState(4092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					setState(4091);
					opt_index_options();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_primary_indexContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Index_using_algorithmContext index_using_algorithm() {
			return getRuleContext(Index_using_algorithmContext.class,0);
		}
		public Opt_index_optionsContext opt_index_options() {
			return getRuleContext(Opt_index_optionsContext.class,0);
		}
		public Out_of_line_primary_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_primary_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOut_of_line_primary_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOut_of_line_primary_index(this);
		}
	}

	public final Out_of_line_primary_indexContext out_of_line_primary_index() throws RecognitionException {
		Out_of_line_primary_indexContext _localctx = new Out_of_line_primary_indexContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_out_of_line_primary_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			match(PRIMARY);
			setState(4097);
			match(KEY);
			setState(4099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
				{
				setState(4098);
				index_name();
				}
			}

			setState(4102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4101);
				index_using_algorithm();
				}
			}

			setState(4104);
			match(LeftParen);
			setState(4105);
			column_name_list();
			setState(4106);
			match(RightParen);
			setState(4108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(4107);
				opt_index_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_unique_indexContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Sort_column_listContext sort_column_list() {
			return getRuleContext(Sort_column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Key_or_indexContext key_or_index() {
			return getRuleContext(Key_or_indexContext.class,0);
		}
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Index_using_algorithmContext index_using_algorithm() {
			return getRuleContext(Index_using_algorithmContext.class,0);
		}
		public Opt_index_optionsContext opt_index_options() {
			return getRuleContext(Opt_index_optionsContext.class,0);
		}
		public Partition_optionContext partition_option() {
			return getRuleContext(Partition_optionContext.class,0);
		}
		public Auto_partition_optionContext auto_partition_option() {
			return getRuleContext(Auto_partition_optionContext.class,0);
		}
		public With_column_groupContext with_column_group() {
			return getRuleContext(With_column_groupContext.class,0);
		}
		public Out_of_line_unique_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_unique_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOut_of_line_unique_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOut_of_line_unique_index(this);
		}
	}

	public final Out_of_line_unique_indexContext out_of_line_unique_index() throws RecognitionException {
		Out_of_line_unique_indexContext _localctx = new Out_of_line_unique_indexContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_out_of_line_unique_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4110);
			match(UNIQUE);
			setState(4112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY) {
				{
				setState(4111);
				key_or_index();
				}
			}

			setState(4115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
				{
				setState(4114);
				index_name();
				}
			}

			setState(4118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4117);
				index_using_algorithm();
				}
			}

			setState(4120);
			match(LeftParen);
			setState(4121);
			sort_column_list();
			setState(4122);
			match(RightParen);
			setState(4124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(4123);
				opt_index_options();
				}
				break;
			}
			setState(4128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(4126);
				partition_option();
				}
				break;
			case 2:
				{
				setState(4127);
				auto_partition_option();
				}
				break;
			}
			setState(4131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(4130);
				with_column_group();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_reference_option_listContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Opt_reference_option_listContext opt_reference_option_list() {
			return getRuleContext(Opt_reference_option_listContext.class,0);
		}
		public Reference_optionContext reference_option() {
			return getRuleContext(Reference_optionContext.class,0);
		}
		public Opt_reference_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_reference_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_reference_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_reference_option_list(this);
		}
	}

	public final Opt_reference_option_listContext opt_reference_option_list() throws RecognitionException {
		return opt_reference_option_list(0);
	}

	private Opt_reference_option_listContext opt_reference_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_reference_option_listContext _localctx = new Opt_reference_option_listContext(_ctx, _parentState);
		Opt_reference_option_listContext _prevctx = _localctx;
		int _startState = 302;
		enterRecursionRule(_localctx, 302, RULE_opt_reference_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4134);
			empty();
			}
			_ctx.stop = _input.LT(-1);
			setState(4140);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_reference_option_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_reference_option_list);
					setState(4136);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4137);
					reference_option();
					}
					} 
				}
				setState(4142);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Reference_optionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Reference_actionContext reference_action() {
			return getRuleContext(Reference_actionContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public Reference_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterReference_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitReference_option(this);
		}
	}

	public final Reference_optionContext reference_option() throws RecognitionException {
		Reference_optionContext _localctx = new Reference_optionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_reference_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(ON);
			setState(4144);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4145);
			reference_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_actionContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(OBParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(OBParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode NO() { return getToken(OBParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(OBParser.ACTION, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Reference_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterReference_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitReference_action(this);
		}
	}

	public final Reference_actionContext reference_action() throws RecognitionException {
		Reference_actionContext _localctx = new Reference_actionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_reference_action);
		try {
			setState(4155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4147);
				match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4148);
				match(CASCADE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4149);
				match(SET);
				setState(4150);
				match(NULLX);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4151);
				match(NO);
				setState(4152);
				match(ACTION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4153);
				match(SET);
				setState(4154);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_actionContext extends ParserRuleContext {
		public TerminalNode SIMPLE() { return getToken(OBParser.SIMPLE, 0); }
		public TerminalNode FULL() { return getToken(OBParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(OBParser.PARTIAL, 0); }
		public Match_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMatch_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMatch_action(this);
		}
	}

	public final Match_actionContext match_action() throws RecognitionException {
		Match_actionContext _localctx = new Match_actionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_match_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4157);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==SIMPLE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Opt_column_attribute_listContext opt_column_attribute_list() {
			return getRuleContext(Opt_column_attribute_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(OBParser.FIRST, 0); }
		public TerminalNode BEFORE() { return getToken(OBParser.BEFORE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode AFTER() { return getToken(OBParser.AFTER, 0); }
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode GENERATED() { return getToken(OBParser.GENERATED, 0); }
		public Opt_generated_option_listContext opt_generated_option_list() {
			return getRuleContext(Opt_generated_option_listContext.class,0);
		}
		public Opt_generated_column_attribute_listContext opt_generated_column_attribute_list() {
			return getRuleContext(Opt_generated_column_attribute_listContext.class,0);
		}
		public TerminalNode VIRTUAL() { return getToken(OBParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(OBParser.STORED, 0); }
		public TerminalNode SERIAL() { return getToken(OBParser.SERIAL, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_definition(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_column_definition);
		int _la;
		try {
			setState(4212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4159);
				column_definition_ref();
				setState(4160);
				data_type(0);
				setState(4162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(4161);
					opt_column_attribute_list(0);
					}
					break;
				}
				setState(4165);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(4164);
					references_clause();
					}
					break;
				}
				setState(4172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(4167);
					match(FIRST);
					}
					break;
				case 2:
					{
					{
					setState(4168);
					match(BEFORE);
					setState(4169);
					column_name();
					}
					}
					break;
				case 3:
					{
					{
					setState(4170);
					match(AFTER);
					setState(4171);
					column_name();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4174);
				column_definition_ref();
				setState(4175);
				data_type(0);
				setState(4178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(4176);
					match(GENERATED);
					setState(4177);
					opt_generated_option_list();
					}
				}

				setState(4180);
				match(AS);
				setState(4181);
				match(LeftParen);
				setState(4182);
				expr(0);
				setState(4183);
				match(RightParen);
				setState(4185);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(4184);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					setState(4187);
					opt_generated_column_attribute_list(0);
					}
					break;
				}
				setState(4191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(4190);
					references_clause();
					}
					break;
				}
				setState(4198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(4193);
					match(FIRST);
					}
					break;
				case 2:
					{
					{
					setState(4194);
					match(BEFORE);
					setState(4195);
					column_name();
					}
					}
					break;
				case 3:
					{
					{
					setState(4196);
					match(AFTER);
					setState(4197);
					column_name();
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4200);
				column_definition_ref();
				setState(4201);
				match(SERIAL);
				setState(4203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					setState(4202);
					opt_column_attribute_list(0);
					}
					break;
				}
				setState(4210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(4205);
					match(FIRST);
					}
					break;
				case 2:
					{
					{
					setState(4206);
					match(BEFORE);
					setState(4207);
					column_name();
					}
					}
					break;
				case 3:
					{
					{
					setState(4208);
					match(AFTER);
					setState(4209);
					column_name();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_generated_option_listContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(OBParser.ALWAYS, 0); }
		public Opt_generated_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_generated_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_generated_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_generated_option_list(this);
		}
	}

	public final Opt_generated_option_listContext opt_generated_option_list() throws RecognitionException {
		Opt_generated_option_listContext _localctx = new Opt_generated_option_listContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_opt_generated_option_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			match(ALWAYS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_generated_column_attribute_listContext extends ParserRuleContext {
		public Generated_column_attributeContext generated_column_attribute() {
			return getRuleContext(Generated_column_attributeContext.class,0);
		}
		public Opt_generated_column_attribute_listContext opt_generated_column_attribute_list() {
			return getRuleContext(Opt_generated_column_attribute_listContext.class,0);
		}
		public Opt_generated_column_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_generated_column_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_generated_column_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_generated_column_attribute_list(this);
		}
	}

	public final Opt_generated_column_attribute_listContext opt_generated_column_attribute_list() throws RecognitionException {
		return opt_generated_column_attribute_list(0);
	}

	private Opt_generated_column_attribute_listContext opt_generated_column_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_generated_column_attribute_listContext _localctx = new Opt_generated_column_attribute_listContext(_ctx, _parentState);
		Opt_generated_column_attribute_listContext _prevctx = _localctx;
		int _startState = 314;
		enterRecursionRule(_localctx, 314, RULE_opt_generated_column_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4217);
			generated_column_attribute();
			}
			_ctx.stop = _input.LT(-1);
			setState(4223);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_generated_column_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_generated_column_attribute_list);
					setState(4219);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4220);
					generated_column_attribute();
					}
					} 
				}
				setState(4225);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Generated_column_attributeContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OBParser.CONSTRAINT, 0); }
		public Opt_constraint_nameContext opt_constraint_name() {
			return getRuleContext(Opt_constraint_nameContext.class,0);
		}
		public Check_stateContext check_state() {
			return getRuleContext(Check_stateContext.class,0);
		}
		public TerminalNode SRID() { return getToken(OBParser.SRID, 0); }
		public Generated_column_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generated_column_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGenerated_column_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGenerated_column_attribute(this);
		}
	}

	public final Generated_column_attributeContext generated_column_attribute() throws RecognitionException {
		Generated_column_attributeContext _localctx = new Generated_column_attributeContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_generated_column_attribute);
		int _la;
		try {
			setState(4253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4226);
				match(NOT);
				setState(4227);
				match(NULLX);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4228);
				match(NULLX);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4229);
				match(UNIQUE);
				setState(4230);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(4231);
					match(PRIMARY);
					}
				}

				setState(4234);
				match(KEY);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4235);
				match(UNIQUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4236);
				match(COMMENT);
				setState(4237);
				match(STRING_VALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4238);
				match(ID);
				setState(4239);
				match(INTNUM);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4240);
					match(CONSTRAINT);
					setState(4241);
					opt_constraint_name();
					}
				}

				setState(4244);
				match(CHECK);
				setState(4245);
				match(LeftParen);
				setState(4246);
				expr(0);
				setState(4247);
				match(RightParen);
				setState(4249);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(4248);
					check_state();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4251);
				match(SRID);
				setState(4252);
				match(INTNUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definition_refContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public List<TerminalNode> Dot() { return getTokens(OBParser.Dot); }
		public TerminalNode Dot(int i) {
			return getToken(OBParser.Dot, i);
		}
		public Column_definition_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_definition_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_definition_ref(this);
		}
	}

	public final Column_definition_refContext column_definition_ref() throws RecognitionException {
		Column_definition_refContext _localctx = new Column_definition_refContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_column_definition_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(4258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					setState(4255);
					relation_name();
					setState(4256);
					match(Dot);
					}
					break;
				}
				setState(4260);
				relation_name();
				setState(4261);
				match(Dot);
				}
				break;
			}
			setState(4265);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definition_listContext extends ParserRuleContext {
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_definition_list(this);
		}
	}

	public final Column_definition_listContext column_definition_list() throws RecognitionException {
		Column_definition_listContext _localctx = new Column_definition_listContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_column_definition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4267);
			column_definition();
			setState(4272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(4268);
				match(Comma);
				setState(4269);
				column_definition();
				}
				}
				setState(4274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_data_typeContext extends ParserRuleContext {
		public Binary_type_iContext binary_type_i() {
			return getRuleContext(Binary_type_iContext.class,0);
		}
		public Character_type_iContext character_type_i() {
			return getRuleContext(Character_type_iContext.class,0);
		}
		public Datetime_type_iContext datetime_type_i() {
			return getRuleContext(Datetime_type_iContext.class,0);
		}
		public Date_year_type_iContext date_year_type_i() {
			return getRuleContext(Date_year_type_iContext.class,0);
		}
		public Float_type_iContext float_type_i() {
			return getRuleContext(Float_type_iContext.class,0);
		}
		public Number_type_iContext number_type_i() {
			return getRuleContext(Number_type_iContext.class,0);
		}
		public Json_type_iContext json_type_i() {
			return getRuleContext(Json_type_iContext.class,0);
		}
		public Geo_type_iContext geo_type_i() {
			return getRuleContext(Geo_type_iContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(OBParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(OBParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(OBParser.INTEGER, 0); }
		public Roaringbitmap_type_iContext roaringbitmap_type_i() {
			return getRuleContext(Roaringbitmap_type_iContext.class,0);
		}
		public Cast_data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCast_data_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCast_data_type(this);
		}
	}

	public final Cast_data_typeContext cast_data_type() throws RecognitionException {
		Cast_data_typeContext _localctx = new Cast_data_typeContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_cast_data_type);
		int _la;
		try {
			setState(4288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4275);
				binary_type_i(true);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4276);
				character_type_i(true);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4277);
				datetime_type_i(true);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4278);
				date_year_type_i();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4279);
				float_type_i(true);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4280);
				number_type_i(true);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4281);
				json_type_i();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4282);
				geo_type_i();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4283);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(4284);
					match(INTEGER);
					}
				}

				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4287);
				roaringbitmap_type_i();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_format_unitContext extends ParserRuleContext {
		public TerminalNode DATETIME() { return getToken(OBParser.DATETIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OBParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(OBParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(OBParser.TIME, 0); }
		public Get_format_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_format_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGet_format_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGet_format_unit(this);
		}
	}

	public final Get_format_unitContext get_format_unit() throws RecognitionException {
		Get_format_unitContext _localctx = new Get_format_unitContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_get_format_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			_la = _input.LA(1);
			if ( !(_la==TIMESTAMP || _la==TIME || _la==DATETIME || _la==DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_int_numContext extends ParserRuleContext {
		public int max_precision_count;
		public int precision_count = 1;
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Precision_int_numContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Precision_int_numContext(ParserRuleContext parent, int invokingState, int max_precision_count) {
			super(parent, invokingState);
			this.max_precision_count = max_precision_count;
		}
		@Override public int getRuleIndex() { return RULE_precision_int_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPrecision_int_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPrecision_int_num(this);
		}
	}

	public final Precision_int_numContext precision_int_num(int max_precision_count) throws RecognitionException {
		Precision_int_numContext _localctx = new Precision_int_numContext(_ctx, getState(), max_precision_count);
		enterRule(_localctx, 326, RULE_precision_int_num);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4292);
			match(LeftParen);
			setState(4293);
			match(INTNUM);
			setState(4300);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4294);
					if (!(_localctx.max_precision_count>_localctx.precision_count)) throw new FailedPredicateException(this, "$max_precision_count>$precision_count");
					setState(4295);
					match(Comma);
					setState(4296);
					match(INTNUM);
					_localctx.precision_count++;
					}
					} 
				}
				setState(4302);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			}
			setState(4303);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_decimal_numContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Precision_decimal_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_decimal_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPrecision_decimal_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPrecision_decimal_num(this);
		}
	}

	public final Precision_decimal_numContext precision_decimal_num() throws RecognitionException {
		Precision_decimal_numContext _localctx = new Precision_decimal_numContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_precision_decimal_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			match(LeftParen);
			setState(4306);
			match(DECIMAL_VAL);
			setState(4307);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_type_precisionContext extends ParserRuleContext {
		public int max_int_precision_count;
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public Precision_decimal_numContext precision_decimal_num() {
			return getRuleContext(Precision_decimal_numContext.class,0);
		}
		public Data_type_precisionContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Data_type_precisionContext(ParserRuleContext parent, int invokingState, int max_int_precision_count) {
			super(parent, invokingState);
			this.max_int_precision_count = max_int_precision_count;
		}
		@Override public int getRuleIndex() { return RULE_data_type_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterData_type_precision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitData_type_precision(this);
		}
	}

	public final Data_type_precisionContext data_type_precision(int max_int_precision_count) throws RecognitionException {
		Data_type_precisionContext _localctx = new Data_type_precisionContext(_ctx, getState(), max_int_precision_count);
		enterRule(_localctx, 330, RULE_data_type_precision);
		try {
			setState(4311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4309);
				precision_int_num(max_int_precision_count);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4310);
				precision_decimal_num();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Int_type_iContext int_type_i() {
			return getRuleContext(Int_type_iContext.class,0);
		}
		public Float_type_iContext float_type_i() {
			return getRuleContext(Float_type_iContext.class,0);
		}
		public Number_type_iContext number_type_i() {
			return getRuleContext(Number_type_iContext.class,0);
		}
		public Bool_type_iContext bool_type_i() {
			return getRuleContext(Bool_type_iContext.class,0);
		}
		public Datetime_type_iContext datetime_type_i() {
			return getRuleContext(Datetime_type_iContext.class,0);
		}
		public Date_year_type_iContext date_year_type_i() {
			return getRuleContext(Date_year_type_iContext.class,0);
		}
		public Text_type_iContext text_type_i() {
			return getRuleContext(Text_type_iContext.class,0);
		}
		public Character_type_iContext character_type_i() {
			return getRuleContext(Character_type_iContext.class,0);
		}
		public Blob_type_iContext blob_type_i() {
			return getRuleContext(Blob_type_iContext.class,0);
		}
		public Binary_type_iContext binary_type_i() {
			return getRuleContext(Binary_type_iContext.class,0);
		}
		public Bit_type_iContext bit_type_i() {
			return getRuleContext(Bit_type_iContext.class,0);
		}
		public Json_type_iContext json_type_i() {
			return getRuleContext(Json_type_iContext.class,0);
		}
		public Collection_type_iContext collection_type_i() {
			return getRuleContext(Collection_type_iContext.class,0);
		}
		public Geo_type_iContext geo_type_i() {
			return getRuleContext(Geo_type_iContext.class,0);
		}
		public Vector_type_iContext vector_type_i() {
			return getRuleContext(Vector_type_iContext.class,0);
		}
		public Roaringbitmap_type_iContext roaringbitmap_type_i() {
			return getRuleContext(Roaringbitmap_type_iContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode LeftBracket() { return getToken(OBParser.LeftBracket, 0); }
		public TerminalNode RightBracket() { return getToken(OBParser.RightBracket, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitData_type(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		return data_type(0);
	}

	private Data_typeContext data_type(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Data_typeContext _localctx = new Data_typeContext(_ctx, _parentState);
		Data_typeContext _prevctx = _localctx;
		int _startState = 332;
		enterRecursionRule(_localctx, 332, RULE_data_type, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(4314);
				int_type_i();
				}
				break;
			case 2:
				{
				setState(4315);
				float_type_i(false);
				}
				break;
			case 3:
				{
				setState(4316);
				number_type_i(false);
				}
				break;
			case 4:
				{
				setState(4317);
				bool_type_i();
				}
				break;
			case 5:
				{
				setState(4318);
				datetime_type_i(false);
				}
				break;
			case 6:
				{
				setState(4319);
				date_year_type_i();
				}
				break;
			case 7:
				{
				setState(4320);
				text_type_i();
				}
				break;
			case 8:
				{
				setState(4321);
				character_type_i(false);
				}
				break;
			case 9:
				{
				setState(4322);
				blob_type_i();
				}
				break;
			case 10:
				{
				setState(4323);
				binary_type_i(false);
				}
				break;
			case 11:
				{
				setState(4324);
				bit_type_i();
				}
				break;
			case 12:
				{
				setState(4325);
				json_type_i();
				}
				break;
			case 13:
				{
				setState(4326);
				collection_type_i();
				}
				break;
			case 14:
				{
				setState(4327);
				geo_type_i();
				}
				break;
			case 15:
				{
				setState(4328);
				vector_type_i();
				}
				break;
			case 16:
				{
				setState(4329);
				roaringbitmap_type_i();
				}
				break;
			case 17:
				{
				setState(4330);
				match(ARRAY);
				setState(4331);
				match(LeftParen);
				setState(4332);
				data_type(0);
				setState(4333);
				match(RightParen);
				}
				break;
			case 18:
				{
				setState(4335);
				match(STRING_VALUE);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4343);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Data_typeContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_data_type);
					setState(4338);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4339);
					match(LeftBracket);
					setState(4340);
					match(RightBracket);
					}
					} 
				}
				setState(4345);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class String_listContext extends ParserRuleContext {
		public List<Text_stringContext> text_string() {
			return getRuleContexts(Text_stringContext.class);
		}
		public Text_stringContext text_string(int i) {
			return getRuleContext(Text_stringContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public String_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterString_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitString_list(this);
		}
	}

	public final String_listContext string_list() throws RecognitionException {
		String_listContext _localctx = new String_listContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_string_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4346);
			text_string();
			setState(4351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(4347);
				match(Comma);
				setState(4348);
				text_string();
				}
				}
				setState(4353);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Text_stringContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode PARSER_SYNTAX_ERROR() { return getToken(OBParser.PARSER_SYNTAX_ERROR, 0); }
		public Text_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_text_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterText_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitText_string(this);
		}
	}

	public final Text_stringContext text_string() throws RecognitionException {
		Text_stringContext _localctx = new Text_stringContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_text_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			_la = _input.LA(1);
			if ( !(_la==PARSER_SYNTAX_ERROR || _la==STRING_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_type_iContext extends ParserRuleContext {
		public TerminalNode ENUM() { return getToken(OBParser.ENUM, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public String_listContext string_list() {
			return getRuleContext(String_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Collection_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCollection_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCollection_type_i(this);
		}
	}

	public final Collection_type_iContext collection_type_i() throws RecognitionException {
		Collection_type_iContext _localctx = new Collection_type_iContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_collection_type_i);
		try {
			setState(4386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4356);
				match(ENUM);
				setState(4357);
				match(LeftParen);
				setState(4358);
				string_list();
				setState(4359);
				match(RightParen);
				setState(4361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(4360);
					match(BINARY);
					}
					break;
				}
				setState(4366);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(4363);
					charset_key();
					setState(4364);
					charset_name();
					}
					break;
				}
				setState(4369);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(4368);
					collation();
					}
					break;
				}
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4371);
				match(SET);
				setState(4372);
				match(LeftParen);
				setState(4373);
				string_list();
				setState(4374);
				match(RightParen);
				setState(4376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(4375);
					match(BINARY);
					}
					break;
				}
				setState(4381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(4378);
					charset_key();
					setState(4379);
					charset_name();
					}
					break;
				}
				setState(4384);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(4383);
					collation();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_type_iContext extends ParserRuleContext {
		public TerminalNode JSON() { return getToken(OBParser.JSON, 0); }
		public Json_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_type_i(this);
		}
	}

	public final Json_type_iContext json_type_i() throws RecognitionException {
		Json_type_iContext _localctx = new Json_type_iContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_json_type_i);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4388);
			match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Roaringbitmap_type_iContext extends ParserRuleContext {
		public TerminalNode ROARINGBITMAP() { return getToken(OBParser.ROARINGBITMAP, 0); }
		public Roaringbitmap_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roaringbitmap_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRoaringbitmap_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRoaringbitmap_type_i(this);
		}
	}

	public final Roaringbitmap_type_iContext roaringbitmap_type_i() throws RecognitionException {
		Roaringbitmap_type_iContext _localctx = new Roaringbitmap_type_iContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_roaringbitmap_type_i);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4390);
			match(ROARINGBITMAP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_type_iContext extends ParserRuleContext {
		public TerminalNode VECTOR() { return getToken(OBParser.VECTOR, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Vector_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVector_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVector_type_i(this);
		}
	}

	public final Vector_type_iContext vector_type_i() throws RecognitionException {
		Vector_type_iContext _localctx = new Vector_type_iContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_vector_type_i);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4392);
			match(VECTOR);
			setState(4393);
			match(LeftParen);
			setState(4394);
			match(INTNUM);
			setState(4395);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_type_iContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(OBParser.BIT, 0); }
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public Bit_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBit_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBit_type_i(this);
		}
	}

	public final Bit_type_iContext bit_type_i() throws RecognitionException {
		Bit_type_iContext _localctx = new Bit_type_iContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_bit_type_i);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			match(BIT);
			setState(4399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				setState(4398);
				precision_int_num(1);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_type_iContext extends ParserRuleContext {
		public TerminalNode TINYINT() { return getToken(OBParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(OBParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(OBParser.MEDIUMINT, 0); }
		public TerminalNode INTEGER() { return getToken(OBParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(OBParser.BIGINT, 0); }
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(OBParser.ZEROFILL, 0); }
		public TerminalNode UNSIGNED() { return getToken(OBParser.UNSIGNED, 0); }
		public TerminalNode SIGNED() { return getToken(OBParser.SIGNED, 0); }
		public Int_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInt_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInt_type_i(this);
		}
	}

	public final Int_type_iContext int_type_i() throws RecognitionException {
		Int_type_iContext _localctx = new Int_type_iContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_int_type_i);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			_la = _input.LA(1);
			if ( !(_la==BIGINT || _la==INTEGER || _la==MEDIUMINT || _la==SMALLINT || _la==TINYINT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(4402);
				precision_int_num(1);
				}
				break;
			}
			setState(4406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(4405);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(4408);
				match(ZEROFILL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Float_type_iContext extends ParserRuleContext {
		public boolean in_cast_data_type;
		public TerminalNode FLOAT() { return getToken(OBParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(OBParser.DOUBLE, 0); }
		public TerminalNode REAL() { return getToken(OBParser.REAL, 0); }
		public Data_type_precisionContext data_type_precision() {
			return getRuleContext(Data_type_precisionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(OBParser.ZEROFILL, 0); }
		public TerminalNode UNSIGNED() { return getToken(OBParser.UNSIGNED, 0); }
		public TerminalNode SIGNED() { return getToken(OBParser.SIGNED, 0); }
		public TerminalNode PRECISION() { return getToken(OBParser.PRECISION, 0); }
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public Float_type_iContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Float_type_iContext(ParserRuleContext parent, int invokingState, boolean in_cast_data_type) {
			super(parent, invokingState);
			this.in_cast_data_type = in_cast_data_type;
		}
		@Override public int getRuleIndex() { return RULE_float_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFloat_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFloat_type_i(this);
		}
	}

	public final Float_type_iContext float_type_i(boolean in_cast_data_type) throws RecognitionException {
		Float_type_iContext _localctx = new Float_type_iContext(_ctx, getState(), in_cast_data_type);
		enterRule(_localctx, 350, RULE_float_type_i);
		int _la;
		try {
			setState(4439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4411);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4421);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
					{
					setState(4412);
					match(FLOAT);
					}
					break;
				case DOUBLE:
					{
					setState(4413);
					match(DOUBLE);
					setState(4415);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
					case 1:
						{
						setState(4414);
						match(PRECISION);
						}
						break;
					}
					}
					break;
				case REAL:
					{
					setState(4417);
					match(REAL);
					setState(4419);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
					case 1:
						{
						setState(4418);
						match(PRECISION);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4424);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(4423);
					data_type_precision(2);
					}
					break;
				}
				setState(4427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(4426);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(4429);
					match(ZEROFILL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4432);
				if (!(_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "$in_cast_data_type");
				setState(4433);
				match(FLOAT);
				setState(4435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(4434);
					precision_int_num(1);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4437);
				if (!(_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "$in_cast_data_type");
				setState(4438);
				match(DOUBLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_type_iContext extends ParserRuleContext {
		public boolean in_cast_data_type;
		public TerminalNode NUMBER() { return getToken(OBParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(OBParser.DECIMAL, 0); }
		public TerminalNode FIXED() { return getToken(OBParser.FIXED, 0); }
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(OBParser.ZEROFILL, 0); }
		public TerminalNode UNSIGNED() { return getToken(OBParser.UNSIGNED, 0); }
		public TerminalNode SIGNED() { return getToken(OBParser.SIGNED, 0); }
		public Number_type_iContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Number_type_iContext(ParserRuleContext parent, int invokingState, boolean in_cast_data_type) {
			super(parent, invokingState);
			this.in_cast_data_type = in_cast_data_type;
		}
		@Override public int getRuleIndex() { return RULE_number_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNumber_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNumber_type_i(this);
		}
	}

	public final Number_type_iContext number_type_i(boolean in_cast_data_type) throws RecognitionException {
		Number_type_iContext _localctx = new Number_type_iContext(_ctx, getState(), in_cast_data_type);
		enterRule(_localctx, 352, RULE_number_type_i);
		int _la;
		try {
			setState(4457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4441);
				if (!(_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "$in_cast_data_type");
				setState(4442);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==DECIMAL || _la==FIXED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(4443);
					precision_int_num(2);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4446);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4447);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==DECIMAL || _la==FIXED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
				case 1:
					{
					setState(4448);
					precision_int_num(2);
					}
					break;
				}
				setState(4452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(4451);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(4454);
					match(ZEROFILL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Text_type_iContext extends ParserRuleContext {
		public TerminalNode TINYTEXT() { return getToken(OBParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(OBParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(OBParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(OBParser.LONGTEXT, 0); }
		public String_length_iContext string_length_i() {
			return getRuleContext(String_length_iContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(OBParser.VARCHAR, 0); }
		public Text_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_text_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterText_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitText_type_i(this);
		}
	}

	public final Text_type_iContext text_type_i() throws RecognitionException {
		Text_type_iContext _localctx = new Text_type_iContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_text_type_i);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4466);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TINYTEXT:
				{
				setState(4459);
				match(TINYTEXT);
				}
				break;
			case TEXT:
				{
				setState(4460);
				match(TEXT);
				}
				break;
			case MEDIUMTEXT:
				{
				setState(4461);
				match(MEDIUMTEXT);
				setState(4463);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(4462);
					match(VARCHAR);
					}
					break;
				}
				}
				break;
			case LONGTEXT:
				{
				setState(4465);
				match(LONGTEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(4468);
				string_length_i();
				}
				break;
			}
			setState(4472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(4471);
				match(BINARY);
				}
				break;
			}
			setState(4477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(4474);
				charset_key();
				setState(4475);
				charset_name();
				}
				break;
			}
			setState(4480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				setState(4479);
				collation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_type_iContext extends ParserRuleContext {
		public boolean in_cast_data_type;
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public String_length_iContext string_length_i() {
			return getRuleContext(String_length_iContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public TerminalNode NCHAR() { return getToken(OBParser.NCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(OBParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(OBParser.VARCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(OBParser.NVARCHAR, 0); }
		public TerminalNode VARYING() { return getToken(OBParser.VARYING, 0); }
		public Character_type_iContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Character_type_iContext(ParserRuleContext parent, int invokingState, boolean in_cast_data_type) {
			super(parent, invokingState);
			this.in_cast_data_type = in_cast_data_type;
		}
		@Override public int getRuleIndex() { return RULE_character_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCharacter_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCharacter_type_i(this);
		}
	}

	public final Character_type_iContext character_type_i(boolean in_cast_data_type) throws RecognitionException {
		Character_type_iContext _localctx = new Character_type_iContext(_ctx, getState(), in_cast_data_type);
		enterRule(_localctx, 356, RULE_character_type_i);
		int _la;
		try {
			setState(4585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4482);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4483);
				match(CHARACTER);
				setState(4485);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(4484);
					string_length_i();
					}
					break;
				}
				setState(4488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(4487);
					match(BINARY);
					}
					break;
				}
				setState(4493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(4490);
					charset_key();
					setState(4491);
					charset_name();
					}
					break;
				}
				setState(4496);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(4495);
					collation();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4498);
				if (!(_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "$in_cast_data_type");
				setState(4499);
				match(CHARACTER);
				setState(4501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(4500);
					string_length_i();
					}
					break;
				}
				setState(4504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(4503);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4506);
				if (!(_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "$in_cast_data_type");
				setState(4507);
				match(CHARACTER);
				setState(4509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LeftParen) {
					{
					setState(4508);
					string_length_i();
					}
				}

				setState(4511);
				charset_key();
				setState(4512);
				charset_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4514);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4515);
				match(NCHAR);
				setState(4517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(4516);
					string_length_i();
					}
					break;
				}
				setState(4520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(4519);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4522);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4523);
				match(NATIONAL);
				setState(4524);
				match(CHARACTER);
				setState(4526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(4525);
					string_length_i();
					}
					break;
				}
				setState(4529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(4528);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4531);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4532);
				match(VARCHAR);
				setState(4533);
				string_length_i();
				setState(4535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(4534);
					match(BINARY);
					}
					break;
				}
				setState(4540);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(4537);
					charset_key();
					setState(4538);
					charset_name();
					}
					break;
				}
				setState(4543);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(4542);
					collation();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4545);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4546);
				match(NCHAR);
				setState(4547);
				match(VARCHAR);
				setState(4548);
				string_length_i();
				setState(4550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(4549);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4552);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4553);
				match(NVARCHAR);
				setState(4554);
				string_length_i();
				setState(4556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(4555);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4558);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4559);
				match(NATIONAL);
				setState(4560);
				match(VARCHAR);
				setState(4561);
				string_length_i();
				setState(4563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(4562);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4565);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4566);
				match(CHARACTER);
				setState(4567);
				match(VARYING);
				setState(4568);
				string_length_i();
				setState(4570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(4569);
					match(BINARY);
					}
					break;
				}
				setState(4575);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(4572);
					charset_key();
					setState(4573);
					charset_name();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4577);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4578);
				match(NATIONAL);
				setState(4579);
				match(CHARACTER);
				setState(4580);
				match(VARYING);
				setState(4581);
				string_length_i();
				setState(4583);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(4582);
					match(BINARY);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_type_iContext extends ParserRuleContext {
		public TerminalNode BOOL() { return getToken(OBParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(OBParser.BOOLEAN, 0); }
		public Bool_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBool_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBool_type_i(this);
		}
	}

	public final Bool_type_iContext bool_type_i() throws RecognitionException {
		Bool_type_iContext _localctx = new Bool_type_iContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_bool_type_i);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4587);
			_la = _input.LA(1);
			if ( !(_la==BOOL || _la==BOOLEAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Geo_type_iContext extends ParserRuleContext {
		public TerminalNode POINT() { return getToken(OBParser.POINT, 0); }
		public TerminalNode GEOMETRY() { return getToken(OBParser.GEOMETRY, 0); }
		public TerminalNode LINESTRING() { return getToken(OBParser.LINESTRING, 0); }
		public TerminalNode POLYGON() { return getToken(OBParser.POLYGON, 0); }
		public TerminalNode MULTIPOINT() { return getToken(OBParser.MULTIPOINT, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(OBParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(OBParser.MULTIPOLYGON, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(OBParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(OBParser.GEOMCOLLECTION, 0); }
		public Geo_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geo_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGeo_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGeo_type_i(this);
		}
	}

	public final Geo_type_iContext geo_type_i() throws RecognitionException {
		Geo_type_iContext _localctx = new Geo_type_iContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_geo_type_i);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4589);
			_la = _input.LA(1);
			if ( !(_la==GEOMCOLLECTION || _la==POINT || _la==POLYGON || _la==MULTIPOLYGON || _la==GEOMETRYCOLLECTION || _la==GEOMETRY || _la==LINESTRING || _la==MULTILINESTRING || _la==MULTIPOINT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_type_iContext extends ParserRuleContext {
		public boolean in_cast_data_type;
		public TerminalNode DATETIME() { return getToken(OBParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(OBParser.TIME, 0); }
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(OBParser.TIMESTAMP, 0); }
		public Datetime_type_iContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Datetime_type_iContext(ParserRuleContext parent, int invokingState, boolean in_cast_data_type) {
			super(parent, invokingState);
			this.in_cast_data_type = in_cast_data_type;
		}
		@Override public int getRuleIndex() { return RULE_datetime_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatetime_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatetime_type_i(this);
		}
	}

	public final Datetime_type_iContext datetime_type_i(boolean in_cast_data_type) throws RecognitionException {
		Datetime_type_iContext _localctx = new Datetime_type_iContext(_ctx, getState(), in_cast_data_type);
		enterRule(_localctx, 362, RULE_datetime_type_i);
		int _la;
		try {
			setState(4600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4591);
				_la = _input.LA(1);
				if ( !(_la==TIME || _la==DATETIME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4593);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(4592);
					precision_int_num(1);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4595);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4596);
				match(TIMESTAMP);
				setState(4598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(4597);
					precision_int_num(1);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_year_type_iContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(OBParser.DATE, 0); }
		public TerminalNode YEAR() { return getToken(OBParser.YEAR, 0); }
		public Precision_int_numContext precision_int_num() {
			return getRuleContext(Precision_int_numContext.class,0);
		}
		public Date_year_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_year_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDate_year_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDate_year_type_i(this);
		}
	}

	public final Date_year_type_iContext date_year_type_i() throws RecognitionException {
		Date_year_type_iContext _localctx = new Date_year_type_iContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_date_year_type_i);
		try {
			setState(4607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4602);
				match(DATE);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4603);
				match(YEAR);
				setState(4605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(4604);
					precision_int_num(1);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Blob_type_iContext extends ParserRuleContext {
		public TerminalNode TINYBLOB() { return getToken(OBParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(OBParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(OBParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(OBParser.LONGBLOB, 0); }
		public String_length_iContext string_length_i() {
			return getRuleContext(String_length_iContext.class,0);
		}
		public Blob_type_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blob_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBlob_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBlob_type_i(this);
		}
	}

	public final Blob_type_iContext blob_type_i() throws RecognitionException {
		Blob_type_iContext _localctx = new Blob_type_iContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_blob_type_i);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4609);
			_la = _input.LA(1);
			if ( !(_la==BLOB || _la==LONGBLOB || _la==MEDIUMBLOB || _la==TINYBLOB) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(4610);
				string_length_i();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_type_iContext extends ParserRuleContext {
		public boolean in_cast_data_type;
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public String_length_iContext string_length_i() {
			return getRuleContext(String_length_iContext.class,0);
		}
		public TerminalNode VARBINARY() { return getToken(OBParser.VARBINARY, 0); }
		public Binary_type_iContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Binary_type_iContext(ParserRuleContext parent, int invokingState, boolean in_cast_data_type) {
			super(parent, invokingState);
			this.in_cast_data_type = in_cast_data_type;
		}
		@Override public int getRuleIndex() { return RULE_binary_type_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBinary_type_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBinary_type_i(this);
		}
	}

	public final Binary_type_iContext binary_type_i(boolean in_cast_data_type) throws RecognitionException {
		Binary_type_iContext _localctx = new Binary_type_iContext(_ctx, getState(), in_cast_data_type);
		enterRule(_localctx, 368, RULE_binary_type_i);
		try {
			setState(4620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4613);
				match(BINARY);
				setState(4615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(4614);
					string_length_i();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4617);
				if (!(!_localctx.in_cast_data_type)) throw new FailedPredicateException(this, "!$in_cast_data_type");
				setState(4618);
				match(VARBINARY);
				setState(4619);
				string_length_i();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_length_iContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Number_literalContext number_literal() {
			return getRuleContext(Number_literalContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public String_length_iContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_length_i; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterString_length_i(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitString_length_i(this);
		}
	}

	public final String_length_iContext string_length_i() throws RecognitionException {
		String_length_iContext _localctx = new String_length_iContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_string_length_i);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4622);
			match(LeftParen);
			setState(4623);
			number_literal();
			setState(4624);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collation_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Collation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCollation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCollation_name(this);
		}
	}

	public final Collation_nameContext collation_name() throws RecognitionException {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_collation_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			_la = _input.LA(1);
			if ( !(_la==NAME_OB || _la==STRING_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trans_param_nameContext extends ParserRuleContext {
		public List<TerminalNode> Quote() { return getTokens(OBParser.Quote); }
		public TerminalNode Quote(int i) {
			return getToken(OBParser.Quote, i);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Trans_param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trans_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTrans_param_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTrans_param_name(this);
		}
	}

	public final Trans_param_nameContext trans_param_name() throws RecognitionException {
		Trans_param_nameContext _localctx = new Trans_param_nameContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_trans_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			match(Quote);
			setState(4629);
			match(STRING_VALUE);
			setState(4630);
			match(Quote);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trans_param_valueContext extends ParserRuleContext {
		public List<TerminalNode> Quote() { return getTokens(OBParser.Quote); }
		public TerminalNode Quote(int i) {
			return getToken(OBParser.Quote, i);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Trans_param_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trans_param_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTrans_param_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTrans_param_value(this);
		}
	}

	public final Trans_param_valueContext trans_param_value() throws RecognitionException {
		Trans_param_valueContext _localctx = new Trans_param_valueContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_trans_param_value);
		try {
			setState(4636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Quote:
				enterOuterAlt(_localctx, 1);
				{
				setState(4632);
				match(Quote);
				setState(4633);
				match(STRING_VALUE);
				setState(4634);
				match(Quote);
				}
				break;
			case INTNUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(4635);
				match(INTNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Charset_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public TerminalNode ASCII() { return getToken(OBParser.ASCII, 0); }
		public Charset_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCharset_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCharset_name(this);
		}
	}

	public final Charset_nameContext charset_name() throws RecognitionException {
		Charset_nameContext _localctx = new Charset_nameContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_charset_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4638);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==ASCII || _la==NAME_OB || _la==STRING_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Charset_name_or_defaultContext extends ParserRuleContext {
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Charset_name_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset_name_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCharset_name_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCharset_name_or_default(this);
		}
	}

	public final Charset_name_or_defaultContext charset_name_or_default() throws RecognitionException {
		Charset_name_or_defaultContext _localctx = new Charset_name_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_charset_name_or_default);
		try {
			setState(4642);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case ASCII:
			case NAME_OB:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4640);
				charset_name();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4641);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(OBParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public CollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCollation(this);
		}
	}

	public final CollationContext collation() throws RecognitionException {
		CollationContext _localctx = new CollationContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_collation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4644);
			match(COLLATE);
			setState(4645);
			collation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_column_attribute_listContext extends ParserRuleContext {
		public Column_attributeContext column_attribute() {
			return getRuleContext(Column_attributeContext.class,0);
		}
		public Opt_column_attribute_listContext opt_column_attribute_list() {
			return getRuleContext(Opt_column_attribute_listContext.class,0);
		}
		public Opt_column_attribute_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_column_attribute_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_column_attribute_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_column_attribute_list(this);
		}
	}

	public final Opt_column_attribute_listContext opt_column_attribute_list() throws RecognitionException {
		return opt_column_attribute_list(0);
	}

	private Opt_column_attribute_listContext opt_column_attribute_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_column_attribute_listContext _localctx = new Opt_column_attribute_listContext(_ctx, _parentState);
		Opt_column_attribute_listContext _prevctx = _localctx;
		int _startState = 384;
		enterRecursionRule(_localctx, 384, RULE_opt_column_attribute_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4648);
			column_attribute();
			}
			_ctx.stop = _input.LT(-1);
			setState(4654);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_column_attribute_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_column_attribute_list);
					setState(4650);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4651);
					column_attribute();
					}
					} 
				}
				setState(4656);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Column_attributeContext extends ParserRuleContext {
		public Token col_attri_value;
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Now_or_signed_literalContext now_or_signed_literal() {
			return getRuleContext(Now_or_signed_literalContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode ORIG_DEFAULT() { return getToken(OBParser.ORIG_DEFAULT, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(OBParser.AUTO_INCREMENT, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public Cur_timestamp_funcContext cur_timestamp_func() {
			return getRuleContext(Cur_timestamp_funcContext.class,0);
		}
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OBParser.CONSTRAINT, 0); }
		public Opt_constraint_nameContext opt_constraint_name() {
			return getRuleContext(Opt_constraint_nameContext.class,0);
		}
		public Check_stateContext check_state() {
			return getRuleContext(Check_stateContext.class,0);
		}
		public TerminalNode SRID() { return getToken(OBParser.SRID, 0); }
		public TerminalNode COLLATE() { return getToken(OBParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode SKIP_INDEX() { return getToken(OBParser.SKIP_INDEX, 0); }
		public Skip_index_typeContext skip_index_type() {
			return getRuleContext(Skip_index_typeContext.class,0);
		}
		public Opt_skip_index_type_listContext opt_skip_index_type_list() {
			return getRuleContext(Opt_skip_index_type_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Lob_chunk_sizeContext lob_chunk_size() {
			return getRuleContext(Lob_chunk_sizeContext.class,0);
		}
		public TerminalNode COLUMN_FORMAT() { return getToken(OBParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(OBParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(OBParser.DYNAMIC, 0); }
		public TerminalNode STORAGE() { return getToken(OBParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(OBParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(OBParser.MEMORY, 0); }
		public Column_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_attribute(this);
		}
	}

	public final Column_attributeContext column_attribute() throws RecognitionException {
		Column_attributeContext _localctx = new Column_attributeContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_column_attribute);
		int _la;
		try {
			setState(4715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4657);
				not();
				setState(4658);
				match(NULLX);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4660);
				match(NULLX);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4661);
				match(DEFAULT);
				setState(4662);
				now_or_signed_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4663);
				match(DEFAULT);
				setState(4664);
				match(LeftParen);
				setState(4665);
				expr(0);
				setState(4666);
				match(RightParen);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4668);
				match(ORIG_DEFAULT);
				setState(4669);
				now_or_signed_literal();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4670);
				match(AUTO_INCREMENT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4671);
				match(UNIQUE);
				setState(4672);
				match(KEY);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(4673);
					match(PRIMARY);
					}
				}

				setState(4676);
				match(KEY);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4677);
				match(UNIQUE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4678);
				match(COMMENT);
				setState(4679);
				match(STRING_VALUE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4680);
				match(ON);
				setState(4681);
				match(UPDATE);
				setState(4682);
				cur_timestamp_func();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4683);
				match(ID);
				setState(4684);
				match(INTNUM);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4685);
					match(CONSTRAINT);
					setState(4686);
					opt_constraint_name();
					}
				}

				setState(4689);
				match(CHECK);
				setState(4690);
				match(LeftParen);
				setState(4691);
				expr(0);
				setState(4692);
				match(RightParen);
				setState(4694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(4693);
					check_state();
					}
					break;
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4696);
				match(SRID);
				setState(4697);
				match(INTNUM);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4698);
				match(COLLATE);
				setState(4699);
				collation_name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4700);
				match(SKIP_INDEX);
				setState(4701);
				match(LeftParen);
				setState(4707);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(4702);
					skip_index_type();
					}
					break;
				case 2:
					{
					{
					setState(4703);
					opt_skip_index_type_list(0);
					setState(4704);
					match(Comma);
					setState(4705);
					skip_index_type();
					}
					}
					break;
				}
				setState(4709);
				match(RightParen);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4710);
				lob_chunk_size();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4711);
				match(COLUMN_FORMAT);
				setState(4712);
				((Column_attributeContext)_localctx).col_attri_value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FIXED || _la==DYNAMIC) ) {
					((Column_attributeContext)_localctx).col_attri_value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4713);
				match(STORAGE);
				setState(4714);
				((Column_attributeContext)_localctx).col_attri_value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((Column_attributeContext)_localctx).col_attri_value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Now_or_signed_literalContext extends ParserRuleContext {
		public Cur_timestamp_funcContext cur_timestamp_func() {
			return getRuleContext(Cur_timestamp_funcContext.class,0);
		}
		public Signed_literalContext signed_literal() {
			return getRuleContext(Signed_literalContext.class,0);
		}
		public Now_or_signed_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_now_or_signed_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNow_or_signed_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNow_or_signed_literal(this);
		}
	}

	public final Now_or_signed_literalContext now_or_signed_literal() throws RecognitionException {
		Now_or_signed_literalContext _localctx = new Now_or_signed_literalContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_now_or_signed_literal);
		try {
			setState(4719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(4717);
				cur_timestamp_func();
				}
				break;
			case UnderlineUTF8MB3:
			case UnderlineASCII:
			case UnderlineTIS620:
			case UnderlineUTF8:
			case UnderlineUTF8MB4:
			case UnderlineGBK:
			case UnderlineGB18030:
			case UnderlineBINARY:
			case UnderlineUTF16:
			case UnderlineLATIN1:
			case UnderlineGB18030_2022:
			case NULLX:
			case INTNUM:
			case TIMESTAMP_VALUE:
			case APPROXNUM:
			case NATIONAL_LITERAL:
			case DECIMAL_VAL:
			case BOOL_VALUE:
			case PARSER_SYNTAX_ERROR:
			case HEX_STRING_VALUE:
			case DATE_VALUE:
			case Plus:
			case Minus:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4718);
				signed_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_literalContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode Plus() { return getToken(OBParser.Plus, 0); }
		public Number_literalContext number_literal() {
			return getRuleContext(Number_literalContext.class,0);
		}
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public Signed_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSigned_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSigned_literal(this);
		}
	}

	public final Signed_literalContext signed_literal() throws RecognitionException {
		Signed_literalContext _localctx = new Signed_literalContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_signed_literal);
		try {
			setState(4726);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UnderlineUTF8MB3:
			case UnderlineASCII:
			case UnderlineTIS620:
			case UnderlineUTF8:
			case UnderlineUTF8MB4:
			case UnderlineGBK:
			case UnderlineGB18030:
			case UnderlineBINARY:
			case UnderlineUTF16:
			case UnderlineLATIN1:
			case UnderlineGB18030_2022:
			case NULLX:
			case INTNUM:
			case TIMESTAMP_VALUE:
			case APPROXNUM:
			case NATIONAL_LITERAL:
			case DECIMAL_VAL:
			case BOOL_VALUE:
			case PARSER_SYNTAX_ERROR:
			case HEX_STRING_VALUE:
			case DATE_VALUE:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4721);
				literal();
				}
				break;
			case Plus:
				enterOuterAlt(_localctx, 2);
				{
				setState(4722);
				match(Plus);
				setState(4723);
				number_literal();
				}
				break;
			case Minus:
				enterOuterAlt(_localctx, 3);
				{
				setState(4724);
				match(Minus);
				setState(4725);
				number_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_commaContext extends ParserRuleContext {
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Opt_commaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_comma; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_comma(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_comma(this);
		}
	}

	public final Opt_commaContext opt_comma() throws RecognitionException {
		Opt_commaContext _localctx = new Opt_commaContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_opt_comma);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(4728);
				match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_option_list_space_seperatedContext extends ParserRuleContext {
		public List<Table_optionContext> table_option() {
			return getRuleContexts(Table_optionContext.class);
		}
		public Table_optionContext table_option(int i) {
			return getRuleContext(Table_optionContext.class,i);
		}
		public Table_option_list_space_seperatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_option_list_space_seperated; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_option_list_space_seperated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_option_list_space_seperated(this);
		}
	}

	public final Table_option_list_space_seperatedContext table_option_list_space_seperated() throws RecognitionException {
		Table_option_list_space_seperatedContext _localctx = new Table_option_list_space_seperatedContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_table_option_list_space_seperated);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4732); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4731);
					table_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4734); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_option_listContext extends ParserRuleContext {
		public Table_option_list_space_seperatedContext table_option_list_space_seperated() {
			return getRuleContext(Table_option_list_space_seperatedContext.class,0);
		}
		public Table_optionContext table_option() {
			return getRuleContext(Table_optionContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Table_option_listContext table_option_list() {
			return getRuleContext(Table_option_listContext.class,0);
		}
		public Table_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_option_list(this);
		}
	}

	public final Table_option_listContext table_option_list() throws RecognitionException {
		Table_option_listContext _localctx = new Table_option_listContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_table_option_list);
		try {
			setState(4741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4736);
				table_option_list_space_seperated();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4737);
				table_option();
				setState(4738);
				match(Comma);
				setState(4739);
				table_option_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_zone_nameContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public TerminalNode RANDOM() { return getToken(OBParser.RANDOM, 0); }
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public Primary_zone_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_zone_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPrimary_zone_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPrimary_zone_name(this);
		}
	}

	public final Primary_zone_nameContext primary_zone_name() throws RecognitionException {
		Primary_zone_nameContext _localctx = new Primary_zone_nameContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_primary_zone_name);
		try {
			setState(4747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4743);
				match(DEFAULT);
				}
				break;
			case RANDOM:
				enterOuterAlt(_localctx, 2);
				{
				setState(4744);
				match(RANDOM);
				}
				break;
			case USER_VARIABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4745);
				match(USER_VARIABLE);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case ALL:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STRING_VALUE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4746);
				relation_name_or_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTablespace(this);
		}
	}

	public final TablespaceContext tablespace() throws RecognitionException {
		TablespaceContext _localctx = new TablespaceContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_tablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4749);
			match(NAME_OB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Locality_nameContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Locality_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locality_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLocality_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLocality_name(this);
		}
	}

	public final Locality_nameContext locality_name() throws RecognitionException {
		Locality_nameContext _localctx = new Locality_nameContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_locality_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4751);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==STRING_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionContext extends ParserRuleContext {
		public TerminalNode SORTKEY() { return getToken(OBParser.SORTKEY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode TABLE_MODE() { return getToken(OBParser.TABLE_MODE, 0); }
		public TerminalNode DUPLICATE_SCOPE() { return getToken(OBParser.DUPLICATE_SCOPE, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode COMPRESSION() { return getToken(OBParser.COMPRESSION, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode LOCALITY() { return getToken(OBParser.LOCALITY, 0); }
		public Locality_nameContext locality_name() {
			return getRuleContext(Locality_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode EXPIRE_INFO() { return getToken(OBParser.EXPIRE_INFO, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode PROGRESSIVE_MERGE_NUM() { return getToken(OBParser.PROGRESSIVE_MERGE_NUM, 0); }
		public TerminalNode BLOCK_SIZE() { return getToken(OBParser.BLOCK_SIZE, 0); }
		public TerminalNode TABLE_ID() { return getToken(OBParser.TABLE_ID, 0); }
		public TerminalNode REPLICA_NUM() { return getToken(OBParser.REPLICA_NUM, 0); }
		public TerminalNode STORAGE_FORMAT_VERSION() { return getToken(OBParser.STORAGE_FORMAT_VERSION, 0); }
		public TerminalNode TABLET_SIZE() { return getToken(OBParser.TABLET_SIZE, 0); }
		public TerminalNode PCTFREE() { return getToken(OBParser.PCTFREE, 0); }
		public TerminalNode MAX_USED_PART_ID() { return getToken(OBParser.MAX_USED_PART_ID, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(OBParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(OBParser.ROW_FORMAT, 0); }
		public Row_format_optionContext row_format_option() {
			return getRuleContext(Row_format_optionContext.class,0);
		}
		public TerminalNode USE_BLOOM_FILTER() { return getToken(OBParser.USE_BLOOM_FILTER, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(OBParser.COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return getRuleContext(Collation_nameContext.class,0);
		}
		public TerminalNode PRIMARY_ZONE() { return getToken(OBParser.PRIMARY_ZONE, 0); }
		public Primary_zone_nameContext primary_zone_name() {
			return getRuleContext(Primary_zone_nameContext.class,0);
		}
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(OBParser.AUTO_INCREMENT, 0); }
		public Int_or_decimalContext int_or_decimal() {
			return getRuleContext(Int_or_decimalContext.class,0);
		}
		public Read_only_or_writeContext read_only_or_write() {
			return getRuleContext(Read_only_or_writeContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public Parallel_optionContext parallel_option() {
			return getRuleContext(Parallel_optionContext.class,0);
		}
		public TerminalNode DELAY_KEY_WRITE() { return getToken(OBParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(OBParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode CHECKSUM() { return getToken(OBParser.CHECKSUM, 0); }
		public TerminalNode AUTO_INCREMENT_MODE() { return getToken(OBParser.AUTO_INCREMENT_MODE, 0); }
		public TerminalNode ENABLE_EXTENDED_ROWID() { return getToken(OBParser.ENABLE_EXTENDED_ROWID, 0); }
		public TerminalNode LOCATION() { return getToken(OBParser.LOCATION, 0); }
		public TerminalNode FORMAT() { return getToken(OBParser.FORMAT, 0); }
		public External_file_format_listContext external_file_format_list() {
			return getRuleContext(External_file_format_listContext.class,0);
		}
		public TerminalNode PATTERN() { return getToken(OBParser.PATTERN, 0); }
		public TerminalNode TTL() { return getToken(OBParser.TTL, 0); }
		public Ttl_definitionContext ttl_definition() {
			return getRuleContext(Ttl_definitionContext.class,0);
		}
		public TerminalNode KV_ATTRIBUTES() { return getToken(OBParser.KV_ATTRIBUTES, 0); }
		public TerminalNode DEFAULT_LOB_INROW_THRESHOLD() { return getToken(OBParser.DEFAULT_LOB_INROW_THRESHOLD, 0); }
		public TerminalNode LOB_INROW_THRESHOLD() { return getToken(OBParser.LOB_INROW_THRESHOLD, 0); }
		public TerminalNode AUTO_INCREMENT_CACHE_SIZE() { return getToken(OBParser.AUTO_INCREMENT_CACHE_SIZE, 0); }
		public TerminalNode PARTITION_TYPE() { return getToken(OBParser.PARTITION_TYPE, 0); }
		public TerminalNode USER_SPECIFIED() { return getToken(OBParser.USER_SPECIFIED, 0); }
		public TerminalNode PROPERTIES() { return getToken(OBParser.PROPERTIES, 0); }
		public External_properties_listContext external_properties_list() {
			return getRuleContext(External_properties_listContext.class,0);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public TerminalNode MICRO_INDEX_CLUSTERED() { return getToken(OBParser.MICRO_INDEX_CLUSTERED, 0); }
		public TerminalNode AUTO_REFRESH() { return getToken(OBParser.AUTO_REFRESH, 0); }
		public TerminalNode OFF() { return getToken(OBParser.OFF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(OBParser.IMMEDIATE, 0); }
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public TerminalNode MAX_ROWS() { return getToken(OBParser.MAX_ROWS, 0); }
		public TerminalNode MIN_ROWS() { return getToken(OBParser.MIN_ROWS, 0); }
		public TerminalNode PASSWORD() { return getToken(OBParser.PASSWORD, 0); }
		public TerminalNode PACK_KEYS() { return getToken(OBParser.PACK_KEYS, 0); }
		public TerminalNode CONNECTION() { return getToken(OBParser.CONNECTION, 0); }
		public TerminalNode DATA() { return getToken(OBParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(OBParser.DIRECTORY, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public TerminalNode ENCRYPTION() { return getToken(OBParser.ENCRYPTION, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(OBParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(OBParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(OBParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode UNION() { return getToken(OBParser.UNION, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode INSERT_METHOD() { return getToken(OBParser.INSERT_METHOD, 0); }
		public Merge_insert_typesContext merge_insert_types() {
			return getRuleContext(Merge_insert_typesContext.class,0);
		}
		public Table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_option(this);
		}
	}

	public final Table_optionContext table_option() throws RecognitionException {
		Table_optionContext _localctx = new Table_optionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_table_option);
		int _la;
		try {
			setState(4993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4753);
				match(SORTKEY);
				setState(4754);
				match(LeftParen);
				setState(4755);
				column_name_list();
				setState(4756);
				match(RightParen);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4758);
				_la = _input.LA(1);
				if ( !(_la==COMPRESSION || _la==COMMENT || _la==DUPLICATE_SCOPE || _la==TABLE_MODE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4759);
					match(COMP_EQ);
					}
				}

				setState(4762);
				match(STRING_VALUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4763);
				match(LOCALITY);
				setState(4765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4764);
					match(COMP_EQ);
					}
				}

				setState(4767);
				locality_name();
				setState(4769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(4768);
					match(FORCE);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4771);
				match(EXPIRE_INFO);
				setState(4773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4772);
					match(COMP_EQ);
					}
				}

				setState(4775);
				match(LeftParen);
				setState(4776);
				expr(0);
				setState(4777);
				match(RightParen);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4779);
				_la = _input.LA(1);
				if ( !(_la==PROGRESSIVE_MERGE_NUM || _la==KEY_BLOCK_SIZE || _la==TABLE_ID || _la==MAX_USED_PART_ID || _la==BLOCK_SIZE || _la==STORAGE_FORMAT_VERSION || _la==PCTFREE || _la==REPLICA_NUM || _la==TABLET_SIZE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4780);
					match(COMP_EQ);
					}
				}

				setState(4783);
				match(INTNUM);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4784);
				match(ROW_FORMAT);
				setState(4786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4785);
					match(COMP_EQ);
					}
				}

				setState(4788);
				row_format_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4789);
				match(USE_BLOOM_FILTER);
				setState(4791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4790);
					match(COMP_EQ);
					}
				}

				setState(4793);
				match(BOOL_VALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4794);
					match(DEFAULT);
					}
				}

				setState(4797);
				charset_key();
				setState(4799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4798);
					match(COMP_EQ);
					}
				}

				setState(4801);
				charset_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4803);
					match(DEFAULT);
					}
				}

				setState(4806);
				match(COLLATE);
				setState(4808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4807);
					match(COMP_EQ);
					}
				}

				setState(4810);
				collation_name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4811);
				match(PRIMARY_ZONE);
				setState(4813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4812);
					match(COMP_EQ);
					}
				}

				setState(4815);
				primary_zone_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4816);
				_la = _input.LA(1);
				if ( !(_la==TABLEGROUP || _la==ENGINE_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4817);
					match(COMP_EQ);
					}
				}

				setState(4820);
				relation_name_or_string();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4821);
				match(AUTO_INCREMENT);
				setState(4823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4822);
					match(COMP_EQ);
					}
				}

				setState(4825);
				int_or_decimal();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4826);
				read_only_or_write();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4827);
				match(TABLESPACE);
				setState(4828);
				tablespace();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4829);
				parallel_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4830);
				match(DELAY_KEY_WRITE);
				setState(4832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4831);
					match(COMP_EQ);
					}
				}

				setState(4834);
				match(INTNUM);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4835);
				match(AVG_ROW_LENGTH);
				setState(4837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4836);
					match(COMP_EQ);
					}
				}

				setState(4839);
				match(INTNUM);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4840);
				match(CHECKSUM);
				setState(4842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4841);
					match(COMP_EQ);
					}
				}

				setState(4844);
				match(INTNUM);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4845);
				match(AUTO_INCREMENT_MODE);
				setState(4847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4846);
					match(COMP_EQ);
					}
				}

				setState(4849);
				match(STRING_VALUE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4850);
				match(ENABLE_EXTENDED_ROWID);
				setState(4852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4851);
					match(COMP_EQ);
					}
				}

				setState(4854);
				match(BOOL_VALUE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4855);
				match(LOCATION);
				setState(4857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4856);
					match(COMP_EQ);
					}
				}

				setState(4859);
				match(STRING_VALUE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4860);
				match(FORMAT);
				setState(4862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4861);
					match(COMP_EQ);
					}
				}

				setState(4864);
				match(LeftParen);
				setState(4865);
				external_file_format_list();
				setState(4866);
				match(RightParen);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4868);
				match(PATTERN);
				setState(4870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4869);
					match(COMP_EQ);
					}
				}

				setState(4872);
				match(STRING_VALUE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4873);
				match(TTL);
				setState(4874);
				match(LeftParen);
				setState(4875);
				ttl_definition();
				setState(4876);
				match(RightParen);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4878);
				match(KV_ATTRIBUTES);
				setState(4880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4879);
					match(COMP_EQ);
					}
				}

				setState(4882);
				match(STRING_VALUE);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(4883);
				match(DEFAULT_LOB_INROW_THRESHOLD);
				setState(4885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4884);
					match(COMP_EQ);
					}
				}

				setState(4887);
				match(INTNUM);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(4888);
				match(LOB_INROW_THRESHOLD);
				setState(4890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4889);
					match(COMP_EQ);
					}
				}

				setState(4892);
				match(INTNUM);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(4893);
				match(AUTO_INCREMENT_CACHE_SIZE);
				setState(4895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4894);
					match(COMP_EQ);
					}
				}

				setState(4897);
				match(INTNUM);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(4898);
				match(PARTITION_TYPE);
				setState(4900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4899);
					match(COMP_EQ);
					}
				}

				setState(4902);
				match(USER_SPECIFIED);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(4903);
				match(PROPERTIES);
				setState(4905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4904);
					match(COMP_EQ);
					}
				}

				setState(4907);
				match(LeftParen);
				setState(4908);
				external_properties_list();
				setState(4909);
				match(RightParen);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(4911);
				lob_storage_clause();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(4912);
				match(MICRO_INDEX_CLUSTERED);
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4913);
					match(COMP_EQ);
					}
				}

				setState(4916);
				match(BOOL_VALUE);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(4917);
				match(AUTO_REFRESH);
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4918);
					match(COMP_EQ);
					}
				}

				setState(4921);
				_la = _input.LA(1);
				if ( !(_la==IMMEDIATE || _la==INTERVAL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(4922);
				match(MAX_ROWS);
				setState(4924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4923);
					match(COMP_EQ);
					}
				}

				setState(4926);
				match(INTNUM);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(4927);
				match(MIN_ROWS);
				setState(4929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4928);
					match(COMP_EQ);
					}
				}

				setState(4931);
				match(INTNUM);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(4932);
				match(PASSWORD);
				setState(4934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4933);
					match(COMP_EQ);
					}
				}

				setState(4936);
				match(STRING_VALUE);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(4937);
				match(PACK_KEYS);
				setState(4939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4938);
					match(COMP_EQ);
					}
				}

				setState(4941);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INTNUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(4942);
				match(CONNECTION);
				setState(4944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4943);
					match(COMP_EQ);
					}
				}

				setState(4946);
				match(STRING_VALUE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(4947);
				match(DATA);
				setState(4948);
				match(DIRECTORY);
				setState(4950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4949);
					match(COMP_EQ);
					}
				}

				setState(4952);
				match(STRING_VALUE);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(4953);
				match(INDEX);
				setState(4954);
				match(DIRECTORY);
				setState(4956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4955);
					match(COMP_EQ);
					}
				}

				setState(4958);
				match(STRING_VALUE);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(4959);
				match(ENCRYPTION);
				setState(4961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4960);
					match(COMP_EQ);
					}
				}

				setState(4963);
				match(STRING_VALUE);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(4964);
				match(STATS_AUTO_RECALC);
				setState(4966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4965);
					match(COMP_EQ);
					}
				}

				setState(4968);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INTNUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(4969);
				match(STATS_PERSISTENT);
				setState(4971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4970);
					match(COMP_EQ);
					}
				}

				setState(4973);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INTNUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(4974);
				match(STATS_SAMPLE_PAGES);
				setState(4976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4975);
					match(COMP_EQ);
					}
				}

				setState(4978);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==INTNUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(4979);
				match(UNION);
				setState(4981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4980);
					match(COMP_EQ);
					}
				}

				setState(4983);
				match(LeftParen);
				setState(4985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)) | (1L << (Dot - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(4984);
					table_list();
					}
				}

				setState(4987);
				match(RightParen);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(4988);
				match(INSERT_METHOD);
				setState(4990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4989);
					match(COMP_EQ);
					}
				}

				setState(4992);
				merge_insert_types();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_typesContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(OBParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(OBParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(OBParser.LAST, 0); }
		public Merge_insert_typesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_types; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMerge_insert_types(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMerge_insert_types(this);
		}
	}

	public final Merge_insert_typesContext merge_insert_types() throws RecognitionException {
		Merge_insert_typesContext _localctx = new Merge_insert_typesContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_merge_insert_types);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4995);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NO || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_optionContext extends ParserRuleContext {
		public TerminalNode PARALLEL() { return getToken(OBParser.PARALLEL, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode NOPARALLEL() { return getToken(OBParser.NOPARALLEL, 0); }
		public Parallel_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterParallel_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitParallel_option(this);
		}
	}

	public final Parallel_optionContext parallel_option() throws RecognitionException {
		Parallel_optionContext _localctx = new Parallel_optionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_parallel_option);
		int _la;
		try {
			setState(5003);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARALLEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4997);
				match(PARALLEL);
				setState(4999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(4998);
					match(COMP_EQ);
					}
				}

				setState(5001);
				match(INTNUM);
				}
				break;
			case NOPARALLEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5002);
				match(NOPARALLEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ttl_definitionContext extends ParserRuleContext {
		public List<Ttl_exprContext> ttl_expr() {
			return getRuleContexts(Ttl_exprContext.class);
		}
		public Ttl_exprContext ttl_expr(int i) {
			return getRuleContext(Ttl_exprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Ttl_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ttl_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTtl_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTtl_definition(this);
		}
	}

	public final Ttl_definitionContext ttl_definition() throws RecognitionException {
		Ttl_definitionContext _localctx = new Ttl_definitionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_ttl_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5005);
			ttl_expr();
			setState(5010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5006);
				match(Comma);
				setState(5007);
				ttl_expr();
				}
				}
				setState(5012);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ttl_exprContext extends ParserRuleContext {
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public TerminalNode Plus() { return getToken(OBParser.Plus, 0); }
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Ttl_unitContext ttl_unit() {
			return getRuleContext(Ttl_unitContext.class,0);
		}
		public Ttl_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ttl_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTtl_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTtl_expr(this);
		}
	}

	public final Ttl_exprContext ttl_expr() throws RecognitionException {
		Ttl_exprContext _localctx = new Ttl_exprContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_ttl_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5013);
			column_definition_ref();
			setState(5014);
			match(Plus);
			setState(5015);
			match(INTERVAL);
			setState(5016);
			match(INTNUM);
			setState(5017);
			ttl_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ttl_unitContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(OBParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(OBParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(OBParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(OBParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(OBParser.MONTH, 0); }
		public TerminalNode YEAR() { return getToken(OBParser.YEAR, 0); }
		public Ttl_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ttl_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTtl_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTtl_unit(this);
		}
	}

	public final Ttl_unitContext ttl_unit() throws RecognitionException {
		Ttl_unitContext _localctx = new Ttl_unitContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_ttl_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5019);
			_la = _input.LA(1);
			if ( !(_la==YEAR || _la==SECOND || ((((_la - 901)) & ~0x3f) == 0 && ((1L << (_la - 901)) & ((1L << (MINUTE - 901)) | (1L << (HOUR - 901)) | (1L << (MONTH - 901)))) != 0) || _la==DAY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_name_or_stringContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public Relation_name_or_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_name_or_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_name_or_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_name_or_string(this);
		}
	}

	public final Relation_name_or_stringContext relation_name_or_string() throws RecognitionException {
		Relation_name_or_stringContext _localctx = new Relation_name_or_stringContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_relation_name_or_string);
		try {
			setState(5024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5021);
				relation_name();
				}
				break;
			case STRING_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5022);
				match(STRING_VALUE);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5023);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_equal_markContext extends ParserRuleContext {
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Opt_equal_markContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_equal_mark; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_equal_mark(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_equal_mark(this);
		}
	}

	public final Opt_equal_markContext opt_equal_mark() throws RecognitionException {
		Opt_equal_markContext _localctx = new Opt_equal_markContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_opt_equal_mark);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(5026);
				match(COMP_EQ);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_optionContext extends ParserRuleContext {
		public Hash_partition_optionContext hash_partition_option() {
			return getRuleContext(Hash_partition_optionContext.class,0);
		}
		public Key_partition_optionContext key_partition_option() {
			return getRuleContext(Key_partition_optionContext.class,0);
		}
		public Range_partition_optionContext range_partition_option() {
			return getRuleContext(Range_partition_optionContext.class,0);
		}
		public List_partition_optionContext list_partition_option() {
			return getRuleContext(List_partition_optionContext.class,0);
		}
		public Partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_option(this);
		}
	}

	public final Partition_optionContext partition_option() throws RecognitionException {
		Partition_optionContext _localctx = new Partition_optionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_partition_option);
		try {
			setState(5033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5029);
				hash_partition_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5030);
				key_partition_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5031);
				range_partition_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5032);
				list_partition_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_partition_optionContext extends ParserRuleContext {
		public Auto_partition_typeContext auto_partition_type() {
			return getRuleContext(Auto_partition_typeContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode SIZE() { return getToken(OBParser.SIZE, 0); }
		public Partition_sizeContext partition_size() {
			return getRuleContext(Partition_sizeContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public TerminalNode AUTO() { return getToken(OBParser.AUTO, 0); }
		public Auto_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAuto_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAuto_partition_option(this);
		}
	}

	public final Auto_partition_optionContext auto_partition_option() throws RecognitionException {
		Auto_partition_optionContext _localctx = new Auto_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_auto_partition_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5035);
			auto_partition_type();
			setState(5036);
			match(PARTITION);
			setState(5037);
			match(SIZE);
			setState(5038);
			partition_size();
			setState(5039);
			match(PARTITIONS);
			setState(5040);
			match(AUTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_group_elementContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public TerminalNode EACH() { return getToken(OBParser.EACH, 0); }
		public TerminalNode COLUMN() { return getToken(OBParser.COLUMN, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Column_group_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_group_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_group_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_group_element(this);
		}
	}

	public final Column_group_elementContext column_group_element() throws RecognitionException {
		Column_group_elementContext _localctx = new Column_group_elementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_column_group_element);
		try {
			setState(5051);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5042);
				match(ALL);
				setState(5043);
				match(COLUMNS);
				}
				break;
			case EACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(5044);
				match(EACH);
				setState(5045);
				match(COLUMN);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5046);
				relation_name();
				setState(5047);
				match(LeftParen);
				setState(5048);
				column_name_list();
				setState(5049);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_group_listContext extends ParserRuleContext {
		public List<Column_group_elementContext> column_group_element() {
			return getRuleContexts(Column_group_elementContext.class);
		}
		public Column_group_elementContext column_group_element(int i) {
			return getRuleContext(Column_group_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Column_group_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_group_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_group_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_group_list(this);
		}
	}

	public final Column_group_listContext column_group_list() throws RecognitionException {
		Column_group_listContext _localctx = new Column_group_listContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_column_group_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5053);
			column_group_element();
			setState(5058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5054);
				match(Comma);
				setState(5055);
				column_group_element();
				}
				}
				setState(5060);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_column_groupContext extends ParserRuleContext {
		public TerminalNode WITH_COLUMN_GROUP() { return getToken(OBParser.WITH_COLUMN_GROUP, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_group_listContext column_group_list() {
			return getRuleContext(Column_group_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public With_column_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_column_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWith_column_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWith_column_group(this);
		}
	}

	public final With_column_groupContext with_column_group() throws RecognitionException {
		With_column_groupContext _localctx = new With_column_groupContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_with_column_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5061);
			match(WITH_COLUMN_GROUP);
			setState(5062);
			match(LeftParen);
			setState(5063);
			column_group_list();
			setState(5064);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_sizeContext extends ParserRuleContext {
		public Conf_constContext conf_const() {
			return getRuleContext(Conf_constContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(OBParser.AUTO, 0); }
		public Partition_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_size(this);
		}
	}

	public final Partition_sizeContext partition_size() throws RecognitionException {
		Partition_sizeContext _localctx = new Partition_sizeContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_partition_size);
		try {
			setState(5068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL_ALIAS:
			case SESSION_ALIAS:
			case NULLX:
			case INTNUM:
			case TIMESTAMP_VALUE:
			case APPROXNUM:
			case DECIMAL_VAL:
			case BOOL_VALUE:
			case DATE_VALUE:
			case Minus:
			case SYSTEM_VARIABLE:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5066);
				conf_const();
				}
				break;
			case AUTO:
				enterOuterAlt(_localctx, 2);
				{
				setState(5067);
				match(AUTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_partition_typeContext extends ParserRuleContext {
		public Auto_range_typeContext auto_range_type() {
			return getRuleContext(Auto_range_typeContext.class,0);
		}
		public Auto_partition_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_partition_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAuto_partition_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAuto_partition_type(this);
		}
	}

	public final Auto_partition_typeContext auto_partition_type() throws RecognitionException {
		Auto_partition_typeContext _localctx = new Auto_partition_typeContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_auto_partition_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5070);
			auto_range_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_range_typeContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Auto_range_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_range_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAuto_range_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAuto_range_type(this);
		}
	}

	public final Auto_range_typeContext auto_range_type() throws RecognitionException {
		Auto_range_typeContext _localctx = new Auto_range_typeContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_auto_range_type);
		int _la;
		try {
			setState(5088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5072);
				match(PARTITION);
				setState(5073);
				match(BY);
				setState(5074);
				match(RANGE);
				setState(5075);
				match(LeftParen);
				setState(5077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
					{
					setState(5076);
					expr(0);
					}
				}

				setState(5079);
				match(RightParen);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5080);
				match(PARTITION);
				setState(5081);
				match(BY);
				setState(5082);
				match(RANGE);
				setState(5083);
				match(COLUMNS);
				setState(5084);
				match(LeftParen);
				setState(5085);
				column_name_list();
				setState(5086);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Partition_optionsContext partition_options() {
			return getRuleContext(Partition_optionsContext.class,0);
		}
		public Opt_hash_partition_listContext opt_hash_partition_list() {
			return getRuleContext(Opt_hash_partition_listContext.class,0);
		}
		public Hash_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHash_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHash_partition_option(this);
		}
	}

	public final Hash_partition_optionContext hash_partition_option() throws RecognitionException {
		Hash_partition_optionContext _localctx = new Hash_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_hash_partition_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5090);
			match(PARTITION);
			setState(5091);
			match(BY);
			setState(5092);
			match(HASH);
			setState(5093);
			match(LeftParen);
			setState(5094);
			expr(0);
			setState(5095);
			match(RightParen);
			setState(5097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(5096);
				partition_options();
				}
				break;
			}
			setState(5100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(5099);
				opt_hash_partition_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_list_partition_listContext opt_list_partition_list() {
			return getRuleContext(Opt_list_partition_listContext.class,0);
		}
		public Partition_optionsContext partition_options() {
			return getRuleContext(Partition_optionsContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_partition_option(this);
		}
	}

	public final List_partition_optionContext list_partition_option() throws RecognitionException {
		List_partition_optionContext _localctx = new List_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_list_partition_option);
		int _la;
		try {
			setState(5125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5102);
				match(PARTITION);
				setState(5103);
				match(BY);
				setState(5104);
				match(BISON_LIST);
				setState(5105);
				match(LeftParen);
				setState(5106);
				expr(0);
				setState(5107);
				match(RightParen);
				setState(5109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION || _la==PARTITIONS) {
					{
					setState(5108);
					partition_options();
					}
				}

				setState(5111);
				opt_list_partition_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5113);
				match(PARTITION);
				setState(5114);
				match(BY);
				setState(5115);
				match(BISON_LIST);
				setState(5116);
				match(COLUMNS);
				setState(5117);
				match(LeftParen);
				setState(5118);
				column_name_list();
				setState(5119);
				match(RightParen);
				setState(5121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION || _la==PARTITIONS) {
					{
					setState(5120);
					partition_options();
					}
				}

				setState(5123);
				opt_list_partition_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Partition_optionsContext partition_options() {
			return getRuleContext(Partition_optionsContext.class,0);
		}
		public Opt_hash_partition_listContext opt_hash_partition_list() {
			return getRuleContext(Opt_hash_partition_listContext.class,0);
		}
		public Key_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterKey_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitKey_partition_option(this);
		}
	}

	public final Key_partition_optionContext key_partition_option() throws RecognitionException {
		Key_partition_optionContext _localctx = new Key_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_key_partition_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			match(PARTITION);
			setState(5128);
			match(BY);
			setState(5129);
			match(KEY);
			setState(5130);
			match(LeftParen);
			setState(5132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
				{
				setState(5131);
				column_name_list();
				}
			}

			setState(5134);
			match(RightParen);
			setState(5136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(5135);
				partition_options();
				}
				break;
			}
			setState(5139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(5138);
				opt_hash_partition_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_range_partition_listContext opt_range_partition_list() {
			return getRuleContext(Opt_range_partition_listContext.class,0);
		}
		public Partition_optionsContext partition_options() {
			return getRuleContext(Partition_optionsContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Range_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_partition_option(this);
		}
	}

	public final Range_partition_optionContext range_partition_option() throws RecognitionException {
		Range_partition_optionContext _localctx = new Range_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_range_partition_option);
		int _la;
		try {
			setState(5164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5141);
				match(PARTITION);
				setState(5142);
				match(BY);
				setState(5143);
				match(RANGE);
				setState(5144);
				match(LeftParen);
				setState(5145);
				expr(0);
				setState(5146);
				match(RightParen);
				setState(5148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION || _la==PARTITIONS) {
					{
					setState(5147);
					partition_options();
					}
				}

				setState(5150);
				opt_range_partition_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5152);
				match(PARTITION);
				setState(5153);
				match(BY);
				setState(5154);
				match(RANGE);
				setState(5155);
				match(COLUMNS);
				setState(5156);
				match(LeftParen);
				setState(5157);
				column_name_list();
				setState(5158);
				match(RightParen);
				setState(5160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION || _la==PARTITIONS) {
					{
					setState(5159);
					partition_options();
					}
				}

				setState(5162);
				opt_range_partition_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_optionsContext extends ParserRuleContext {
		public Subpartition_optionContext subpartition_option() {
			return getRuleContext(Subpartition_optionContext.class,0);
		}
		public Partition_numContext partition_num() {
			return getRuleContext(Partition_numContext.class,0);
		}
		public Partition_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_options(this);
		}
	}

	public final Partition_optionsContext partition_options() throws RecognitionException {
		Partition_optionsContext _localctx = new Partition_optionsContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_partition_options);
		int _la;
		try {
			setState(5174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITIONS) {
					{
					setState(5166);
					partition_num();
					}
				}

				setState(5169);
				subpartition_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(5170);
					subpartition_option();
					}
				}

				setState(5173);
				partition_num();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_numContext extends ParserRuleContext {
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Partition_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_num(this);
		}
	}

	public final Partition_numContext partition_num() throws RecognitionException {
		Partition_numContext _localctx = new Partition_numContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_partition_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			match(PARTITIONS);
			setState(5177);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aux_column_listContext extends ParserRuleContext {
		public List<Vertical_column_nameContext> vertical_column_name() {
			return getRuleContexts(Vertical_column_nameContext.class);
		}
		public Vertical_column_nameContext vertical_column_name(int i) {
			return getRuleContext(Vertical_column_nameContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Aux_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aux_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAux_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAux_column_list(this);
		}
	}

	public final Aux_column_listContext aux_column_list() throws RecognitionException {
		Aux_column_listContext _localctx = new Aux_column_listContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_aux_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			vertical_column_name();
			setState(5184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5180);
				match(Comma);
				setState(5181);
				vertical_column_name();
				}
				}
				setState(5186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vertical_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Vertical_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vertical_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVertical_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVertical_column_name(this);
		}
	}

	public final Vertical_column_nameContext vertical_column_name() throws RecognitionException {
		Vertical_column_nameContext _localctx = new Vertical_column_nameContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_vertical_column_name);
		try {
			setState(5192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5187);
				column_name();
				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(5188);
				match(LeftParen);
				setState(5189);
				column_name_list();
				setState(5190);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_name_list(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_column_name_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			column_name();
			setState(5199);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5195);
					match(Comma);
					setState(5196);
					column_name();
					}
					} 
				}
				setState(5201);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_optionContext extends ParserRuleContext {
		public Subpartition_template_optionContext subpartition_template_option() {
			return getRuleContext(Subpartition_template_optionContext.class,0);
		}
		public Subpartition_individual_optionContext subpartition_individual_option() {
			return getRuleContext(Subpartition_individual_optionContext.class,0);
		}
		public Subpartition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSubpartition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSubpartition_option(this);
		}
	}

	public final Subpartition_optionContext subpartition_option() throws RecognitionException {
		Subpartition_optionContext _localctx = new Subpartition_optionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_subpartition_option);
		try {
			setState(5204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5202);
				subpartition_template_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5203);
				subpartition_individual_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_template_optionContext extends ParserRuleContext {
		public List<TerminalNode> SUBPARTITION() { return getTokens(OBParser.SUBPARTITION); }
		public TerminalNode SUBPARTITION(int i) {
			return getToken(OBParser.SUBPARTITION, i);
		}
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode TEMPLATE() { return getToken(OBParser.TEMPLATE, 0); }
		public Opt_range_subpartition_listContext opt_range_subpartition_list() {
			return getRuleContext(Opt_range_subpartition_listContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public Opt_hash_subpartition_listContext opt_hash_subpartition_list() {
			return getRuleContext(Opt_hash_subpartition_listContext.class,0);
		}
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public Opt_list_subpartition_listContext opt_list_subpartition_list() {
			return getRuleContext(Opt_list_subpartition_listContext.class,0);
		}
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public Subpartition_template_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_template_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSubpartition_template_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSubpartition_template_option(this);
		}
	}

	public final Subpartition_template_optionContext subpartition_template_option() throws RecognitionException {
		Subpartition_template_optionContext _localctx = new Subpartition_template_optionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_subpartition_template_option);
		try {
			setState(5268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5206);
				match(SUBPARTITION);
				setState(5207);
				match(BY);
				setState(5208);
				match(RANGE);
				setState(5209);
				match(LeftParen);
				setState(5210);
				expr(0);
				setState(5211);
				match(RightParen);
				setState(5212);
				match(SUBPARTITION);
				setState(5213);
				match(TEMPLATE);
				setState(5214);
				opt_range_subpartition_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5216);
				match(SUBPARTITION);
				setState(5217);
				match(BY);
				setState(5218);
				match(RANGE);
				setState(5219);
				match(COLUMNS);
				setState(5220);
				match(LeftParen);
				setState(5221);
				column_name_list();
				setState(5222);
				match(RightParen);
				setState(5223);
				match(SUBPARTITION);
				setState(5224);
				match(TEMPLATE);
				setState(5225);
				opt_range_subpartition_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5227);
				match(SUBPARTITION);
				setState(5228);
				match(BY);
				setState(5229);
				match(HASH);
				setState(5230);
				match(LeftParen);
				setState(5231);
				expr(0);
				setState(5232);
				match(RightParen);
				setState(5233);
				match(SUBPARTITION);
				setState(5234);
				match(TEMPLATE);
				setState(5235);
				opt_hash_subpartition_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5237);
				match(SUBPARTITION);
				setState(5238);
				match(BY);
				setState(5239);
				match(BISON_LIST);
				setState(5240);
				match(LeftParen);
				setState(5241);
				expr(0);
				setState(5242);
				match(RightParen);
				setState(5243);
				match(SUBPARTITION);
				setState(5244);
				match(TEMPLATE);
				setState(5245);
				opt_list_subpartition_list();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5247);
				match(SUBPARTITION);
				setState(5248);
				match(BY);
				setState(5249);
				match(BISON_LIST);
				setState(5250);
				match(COLUMNS);
				setState(5251);
				match(LeftParen);
				setState(5252);
				column_name_list();
				setState(5253);
				match(RightParen);
				setState(5254);
				match(SUBPARTITION);
				setState(5255);
				match(TEMPLATE);
				setState(5256);
				opt_list_subpartition_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5258);
				match(SUBPARTITION);
				setState(5259);
				match(BY);
				setState(5260);
				match(KEY);
				setState(5261);
				match(LeftParen);
				setState(5262);
				column_name_list();
				setState(5263);
				match(RightParen);
				setState(5264);
				match(SUBPARTITION);
				setState(5265);
				match(TEMPLATE);
				setState(5266);
				opt_hash_subpartition_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_individual_optionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(OBParser.SUBPARTITIONS, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public Subpartition_individual_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_individual_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSubpartition_individual_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSubpartition_individual_option(this);
		}
	}

	public final Subpartition_individual_optionContext subpartition_individual_option() throws RecognitionException {
		Subpartition_individual_optionContext _localctx = new Subpartition_individual_optionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_subpartition_individual_option);
		int _la;
		try {
			setState(5305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5270);
				match(SUBPARTITION);
				setState(5271);
				match(BY);
				setState(5272);
				_la = _input.LA(1);
				if ( !(_la==BISON_LIST || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5273);
				match(LeftParen);
				setState(5274);
				expr(0);
				setState(5275);
				match(RightParen);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5277);
				match(SUBPARTITION);
				setState(5278);
				match(BY);
				setState(5279);
				_la = _input.LA(1);
				if ( !(_la==BISON_LIST || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5280);
				match(COLUMNS);
				setState(5281);
				match(LeftParen);
				setState(5282);
				column_name_list();
				setState(5283);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5285);
				match(SUBPARTITION);
				setState(5286);
				match(BY);
				setState(5287);
				match(HASH);
				setState(5288);
				match(LeftParen);
				setState(5289);
				expr(0);
				setState(5290);
				match(RightParen);
				setState(5293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
				case 1:
					{
					setState(5291);
					match(SUBPARTITIONS);
					setState(5292);
					match(INTNUM);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5295);
				match(SUBPARTITION);
				setState(5296);
				match(BY);
				setState(5297);
				match(KEY);
				setState(5298);
				match(LeftParen);
				setState(5299);
				column_name_list();
				setState(5300);
				match(RightParen);
				setState(5303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(5301);
					match(SUBPARTITIONS);
					setState(5302);
					match(INTNUM);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_hash_partition_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Hash_partition_listContext hash_partition_list() {
			return getRuleContext(Hash_partition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_hash_partition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hash_partition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_hash_partition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_hash_partition_list(this);
		}
	}

	public final Opt_hash_partition_listContext opt_hash_partition_list() throws RecognitionException {
		Opt_hash_partition_listContext _localctx = new Opt_hash_partition_listContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_opt_hash_partition_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			match(LeftParen);
			setState(5308);
			hash_partition_list();
			setState(5309);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partition_listContext extends ParserRuleContext {
		public List<Hash_partition_elementContext> hash_partition_element() {
			return getRuleContexts(Hash_partition_elementContext.class);
		}
		public Hash_partition_elementContext hash_partition_element(int i) {
			return getRuleContext(Hash_partition_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Hash_partition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHash_partition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHash_partition_list(this);
		}
	}

	public final Hash_partition_listContext hash_partition_list() throws RecognitionException {
		Hash_partition_listContext _localctx = new Hash_partition_listContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_hash_partition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5311);
			hash_partition_element();
			setState(5316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5312);
				match(Comma);
				setState(5313);
				hash_partition_element();
				}
				}
				setState(5318);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_listContext extends ParserRuleContext {
		public Opt_hash_subpartition_listContext opt_hash_subpartition_list() {
			return getRuleContext(Opt_hash_subpartition_listContext.class,0);
		}
		public Opt_range_subpartition_listContext opt_range_subpartition_list() {
			return getRuleContext(Opt_range_subpartition_listContext.class,0);
		}
		public Opt_list_subpartition_listContext opt_list_subpartition_list() {
			return getRuleContext(Opt_list_subpartition_listContext.class,0);
		}
		public Subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSubpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSubpartition_list(this);
		}
	}

	public final Subpartition_listContext subpartition_list() throws RecognitionException {
		Subpartition_listContext _localctx = new Subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_subpartition_list);
		try {
			setState(5322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5319);
				opt_hash_subpartition_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5320);
				opt_range_subpartition_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5321);
				opt_list_subpartition_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partition_elementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Partition_attributes_optionContext partition_attributes_option() {
			return getRuleContext(Partition_attributes_optionContext.class,0);
		}
		public Subpartition_listContext subpartition_list() {
			return getRuleContext(Subpartition_listContext.class,0);
		}
		public Hash_partition_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partition_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHash_partition_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHash_partition_element(this);
		}
	}

	public final Hash_partition_elementContext hash_partition_element() throws RecognitionException {
		Hash_partition_elementContext _localctx = new Hash_partition_elementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_hash_partition_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5324);
			match(PARTITION);
			setState(5325);
			relation_factor();
			setState(5328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(5326);
				match(ID);
				setState(5327);
				match(INTNUM);
				}
			}

			setState(5331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(5330);
				partition_attributes_option();
				}
			}

			setState(5334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LeftParen) {
				{
				setState(5333);
				subpartition_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_range_partition_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Range_partition_listContext range_partition_list() {
			return getRuleContext(Range_partition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_range_partition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_range_partition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_range_partition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_range_partition_list(this);
		}
	}

	public final Opt_range_partition_listContext opt_range_partition_list() throws RecognitionException {
		Opt_range_partition_listContext _localctx = new Opt_range_partition_listContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_opt_range_partition_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5336);
			match(LeftParen);
			setState(5337);
			range_partition_list();
			setState(5338);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partition_listContext extends ParserRuleContext {
		public List<Range_partition_elementContext> range_partition_element() {
			return getRuleContexts(Range_partition_elementContext.class);
		}
		public Range_partition_elementContext range_partition_element(int i) {
			return getRuleContext(Range_partition_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Range_partition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_partition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_partition_list(this);
		}
	}

	public final Range_partition_listContext range_partition_list() throws RecognitionException {
		Range_partition_listContext _localctx = new Range_partition_listContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_range_partition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5340);
			range_partition_element();
			setState(5345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5341);
				match(Comma);
				setState(5342);
				range_partition_element();
				}
				}
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partition_elementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(OBParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(OBParser.THAN, 0); }
		public Range_partition_exprContext range_partition_expr() {
			return getRuleContext(Range_partition_exprContext.class,0);
		}
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Partition_attributes_optionContext partition_attributes_option() {
			return getRuleContext(Partition_attributes_optionContext.class,0);
		}
		public Subpartition_listContext subpartition_list() {
			return getRuleContext(Subpartition_listContext.class,0);
		}
		public Range_partition_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_partition_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_partition_element(this);
		}
	}

	public final Range_partition_elementContext range_partition_element() throws RecognitionException {
		Range_partition_elementContext _localctx = new Range_partition_elementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_range_partition_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5348);
			match(PARTITION);
			setState(5349);
			relation_factor();
			setState(5350);
			match(VALUES);
			setState(5351);
			match(LESS);
			setState(5352);
			match(THAN);
			setState(5353);
			range_partition_expr();
			setState(5356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(5354);
				match(ID);
				setState(5355);
				match(INTNUM);
				}
			}

			setState(5359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(5358);
				partition_attributes_option();
				}
			}

			setState(5362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LeftParen) {
				{
				setState(5361);
				subpartition_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_list_partition_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List_partition_listContext list_partition_list() {
			return getRuleContext(List_partition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_list_partition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_list_partition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_list_partition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_list_partition_list(this);
		}
	}

	public final Opt_list_partition_listContext opt_list_partition_list() throws RecognitionException {
		Opt_list_partition_listContext _localctx = new Opt_list_partition_listContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_opt_list_partition_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5364);
			match(LeftParen);
			setState(5365);
			list_partition_list();
			setState(5366);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partition_listContext extends ParserRuleContext {
		public List<List_partition_elementContext> list_partition_element() {
			return getRuleContexts(List_partition_elementContext.class);
		}
		public List_partition_elementContext list_partition_element(int i) {
			return getRuleContext(List_partition_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public List_partition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_partition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_partition_list(this);
		}
	}

	public final List_partition_listContext list_partition_list() throws RecognitionException {
		List_partition_listContext _localctx = new List_partition_listContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_list_partition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5368);
			list_partition_element();
			setState(5373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5369);
				match(Comma);
				setState(5370);
				list_partition_element();
				}
				}
				setState(5375);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partition_elementContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public List_partition_exprContext list_partition_expr() {
			return getRuleContext(List_partition_exprContext.class,0);
		}
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Partition_attributes_optionContext partition_attributes_option() {
			return getRuleContext(Partition_attributes_optionContext.class,0);
		}
		public Subpartition_listContext subpartition_list() {
			return getRuleContext(Subpartition_listContext.class,0);
		}
		public List_partition_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_partition_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_partition_element(this);
		}
	}

	public final List_partition_elementContext list_partition_element() throws RecognitionException {
		List_partition_elementContext _localctx = new List_partition_elementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_list_partition_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5376);
			match(PARTITION);
			setState(5377);
			relation_factor();
			setState(5378);
			match(VALUES);
			setState(5379);
			match(IN);
			setState(5380);
			list_partition_expr();
			setState(5383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(5381);
				match(ID);
				setState(5382);
				match(INTNUM);
				}
			}

			setState(5386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(5385);
				partition_attributes_option();
				}
			}

			setState(5389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LeftParen) {
				{
				setState(5388);
				subpartition_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_hash_subpartition_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Hash_subpartition_listContext hash_subpartition_list() {
			return getRuleContext(Hash_subpartition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_hash_subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hash_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_hash_subpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_hash_subpartition_list(this);
		}
	}

	public final Opt_hash_subpartition_listContext opt_hash_subpartition_list() throws RecognitionException {
		Opt_hash_subpartition_listContext _localctx = new Opt_hash_subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_opt_hash_subpartition_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5391);
			match(LeftParen);
			setState(5392);
			hash_subpartition_list();
			setState(5393);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_subpartition_listContext extends ParserRuleContext {
		public List<Hash_subpartition_elementContext> hash_subpartition_element() {
			return getRuleContexts(Hash_subpartition_elementContext.class);
		}
		public Hash_subpartition_elementContext hash_subpartition_element(int i) {
			return getRuleContext(Hash_subpartition_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Hash_subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHash_subpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHash_subpartition_list(this);
		}
	}

	public final Hash_subpartition_listContext hash_subpartition_list() throws RecognitionException {
		Hash_subpartition_listContext _localctx = new Hash_subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_hash_subpartition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5395);
			hash_subpartition_element();
			setState(5400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5396);
				match(Comma);
				setState(5397);
				hash_subpartition_element();
				}
				}
				setState(5402);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_attributes_optionContext extends ParserRuleContext {
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode INNODB() { return getToken(OBParser.INNODB, 0); }
		public Partition_attributes_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_attributes_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_attributes_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_attributes_option(this);
		}
	}

	public final Partition_attributes_optionContext partition_attributes_option() throws RecognitionException {
		Partition_attributes_optionContext _localctx = new Partition_attributes_optionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_partition_attributes_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5403);
			match(ENGINE_);
			setState(5404);
			match(COMP_EQ);
			setState(5405);
			match(INNODB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_subpartition_elementContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Partition_attributes_optionContext partition_attributes_option() {
			return getRuleContext(Partition_attributes_optionContext.class,0);
		}
		public Hash_subpartition_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subpartition_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHash_subpartition_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHash_subpartition_element(this);
		}
	}

	public final Hash_subpartition_elementContext hash_subpartition_element() throws RecognitionException {
		Hash_subpartition_elementContext _localctx = new Hash_subpartition_elementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_hash_subpartition_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			match(SUBPARTITION);
			setState(5408);
			relation_factor();
			setState(5410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(5409);
				partition_attributes_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_range_subpartition_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Range_subpartition_listContext range_subpartition_list() {
			return getRuleContext(Range_subpartition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_range_subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_range_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_range_subpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_range_subpartition_list(this);
		}
	}

	public final Opt_range_subpartition_listContext opt_range_subpartition_list() throws RecognitionException {
		Opt_range_subpartition_listContext _localctx = new Opt_range_subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_opt_range_subpartition_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5412);
			match(LeftParen);
			setState(5413);
			range_subpartition_list();
			setState(5414);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_subpartition_listContext extends ParserRuleContext {
		public List<Range_subpartition_elementContext> range_subpartition_element() {
			return getRuleContexts(Range_subpartition_elementContext.class);
		}
		public Range_subpartition_elementContext range_subpartition_element(int i) {
			return getRuleContext(Range_subpartition_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Range_subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_subpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_subpartition_list(this);
		}
	}

	public final Range_subpartition_listContext range_subpartition_list() throws RecognitionException {
		Range_subpartition_listContext _localctx = new Range_subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_range_subpartition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5416);
			range_subpartition_element();
			setState(5421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5417);
				match(Comma);
				setState(5418);
				range_subpartition_element();
				}
				}
				setState(5423);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_subpartition_elementContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(OBParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(OBParser.THAN, 0); }
		public Range_partition_exprContext range_partition_expr() {
			return getRuleContext(Range_partition_exprContext.class,0);
		}
		public Partition_attributes_optionContext partition_attributes_option() {
			return getRuleContext(Partition_attributes_optionContext.class,0);
		}
		public Range_subpartition_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_subpartition_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_subpartition_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_subpartition_element(this);
		}
	}

	public final Range_subpartition_elementContext range_subpartition_element() throws RecognitionException {
		Range_subpartition_elementContext _localctx = new Range_subpartition_elementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_range_subpartition_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5424);
			match(SUBPARTITION);
			setState(5425);
			relation_factor();
			setState(5426);
			match(VALUES);
			setState(5427);
			match(LESS);
			setState(5428);
			match(THAN);
			setState(5429);
			range_partition_expr();
			setState(5431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(5430);
				partition_attributes_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_list_subpartition_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List_subpartition_listContext list_subpartition_list() {
			return getRuleContext(List_subpartition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_list_subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_list_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_list_subpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_list_subpartition_list(this);
		}
	}

	public final Opt_list_subpartition_listContext opt_list_subpartition_list() throws RecognitionException {
		Opt_list_subpartition_listContext _localctx = new Opt_list_subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_opt_list_subpartition_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			match(LeftParen);
			setState(5434);
			list_subpartition_list();
			setState(5435);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_subpartition_listContext extends ParserRuleContext {
		public List<List_subpartition_elementContext> list_subpartition_element() {
			return getRuleContexts(List_subpartition_elementContext.class);
		}
		public List_subpartition_elementContext list_subpartition_element(int i) {
			return getRuleContext(List_subpartition_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public List_subpartition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_subpartition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_subpartition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_subpartition_list(this);
		}
	}

	public final List_subpartition_listContext list_subpartition_list() throws RecognitionException {
		List_subpartition_listContext _localctx = new List_subpartition_listContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_list_subpartition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5437);
			list_subpartition_element();
			setState(5442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5438);
				match(Comma);
				setState(5439);
				list_subpartition_element();
				}
				}
				setState(5444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_subpartition_elementContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public List_partition_exprContext list_partition_expr() {
			return getRuleContext(List_partition_exprContext.class,0);
		}
		public Partition_attributes_optionContext partition_attributes_option() {
			return getRuleContext(Partition_attributes_optionContext.class,0);
		}
		public List_subpartition_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_subpartition_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_subpartition_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_subpartition_element(this);
		}
	}

	public final List_subpartition_elementContext list_subpartition_element() throws RecognitionException {
		List_subpartition_elementContext _localctx = new List_subpartition_elementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_list_subpartition_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5445);
			match(SUBPARTITION);
			setState(5446);
			relation_factor();
			setState(5447);
			match(VALUES);
			setState(5448);
			match(IN);
			setState(5449);
			list_partition_expr();
			setState(5451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(5450);
				partition_attributes_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partition_exprContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public List_exprContext list_expr() {
			return getRuleContext(List_exprContext.class,0);
		}
		public List_partition_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_partition_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_partition_expr(this);
		}
	}

	public final List_partition_exprContext list_partition_expr() throws RecognitionException {
		List_partition_exprContext _localctx = new List_partition_exprContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_list_partition_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5453);
			match(LeftParen);
			setState(5456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(5454);
				match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(5455);
				list_expr();
				}
				break;
			}
			setState(5458);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_exprContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public List_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterList_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitList_expr(this);
		}
	}

	public final List_exprContext list_expr() throws RecognitionException {
		List_exprContext _localctx = new List_exprContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_list_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			expr(0);
			setState(5465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5461);
				match(Comma);
				setState(5462);
				expr(0);
				}
				}
				setState(5467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partition_exprContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Range_expr_listContext range_expr_list() {
			return getRuleContext(Range_expr_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode MAXVALUE() { return getToken(OBParser.MAXVALUE, 0); }
		public Range_partition_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_partition_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_partition_expr(this);
		}
	}

	public final Range_partition_exprContext range_partition_expr() throws RecognitionException {
		Range_partition_exprContext _localctx = new Range_partition_exprContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_range_partition_expr);
		try {
			setState(5473);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LeftParen:
				enterOuterAlt(_localctx, 1);
				{
				setState(5468);
				match(LeftParen);
				setState(5469);
				range_expr_list();
				setState(5470);
				match(RightParen);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5472);
				match(MAXVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_expr_listContext extends ParserRuleContext {
		public List<Range_exprContext> range_expr() {
			return getRuleContexts(Range_exprContext.class);
		}
		public Range_exprContext range_expr(int i) {
			return getRuleContext(Range_exprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Range_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_expr_list(this);
		}
	}

	public final Range_expr_listContext range_expr_list() throws RecognitionException {
		Range_expr_listContext _localctx = new Range_expr_listContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_range_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5475);
			range_expr();
			setState(5480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5476);
				match(Comma);
				setState(5477);
				range_expr();
				}
				}
				setState(5482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_exprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(OBParser.MAXVALUE, 0); }
		public Range_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRange_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRange_expr(this);
		}
	}

	public final Range_exprContext range_expr() throws RecognitionException {
		Range_exprContext _localctx = new Range_exprContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_range_expr);
		try {
			setState(5485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5483);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5484);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_or_decimalContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public Int_or_decimalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_or_decimal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInt_or_decimal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInt_or_decimal(this);
		}
	}

	public final Int_or_decimalContext int_or_decimal() throws RecognitionException {
		Int_or_decimalContext _localctx = new Int_or_decimalContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_int_or_decimal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5487);
			_la = _input.LA(1);
			if ( !(_la==INTNUM || _la==DECIMAL_VAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_hash_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public Tg_subpartition_optionContext tg_subpartition_option() {
			return getRuleContext(Tg_subpartition_optionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Tg_hash_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_hash_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_hash_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_hash_partition_option(this);
		}
	}

	public final Tg_hash_partition_optionContext tg_hash_partition_option() throws RecognitionException {
		Tg_hash_partition_optionContext _localctx = new Tg_hash_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_tg_hash_partition_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			match(PARTITION);
			setState(5490);
			match(BY);
			setState(5491);
			match(HASH);
			setState(5492);
			tg_subpartition_option();
			setState(5495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(5493);
				match(PARTITIONS);
				setState(5494);
				match(INTNUM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_key_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public Tg_subpartition_optionContext tg_subpartition_option() {
			return getRuleContext(Tg_subpartition_optionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public Tg_key_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_key_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_key_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_key_partition_option(this);
		}
	}

	public final Tg_key_partition_optionContext tg_key_partition_option() throws RecognitionException {
		Tg_key_partition_optionContext _localctx = new Tg_key_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_tg_key_partition_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5497);
			match(PARTITION);
			setState(5498);
			match(BY);
			setState(5499);
			match(KEY);
			setState(5500);
			match(INTNUM);
			setState(5501);
			tg_subpartition_option();
			setState(5504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(5502);
				match(PARTITIONS);
				setState(5503);
				match(INTNUM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_range_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public Tg_subpartition_optionContext tg_subpartition_option() {
			return getRuleContext(Tg_subpartition_optionContext.class,0);
		}
		public Opt_range_partition_listContext opt_range_partition_list() {
			return getRuleContext(Opt_range_partition_listContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public Tg_range_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_range_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_range_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_range_partition_option(this);
		}
	}

	public final Tg_range_partition_optionContext tg_range_partition_option() throws RecognitionException {
		Tg_range_partition_optionContext _localctx = new Tg_range_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_tg_range_partition_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5506);
			match(PARTITION);
			setState(5507);
			match(BY);
			setState(5508);
			match(RANGE);
			setState(5511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(5509);
				match(COLUMNS);
				setState(5510);
				match(INTNUM);
				}
			}

			setState(5513);
			tg_subpartition_option();
			setState(5516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(5514);
				match(PARTITIONS);
				setState(5515);
				match(INTNUM);
				}
			}

			setState(5518);
			opt_range_partition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_list_partition_optionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public Tg_subpartition_optionContext tg_subpartition_option() {
			return getRuleContext(Tg_subpartition_optionContext.class,0);
		}
		public Opt_list_partition_listContext opt_list_partition_list() {
			return getRuleContext(Opt_list_partition_listContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public Tg_list_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_list_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_list_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_list_partition_option(this);
		}
	}

	public final Tg_list_partition_optionContext tg_list_partition_option() throws RecognitionException {
		Tg_list_partition_optionContext _localctx = new Tg_list_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_tg_list_partition_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5520);
			match(PARTITION);
			setState(5521);
			match(BY);
			setState(5522);
			match(BISON_LIST);
			setState(5525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(5523);
				match(COLUMNS);
				setState(5524);
				match(INTNUM);
				}
			}

			setState(5527);
			tg_subpartition_option();
			setState(5530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(5528);
				match(PARTITIONS);
				setState(5529);
				match(INTNUM);
				}
			}

			setState(5532);
			opt_list_partition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_subpartition_optionContext extends ParserRuleContext {
		public Tg_subpartition_template_optionContext tg_subpartition_template_option() {
			return getRuleContext(Tg_subpartition_template_optionContext.class,0);
		}
		public Tg_subpartition_individual_optionContext tg_subpartition_individual_option() {
			return getRuleContext(Tg_subpartition_individual_optionContext.class,0);
		}
		public Tg_subpartition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_subpartition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_subpartition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_subpartition_option(this);
		}
	}

	public final Tg_subpartition_optionContext tg_subpartition_option() throws RecognitionException {
		Tg_subpartition_optionContext _localctx = new Tg_subpartition_optionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_tg_subpartition_option);
		try {
			setState(5536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5534);
				tg_subpartition_template_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5535);
				tg_subpartition_individual_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_subpartition_template_optionContext extends ParserRuleContext {
		public List<TerminalNode> SUBPARTITION() { return getTokens(OBParser.SUBPARTITION); }
		public TerminalNode SUBPARTITION(int i) {
			return getToken(OBParser.SUBPARTITION, i);
		}
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode TEMPLATE() { return getToken(OBParser.TEMPLATE, 0); }
		public Opt_range_subpartition_listContext opt_range_subpartition_list() {
			return getRuleContext(Opt_range_subpartition_listContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public Opt_list_subpartition_listContext opt_list_subpartition_list() {
			return getRuleContext(Opt_list_subpartition_listContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Tg_subpartition_template_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_subpartition_template_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_subpartition_template_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_subpartition_template_option(this);
		}
	}

	public final Tg_subpartition_template_optionContext tg_subpartition_template_option() throws RecognitionException {
		Tg_subpartition_template_optionContext _localctx = new Tg_subpartition_template_optionContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_tg_subpartition_template_option);
		int _la;
		try {
			setState(5559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5538);
				match(SUBPARTITION);
				setState(5539);
				match(BY);
				setState(5540);
				match(RANGE);
				setState(5543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5541);
					match(COLUMNS);
					setState(5542);
					match(INTNUM);
					}
				}

				setState(5545);
				match(SUBPARTITION);
				setState(5546);
				match(TEMPLATE);
				setState(5547);
				opt_range_subpartition_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5548);
				match(SUBPARTITION);
				setState(5549);
				match(BY);
				setState(5550);
				match(BISON_LIST);
				setState(5553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5551);
					match(COLUMNS);
					setState(5552);
					match(INTNUM);
					}
				}

				setState(5555);
				match(SUBPARTITION);
				setState(5556);
				match(TEMPLATE);
				setState(5557);
				opt_list_subpartition_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5558);
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tg_subpartition_individual_optionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(OBParser.SUBPARTITIONS, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public Tg_subpartition_individual_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tg_subpartition_individual_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTg_subpartition_individual_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTg_subpartition_individual_option(this);
		}
	}

	public final Tg_subpartition_individual_optionContext tg_subpartition_individual_option() throws RecognitionException {
		Tg_subpartition_individual_optionContext _localctx = new Tg_subpartition_individual_optionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_tg_subpartition_individual_option);
		int _la;
		try {
			setState(5586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5561);
				match(SUBPARTITION);
				setState(5562);
				match(BY);
				setState(5566);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HASH:
					{
					setState(5563);
					match(HASH);
					}
					break;
				case KEY:
					{
					setState(5564);
					match(KEY);
					setState(5565);
					match(INTNUM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(5568);
					match(SUBPARTITIONS);
					setState(5569);
					match(INTNUM);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5572);
				match(SUBPARTITION);
				setState(5573);
				match(BY);
				setState(5574);
				match(RANGE);
				setState(5577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5575);
					match(COLUMNS);
					setState(5576);
					match(INTNUM);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5579);
				match(SUBPARTITION);
				setState(5580);
				match(BY);
				setState(5581);
				match(BISON_LIST);
				setState(5584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5582);
					match(COLUMNS);
					setState(5583);
					match(INTNUM);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_format_optionContext extends ParserRuleContext {
		public TerminalNode REDUNDANT() { return getToken(OBParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(OBParser.COMPACT, 0); }
		public TerminalNode DYNAMIC() { return getToken(OBParser.DYNAMIC, 0); }
		public TerminalNode COMPRESSED() { return getToken(OBParser.COMPRESSED, 0); }
		public TerminalNode CONDENSED() { return getToken(OBParser.CONDENSED, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Row_format_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_format_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRow_format_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRow_format_option(this);
		}
	}

	public final Row_format_optionContext row_format_option() throws RecognitionException {
		Row_format_optionContext _localctx = new Row_format_optionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_row_format_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5588);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==REDUNDANT || _la==CONDENSED || _la==COMPACT || _la==COMPRESSED || _la==DYNAMIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_properties_listContext extends ParserRuleContext {
		public List<External_propertiesContext> external_properties() {
			return getRuleContexts(External_propertiesContext.class);
		}
		public External_propertiesContext external_properties(int i) {
			return getRuleContext(External_propertiesContext.class,i);
		}
		public List<Opt_commaContext> opt_comma() {
			return getRuleContexts(Opt_commaContext.class);
		}
		public Opt_commaContext opt_comma(int i) {
			return getRuleContext(Opt_commaContext.class,i);
		}
		public External_properties_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_properties_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_properties_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_properties_list(this);
		}
	}

	public final External_properties_listContext external_properties_list() throws RecognitionException {
		External_properties_listContext _localctx = new External_properties_listContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_external_properties_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5590);
			external_properties();
			setState(5596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUOTA_NAME) | (1L << STSTOKEN) | (1L << COMPRESSION_CODE) | (1L << PROJECT_NAME) | (1L << ENDPOINT) | (1L << ACCESSKEY) | (1L << ACCESSTYPE))) != 0) || _la==ACCESSID || _la==TABLE_NAME || _la==SCHEMA_NAME || _la==TYPE || _la==Comma) {
				{
				{
				setState(5591);
				opt_comma();
				setState(5592);
				external_properties();
				}
				}
				setState(5598);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_propertiesContext extends ParserRuleContext {
		public External_properties_keyContext external_properties_key() {
			return getRuleContext(External_properties_keyContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public External_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_properties(this);
		}
	}

	public final External_propertiesContext external_properties() throws RecognitionException {
		External_propertiesContext _localctx = new External_propertiesContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_external_properties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5599);
			external_properties_key();
			setState(5600);
			match(COMP_EQ);
			setState(5601);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_properties_keyContext extends ParserRuleContext {
		public TerminalNode TABLE_NAME() { return getToken(OBParser.TABLE_NAME, 0); }
		public TerminalNode COMPRESSION_CODE() { return getToken(OBParser.COMPRESSION_CODE, 0); }
		public TerminalNode QUOTA_NAME() { return getToken(OBParser.QUOTA_NAME, 0); }
		public TerminalNode ACCESSID() { return getToken(OBParser.ACCESSID, 0); }
		public TerminalNode ACCESSKEY() { return getToken(OBParser.ACCESSKEY, 0); }
		public TerminalNode ACCESSTYPE() { return getToken(OBParser.ACCESSTYPE, 0); }
		public TerminalNode TYPE() { return getToken(OBParser.TYPE, 0); }
		public TerminalNode ENDPOINT() { return getToken(OBParser.ENDPOINT, 0); }
		public TerminalNode STSTOKEN() { return getToken(OBParser.STSTOKEN, 0); }
		public TerminalNode PROJECT_NAME() { return getToken(OBParser.PROJECT_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(OBParser.SCHEMA_NAME, 0); }
		public External_properties_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_properties_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_properties_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_properties_key(this);
		}
	}

	public final External_properties_keyContext external_properties_key() throws RecognitionException {
		External_properties_keyContext _localctx = new External_properties_keyContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_external_properties_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5617);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STSTOKEN:
			case PROJECT_NAME:
			case ENDPOINT:
			case ACCESSKEY:
			case ACCESSTYPE:
			case ACCESSID:
			case SCHEMA_NAME:
			case TYPE:
				{
				setState(5611);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCESSKEY:
				case ACCESSTYPE:
				case ACCESSID:
				case TYPE:
					{
					setState(5605);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCESSKEY:
					case ACCESSID:
						{
						setState(5603);
						_la = _input.LA(1);
						if ( !(_la==ACCESSKEY || _la==ACCESSID) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case ACCESSTYPE:
					case TYPE:
						{
						setState(5604);
						_la = _input.LA(1);
						if ( !(_la==ACCESSTYPE || _la==TYPE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case STSTOKEN:
				case PROJECT_NAME:
				case ENDPOINT:
				case SCHEMA_NAME:
					{
					setState(5609);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STSTOKEN:
					case ENDPOINT:
						{
						setState(5607);
						_la = _input.LA(1);
						if ( !(_la==STSTOKEN || _la==ENDPOINT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case PROJECT_NAME:
					case SCHEMA_NAME:
						{
						setState(5608);
						_la = _input.LA(1);
						if ( !(_la==PROJECT_NAME || _la==SCHEMA_NAME) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case QUOTA_NAME:
			case COMPRESSION_CODE:
			case TABLE_NAME:
				{
				setState(5615);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case QUOTA_NAME:
				case COMPRESSION_CODE:
					{
					setState(5613);
					_la = _input.LA(1);
					if ( !(_la==QUOTA_NAME || _la==COMPRESSION_CODE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case TABLE_NAME:
					{
					setState(5614);
					match(TABLE_NAME);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_file_format_listContext extends ParserRuleContext {
		public List<External_file_formatContext> external_file_format() {
			return getRuleContexts(External_file_formatContext.class);
		}
		public External_file_formatContext external_file_format(int i) {
			return getRuleContext(External_file_formatContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public External_file_format_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_file_format_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_file_format_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_file_format_list(this);
		}
	}

	public final External_file_format_listContext external_file_format_list() throws RecognitionException {
		External_file_format_listContext _localctx = new External_file_format_listContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_external_file_format_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5619);
			external_file_format();
			setState(5626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LINE_DELIMITER || _la==EMPTY_FIELD_AS_NULL || _la==COMPRESSION || _la==FIELD_OPTIONALLY_ENCLOSED_BY || _la==ENCODING || _la==TRIM_SPACE || _la==SKIP_HEADER || _la==SKIP_BLANK_LINES || _la==ESCAPE || _la==TYPE || ((((_la - 1097)) & ~0x3f) == 0 && ((1L << (_la - 1097)) & ((1L << (NULL_IF_EXETERNAL - 1097)) | (1L << (FIELD_DELIMITER - 1097)) | (1L << (Comma - 1097)))) != 0)) {
				{
				{
				setState(5621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Comma) {
					{
					setState(5620);
					match(Comma);
					}
				}

				setState(5623);
				external_file_format();
				}
				}
				setState(5628);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_file_formatContext extends ParserRuleContext {
		public Token format_key;
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode ENCODING() { return getToken(OBParser.ENCODING, 0); }
		public TerminalNode TYPE() { return getToken(OBParser.TYPE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ESCAPE() { return getToken(OBParser.ESCAPE, 0); }
		public TerminalNode FIELD_OPTIONALLY_ENCLOSED_BY() { return getToken(OBParser.FIELD_OPTIONALLY_ENCLOSED_BY, 0); }
		public TerminalNode FIELD_DELIMITER() { return getToken(OBParser.FIELD_DELIMITER, 0); }
		public TerminalNode LINE_DELIMITER() { return getToken(OBParser.LINE_DELIMITER, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode SKIP_HEADER() { return getToken(OBParser.SKIP_HEADER, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode SKIP_BLANK_LINES() { return getToken(OBParser.SKIP_BLANK_LINES, 0); }
		public TerminalNode TRIM_SPACE() { return getToken(OBParser.TRIM_SPACE, 0); }
		public TerminalNode EMPTY_FIELD_AS_NULL() { return getToken(OBParser.EMPTY_FIELD_AS_NULL, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode NULL_IF_EXETERNAL() { return getToken(OBParser.NULL_IF_EXETERNAL, 0); }
		public Compression_nameContext compression_name() {
			return getRuleContext(Compression_nameContext.class,0);
		}
		public TerminalNode COMPRESSION() { return getToken(OBParser.COMPRESSION, 0); }
		public External_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_file_format(this);
		}
	}

	public final External_file_formatContext external_file_format() throws RecognitionException {
		External_file_formatContext _localctx = new External_file_formatContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_external_file_format);
		int _la;
		try {
			setState(5650);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCODING:
			case TYPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5629);
				((External_file_formatContext)_localctx).format_key = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ENCODING || _la==TYPE) ) {
					((External_file_formatContext)_localctx).format_key = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5630);
				match(COMP_EQ);
				setState(5631);
				match(STRING_VALUE);
				}
				break;
			case LINE_DELIMITER:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case ESCAPE:
			case FIELD_DELIMITER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5632);
				((External_file_formatContext)_localctx).format_key = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINE_DELIMITER || _la==FIELD_OPTIONALLY_ENCLOSED_BY || _la==ESCAPE || _la==FIELD_DELIMITER) ) {
					((External_file_formatContext)_localctx).format_key = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5633);
				match(COMP_EQ);
				setState(5634);
				expr(0);
				}
				break;
			case SKIP_HEADER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5635);
				((External_file_formatContext)_localctx).format_key = match(SKIP_HEADER);
				setState(5636);
				match(COMP_EQ);
				setState(5637);
				match(INTNUM);
				}
				break;
			case EMPTY_FIELD_AS_NULL:
			case TRIM_SPACE:
			case SKIP_BLANK_LINES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5638);
				((External_file_formatContext)_localctx).format_key = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EMPTY_FIELD_AS_NULL || _la==TRIM_SPACE || _la==SKIP_BLANK_LINES) ) {
					((External_file_formatContext)_localctx).format_key = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5639);
				match(COMP_EQ);
				setState(5640);
				match(BOOL_VALUE);
				}
				break;
			case NULL_IF_EXETERNAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5641);
				((External_file_formatContext)_localctx).format_key = match(NULL_IF_EXETERNAL);
				setState(5642);
				match(COMP_EQ);
				setState(5643);
				match(LeftParen);
				setState(5644);
				expr_list();
				setState(5645);
				match(RightParen);
				}
				break;
			case COMPRESSION:
				enterOuterAlt(_localctx, 6);
				{
				setState(5647);
				((External_file_formatContext)_localctx).format_key = match(COMPRESSION);
				setState(5648);
				match(COMP_EQ);
				setState(5649);
				compression_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablegroup_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Tablegroup_option_listContext tablegroup_option_list() {
			return getRuleContext(Tablegroup_option_listContext.class,0);
		}
		public Tg_hash_partition_optionContext tg_hash_partition_option() {
			return getRuleContext(Tg_hash_partition_optionContext.class,0);
		}
		public Tg_key_partition_optionContext tg_key_partition_option() {
			return getRuleContext(Tg_key_partition_optionContext.class,0);
		}
		public Tg_range_partition_optionContext tg_range_partition_option() {
			return getRuleContext(Tg_range_partition_optionContext.class,0);
		}
		public Tg_list_partition_optionContext tg_list_partition_option() {
			return getRuleContext(Tg_list_partition_optionContext.class,0);
		}
		public Create_tablegroup_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablegroup_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_tablegroup_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_tablegroup_stmt(this);
		}
	}

	public final Create_tablegroup_stmtContext create_tablegroup_stmt() throws RecognitionException {
		Create_tablegroup_stmtContext _localctx = new Create_tablegroup_stmtContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_create_tablegroup_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5652);
			match(CREATE);
			setState(5653);
			match(TABLEGROUP);
			setState(5658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5654);
				match(IF);
				setState(5655);
				not();
				setState(5656);
				match(EXISTS);
				}
			}

			setState(5660);
			relation_name();
			setState(5662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SHARDING || _la==LOCALITY || _la==MAX_USED_PART_ID || _la==BINDING || _la==PRIMARY_ZONE || _la==TABLEGROUP_ID) {
				{
				setState(5661);
				tablegroup_option_list();
				}
			}

			setState(5668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				setState(5664);
				tg_hash_partition_option();
				}
				break;
			case 2:
				{
				setState(5665);
				tg_key_partition_option();
				}
				break;
			case 3:
				{
				setState(5666);
				tg_range_partition_option();
				}
				break;
			case 4:
				{
				setState(5667);
				tg_list_partition_option();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tablegroup_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_tablegroup_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tablegroup_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_tablegroup_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_tablegroup_stmt(this);
		}
	}

	public final Drop_tablegroup_stmtContext drop_tablegroup_stmt() throws RecognitionException {
		Drop_tablegroup_stmtContext _localctx = new Drop_tablegroup_stmtContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_drop_tablegroup_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5670);
			match(DROP);
			setState(5671);
			match(TABLEGROUP);
			setState(5674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5672);
				match(IF);
				setState(5673);
				match(EXISTS);
				}
			}

			setState(5676);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablegroup_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Alter_tablegroup_actionsContext alter_tablegroup_actions() {
			return getRuleContext(Alter_tablegroup_actionsContext.class,0);
		}
		public Alter_tg_partition_optionContext alter_tg_partition_option() {
			return getRuleContext(Alter_tg_partition_optionContext.class,0);
		}
		public Alter_tablegroup_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablegroup_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablegroup_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablegroup_stmt(this);
		}
	}

	public final Alter_tablegroup_stmtContext alter_tablegroup_stmt() throws RecognitionException {
		Alter_tablegroup_stmtContext _localctx = new Alter_tablegroup_stmtContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_alter_tablegroup_stmt);
		int _la;
		try {
			setState(5697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5678);
				match(ALTER);
				setState(5679);
				match(TABLEGROUP);
				setState(5680);
				relation_name();
				setState(5681);
				match(ADD);
				setState(5683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(5682);
					match(TABLE);
					}
				}

				setState(5685);
				table_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5687);
				match(ALTER);
				setState(5688);
				match(TABLEGROUP);
				setState(5689);
				relation_name();
				setState(5690);
				alter_tablegroup_actions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5692);
				match(ALTER);
				setState(5693);
				match(TABLEGROUP);
				setState(5694);
				relation_name();
				setState(5695);
				alter_tg_partition_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablegroup_option_list_space_seperatedContext extends ParserRuleContext {
		public List<Tablegroup_optionContext> tablegroup_option() {
			return getRuleContexts(Tablegroup_optionContext.class);
		}
		public Tablegroup_optionContext tablegroup_option(int i) {
			return getRuleContext(Tablegroup_optionContext.class,i);
		}
		public Tablegroup_option_list_space_seperatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablegroup_option_list_space_seperated; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTablegroup_option_list_space_seperated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTablegroup_option_list_space_seperated(this);
		}
	}

	public final Tablegroup_option_list_space_seperatedContext tablegroup_option_list_space_seperated() throws RecognitionException {
		Tablegroup_option_list_space_seperatedContext _localctx = new Tablegroup_option_list_space_seperatedContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_tablegroup_option_list_space_seperated);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5700); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5699);
				tablegroup_option();
				}
				}
				setState(5702); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SHARDING || _la==LOCALITY || _la==MAX_USED_PART_ID || _la==BINDING || _la==PRIMARY_ZONE || _la==TABLEGROUP_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablegroup_option_listContext extends ParserRuleContext {
		public Tablegroup_option_list_space_seperatedContext tablegroup_option_list_space_seperated() {
			return getRuleContext(Tablegroup_option_list_space_seperatedContext.class,0);
		}
		public Tablegroup_optionContext tablegroup_option() {
			return getRuleContext(Tablegroup_optionContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Tablegroup_option_listContext tablegroup_option_list() {
			return getRuleContext(Tablegroup_option_listContext.class,0);
		}
		public Tablegroup_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablegroup_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTablegroup_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTablegroup_option_list(this);
		}
	}

	public final Tablegroup_option_listContext tablegroup_option_list() throws RecognitionException {
		Tablegroup_option_listContext _localctx = new Tablegroup_option_listContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_tablegroup_option_list);
		try {
			setState(5709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5704);
				tablegroup_option_list_space_seperated();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5705);
				tablegroup_option();
				setState(5706);
				match(Comma);
				setState(5707);
				tablegroup_option_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablegroup_optionContext extends ParserRuleContext {
		public TerminalNode LOCALITY() { return getToken(OBParser.LOCALITY, 0); }
		public Locality_nameContext locality_name() {
			return getRuleContext(Locality_nameContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode PRIMARY_ZONE() { return getToken(OBParser.PRIMARY_ZONE, 0); }
		public Primary_zone_nameContext primary_zone_name() {
			return getRuleContext(Primary_zone_nameContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode TABLEGROUP_ID() { return getToken(OBParser.TABLEGROUP_ID, 0); }
		public TerminalNode MAX_USED_PART_ID() { return getToken(OBParser.MAX_USED_PART_ID, 0); }
		public TerminalNode BINDING() { return getToken(OBParser.BINDING, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode SHARDING() { return getToken(OBParser.SHARDING, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Tablegroup_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablegroup_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTablegroup_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTablegroup_option(this);
		}
	}

	public final Tablegroup_optionContext tablegroup_option() throws RecognitionException {
		Tablegroup_optionContext _localctx = new Tablegroup_optionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_tablegroup_option);
		int _la;
		try {
			setState(5739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCALITY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5711);
				match(LOCALITY);
				setState(5713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(5712);
					match(COMP_EQ);
					}
				}

				setState(5715);
				locality_name();
				setState(5717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5716);
					match(FORCE);
					}
				}

				}
				break;
			case PRIMARY_ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5719);
				match(PRIMARY_ZONE);
				setState(5721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(5720);
					match(COMP_EQ);
					}
				}

				setState(5723);
				primary_zone_name();
				}
				break;
			case MAX_USED_PART_ID:
			case TABLEGROUP_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5724);
				_la = _input.LA(1);
				if ( !(_la==MAX_USED_PART_ID || _la==TABLEGROUP_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(5725);
					match(COMP_EQ);
					}
				}

				setState(5728);
				match(INTNUM);
				}
				break;
			case BINDING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5729);
				match(BINDING);
				setState(5731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(5730);
					match(COMP_EQ);
					}
				}

				setState(5733);
				match(BOOL_VALUE);
				}
				break;
			case SHARDING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5734);
				match(SHARDING);
				setState(5736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(5735);
					match(COMP_EQ);
					}
				}

				setState(5738);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablegroup_actionsContext extends ParserRuleContext {
		public List<Alter_tablegroup_actionContext> alter_tablegroup_action() {
			return getRuleContexts(Alter_tablegroup_actionContext.class);
		}
		public Alter_tablegroup_actionContext alter_tablegroup_action(int i) {
			return getRuleContext(Alter_tablegroup_actionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Alter_tablegroup_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablegroup_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablegroup_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablegroup_actions(this);
		}
	}

	public final Alter_tablegroup_actionsContext alter_tablegroup_actions() throws RecognitionException {
		Alter_tablegroup_actionsContext _localctx = new Alter_tablegroup_actionsContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_alter_tablegroup_actions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5741);
			alter_tablegroup_action();
			setState(5746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(5742);
				match(Comma);
				setState(5743);
				alter_tablegroup_action();
				}
				}
				setState(5748);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablegroup_actionContext extends ParserRuleContext {
		public Tablegroup_option_list_space_seperatedContext tablegroup_option_list_space_seperated() {
			return getRuleContext(Tablegroup_option_list_space_seperatedContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Alter_tablegroup_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablegroup_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablegroup_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablegroup_action(this);
		}
	}

	public final Alter_tablegroup_actionContext alter_tablegroup_action() throws RecognitionException {
		Alter_tablegroup_actionContext _localctx = new Alter_tablegroup_actionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_alter_tablegroup_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(5749);
				match(SET);
				}
			}

			setState(5752);
			tablegroup_option_list_space_seperated();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_tablegroupContext extends ParserRuleContext {
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Default_tablegroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_tablegroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDefault_tablegroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDefault_tablegroup(this);
		}
	}

	public final Default_tablegroupContext default_tablegroup() throws RecognitionException {
		Default_tablegroupContext _localctx = new Default_tablegroupContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_default_tablegroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5754);
				match(DEFAULT);
				}
			}

			setState(5757);
			match(TABLEGROUP);
			setState(5759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(5758);
				match(COMP_EQ);
				}
			}

			setState(5763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULLX:
				{
				setState(5761);
				match(NULLX);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				{
				setState(5762);
				relation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public View_attributeContext view_attribute() {
			return getRuleContext(View_attributeContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public View_select_stmtContext view_select_stmt() {
			return getRuleContext(View_select_stmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(OBParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode TABLE_ID() { return getToken(OBParser.TABLE_ID, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public View_check_optionContext view_check_option() {
			return getRuleContext(View_check_optionContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_view_stmt(this);
		}
	}

	public final Create_view_stmtContext create_view_stmt() throws RecognitionException {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_create_view_stmt);
		int _la;
		try {
			setState(5812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5765);
				match(CREATE);
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(5766);
					match(OR);
					setState(5767);
					match(REPLACE);
					}
				}

				setState(5770);
				view_attribute();
				setState(5772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(5771);
					match(MATERIALIZED);
					}
				}

				setState(5774);
				match(VIEW);
				setState(5775);
				view_name();
				setState(5780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LeftParen) {
					{
					setState(5776);
					match(LeftParen);
					setState(5777);
					column_name_list();
					setState(5778);
					match(RightParen);
					}
				}

				setState(5785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE_ID) {
					{
					setState(5782);
					match(TABLE_ID);
					setState(5783);
					match(COMP_EQ);
					setState(5784);
					match(INTNUM);
					}
				}

				setState(5787);
				match(AS);
				setState(5788);
				view_select_stmt();
				setState(5790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5789);
					view_check_option();
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5792);
				match(ALTER);
				setState(5793);
				view_attribute();
				setState(5794);
				match(VIEW);
				setState(5795);
				view_name();
				setState(5800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LeftParen) {
					{
					setState(5796);
					match(LeftParen);
					setState(5797);
					column_name_list();
					setState(5798);
					match(RightParen);
					}
				}

				setState(5805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE_ID) {
					{
					setState(5802);
					match(TABLE_ID);
					setState(5803);
					match(COMP_EQ);
					setState(5804);
					match(INTNUM);
					}
				}

				setState(5807);
				match(AS);
				setState(5808);
				view_select_stmt();
				setState(5810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5809);
					view_check_option();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mview_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public Create_mview_optsContext create_mview_opts() {
			return getRuleContext(Create_mview_optsContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public View_select_stmtContext view_select_stmt() {
			return getRuleContext(View_select_stmtContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Mv_column_listContext mv_column_list() {
			return getRuleContext(Mv_column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Table_option_listContext table_option_list() {
			return getRuleContext(Table_option_listContext.class,0);
		}
		public Partition_optionContext partition_option() {
			return getRuleContext(Partition_optionContext.class,0);
		}
		public Auto_partition_optionContext auto_partition_option() {
			return getRuleContext(Auto_partition_optionContext.class,0);
		}
		public With_column_groupContext with_column_group() {
			return getRuleContext(With_column_groupContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(OBParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public Create_mview_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mview_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_mview_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_mview_stmt(this);
		}
	}

	public final Create_mview_stmtContext create_mview_stmt() throws RecognitionException {
		Create_mview_stmtContext _localctx = new Create_mview_stmtContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_create_mview_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5814);
			match(CREATE);
			setState(5815);
			match(MATERIALIZED);
			setState(5816);
			match(VIEW);
			setState(5817);
			view_name();
			setState(5822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LeftParen) {
				{
				setState(5818);
				match(LeftParen);
				setState(5819);
				mv_column_list();
				setState(5820);
				match(RightParen);
				}
			}

			setState(5825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PARTITION_TYPE) | (1L << AUTO_REFRESH) | (1L << PROPERTIES) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (CHARACTER - 106)) | (1L << (COLLATE - 106)) | (1L << (DEFAULT - 106)))) != 0) || _la==INDEX || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (READ - 265)) | (1L << (TABLEGROUP - 265)) | (1L << (UNION - 265)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (FORMAT - 378)) | (1L << (LOCATION - 378)) | (1L << (PROGRESSIVE_MERGE_NUM - 378)) | (1L << (KEY_BLOCK_SIZE - 378)))) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & ((1L << (COMPRESSION - 445)) | (1L << (MIN_ROWS - 445)) | (1L << (ENCRYPTION - 445)) | (1L << (COMMENT - 445)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (ENGINE_ - 513)) | (1L << (AUTO_INCREMENT_MODE - 513)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 513)) | (1L << (LOB_INROW_THRESHOLD - 513)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (LOCALITY - 586)))) != 0) || ((((_la - 679)) & ~0x3f) == 0 && ((1L << (_la - 679)) & ((1L << (USE_BLOOM_FILTER - 679)) | (1L << (MAX_USED_PART_ID - 679)) | (1L << (MAX_ROWS - 679)) | (1L << (STATS_AUTO_RECALC - 679)) | (1L << (EXPIRE_INFO - 679)) | (1L << (BLOCK_SIZE - 679)))) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (STATS_PERSISTENT - 745)) | (1L << (CHARSET - 745)) | (1L << (CONNECTION - 745)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (KV_ATTRIBUTES - 815)) | (1L << (JSON - 815)) | (1L << (PATTERN - 815)) | (1L << (STORAGE_FORMAT_VERSION - 815)) | (1L << (AVG_ROW_LENGTH - 815)) | (1L << (PARALLEL - 815)) | (1L << (NOPARALLEL - 815)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (PCTFREE - 896)) | (1L << (TABLESPACE - 896)) | (1L << (PASSWORD - 896)) | (1L << (TTL - 896)) | (1L << (SORTKEY - 896)) | (1L << (CHECKSUM - 896)))) != 0) || ((((_la - 969)) & ~0x3f) == 0 && ((1L << (_la - 969)) & ((1L << (REPLICA_NUM - 969)) | (1L << (PRIMARY_ZONE - 969)) | (1L << (DUPLICATE_SCOPE - 969)) | (1L << (STATS_SAMPLE_PAGES - 969)) | (1L << (TABLET_SIZE - 969)))) != 0) || ((((_la - 1042)) & ~0x3f) == 0 && ((1L << (_la - 1042)) & ((1L << (INSERT_METHOD - 1042)) | (1L << (TABLE_MODE - 1042)) | (1L << (PACK_KEYS - 1042)) | (1L << (ENABLE_EXTENDED_ROWID - 1042)))) != 0) || _la==DATA) {
				{
				setState(5824);
				table_option_list();
				}
			}

			setState(5829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				setState(5827);
				partition_option();
				}
				break;
			case 2:
				{
				setState(5828);
				auto_partition_option();
				}
				break;
			}
			setState(5832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_COLUMN_GROUP) {
				{
				setState(5831);
				with_column_group();
				}
			}

			setState(5834);
			create_mview_opts();
			setState(5835);
			match(AS);
			setState(5836);
			view_select_stmt();
			setState(5848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				{
				{
				setState(5837);
				match(WITH);
				setState(5838);
				match(CHECK);
				setState(5839);
				match(OPTION);
				}
				}
				break;
			case 2:
				{
				{
				setState(5840);
				match(WITH);
				setState(5841);
				match(CASCADED);
				setState(5842);
				match(CHECK);
				setState(5843);
				match(OPTION);
				}
				}
				break;
			case 3:
				{
				{
				setState(5844);
				match(WITH);
				setState(5845);
				match(LOCAL);
				setState(5846);
				match(CHECK);
				setState(5847);
				match(OPTION);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mview_optsContext extends ParserRuleContext {
		public Mview_refresh_optContext mview_refresh_opt() {
			return getRuleContext(Mview_refresh_optContext.class,0);
		}
		public List<Mview_enable_disableContext> mview_enable_disable() {
			return getRuleContexts(Mview_enable_disableContext.class);
		}
		public Mview_enable_disableContext mview_enable_disable(int i) {
			return getRuleContext(Mview_enable_disableContext.class,i);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public List<TerminalNode> QUERY() { return getTokens(OBParser.QUERY); }
		public TerminalNode QUERY(int i) {
			return getToken(OBParser.QUERY, i);
		}
		public TerminalNode COMPUTATION() { return getToken(OBParser.COMPUTATION, 0); }
		public TerminalNode REWRITE() { return getToken(OBParser.REWRITE, 0); }
		public Create_mview_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mview_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_mview_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_mview_opts(this);
		}
	}

	public final Create_mview_optsContext create_mview_opts() throws RecognitionException {
		Create_mview_optsContext _localctx = new Create_mview_optsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_create_mview_opts);
		try {
			setState(5880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5850);
				mview_refresh_opt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5851);
				mview_refresh_opt();
				setState(5852);
				mview_enable_disable();
				setState(5853);
				match(ON);
				setState(5854);
				match(QUERY);
				setState(5855);
				match(COMPUTATION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5857);
				mview_refresh_opt();
				setState(5858);
				mview_enable_disable();
				setState(5859);
				match(QUERY);
				setState(5860);
				match(REWRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5862);
				mview_refresh_opt();
				setState(5863);
				mview_enable_disable();
				setState(5864);
				match(ON);
				setState(5865);
				match(QUERY);
				setState(5866);
				match(COMPUTATION);
				setState(5867);
				mview_enable_disable();
				setState(5868);
				match(QUERY);
				setState(5869);
				match(REWRITE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5871);
				mview_refresh_opt();
				setState(5872);
				mview_enable_disable();
				setState(5873);
				match(QUERY);
				setState(5874);
				match(REWRITE);
				setState(5875);
				mview_enable_disable();
				setState(5876);
				match(ON);
				setState(5877);
				match(QUERY);
				setState(5878);
				match(COMPUTATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mview_enable_disableContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(OBParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(OBParser.ENABLE, 0); }
		public Mview_enable_disableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mview_enable_disable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMview_enable_disable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMview_enable_disable(this);
		}
	}

	public final Mview_enable_disableContext mview_enable_disable() throws RecognitionException {
		Mview_enable_disableContext _localctx = new Mview_enable_disableContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_mview_enable_disable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5882);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mview_refresh_optContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(OBParser.REFRESH, 0); }
		public Mv_refresh_methodContext mv_refresh_method() {
			return getRuleContext(Mv_refresh_methodContext.class,0);
		}
		public Mv_refresh_on_clauseContext mv_refresh_on_clause() {
			return getRuleContext(Mv_refresh_on_clauseContext.class,0);
		}
		public Mv_refresh_intervalContext mv_refresh_interval() {
			return getRuleContext(Mv_refresh_intervalContext.class,0);
		}
		public TerminalNode NEVER() { return getToken(OBParser.NEVER, 0); }
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Mview_refresh_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mview_refresh_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMview_refresh_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMview_refresh_opt(this);
		}
	}

	public final Mview_refresh_optContext mview_refresh_opt() throws RecognitionException {
		Mview_refresh_optContext _localctx = new Mview_refresh_optContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_mview_refresh_opt);
		try {
			setState(5892);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5884);
				match(REFRESH);
				setState(5885);
				mv_refresh_method();
				setState(5886);
				mv_refresh_on_clause();
				setState(5887);
				mv_refresh_interval();
				}
				break;
			case NEVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5889);
				match(NEVER);
				setState(5890);
				match(REFRESH);
				}
				break;
			case AS:
			case DISABLE:
			case ENABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5891);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_refresh_on_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Mv_refresh_modeContext mv_refresh_mode() {
			return getRuleContext(Mv_refresh_modeContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Mv_refresh_on_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_refresh_on_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_refresh_on_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_refresh_on_clause(this);
		}
	}

	public final Mv_refresh_on_clauseContext mv_refresh_on_clause() throws RecognitionException {
		Mv_refresh_on_clauseContext _localctx = new Mv_refresh_on_clauseContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_mv_refresh_on_clause);
		try {
			setState(5897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(5894);
				match(ON);
				setState(5895);
				mv_refresh_mode();
				}
				break;
			case AS:
			case DISABLE:
			case START:
			case NEXT:
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5896);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_refresh_methodContext extends ParserRuleContext {
		public TerminalNode FAST() { return getToken(OBParser.FAST, 0); }
		public TerminalNode COMPLETE() { return getToken(OBParser.COMPLETE, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public Mv_refresh_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_refresh_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_refresh_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_refresh_method(this);
		}
	}

	public final Mv_refresh_methodContext mv_refresh_method() throws RecognitionException {
		Mv_refresh_methodContext _localctx = new Mv_refresh_methodContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_mv_refresh_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5899);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==FAST || _la==COMPLETE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_refresh_modeContext extends ParserRuleContext {
		public TerminalNode DEMAND() { return getToken(OBParser.DEMAND, 0); }
		public TerminalNode COMMIT() { return getToken(OBParser.COMMIT, 0); }
		public TerminalNode STATEMENT() { return getToken(OBParser.STATEMENT, 0); }
		public Mv_refresh_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_refresh_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_refresh_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_refresh_mode(this);
		}
	}

	public final Mv_refresh_modeContext mv_refresh_mode() throws RecognitionException {
		Mv_refresh_modeContext _localctx = new Mv_refresh_modeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_mv_refresh_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5901);
			_la = _input.LA(1);
			if ( !(_la==STATEMENT || _la==DEMAND || _la==COMMIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_refresh_intervalContext extends ParserRuleContext {
		public Mv_start_clauseContext mv_start_clause() {
			return getRuleContext(Mv_start_clauseContext.class,0);
		}
		public Mv_next_clauseContext mv_next_clause() {
			return getRuleContext(Mv_next_clauseContext.class,0);
		}
		public Mv_refresh_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_refresh_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_refresh_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_refresh_interval(this);
		}
	}

	public final Mv_refresh_intervalContext mv_refresh_interval() throws RecognitionException {
		Mv_refresh_intervalContext _localctx = new Mv_refresh_intervalContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_mv_refresh_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5903);
			mv_start_clause();
			setState(5904);
			mv_next_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Mv_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_start_clause(this);
		}
	}

	public final Mv_start_clauseContext mv_start_clause() throws RecognitionException {
		Mv_start_clauseContext _localctx = new Mv_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_mv_start_clause);
		try {
			setState(5910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(5906);
				match(START);
				setState(5907);
				match(WITH);
				setState(5908);
				bit_expr(0);
				}
				break;
			case AS:
			case DISABLE:
			case NEXT:
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5909);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_next_clauseContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(OBParser.NEXT, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Mv_next_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_next_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_next_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_next_clause(this);
		}
	}

	public final Mv_next_clauseContext mv_next_clause() throws RecognitionException {
		Mv_next_clauseContext _localctx = new Mv_next_clauseContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_mv_next_clause);
		try {
			setState(5915);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5912);
				match(NEXT);
				setState(5913);
				bit_expr(0);
				}
				break;
			case AS:
			case DISABLE:
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5914);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ALGORITHM() { return getToken(OBParser.ALGORITHM, 0); }
		public List<TerminalNode> COMP_EQ() { return getTokens(OBParser.COMP_EQ); }
		public TerminalNode COMP_EQ(int i) {
			return getToken(OBParser.COMP_EQ, i);
		}
		public View_algorithmContext view_algorithm() {
			return getRuleContext(View_algorithmContext.class,0);
		}
		public List<TerminalNode> DEFINER() { return getTokens(OBParser.DEFINER); }
		public TerminalNode DEFINER(int i) {
			return getToken(OBParser.DEFINER, i);
		}
		public User_with_host_nameContext user_with_host_name() {
			return getRuleContext(User_with_host_nameContext.class,0);
		}
		public TerminalNode SQL() { return getToken(OBParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(OBParser.SECURITY, 0); }
		public TerminalNode INVOKER() { return getToken(OBParser.INVOKER, 0); }
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitView_attribute(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_view_attribute);
		int _la;
		try {
			setState(5933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(5917);
					match(ALGORITHM);
					setState(5918);
					match(COMP_EQ);
					setState(5919);
					view_algorithm();
					}
				}

				setState(5925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFINER) {
					{
					setState(5922);
					match(DEFINER);
					setState(5923);
					match(COMP_EQ);
					setState(5924);
					user_with_host_name();
					}
				}

				setState(5930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SQL) {
					{
					setState(5927);
					match(SQL);
					setState(5928);
					match(SECURITY);
					setState(5929);
					_la = _input.LA(1);
					if ( !(_la==INVOKER || _la==DEFINER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5932);
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(OBParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public View_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterView_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitView_check_option(this);
		}
	}

	public final View_check_optionContext view_check_option() throws RecognitionException {
		View_check_optionContext _localctx = new View_check_optionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_view_check_option);
		try {
			setState(5946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5935);
				match(WITH);
				setState(5936);
				match(CHECK);
				setState(5937);
				match(OPTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5938);
				match(WITH);
				setState(5939);
				match(CASCADED);
				setState(5940);
				match(CHECK);
				setState(5941);
				match(OPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5942);
				match(WITH);
				setState(5943);
				match(LOCAL);
				setState(5944);
				match(CHECK);
				setState(5945);
				match(OPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_algorithmContext extends ParserRuleContext {
		public TerminalNode UNDEFINED() { return getToken(OBParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(OBParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(OBParser.TEMPTABLE, 0); }
		public View_algorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterView_algorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitView_algorithm(this);
		}
	}

	public final View_algorithmContext view_algorithm() throws RecognitionException {
		View_algorithmContext _localctx = new View_algorithmContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_view_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5948);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_select_stmtContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public View_select_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_select_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterView_select_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitView_select_stmt(this);
		}
	}

	public final View_select_stmtContext view_select_stmt() throws RecognitionException {
		View_select_stmtContext _localctx = new View_select_stmtContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_view_select_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5950);
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_nameContext extends ParserRuleContext {
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterView_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitView_name(this);
		}
	}

	public final View_nameContext view_name() throws RecognitionException {
		View_nameContext _localctx = new View_nameContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_view_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5952);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_column_listContext extends ParserRuleContext {
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public List<Index_using_algorithmContext> index_using_algorithm() {
			return getRuleContexts(Index_using_algorithmContext.class);
		}
		public Index_using_algorithmContext index_using_algorithm(int i) {
			return getRuleContext(Index_using_algorithmContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Mv_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMv_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMv_column_list(this);
		}
	}

	public final Mv_column_listContext mv_column_list() throws RecognitionException {
		Mv_column_listContext _localctx = new Mv_column_listContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_mv_column_list);
		int _la;
		try {
			setState(5975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5954);
				column_name_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(5955);
					column_name_list();
					setState(5956);
					match(Comma);
					}
				}

				setState(5960);
				match(PRIMARY);
				setState(5961);
				match(KEY);
				setState(5963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5962);
					index_using_algorithm();
					}
				}

				setState(5965);
				match(LeftParen);
				setState(5966);
				column_name_list();
				setState(5967);
				match(RightParen);
				setState(5969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5968);
					index_using_algorithm();
					}
				}

				setState(5973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(5971);
					match(COMMENT);
					setState(5972);
					match(STRING_VALUE);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tablet_idContext extends ParserRuleContext {
		public TerminalNode TABLET_ID() { return getToken(OBParser.TABLET_ID, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Opt_tablet_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_tablet_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_tablet_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_tablet_id(this);
		}
	}

	public final Opt_tablet_idContext opt_tablet_id() throws RecognitionException {
		Opt_tablet_idContext _localctx = new Opt_tablet_idContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_opt_tablet_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5977);
			match(TABLET_ID);
			setState(5978);
			match(COMP_EQ);
			setState(5979);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tablet_id_no_emptyContext extends ParserRuleContext {
		public TerminalNode TABLET_ID() { return getToken(OBParser.TABLET_ID, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Opt_tablet_id_no_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_tablet_id_no_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_tablet_id_no_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_tablet_id_no_empty(this);
		}
	}

	public final Opt_tablet_id_no_emptyContext opt_tablet_id_no_empty() throws RecognitionException {
		Opt_tablet_id_no_emptyContext _localctx = new Opt_tablet_id_no_emptyContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_opt_tablet_id_no_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5981);
			match(TABLET_ID);
			setState(5982);
			opt_equal_mark();
			setState(5983);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_index_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public Normal_relation_factorContext normal_relation_factor() {
			return getRuleContext(Normal_relation_factorContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Sort_column_listContext sort_column_list() {
			return getRuleContext(Sort_column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Index_using_algorithmContext index_using_algorithm() {
			return getRuleContext(Index_using_algorithmContext.class,0);
		}
		public Opt_index_optionsContext opt_index_options() {
			return getRuleContext(Opt_index_optionsContext.class,0);
		}
		public Partition_optionContext partition_option() {
			return getRuleContext(Partition_optionContext.class,0);
		}
		public Auto_partition_optionContext auto_partition_option() {
			return getRuleContext(Auto_partition_optionContext.class,0);
		}
		public With_column_groupContext with_column_group() {
			return getRuleContext(With_column_groupContext.class,0);
		}
		public TerminalNode VECTOR() { return getToken(OBParser.VECTOR, 0); }
		public TerminalNode FULLTEXT() { return getToken(OBParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(OBParser.SPATIAL, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_index_stmt(this);
		}
	}

	public final Create_index_stmtContext create_index_stmt() throws RecognitionException {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_create_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5985);
			match(CREATE);
			setState(5987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VECTOR || _la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(5986);
				_la = _input.LA(1);
				if ( !(_la==VECTOR || _la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5989);
			match(INDEX);
			setState(5994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5990);
				match(IF);
				setState(5991);
				not();
				setState(5992);
				match(EXISTS);
				}
			}

			setState(5996);
			normal_relation_factor();
			setState(5998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5997);
				index_using_algorithm();
				}
			}

			setState(6000);
			match(ON);
			setState(6001);
			relation_factor();
			setState(6002);
			match(LeftParen);
			setState(6003);
			sort_column_list();
			setState(6004);
			match(RightParen);
			setState(6006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==USING || _la==WITH || _la==KEY_BLOCK_SIZE || _la==COMMENT || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (GLOBAL - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (INVISIBLE - 650)) | (1L << (CTXCAT - 650)))) != 0) || _la==BLOCK_SIZE || ((((_la - 827)) & ~0x3f) == 0 && ((1L << (_la - 827)) & ((1L << (INDEX_TABLE_ID - 827)) | (1L << (PARALLEL - 827)) | (1L << (NOPARALLEL - 827)))) != 0) || _la==VIRTUAL_COLUMN_ID || _la==STORING) {
				{
				setState(6005);
				opt_index_options();
				}
			}

			setState(6010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				setState(6008);
				partition_option();
				}
				break;
			case 2:
				{
				setState(6009);
				auto_partition_option();
				}
				break;
			}
			setState(6013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_COLUMN_GROUP) {
				{
				setState(6012);
				with_column_group();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6015);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_stateContext extends ParserRuleContext {
		public TerminalNode ENFORCED() { return getToken(OBParser.ENFORCED, 0); }
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public Check_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCheck_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCheck_state(this);
		}
	}

	public final Check_stateContext check_state() throws RecognitionException {
		Check_stateContext _localctx = new Check_stateContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_check_state);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6017);
				match(NOT);
				}
			}

			setState(6020);
			match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_constraint_nameContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Opt_constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_constraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_constraint_name(this);
		}
	}

	public final Opt_constraint_nameContext opt_constraint_name() throws RecognitionException {
		Opt_constraint_nameContext _localctx = new Opt_constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_opt_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
				{
				setState(6022);
				constraint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6025);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_column_listContext extends ParserRuleContext {
		public List<Sort_column_keyContext> sort_column_key() {
			return getRuleContexts(Sort_column_keyContext.class);
		}
		public Sort_column_keyContext sort_column_key(int i) {
			return getRuleContext(Sort_column_keyContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Sort_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSort_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSort_column_list(this);
		}
	}

	public final Sort_column_listContext sort_column_list() throws RecognitionException {
		Sort_column_listContext _localctx = new Sort_column_listContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_sort_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6027);
			sort_column_key();
			setState(6032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(6028);
				match(Comma);
				setState(6029);
				sort_column_key();
				}
				}
				setState(6034);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_column_keyContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode ASC() { return getToken(OBParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OBParser.DESC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Sort_column_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_column_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSort_column_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSort_column_key(this);
		}
	}

	public final Sort_column_keyContext sort_column_key() throws RecognitionException {
		Sort_column_keyContext _localctx = new Sort_column_keyContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_sort_column_key);
		int _la;
		try {
			setState(6058);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6035);
				column_name();
				setState(6039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LeftParen) {
					{
					setState(6036);
					match(LeftParen);
					setState(6037);
					match(INTNUM);
					setState(6038);
					match(RightParen);
					}
				}

				setState(6042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(6041);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ID) {
					{
					setState(6044);
					match(ID);
					setState(6045);
					match(INTNUM);
					}
				}

				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(6048);
				match(LeftParen);
				setState(6049);
				expr(0);
				setState(6050);
				match(RightParen);
				setState(6052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(6051);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ID) {
					{
					setState(6054);
					match(ID);
					setState(6055);
					match(INTNUM);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_index_optionsContext extends ParserRuleContext {
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Opt_index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_index_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_index_options(this);
		}
	}

	public final Opt_index_optionsContext opt_index_options() throws RecognitionException {
		Opt_index_optionsContext _localctx = new Opt_index_optionsContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_opt_index_options);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6061); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6060);
					index_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6063); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(OBParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode BLOCK_SIZE() { return getToken(OBParser.BLOCK_SIZE, 0); }
		public TerminalNode DATA_TABLE_ID() { return getToken(OBParser.DATA_TABLE_ID, 0); }
		public TerminalNode INDEX_TABLE_ID() { return getToken(OBParser.INDEX_TABLE_ID, 0); }
		public TerminalNode VIRTUAL_COLUMN_ID() { return getToken(OBParser.VIRTUAL_COLUMN_ID, 0); }
		public TerminalNode MAX_USED_PART_ID() { return getToken(OBParser.MAX_USED_PART_ID, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(OBParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode STORING() { return getToken(OBParser.STORING, 0); }
		public TerminalNode CTXCAT() { return getToken(OBParser.CTXCAT, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(OBParser.ROWID, 0); }
		public TerminalNode PARSER() { return getToken(OBParser.PARSER, 0); }
		public Vec_index_paramsContext vec_index_params() {
			return getRuleContext(Vec_index_paramsContext.class,0);
		}
		public Index_using_algorithmContext index_using_algorithm() {
			return getRuleContext(Index_using_algorithmContext.class,0);
		}
		public Visibility_optionContext visibility_option() {
			return getRuleContext(Visibility_optionContext.class,0);
		}
		public Parallel_optionContext parallel_option() {
			return getRuleContext(Parallel_optionContext.class,0);
		}
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_option(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_index_option);
		int _la;
		try {
			setState(6092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6065);
				match(GLOBAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6066);
				match(LOCAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6067);
				_la = _input.LA(1);
				if ( !(_la==KEY_BLOCK_SIZE || _la==DATA_TABLE_ID || _la==MAX_USED_PART_ID || _la==BLOCK_SIZE || _la==INDEX_TABLE_ID || _la==VIRTUAL_COLUMN_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(6068);
					match(COMP_EQ);
					}
				}

				setState(6071);
				match(INTNUM);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6072);
				match(COMMENT);
				setState(6073);
				match(STRING_VALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6074);
				_la = _input.LA(1);
				if ( !(_la==CTXCAT || _la==STORING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6075);
				match(LeftParen);
				setState(6076);
				column_name_list();
				setState(6077);
				match(RightParen);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6079);
				match(WITH);
				setState(6080);
				match(ROWID);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6081);
				match(WITH);
				setState(6082);
				match(PARSER);
				setState(6083);
				match(STRING_VALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6084);
				match(WITH);
				setState(6085);
				match(LeftParen);
				setState(6086);
				vec_index_params();
				setState(6087);
				match(RightParen);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6089);
				index_using_algorithm();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6090);
				visibility_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6091);
				parallel_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_using_algorithmContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(OBParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public Index_using_algorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_using_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_using_algorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_using_algorithm(this);
		}
	}

	public final Index_using_algorithmContext index_using_algorithm() throws RecognitionException {
		Index_using_algorithmContext _localctx = new Index_using_algorithmContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_index_using_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6094);
			match(USING);
			setState(6095);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mlog_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public TerminalNode LOG() { return getToken(OBParser.LOG, 0); }
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Opt_mlog_optionsContext opt_mlog_options() {
			return getRuleContext(Opt_mlog_optionsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public Mlog_with_valuesContext mlog_with_values() {
			return getRuleContext(Mlog_with_valuesContext.class,0);
		}
		public Mlog_including_or_excludingContext mlog_including_or_excluding() {
			return getRuleContext(Mlog_including_or_excludingContext.class,0);
		}
		public TerminalNode NEW() { return getToken(OBParser.NEW, 0); }
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public TerminalNode PURGE() { return getToken(OBParser.PURGE, 0); }
		public Mlog_purge_valuesContext mlog_purge_values() {
			return getRuleContext(Mlog_purge_valuesContext.class,0);
		}
		public Create_mlog_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mlog_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_mlog_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_mlog_stmt(this);
		}
	}

	public final Create_mlog_stmtContext create_mlog_stmt() throws RecognitionException {
		Create_mlog_stmtContext _localctx = new Create_mlog_stmtContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_create_mlog_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6097);
			match(CREATE);
			setState(6098);
			match(MATERIALIZED);
			setState(6099);
			match(VIEW);
			setState(6100);
			match(LOG);
			setState(6101);
			match(ON);
			setState(6102);
			relation_factor();
			setState(6104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARALLEL || _la==NOPARALLEL) {
				{
				setState(6103);
				opt_mlog_options();
				}
			}

			setState(6108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6106);
				match(WITH);
				setState(6107);
				mlog_with_values();
				}
			}

			setState(6114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDING || _la==EXCLUDING) {
				{
				setState(6110);
				mlog_including_or_excluding();
				setState(6111);
				match(NEW);
				setState(6112);
				match(VALUES);
				}
			}

			setState(6118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PURGE) {
				{
				setState(6116);
				match(PURGE);
				setState(6117);
				mlog_purge_values();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_mlog_optionsContext extends ParserRuleContext {
		public List<Mlog_optionContext> mlog_option() {
			return getRuleContexts(Mlog_optionContext.class);
		}
		public Mlog_optionContext mlog_option(int i) {
			return getRuleContext(Mlog_optionContext.class,i);
		}
		public Opt_mlog_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_mlog_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_mlog_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_mlog_options(this);
		}
	}

	public final Opt_mlog_optionsContext opt_mlog_options() throws RecognitionException {
		Opt_mlog_optionsContext _localctx = new Opt_mlog_optionsContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_opt_mlog_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6121); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6120);
				mlog_option();
				}
				}
				setState(6123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARALLEL || _la==NOPARALLEL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_optionContext extends ParserRuleContext {
		public Parallel_optionContext parallel_option() {
			return getRuleContext(Parallel_optionContext.class,0);
		}
		public Mlog_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_option(this);
		}
	}

	public final Mlog_optionContext mlog_option() throws RecognitionException {
		Mlog_optionContext _localctx = new Mlog_optionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_mlog_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6125);
			parallel_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_valuesContext extends ParserRuleContext {
		public Mlog_with_special_columnsContext mlog_with_special_columns() {
			return getRuleContext(Mlog_with_special_columnsContext.class,0);
		}
		public Mlog_with_reference_columnsContext mlog_with_reference_columns() {
			return getRuleContext(Mlog_with_reference_columnsContext.class,0);
		}
		public Mlog_with_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_values(this);
		}
	}

	public final Mlog_with_valuesContext mlog_with_values() throws RecognitionException {
		Mlog_with_valuesContext _localctx = new Mlog_with_valuesContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_mlog_with_values);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6127);
			mlog_with_special_columns();
			setState(6128);
			mlog_with_reference_columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_special_columnsContext extends ParserRuleContext {
		public Mlog_with_special_column_listContext mlog_with_special_column_list() {
			return getRuleContext(Mlog_with_special_column_listContext.class,0);
		}
		public Mlog_with_special_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_special_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_special_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_special_columns(this);
		}
	}

	public final Mlog_with_special_columnsContext mlog_with_special_columns() throws RecognitionException {
		Mlog_with_special_columnsContext _localctx = new Mlog_with_special_columnsContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_mlog_with_special_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWID || _la==PRIMARY || _la==SEQUENCE) {
				{
				setState(6130);
				mlog_with_special_column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_special_column_listContext extends ParserRuleContext {
		public Mlog_with_special_columnContext mlog_with_special_column() {
			return getRuleContext(Mlog_with_special_columnContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Mlog_with_special_column_listContext mlog_with_special_column_list() {
			return getRuleContext(Mlog_with_special_column_listContext.class,0);
		}
		public Mlog_with_special_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_special_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_special_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_special_column_list(this);
		}
	}

	public final Mlog_with_special_column_listContext mlog_with_special_column_list() throws RecognitionException {
		Mlog_with_special_column_listContext _localctx = new Mlog_with_special_column_listContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_mlog_with_special_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6133);
			mlog_with_special_column();
			setState(6136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(6134);
				match(Comma);
				setState(6135);
				mlog_with_special_column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_special_columnContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode ROWID() { return getToken(OBParser.ROWID, 0); }
		public TerminalNode SEQUENCE() { return getToken(OBParser.SEQUENCE, 0); }
		public Mlog_with_special_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_special_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_special_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_special_column(this);
		}
	}

	public final Mlog_with_special_columnContext mlog_with_special_column() throws RecognitionException {
		Mlog_with_special_columnContext _localctx = new Mlog_with_special_columnContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_mlog_with_special_column);
		try {
			setState(6142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6138);
				match(PRIMARY);
				setState(6139);
				match(KEY);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 2);
				{
				setState(6140);
				match(ROWID);
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6141);
				match(SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_reference_columnsContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Mlog_with_reference_column_listContext mlog_with_reference_column_list() {
			return getRuleContext(Mlog_with_reference_column_listContext.class,0);
		}
		public Mlog_with_reference_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_reference_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_reference_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_reference_columns(this);
		}
	}

	public final Mlog_with_reference_columnsContext mlog_with_reference_columns() throws RecognitionException {
		Mlog_with_reference_columnsContext _localctx = new Mlog_with_reference_columnsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_mlog_with_reference_columns);
		int _la;
		try {
			setState(6150);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case INCLUDING:
			case PURGE:
			case EXCLUDING:
			case DELIMITER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6144);
				empty();
				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(6145);
				match(LeftParen);
				setState(6147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(6146);
					mlog_with_reference_column_list();
					}
				}

				setState(6149);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_reference_column_listContext extends ParserRuleContext {
		public Mlog_with_reference_columnContext mlog_with_reference_column() {
			return getRuleContext(Mlog_with_reference_columnContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Mlog_with_reference_column_listContext mlog_with_reference_column_list() {
			return getRuleContext(Mlog_with_reference_column_listContext.class,0);
		}
		public Mlog_with_reference_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_reference_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_reference_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_reference_column_list(this);
		}
	}

	public final Mlog_with_reference_column_listContext mlog_with_reference_column_list() throws RecognitionException {
		Mlog_with_reference_column_listContext _localctx = new Mlog_with_reference_column_listContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_mlog_with_reference_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6152);
			mlog_with_reference_column();
			setState(6155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(6153);
				match(Comma);
				setState(6154);
				mlog_with_reference_column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_with_reference_columnContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Mlog_with_reference_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_with_reference_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_with_reference_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_with_reference_column(this);
		}
	}

	public final Mlog_with_reference_columnContext mlog_with_reference_column() throws RecognitionException {
		Mlog_with_reference_columnContext _localctx = new Mlog_with_reference_columnContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_mlog_with_reference_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6157);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_including_or_excludingContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(OBParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(OBParser.EXCLUDING, 0); }
		public Mlog_including_or_excludingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_including_or_excluding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_including_or_excluding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_including_or_excluding(this);
		}
	}

	public final Mlog_including_or_excludingContext mlog_including_or_excluding() throws RecognitionException {
		Mlog_including_or_excludingContext _localctx = new Mlog_including_or_excludingContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_mlog_including_or_excluding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6159);
			_la = _input.LA(1);
			if ( !(_la==INCLUDING || _la==EXCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_purge_valuesContext extends ParserRuleContext {
		public TerminalNode IMMEDIATE() { return getToken(OBParser.IMMEDIATE, 0); }
		public Mlog_purge_immediate_sync_or_asyncContext mlog_purge_immediate_sync_or_async() {
			return getRuleContext(Mlog_purge_immediate_sync_or_asyncContext.class,0);
		}
		public Mlog_purge_startContext mlog_purge_start() {
			return getRuleContext(Mlog_purge_startContext.class,0);
		}
		public Mlog_purge_nextContext mlog_purge_next() {
			return getRuleContext(Mlog_purge_nextContext.class,0);
		}
		public Mlog_purge_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_purge_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_purge_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_purge_values(this);
		}
	}

	public final Mlog_purge_valuesContext mlog_purge_values() throws RecognitionException {
		Mlog_purge_valuesContext _localctx = new Mlog_purge_valuesContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_mlog_purge_values);
		try {
			setState(6166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IMMEDIATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6161);
				match(IMMEDIATE);
				setState(6162);
				mlog_purge_immediate_sync_or_async();
				}
				break;
			case EOF:
			case START:
			case NEXT:
			case DELIMITER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6163);
				mlog_purge_start();
				setState(6164);
				mlog_purge_next();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_purge_immediate_sync_or_asyncContext extends ParserRuleContext {
		public TerminalNode SYNCHRONOUS() { return getToken(OBParser.SYNCHRONOUS, 0); }
		public TerminalNode ASYNCHRONOUS() { return getToken(OBParser.ASYNCHRONOUS, 0); }
		public Mlog_purge_immediate_sync_or_asyncContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_purge_immediate_sync_or_async; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_purge_immediate_sync_or_async(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_purge_immediate_sync_or_async(this);
		}
	}

	public final Mlog_purge_immediate_sync_or_asyncContext mlog_purge_immediate_sync_or_async() throws RecognitionException {
		Mlog_purge_immediate_sync_or_asyncContext _localctx = new Mlog_purge_immediate_sync_or_asyncContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_mlog_purge_immediate_sync_or_async);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SYNCHRONOUS || _la==ASYNCHRONOUS) {
				{
				setState(6168);
				_la = _input.LA(1);
				if ( !(_la==SYNCHRONOUS || _la==ASYNCHRONOUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_purge_startContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public Mlog_purge_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_purge_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_purge_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_purge_start(this);
		}
	}

	public final Mlog_purge_startContext mlog_purge_start() throws RecognitionException {
		Mlog_purge_startContext _localctx = new Mlog_purge_startContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_mlog_purge_start);
		try {
			setState(6175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case NEXT:
			case DELIMITER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6171);
				empty();
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(6172);
				match(START);
				setState(6173);
				match(WITH);
				setState(6174);
				bit_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mlog_purge_nextContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(OBParser.NEXT, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public Mlog_purge_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mlog_purge_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMlog_purge_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMlog_purge_next(this);
		}
	}

	public final Mlog_purge_nextContext mlog_purge_next() throws RecognitionException {
		Mlog_purge_nextContext _localctx = new Mlog_purge_nextContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_mlog_purge_next);
		try {
			setState(6180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case DELIMITER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6177);
				empty();
				}
				break;
			case NEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6178);
				match(NEXT);
				setState(6179);
				bit_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_mlog_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public TerminalNode LOG() { return getToken(OBParser.LOG, 0); }
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Drop_mlog_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_mlog_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_mlog_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_mlog_stmt(this);
		}
	}

	public final Drop_mlog_stmtContext drop_mlog_stmt() throws RecognitionException {
		Drop_mlog_stmtContext _localctx = new Drop_mlog_stmtContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_drop_mlog_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6182);
			match(DROP);
			setState(6183);
			match(MATERIALIZED);
			setState(6184);
			match(VIEW);
			setState(6185);
			match(LOG);
			setState(6186);
			match(ON);
			setState(6187);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Table_or_tablesContext table_or_tables() {
			return getRuleContext(Table_or_tablesContext.class,0);
		}
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode TEMPORARY() { return getToken(OBParser.TEMPORARY, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode CASCADE() { return getToken(OBParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(OBParser.RESTRICT, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_table_stmt(this);
		}
	}

	public final Drop_table_stmtContext drop_table_stmt() throws RecognitionException {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_drop_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6189);
			match(DROP);
			setState(6191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY || _la==MATERIALIZED) {
				{
				setState(6190);
				_la = _input.LA(1);
				if ( !(_la==TEMPORARY || _la==MATERIALIZED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6193);
			table_or_tables();
			setState(6196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(6194);
				match(IF);
				setState(6195);
				match(EXISTS);
				}
			}

			setState(6198);
			table_list();
			setState(6200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(6199);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_or_tablesContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(OBParser.TABLES, 0); }
		public Table_or_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_or_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_or_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_or_tables(this);
		}
	}

	public final Table_or_tablesContext table_or_tables() throws RecognitionException {
		Table_or_tablesContext _localctx = new Table_or_tablesContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_table_or_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6202);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_view_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(OBParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(OBParser.RESTRICT, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_view_stmt(this);
		}
	}

	public final Drop_view_stmtContext drop_view_stmt() throws RecognitionException {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_drop_view_stmt);
		int _la;
		try {
			setState(6225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6204);
				match(DROP);
				setState(6205);
				match(VIEW);
				setState(6208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(6206);
					match(IF);
					setState(6207);
					match(EXISTS);
					}
				}

				setState(6210);
				table_list();
				setState(6212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6211);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6214);
				match(DROP);
				setState(6215);
				match(MATERIALIZED);
				setState(6216);
				match(VIEW);
				setState(6219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(6217);
					match(IF);
					setState(6218);
					match(EXISTS);
					}
				}

				setState(6221);
				table_list();
				setState(6223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(6222);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_listContext extends ParserRuleContext {
		public List<Relation_factorContext> relation_factor() {
			return getRuleContexts(Relation_factorContext.class);
		}
		public Relation_factorContext relation_factor(int i) {
			return getRuleContext(Relation_factorContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Table_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_list(this);
		}
	}

	public final Table_listContext table_list() throws RecognitionException {
		Table_listContext _localctx = new Table_listContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_table_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6227);
			relation_factor();
			setState(6232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(6228);
				match(Comma);
				setState(6229);
				relation_factor();
				}
				}
				setState(6234);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_index_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_index_stmt(this);
		}
	}

	public final Drop_index_stmtContext drop_index_stmt() throws RecognitionException {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_drop_index_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6235);
			match(DROP);
			setState(6236);
			match(INDEX);
			setState(6237);
			relation_name();
			setState(6238);
			match(ON);
			setState(6239);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_stmtContext extends ParserRuleContext {
		public Insert_with_opt_hintContext insert_with_opt_hint() {
			return getRuleContext(Insert_with_opt_hintContext.class,0);
		}
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(OBParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public Update_asgn_listContext update_asgn_list() {
			return getRuleContext(Update_asgn_listContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(OBParser.HIGH_PRIORITY, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(OBParser.LOW_PRIORITY, 0); }
		public TerminalNode OVERWRITE() { return getToken(OBParser.OVERWRITE, 0); }
		public Replace_with_opt_hintContext replace_with_opt_hint() {
			return getRuleContext(Replace_with_opt_hintContext.class,0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInsert_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInsert_stmt(this);
		}
	}

	public final Insert_stmtContext insert_stmt() throws RecognitionException {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_insert_stmt);
		int _la;
		try {
			setState(6281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6241);
				insert_with_opt_hint();
				setState(6243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIGH_PRIORITY || _la==LOW_PRIORITY) {
					{
					setState(6242);
					_la = _input.LA(1);
					if ( !(_la==HIGH_PRIORITY || _la==LOW_PRIORITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(6245);
					match(IGNORE);
					}
				}

				setState(6249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(6248);
					match(INTO);
					}
				}

				setState(6251);
				single_table_insert();
				setState(6257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(6252);
					match(ON);
					setState(6253);
					match(DUPLICATE);
					setState(6254);
					match(KEY);
					setState(6255);
					match(UPDATE);
					setState(6256);
					update_asgn_list();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6259);
				insert_with_opt_hint();
				setState(6261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIGH_PRIORITY || _la==LOW_PRIORITY) {
					{
					setState(6260);
					_la = _input.LA(1);
					if ( !(_la==HIGH_PRIORITY || _la==LOW_PRIORITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(6263);
					match(IGNORE);
					}
				}

				setState(6266);
				match(OVERWRITE);
				setState(6267);
				single_table_insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6269);
				replace_with_opt_hint();
				setState(6271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(6270);
					match(LOW_PRIORITY);
					}
				}

				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(6273);
					match(IGNORE);
					}
				}

				setState(6277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(6276);
					match(INTO);
					}
				}

				setState(6279);
				single_table_insert();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Dml_table_nameContext dml_table_name() {
			return getRuleContext(Dml_table_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Update_asgn_listContext update_asgn_list() {
			return getRuleContext(Update_asgn_listContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Table_subquery_aliasContext table_subquery_alias() {
			return getRuleContext(Table_subquery_aliasContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_single_table_insert);
		int _la;
		try {
			setState(6301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6283);
				dml_table_name();
				setState(6291);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(6284);
					match(SET);
					setState(6285);
					update_asgn_list();
					setState(6288);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6286);
						match(AS);
						setState(6287);
						table_subquery_alias();
						}
					}

					}
					break;
				case SELECT:
				case VALUES:
				case WITH:
				case VALUE:
				case LeftParen:
				case SELECT_HINT_BEGIN:
					{
					setState(6290);
					values_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6293);
				dml_table_name();
				setState(6294);
				match(LeftParen);
				setState(6296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(6295);
					column_list();
					}
				}

				setState(6298);
				match(RightParen);
				setState(6299);
				values_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public Value_or_valuesContext value_or_values() {
			return getRuleContext(Value_or_valuesContext.class,0);
		}
		public Insert_vals_listContext insert_vals_list() {
			return getRuleContext(Insert_vals_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Table_subquery_aliasContext table_subquery_alias() {
			return getRuleContext(Table_subquery_aliasContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_values_clause);
		int _la;
		try {
			setState(6310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6303);
				value_or_values();
				setState(6304);
				insert_vals_list(0);
				setState(6307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6305);
					match(AS);
					setState(6306);
					table_subquery_alias();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6309);
				select_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_or_valuesContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(OBParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public Value_or_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_or_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterValue_or_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitValue_or_values(this);
		}
	}

	public final Value_or_valuesContext value_or_values() throws RecognitionException {
		Value_or_valuesContext _localctx = new Value_or_valuesContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_value_or_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6312);
			_la = _input.LA(1);
			if ( !(_la==VALUES || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_with_opt_hintContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode REPLACE_HINT_BEGIN() { return getToken(OBParser.REPLACE_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Replace_with_opt_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_with_opt_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterReplace_with_opt_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitReplace_with_opt_hint(this);
		}
	}

	public final Replace_with_opt_hintContext replace_with_opt_hint() throws RecognitionException {
		Replace_with_opt_hintContext _localctx = new Replace_with_opt_hintContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_replace_with_opt_hint);
		try {
			setState(6317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6314);
				match(REPLACE);
				}
				break;
			case REPLACE_HINT_BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6315);
				match(REPLACE_HINT_BEGIN);
				setState(6316);
				hint_list_with_end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_opt_hintContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(OBParser.INSERT, 0); }
		public TerminalNode INSERT_HINT_BEGIN() { return getToken(OBParser.INSERT_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Insert_with_opt_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_opt_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInsert_with_opt_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInsert_with_opt_hint(this);
		}
	}

	public final Insert_with_opt_hintContext insert_with_opt_hint() throws RecognitionException {
		Insert_with_opt_hintContext _localctx = new Insert_with_opt_hintContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_insert_with_opt_hint);
		try {
			setState(6322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6319);
				match(INSERT);
				}
				break;
			case INSERT_HINT_BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6320);
				match(INSERT_HINT_BEGIN);
				setState(6321);
				hint_list_with_end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_listContext extends ParserRuleContext {
		public List<Column_definition_refContext> column_definition_ref() {
			return getRuleContexts(Column_definition_refContext.class);
		}
		public Column_definition_refContext column_definition_ref(int i) {
			return getRuleContext(Column_definition_refContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_list(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6324);
			column_definition_ref();
			setState(6329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(6325);
				match(Comma);
				setState(6326);
				column_definition_ref();
				}
				}
				setState(6331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_vals_listContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Insert_valsContext insert_vals() {
			return getRuleContext(Insert_valsContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Insert_vals_listContext insert_vals_list() {
			return getRuleContext(Insert_vals_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Insert_vals_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_vals_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInsert_vals_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInsert_vals_list(this);
		}
	}

	public final Insert_vals_listContext insert_vals_list() throws RecognitionException {
		return insert_vals_list(0);
	}

	private Insert_vals_listContext insert_vals_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_vals_listContext _localctx = new Insert_vals_listContext(_ctx, _parentState);
		Insert_vals_listContext _prevctx = _localctx;
		int _startState = 670;
		enterRecursionRule(_localctx, 670, RULE_insert_vals_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6333);
			match(LeftParen);
			setState(6334);
			insert_vals(0);
			setState(6335);
			match(RightParen);
			}
			_ctx.stop = _input.LT(-1);
			setState(6345);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_vals_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_vals_list);
					setState(6337);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6338);
					match(Comma);
					setState(6339);
					match(LeftParen);
					setState(6340);
					insert_vals(0);
					setState(6341);
					match(RightParen);
					}
					} 
				}
				setState(6347);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Insert_valsContext extends ParserRuleContext {
		public Expr_or_defaultContext expr_or_default() {
			return getRuleContext(Expr_or_defaultContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Insert_valsContext insert_vals() {
			return getRuleContext(Insert_valsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Insert_valsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_vals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInsert_vals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInsert_vals(this);
		}
	}

	public final Insert_valsContext insert_vals() throws RecognitionException {
		return insert_vals(0);
	}

	private Insert_valsContext insert_vals(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Insert_valsContext _localctx = new Insert_valsContext(_ctx, _parentState);
		Insert_valsContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_insert_vals, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(6349);
				expr_or_default();
				}
				break;
			case 2:
				{
				setState(6350);
				empty();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,649,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Insert_valsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insert_vals);
					setState(6353);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6354);
					match(Comma);
					setState(6355);
					expr_or_default();
					}
					} 
				}
				setState(6360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,649,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Expr_or_defaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Expr_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExpr_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExpr_or_default(this);
		}
	}

	public final Expr_or_defaultContext expr_or_default() throws RecognitionException {
		Expr_or_defaultContext _localctx = new Expr_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_expr_or_default);
		try {
			setState(6363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6361);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6362);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_stmtContext extends ParserRuleContext {
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_stmt(this);
		}
	}

	public final Select_stmtContext select_stmt() throws RecognitionException {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_select_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6365);
				with_clause();
				}
			}

			setState(6373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(6368);
				select_no_parens();
				setState(6370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(6369);
					into_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(6372);
				select_with_parens();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parensContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_with_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_with_parens(this);
		}
	}

	public final Select_with_parensContext select_with_parens() throws RecognitionException {
		Select_with_parensContext _localctx = new Select_with_parensContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_select_with_parens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6375);
			match(LeftParen);
			setState(6377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6376);
				with_clause();
				}
			}

			setState(6381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(6379);
				select_no_parens();
				}
				break;
			case 2:
				{
				setState(6380);
				select_with_parens();
				}
				break;
			}
			setState(6383);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_no_parensContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public For_update_clauseContext for_update_clause() {
			return getRuleContext(For_update_clauseContext.class,0);
		}
		public Opt_lock_in_share_modeContext opt_lock_in_share_mode() {
			return getRuleContext(Opt_lock_in_share_modeContext.class,0);
		}
		public Select_clause_setContext select_clause_set() {
			return getRuleContext(Select_clause_setContext.class,0);
		}
		public Select_clause_set_with_order_and_limitContext select_clause_set_with_order_and_limit() {
			return getRuleContext(Select_clause_set_with_order_and_limitContext.class,0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_no_parens(this);
		}
	}

	public final Select_no_parensContext select_no_parens() throws RecognitionException {
		Select_no_parensContext _localctx = new Select_no_parensContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_select_no_parens);
		try {
			setState(6400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6385);
				select_clause();
				setState(6388);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(6386);
					for_update_clause();
					}
					break;
				case LOCK_:
					{
					setState(6387);
					opt_lock_in_share_mode();
					}
					break;
				case EOF:
				case INTO:
				case ON:
				case TO:
				case WITH:
				case RightParen:
				case DELIMITER:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6390);
				select_clause_set(0);
				setState(6393);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(6391);
					for_update_clause();
					}
					break;
				case LOCK_:
					{
					setState(6392);
					opt_lock_in_share_mode();
					}
					break;
				case EOF:
				case INTO:
				case ON:
				case TO:
				case WITH:
				case RightParen:
				case DELIMITER:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6395);
				select_clause_set_with_order_and_limit();
				setState(6398);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(6396);
					for_update_clause();
					}
					break;
				case LOCK_:
					{
					setState(6397);
					opt_lock_in_share_mode();
					}
					break;
				case EOF:
				case INTO:
				case ON:
				case TO:
				case WITH:
				case RightParen:
				case DELIMITER:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class No_table_selectContext extends ParserRuleContext {
		public Select_with_opt_hintContext select_with_opt_hint() {
			return getRuleContext(Select_with_opt_hintContext.class,0);
		}
		public Select_expr_listContext select_expr_list() {
			return getRuleContext(Select_expr_listContext.class,0);
		}
		public Into_optContext into_opt() {
			return getRuleContext(Into_optContext.class,0);
		}
		public Query_expression_option_listContext query_expression_option_list() {
			return getRuleContext(Query_expression_option_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public TerminalNode DUAL() { return getToken(OBParser.DUAL, 0); }
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public Opt_hint_valueContext opt_hint_value() {
			return getRuleContext(Opt_hint_valueContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Groupby_clauseContext groupby_clause() {
			return getRuleContext(Groupby_clauseContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(OBParser.HAVING, 0); }
		public TerminalNode WINDOW() { return getToken(OBParser.WINDOW, 0); }
		public Named_windowsContext named_windows() {
			return getRuleContext(Named_windowsContext.class,0);
		}
		public No_table_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_no_table_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNo_table_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNo_table_select(this);
		}
	}

	public final No_table_selectContext no_table_select() throws RecognitionException {
		No_table_selectContext _localctx = new No_table_selectContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_no_table_select);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6402);
			select_with_opt_hint();
			setState(6404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(6403);
				query_expression_option_list();
				}
				break;
			}
			setState(6406);
			select_expr_list();
			setState(6407);
			into_opt();
			setState(6429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(6408);
				match(FROM);
				setState(6409);
				match(DUAL);
				setState(6414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
				case 1:
					{
					setState(6410);
					match(WHERE);
					setState(6411);
					opt_hint_value();
					setState(6412);
					expr(0);
					}
					break;
				}
				setState(6419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
				case 1:
					{
					setState(6416);
					match(GROUP);
					setState(6417);
					match(BY);
					setState(6418);
					groupby_clause();
					}
					break;
				}
				setState(6423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(6421);
					match(HAVING);
					setState(6422);
					expr(0);
					}
					break;
				}
				setState(6427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					setState(6425);
					match(WINDOW);
					setState(6426);
					named_windows();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public No_table_select_with_order_and_limitContext no_table_select_with_order_and_limit() {
			return getRuleContext(No_table_select_with_order_and_limitContext.class,0);
		}
		public Simple_select_with_order_and_limitContext simple_select_with_order_and_limit() {
			return getRuleContext(Simple_select_with_order_and_limitContext.class,0);
		}
		public Select_with_parens_with_order_and_limitContext select_with_parens_with_order_and_limit() {
			return getRuleContext(Select_with_parens_with_order_and_limitContext.class,0);
		}
		public Table_values_clauseContext table_values_clause() {
			return getRuleContext(Table_values_clauseContext.class,0);
		}
		public Table_values_clause_with_order_by_and_limitContext table_values_clause_with_order_by_and_limit() {
			return getRuleContext(Table_values_clause_with_order_by_and_limitContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_clause(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_select_clause);
		try {
			setState(6436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6431);
				no_table_select_with_order_and_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6432);
				simple_select_with_order_and_limit();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6433);
				select_with_parens_with_order_and_limit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6434);
				table_values_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6435);
				table_values_clause_with_order_by_and_limit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clause_set_with_order_and_limitContext extends ParserRuleContext {
		public Select_clause_setContext select_clause_set() {
			return getRuleContext(Select_clause_setContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Select_clause_set_with_order_and_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause_set_with_order_and_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_clause_set_with_order_and_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_clause_set_with_order_and_limit(this);
		}
	}

	public final Select_clause_set_with_order_and_limitContext select_clause_set_with_order_and_limit() throws RecognitionException {
		Select_clause_set_with_order_and_limitContext _localctx = new Select_clause_set_with_order_and_limitContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_select_clause_set_with_order_and_limit);
		int _la;
		try {
			setState(6447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6438);
				select_clause_set(0);
				setState(6439);
				order_by();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6441);
				select_clause_set(0);
				setState(6443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6442);
					order_by();
					}
				}

				setState(6445);
				limit_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clause_setContext extends ParserRuleContext {
		public Select_clause_set_leftContext select_clause_set_left() {
			return getRuleContext(Select_clause_set_leftContext.class,0);
		}
		public Set_typeContext set_type() {
			return getRuleContext(Set_typeContext.class,0);
		}
		public Select_clause_set_rightContext select_clause_set_right() {
			return getRuleContext(Select_clause_set_rightContext.class,0);
		}
		public Select_clause_setContext select_clause_set() {
			return getRuleContext(Select_clause_setContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Select_clause_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_clause_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_clause_set(this);
		}
	}

	public final Select_clause_setContext select_clause_set() throws RecognitionException {
		return select_clause_set(0);
	}

	private Select_clause_setContext select_clause_set(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_clause_setContext _localctx = new Select_clause_setContext(_ctx, _parentState);
		Select_clause_setContext _prevctx = _localctx;
		int _startState = 688;
		enterRecursionRule(_localctx, 688, RULE_select_clause_set, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6450);
			select_clause_set_left();
			setState(6451);
			set_type();
			setState(6452);
			select_clause_set_right();
			}
			_ctx.stop = _input.LT(-1);
			setState(6466);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,671,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Select_clause_setContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_select_clause_set);
					setState(6454);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6456);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER) {
						{
						setState(6455);
						order_by();
						}
					}

					setState(6459);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT) {
						{
						setState(6458);
						limit_clause();
						}
					}

					setState(6461);
					set_type();
					setState(6462);
					select_clause_set_right();
					}
					} 
				}
				setState(6468);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,671,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_clause_set_rightContext extends ParserRuleContext {
		public No_table_selectContext no_table_select() {
			return getRuleContext(No_table_selectContext.class,0);
		}
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Table_values_clauseContext table_values_clause() {
			return getRuleContext(Table_values_clauseContext.class,0);
		}
		public Select_clause_set_rightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause_set_right; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_clause_set_right(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_clause_set_right(this);
		}
	}

	public final Select_clause_set_rightContext select_clause_set_right() throws RecognitionException {
		Select_clause_set_rightContext _localctx = new Select_clause_set_rightContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_select_clause_set_right);
		try {
			setState(6473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6469);
				no_table_select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6470);
				simple_select();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6471);
				select_with_parens();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6472);
				table_values_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clause_set_leftContext extends ParserRuleContext {
		public No_table_select_with_order_and_limitContext no_table_select_with_order_and_limit() {
			return getRuleContext(No_table_select_with_order_and_limitContext.class,0);
		}
		public Simple_select_with_order_and_limitContext simple_select_with_order_and_limit() {
			return getRuleContext(Simple_select_with_order_and_limitContext.class,0);
		}
		public Select_clause_set_rightContext select_clause_set_right() {
			return getRuleContext(Select_clause_set_rightContext.class,0);
		}
		public Select_clause_set_leftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause_set_left; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_clause_set_left(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_clause_set_left(this);
		}
	}

	public final Select_clause_set_leftContext select_clause_set_left() throws RecognitionException {
		Select_clause_set_leftContext _localctx = new Select_clause_set_leftContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_select_clause_set_left);
		try {
			setState(6478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6475);
				no_table_select_with_order_and_limit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6476);
				simple_select_with_order_and_limit();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6477);
				select_clause_set_right();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class No_table_select_with_order_and_limitContext extends ParserRuleContext {
		public No_table_selectContext no_table_select() {
			return getRuleContext(No_table_selectContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public No_table_select_with_order_and_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_no_table_select_with_order_and_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNo_table_select_with_order_and_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNo_table_select_with_order_and_limit(this);
		}
	}

	public final No_table_select_with_order_and_limitContext no_table_select_with_order_and_limit() throws RecognitionException {
		No_table_select_with_order_and_limitContext _localctx = new No_table_select_with_order_and_limitContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_no_table_select_with_order_and_limit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6480);
			no_table_select();
			setState(6482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6481);
				order_by();
				}
			}

			setState(6485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(6484);
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_approxContext extends ParserRuleContext {
		public TerminalNode APPROX() { return getToken(OBParser.APPROX, 0); }
		public TerminalNode APPROXIMATE() { return getToken(OBParser.APPROXIMATE, 0); }
		public Opt_approxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_approx; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_approx(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_approx(this);
		}
	}

	public final Opt_approxContext opt_approx() throws RecognitionException {
		Opt_approxContext _localctx = new Opt_approxContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_opt_approx);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6487);
			_la = _input.LA(1);
			if ( !(_la==APPROXIMATE || _la==APPROX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_select_with_order_and_limitContext extends ParserRuleContext {
		public Simple_selectContext simple_select() {
			return getRuleContext(Simple_selectContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Opt_approxContext opt_approx() {
			return getRuleContext(Opt_approxContext.class,0);
		}
		public Simple_select_with_order_and_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select_with_order_and_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSimple_select_with_order_and_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSimple_select_with_order_and_limit(this);
		}
	}

	public final Simple_select_with_order_and_limitContext simple_select_with_order_and_limit() throws RecognitionException {
		Simple_select_with_order_and_limitContext _localctx = new Simple_select_with_order_and_limitContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_simple_select_with_order_and_limit);
		int _la;
		try {
			setState(6501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6489);
				simple_select();
				setState(6491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6490);
					order_by();
					}
				}

				setState(6494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(6493);
					limit_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6496);
				simple_select();
				setState(6497);
				order_by();
				setState(6498);
				opt_approx();
				setState(6499);
				limit_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_parens_with_order_and_limitContext extends ParserRuleContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Select_with_parens_with_order_and_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_parens_with_order_and_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_with_parens_with_order_and_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_with_parens_with_order_and_limit(this);
		}
	}

	public final Select_with_parens_with_order_and_limitContext select_with_parens_with_order_and_limit() throws RecognitionException {
		Select_with_parens_with_order_and_limitContext _localctx = new Select_with_parens_with_order_and_limitContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_select_with_parens_with_order_and_limit);
		int _la;
		try {
			setState(6512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6503);
				select_with_parens();
				setState(6504);
				order_by();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6506);
				select_with_parens();
				setState(6508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6507);
					order_by();
					}
				}

				setState(6510);
				limit_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_with_opt_hintContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(OBParser.SELECT, 0); }
		public TerminalNode SELECT_HINT_BEGIN() { return getToken(OBParser.SELECT_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Select_with_opt_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_with_opt_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_with_opt_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_with_opt_hint(this);
		}
	}

	public final Select_with_opt_hintContext select_with_opt_hint() throws RecognitionException {
		Select_with_opt_hintContext _localctx = new Select_with_opt_hintContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_select_with_opt_hint);
		try {
			setState(6517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6514);
				match(SELECT);
				}
				break;
			case SELECT_HINT_BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6515);
				match(SELECT_HINT_BEGIN);
				setState(6516);
				hint_list_with_end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_with_opt_hintContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public TerminalNode UPDATE_HINT_BEGIN() { return getToken(OBParser.UPDATE_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Update_with_opt_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_with_opt_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUpdate_with_opt_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUpdate_with_opt_hint(this);
		}
	}

	public final Update_with_opt_hintContext update_with_opt_hint() throws RecognitionException {
		Update_with_opt_hintContext _localctx = new Update_with_opt_hintContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_update_with_opt_hint);
		try {
			setState(6522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6519);
				match(UPDATE);
				}
				break;
			case UPDATE_HINT_BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6520);
				match(UPDATE_HINT_BEGIN);
				setState(6521);
				hint_list_with_end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_with_opt_hintContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode DELETE_HINT_BEGIN() { return getToken(OBParser.DELETE_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Delete_with_opt_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_with_opt_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDelete_with_opt_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDelete_with_opt_hint(this);
		}
	}

	public final Delete_with_opt_hintContext delete_with_opt_hint() throws RecognitionException {
		Delete_with_opt_hintContext _localctx = new Delete_with_opt_hintContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_delete_with_opt_hint);
		try {
			setState(6527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6524);
				match(DELETE);
				}
				break;
			case DELETE_HINT_BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6525);
				match(DELETE_HINT_BEGIN);
				setState(6526);
				hint_list_with_end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_selectContext extends ParserRuleContext {
		public Select_with_opt_hintContext select_with_opt_hint() {
			return getRuleContext(Select_with_opt_hintContext.class,0);
		}
		public Select_expr_listContext select_expr_list() {
			return getRuleContext(Select_expr_listContext.class,0);
		}
		public Into_optContext into_opt() {
			return getRuleContext(Into_optContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public From_listContext from_list() {
			return getRuleContext(From_listContext.class,0);
		}
		public Query_expression_option_listContext query_expression_option_list() {
			return getRuleContext(Query_expression_option_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public Opt_hint_valueContext opt_hint_value() {
			return getRuleContext(Opt_hint_valueContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Groupby_clauseContext groupby_clause() {
			return getRuleContext(Groupby_clauseContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(OBParser.HAVING, 0); }
		public TerminalNode WINDOW() { return getToken(OBParser.WINDOW, 0); }
		public Named_windowsContext named_windows() {
			return getRuleContext(Named_windowsContext.class,0);
		}
		public Simple_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSimple_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSimple_select(this);
		}
	}

	public final Simple_selectContext simple_select() throws RecognitionException {
		Simple_selectContext _localctx = new Simple_selectContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_simple_select);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6529);
			select_with_opt_hint();
			setState(6531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				{
				setState(6530);
				query_expression_option_list();
				}
				break;
			}
			setState(6533);
			select_expr_list();
			setState(6534);
			into_opt();
			setState(6535);
			match(FROM);
			setState(6536);
			from_list();
			setState(6541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				setState(6537);
				match(WHERE);
				setState(6538);
				opt_hint_value();
				setState(6539);
				expr(0);
				}
				break;
			}
			setState(6546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(6543);
				match(GROUP);
				setState(6544);
				match(BY);
				setState(6545);
				groupby_clause();
				}
				break;
			}
			setState(6550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(6548);
				match(HAVING);
				setState(6549);
				expr(0);
				}
				break;
			}
			setState(6554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(6552);
				match(WINDOW);
				setState(6553);
				named_windows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_type_unionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(OBParser.UNION, 0); }
		public Set_type_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_type_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_type_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_type_union(this);
		}
	}

	public final Set_type_unionContext set_type_union() throws RecognitionException {
		Set_type_unionContext _localctx = new Set_type_unionContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_set_type_union);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6556);
			match(UNION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_type_otherContext extends ParserRuleContext {
		public TerminalNode INTERSECT() { return getToken(OBParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(OBParser.EXCEPT, 0); }
		public TerminalNode MINUS() { return getToken(OBParser.MINUS, 0); }
		public Set_type_otherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_type_other; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_type_other(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_type_other(this);
		}
	}

	public final Set_type_otherContext set_type_other() throws RecognitionException {
		Set_type_otherContext _localctx = new Set_type_otherContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_set_type_other);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6558);
			_la = _input.LA(1);
			if ( !(((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (EXCEPT - 369)) | (1L << (MINUS - 369)) | (1L << (INTERSECT - 369)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_typeContext extends ParserRuleContext {
		public Set_type_unionContext set_type_union() {
			return getRuleContext(Set_type_unionContext.class,0);
		}
		public Set_expression_optionContext set_expression_option() {
			return getRuleContext(Set_expression_optionContext.class,0);
		}
		public Set_type_otherContext set_type_other() {
			return getRuleContext(Set_type_otherContext.class,0);
		}
		public Set_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_type(this);
		}
	}

	public final Set_typeContext set_type() throws RecognitionException {
		Set_typeContext _localctx = new Set_typeContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_set_type);
		try {
			setState(6564);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6560);
				set_type_union();
				setState(6561);
				set_expression_option();
				}
				break;
			case EXCEPT:
			case MINUS:
			case INTERSECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6563);
				set_type_other();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_expression_optionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OBParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public Set_expression_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_expression_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_expression_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_expression_option(this);
		}
	}

	public final Set_expression_optionContext set_expression_option() throws RecognitionException {
		Set_expression_optionContext _localctx = new Set_expression_optionContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_set_expression_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT || _la==UNIQUE) {
				{
				setState(6566);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_hint_valueContext extends ParserRuleContext {
		public TerminalNode HINT_VALUE() { return getToken(OBParser.HINT_VALUE, 0); }
		public Opt_hint_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hint_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_hint_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_hint_value(this);
		}
	}

	public final Opt_hint_valueContext opt_hint_value() throws RecognitionException {
		Opt_hint_valueContext _localctx = new Opt_hint_valueContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_opt_hint_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HINT_VALUE) {
				{
				setState(6569);
				match(HINT_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(OBParser.LIMIT, 0); }
		public List<Limit_exprContext> limit_expr() {
			return getRuleContexts(Limit_exprContext.class);
		}
		public Limit_exprContext limit_expr(int i) {
			return getRuleContext(Limit_exprContext.class,i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode OFFSET() { return getToken(OBParser.OFFSET, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLimit_clause(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_limit_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6572);
			match(LIMIT);
			setState(6573);
			limit_expr();
			setState(6580);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case FOR:
			case INTO:
			case LOCK_:
			case ON:
			case TO:
			case UNION:
			case WITH:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case OFFSET:
			case RightParen:
			case DELIMITER:
				{
				setState(6576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(6574);
					match(OFFSET);
					setState(6575);
					limit_expr();
					}
				}

				}
				break;
			case Comma:
				{
				setState(6578);
				match(Comma);
				setState(6579);
				limit_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(OBParser.OUTFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public File_partition_optContext file_partition_opt() {
			return getRuleContext(File_partition_optContext.class,0);
		}
		public Field_optContext field_opt() {
			return getRuleContext(Field_optContext.class,0);
		}
		public Line_optContext line_opt() {
			return getRuleContext(Line_optContext.class,0);
		}
		public File_optContext file_opt() {
			return getRuleContext(File_optContext.class,0);
		}
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public TerminalNode DUMPFILE() { return getToken(OBParser.DUMPFILE, 0); }
		public Into_var_listContext into_var_list() {
			return getRuleContext(Into_var_listContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_into_clause);
		try {
			setState(6600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6582);
				match(INTO);
				setState(6583);
				match(OUTFILE);
				setState(6584);
				match(STRING_VALUE);
				setState(6585);
				file_partition_opt();
				setState(6589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
				case 1:
					{
					setState(6586);
					charset_key();
					setState(6587);
					charset_name();
					}
					break;
				}
				setState(6591);
				field_opt();
				setState(6592);
				line_opt();
				setState(6593);
				file_opt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6595);
				match(INTO);
				setState(6596);
				match(DUMPFILE);
				setState(6597);
				match(STRING_VALUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6598);
				match(INTO);
				setState(6599);
				into_var_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_optContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Into_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInto_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInto_opt(this);
		}
	}

	public final Into_optContext into_opt() throws RecognitionException {
		Into_optContext _localctx = new Into_optContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_into_opt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				{
				setState(6602);
				into_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_var_listContext extends ParserRuleContext {
		public List<Into_varContext> into_var() {
			return getRuleContexts(Into_varContext.class);
		}
		public Into_varContext into_var(int i) {
			return getRuleContext(Into_varContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Into_var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInto_var_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInto_var_list(this);
		}
	}

	public final Into_var_listContext into_var_list() throws RecognitionException {
		Into_var_listContext _localctx = new Into_var_listContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_into_var_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6605);
			into_var();
			setState(6610);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6606);
					match(Comma);
					setState(6607);
					into_var();
					}
					} 
				}
				setState(6612);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_varContext extends ParserRuleContext {
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keyword_normalContext unreserved_keyword_normal() {
			return getRuleContext(Unreserved_keyword_normalContext.class,0);
		}
		public Into_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInto_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInto_var(this);
		}
	}

	public final Into_varContext into_var() throws RecognitionException {
		Into_varContext _localctx = new Into_varContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_into_var);
		try {
			setState(6616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_VARIABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6613);
				match(USER_VARIABLE);
				}
				break;
			case NAME_OB:
				enterOuterAlt(_localctx, 2);
				{
				setState(6614);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(6615);
				unreserved_keyword_normal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_optContext extends ParserRuleContext {
		public Columns_or_fieldsContext columns_or_fields() {
			return getRuleContext(Columns_or_fieldsContext.class,0);
		}
		public Field_term_listContext field_term_list() {
			return getRuleContext(Field_term_listContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Field_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterField_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitField_opt(this);
		}
	}

	public final Field_optContext field_opt() throws RecognitionException {
		Field_optContext _localctx = new Field_optContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_field_opt);
		try {
			setState(6622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6618);
				columns_or_fields();
				setState(6619);
				field_term_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6621);
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_term_listContext extends ParserRuleContext {
		public List<Field_termContext> field_term() {
			return getRuleContexts(Field_termContext.class);
		}
		public Field_termContext field_term(int i) {
			return getRuleContext(Field_termContext.class,i);
		}
		public Field_term_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_term_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterField_term_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitField_term_list(this);
		}
	}

	public final Field_term_listContext field_term_list() throws RecognitionException {
		Field_term_listContext _localctx = new Field_term_listContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_field_term_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6625); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6624);
					field_term();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6627); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_termContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Text_stringContext text_string() {
			return getRuleContext(Text_stringContext.class,0);
		}
		public TerminalNode ESCAPED() { return getToken(OBParser.ESCAPED, 0); }
		public TerminalNode ENCLOSED() { return getToken(OBParser.ENCLOSED, 0); }
		public TerminalNode TERMINATED() { return getToken(OBParser.TERMINATED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(OBParser.OPTIONALLY, 0); }
		public Field_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterField_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitField_term(this);
		}
	}

	public final Field_termContext field_term() throws RecognitionException {
		Field_termContext _localctx = new Field_termContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_field_term);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCLOSED:
			case OPTIONALLY:
			case TERMINATED:
				{
				setState(6634);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENCLOSED:
				case OPTIONALLY:
					{
					setState(6630);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPTIONALLY) {
						{
						setState(6629);
						match(OPTIONALLY);
						}
					}

					setState(6632);
					match(ENCLOSED);
					}
					break;
				case TERMINATED:
					{
					setState(6633);
					match(TERMINATED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ESCAPED:
				{
				setState(6636);
				match(ESCAPED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6639);
			match(BY);
			setState(6640);
			text_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_optContext extends ParserRuleContext {
		public File_option_listContext file_option_list() {
			return getRuleContext(File_option_listContext.class,0);
		}
		public File_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFile_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFile_opt(this);
		}
	}

	public final File_optContext file_opt() throws RecognitionException {
		File_optContext _localctx = new File_optContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_file_opt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				setState(6642);
				file_option_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_option_listContext extends ParserRuleContext {
		public List<File_optionContext> file_option() {
			return getRuleContexts(File_optionContext.class);
		}
		public File_optionContext file_option(int i) {
			return getRuleContext(File_optionContext.class,i);
		}
		public File_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFile_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFile_option_list(this);
		}
	}

	public final File_option_listContext file_option_list() throws RecognitionException {
		File_option_listContext _localctx = new File_option_listContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_file_option_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6646); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6645);
					file_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6648); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE() { return getToken(OBParser.SINGLE, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode MAX_FILE_SIZE() { return getToken(OBParser.MAX_FILE_SIZE, 0); }
		public File_size_constContext file_size_const() {
			return getRuleContext(File_size_constContext.class,0);
		}
		public TerminalNode BUFFER_SIZE() { return getToken(OBParser.BUFFER_SIZE, 0); }
		public File_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFile_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFile_option(this);
		}
	}

	public final File_optionContext file_option() throws RecognitionException {
		File_optionContext _localctx = new File_optionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_file_option);
		int _la;
		try {
			setState(6665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6650);
				match(SINGLE);
				setState(6652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(6651);
					match(COMP_EQ);
					}
				}

				setState(6654);
				match(BOOL_VALUE);
				}
				break;
			case MAX_FILE_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6655);
				match(MAX_FILE_SIZE);
				setState(6657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(6656);
					match(COMP_EQ);
					}
				}

				setState(6659);
				file_size_const();
				}
				break;
			case BUFFER_SIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6660);
				match(BUFFER_SIZE);
				setState(6662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(6661);
					match(COMP_EQ);
					}
				}

				setState(6664);
				file_size_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_partition_optContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public File_partition_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_partition_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFile_partition_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFile_partition_opt(this);
		}
	}

	public final File_partition_optContext file_partition_opt() throws RecognitionException {
		File_partition_optContext _localctx = new File_partition_optContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_file_partition_opt);
		try {
			setState(6671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6667);
				empty();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6668);
				match(PARTITION);
				setState(6669);
				match(BY);
				setState(6670);
				bit_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_size_constContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public File_size_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFile_size_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFile_size_const(this);
		}
	}

	public final File_size_constContext file_size_const() throws RecognitionException {
		File_size_constContext _localctx = new File_size_constContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_file_size_const);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6673);
			_la = _input.LA(1);
			if ( !(_la==INTNUM || _la==STRING_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_optContext extends ParserRuleContext {
		public TerminalNode LINES() { return getToken(OBParser.LINES, 0); }
		public Line_term_listContext line_term_list() {
			return getRuleContext(Line_term_listContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Line_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLine_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLine_opt(this);
		}
	}

	public final Line_optContext line_opt() throws RecognitionException {
		Line_optContext _localctx = new Line_optContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_line_opt);
		try {
			setState(6678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6675);
				match(LINES);
				setState(6676);
				line_term_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6677);
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_term_listContext extends ParserRuleContext {
		public List<Line_termContext> line_term() {
			return getRuleContexts(Line_termContext.class);
		}
		public Line_termContext line_term(int i) {
			return getRuleContext(Line_termContext.class,i);
		}
		public Line_term_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_term_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLine_term_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLine_term_list(this);
		}
	}

	public final Line_term_listContext line_term_list() throws RecognitionException {
		Line_term_listContext _localctx = new Line_term_listContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_line_term_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6681); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6680);
					line_term();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6683); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,712,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_termContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Text_stringContext text_string() {
			return getRuleContext(Text_stringContext.class,0);
		}
		public TerminalNode STARTING() { return getToken(OBParser.STARTING, 0); }
		public TerminalNode TERMINATED() { return getToken(OBParser.TERMINATED, 0); }
		public Line_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLine_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLine_term(this);
		}
	}

	public final Line_termContext line_term() throws RecognitionException {
		Line_termContext _localctx = new Line_termContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_line_term);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6685);
			_la = _input.LA(1);
			if ( !(_la==STARTING || _la==TERMINATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6686);
			match(BY);
			setState(6687);
			text_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hint_list_with_endContext extends ParserRuleContext {
		public TerminalNode HINT_END() { return getToken(OBParser.HINT_END, 0); }
		public Hint_optionsContext hint_options() {
			return getRuleContext(Hint_optionsContext.class,0);
		}
		public Opt_hint_listContext opt_hint_list() {
			return getRuleContext(Opt_hint_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Hint_list_with_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint_list_with_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHint_list_with_end(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHint_list_with_end(this);
		}
	}

	public final Hint_list_with_endContext hint_list_with_end() throws RecognitionException {
		Hint_list_with_endContext _localctx = new Hint_list_with_endContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_hint_list_with_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(6689);
				hint_options();
				}
				break;
			case 2:
				{
				{
				setState(6690);
				opt_hint_list(0);
				setState(6691);
				match(Comma);
				setState(6692);
				hint_options();
				}
				}
				break;
			}
			setState(6696);
			match(HINT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_hint_listContext extends ParserRuleContext {
		public Hint_optionsContext hint_options() {
			return getRuleContext(Hint_optionsContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Opt_hint_listContext opt_hint_list() {
			return getRuleContext(Opt_hint_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Opt_hint_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_hint_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_hint_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_hint_list(this);
		}
	}

	public final Opt_hint_listContext opt_hint_list() throws RecognitionException {
		return opt_hint_list(0);
	}

	private Opt_hint_listContext opt_hint_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_hint_listContext _localctx = new Opt_hint_listContext(_ctx, _parentState);
		Opt_hint_listContext _prevctx = _localctx;
		int _startState = 754;
		enterRecursionRule(_localctx, 754, RULE_opt_hint_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				setState(6699);
				hint_options();
				}
				break;
			case 2:
				{
				setState(6700);
				empty();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6708);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,715,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_hint_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_hint_list);
					setState(6703);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6704);
					match(Comma);
					setState(6705);
					hint_options();
					}
					} 
				}
				setState(6710);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,715,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Hint_optionsContext extends ParserRuleContext {
		public List<Hint_optionContext> hint_option() {
			return getRuleContexts(Hint_optionContext.class);
		}
		public Hint_optionContext hint_option(int i) {
			return getRuleContext(Hint_optionContext.class,i);
		}
		public Hint_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHint_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHint_options(this);
		}
	}

	public final Hint_optionsContext hint_options() throws RecognitionException {
		Hint_optionsContext _localctx = new Hint_optionsContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_hint_options);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6712); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6711);
					hint_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6714); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,716,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitName_list(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		return name_list(0);
	}

	private Name_listContext name_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Name_listContext _localctx = new Name_listContext(_ctx, _parentState);
		Name_listContext _prevctx = _localctx;
		int _startState = 758;
		enterRecursionRule(_localctx, 758, RULE_name_list, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6717);
			match(NAME_OB);
			}
			_ctx.stop = _input.LT(-1);
			setState(6726);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,718,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Name_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_name_list);
					setState(6719);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6721);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Comma) {
						{
						setState(6720);
						match(Comma);
						}
					}

					setState(6723);
					match(NAME_OB);
					}
					} 
				}
				setState(6728);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,718,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Hint_optionContext extends ParserRuleContext {
		public TerminalNode NO_REWRITE() { return getToken(OBParser.NO_REWRITE, 0); }
		public TerminalNode HOTSPOT() { return getToken(OBParser.HOTSPOT, 0); }
		public TerminalNode ORDERED() { return getToken(OBParser.ORDERED, 0); }
		public TerminalNode USE_HASH_AGGREGATION() { return getToken(OBParser.USE_HASH_AGGREGATION, 0); }
		public TerminalNode NO_USE_HASH_AGGREGATION() { return getToken(OBParser.NO_USE_HASH_AGGREGATION, 0); }
		public TerminalNode NO_USE_JIT() { return getToken(OBParser.NO_USE_JIT, 0); }
		public TerminalNode USE_LATE_MATERIALIZATION() { return getToken(OBParser.USE_LATE_MATERIALIZATION, 0); }
		public TerminalNode NO_USE_LATE_MATERIALIZATION() { return getToken(OBParser.NO_USE_LATE_MATERIALIZATION, 0); }
		public TerminalNode TRACE_LOG() { return getToken(OBParser.TRACE_LOG, 0); }
		public TerminalNode USE_PX() { return getToken(OBParser.USE_PX, 0); }
		public TerminalNode NO_USE_PX() { return getToken(OBParser.NO_USE_PX, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode EOF() { return getToken(OBParser.EOF, 0); }
		public TerminalNode PARSER_SYNTAX_ERROR() { return getToken(OBParser.PARSER_SYNTAX_ERROR, 0); }
		public TerminalNode ENABLE_PARALLEL_DML() { return getToken(OBParser.ENABLE_PARALLEL_DML, 0); }
		public TerminalNode DISABLE_PARALLEL_DML() { return getToken(OBParser.DISABLE_PARALLEL_DML, 0); }
		public TerminalNode NO_PARALLEL() { return getToken(OBParser.NO_PARALLEL, 0); }
		public TerminalNode MONITOR() { return getToken(OBParser.MONITOR, 0); }
		public TerminalNode READ_CONSISTENCY() { return getToken(OBParser.READ_CONSISTENCY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Consistency_levelContext consistency_level() {
			return getRuleContext(Consistency_levelContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode INDEX_HINT() { return getToken(OBParser.INDEX_HINT, 0); }
		public Qb_name_optionContext qb_name_option() {
			return getRuleContext(Qb_name_optionContext.class,0);
		}
		public Relation_factor_in_hintContext relation_factor_in_hint() {
			return getRuleContext(Relation_factor_in_hintContext.class,0);
		}
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode QUERY_TIMEOUT() { return getToken(OBParser.QUERY_TIMEOUT, 0); }
		public TerminalNode FROZEN_VERSION() { return getToken(OBParser.FROZEN_VERSION, 0); }
		public TerminalNode TOPK() { return getToken(OBParser.TOPK, 0); }
		public TerminalNode LOG_LEVEL() { return getToken(OBParser.LOG_LEVEL, 0); }
		public List<TerminalNode> Quote() { return getTokens(OBParser.Quote); }
		public TerminalNode Quote(int i) {
			return getToken(OBParser.Quote, i);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode LEADING_HINT() { return getToken(OBParser.LEADING_HINT, 0); }
		public Relation_factor_in_leading_hint_list_entryContext relation_factor_in_leading_hint_list_entry() {
			return getRuleContext(Relation_factor_in_leading_hint_list_entryContext.class,0);
		}
		public Relation_factor_in_hint_listContext relation_factor_in_hint_list() {
			return getRuleContext(Relation_factor_in_hint_listContext.class,0);
		}
		public TerminalNode FULL_HINT() { return getToken(OBParser.FULL_HINT, 0); }
		public TerminalNode PQ_MAP() { return getToken(OBParser.PQ_MAP, 0); }
		public TerminalNode USE_PLAN_CACHE() { return getToken(OBParser.USE_PLAN_CACHE, 0); }
		public Use_plan_cache_typeContext use_plan_cache_type() {
			return getRuleContext(Use_plan_cache_typeContext.class,0);
		}
		public Relation_factor_in_use_join_hint_listContext relation_factor_in_use_join_hint_list() {
			return getRuleContext(Relation_factor_in_use_join_hint_listContext.class,0);
		}
		public TerminalNode USE_MERGE() { return getToken(OBParser.USE_MERGE, 0); }
		public TerminalNode NO_USE_MERGE() { return getToken(OBParser.NO_USE_MERGE, 0); }
		public TerminalNode USE_HASH() { return getToken(OBParser.USE_HASH, 0); }
		public TerminalNode NO_USE_HASH() { return getToken(OBParser.NO_USE_HASH, 0); }
		public TerminalNode USE_NL() { return getToken(OBParser.USE_NL, 0); }
		public TerminalNode PX_JOIN_FILTER() { return getToken(OBParser.PX_JOIN_FILTER, 0); }
		public TerminalNode NO_PX_JOIN_FILTER() { return getToken(OBParser.NO_PX_JOIN_FILTER, 0); }
		public TerminalNode NO_USE_NL() { return getToken(OBParser.NO_USE_NL, 0); }
		public TerminalNode USE_BNL() { return getToken(OBParser.USE_BNL, 0); }
		public TerminalNode NO_USE_BNL() { return getToken(OBParser.NO_USE_BNL, 0); }
		public TerminalNode USE_NL_MATERIALIZATION() { return getToken(OBParser.USE_NL_MATERIALIZATION, 0); }
		public TerminalNode NO_USE_NL_MATERIALIZATION() { return getToken(OBParser.NO_USE_NL_MATERIALIZATION, 0); }
		public TerminalNode MERGE_HINT() { return getToken(OBParser.MERGE_HINT, 0); }
		public TerminalNode NO_MERGE_HINT() { return getToken(OBParser.NO_MERGE_HINT, 0); }
		public TerminalNode NO_EXPAND() { return getToken(OBParser.NO_EXPAND, 0); }
		public TerminalNode USE_CONCAT() { return getToken(OBParser.USE_CONCAT, 0); }
		public TerminalNode UNNEST() { return getToken(OBParser.UNNEST, 0); }
		public TerminalNode NO_UNNEST() { return getToken(OBParser.NO_UNNEST, 0); }
		public TerminalNode PLACE_GROUP_BY() { return getToken(OBParser.PLACE_GROUP_BY, 0); }
		public TerminalNode NO_PLACE_GROUP_BY() { return getToken(OBParser.NO_PLACE_GROUP_BY, 0); }
		public TerminalNode NO_PRED_DEDUCE() { return getToken(OBParser.NO_PRED_DEDUCE, 0); }
		public TerminalNode INLINE() { return getToken(OBParser.INLINE, 0); }
		public TerminalNode MATERIALIZE() { return getToken(OBParser.MATERIALIZE, 0); }
		public TerminalNode USE_JIT() { return getToken(OBParser.USE_JIT, 0); }
		public Use_jit_typeContext use_jit_type() {
			return getRuleContext(Use_jit_typeContext.class,0);
		}
		public Tracing_num_listContext tracing_num_list() {
			return getRuleContext(Tracing_num_listContext.class,0);
		}
		public TerminalNode STAT() { return getToken(OBParser.STAT, 0); }
		public TerminalNode TRACING() { return getToken(OBParser.TRACING, 0); }
		public TerminalNode DOP() { return getToken(OBParser.DOP, 0); }
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode TRANS_PARAM() { return getToken(OBParser.TRANS_PARAM, 0); }
		public Trans_param_nameContext trans_param_name() {
			return getRuleContext(Trans_param_nameContext.class,0);
		}
		public Trans_param_valueContext trans_param_value() {
			return getRuleContext(Trans_param_valueContext.class,0);
		}
		public TerminalNode FORCE_REFRESH_LOCATION_CACHE() { return getToken(OBParser.FORCE_REFRESH_LOCATION_CACHE, 0); }
		public TerminalNode QB_NAME() { return getToken(OBParser.QB_NAME, 0); }
		public TerminalNode MAX_CONCURRENT() { return getToken(OBParser.MAX_CONCURRENT, 0); }
		public TerminalNode PARALLEL() { return getToken(OBParser.PARALLEL, 0); }
		public TerminalNode LOAD_BATCH_SIZE() { return getToken(OBParser.LOAD_BATCH_SIZE, 0); }
		public TerminalNode PQ_DISTRIBUTE() { return getToken(OBParser.PQ_DISTRIBUTE, 0); }
		public Relation_factor_in_pq_hintContext relation_factor_in_pq_hint() {
			return getRuleContext(Relation_factor_in_pq_hintContext.class,0);
		}
		public List<Distribute_methodContext> distribute_method() {
			return getRuleContexts(Distribute_methodContext.class);
		}
		public Distribute_methodContext distribute_method(int i) {
			return getRuleContext(Distribute_methodContext.class,i);
		}
		public Hint_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHint_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHint_option(this);
		}
	}

	public final Hint_optionContext hint_option() throws RecognitionException {
		Hint_optionContext _localctx = new Hint_optionContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_hint_option);
		int _la;
		try {
			setState(6847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6729);
				_la = _input.LA(1);
				if ( !(_la==EOF || _la==DISABLE_PARALLEL_DML || _la==ENABLE_PARALLEL_DML || _la==NO_PARALLEL || _la==MONITOR || ((((_la - 1147)) & ~0x3f) == 0 && ((1L << (_la - 1147)) & ((1L << (PARSER_SYNTAX_ERROR - 1147)) | (1L << (NAME_OB - 1147)) | (1L << (NO_REWRITE - 1147)) | (1L << (HOTSPOT - 1147)) | (1L << (ORDERED - 1147)) | (1L << (USE_HASH_AGGREGATION - 1147)) | (1L << (NO_USE_HASH_AGGREGATION - 1147)) | (1L << (NO_USE_JIT - 1147)) | (1L << (USE_LATE_MATERIALIZATION - 1147)) | (1L << (NO_USE_LATE_MATERIALIZATION - 1147)) | (1L << (TRACE_LOG - 1147)) | (1L << (USE_PX - 1147)) | (1L << (NO_USE_PX - 1147)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6730);
				match(READ_CONSISTENCY);
				setState(6731);
				match(LeftParen);
				setState(6732);
				consistency_level();
				setState(6733);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6735);
				match(INDEX_HINT);
				setState(6736);
				match(LeftParen);
				setState(6737);
				qb_name_option();
				setState(6738);
				relation_factor_in_hint();
				setState(6739);
				match(NAME_OB);
				setState(6740);
				match(RightParen);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6742);
				_la = _input.LA(1);
				if ( !(_la==QUERY_TIMEOUT || _la==FROZEN_VERSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6743);
				match(LeftParen);
				setState(6744);
				match(INTNUM);
				setState(6745);
				match(RightParen);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6746);
				match(TOPK);
				setState(6747);
				match(LeftParen);
				setState(6748);
				match(INTNUM);
				setState(6749);
				match(INTNUM);
				setState(6750);
				match(RightParen);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6751);
				match(LOG_LEVEL);
				setState(6752);
				match(LeftParen);
				setState(6753);
				match(NAME_OB);
				setState(6754);
				match(RightParen);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6755);
				match(LOG_LEVEL);
				setState(6756);
				match(LeftParen);
				setState(6757);
				match(Quote);
				setState(6758);
				match(STRING_VALUE);
				setState(6759);
				match(Quote);
				setState(6760);
				match(RightParen);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6761);
				match(LEADING_HINT);
				setState(6762);
				match(LeftParen);
				setState(6763);
				qb_name_option();
				setState(6764);
				relation_factor_in_leading_hint_list_entry();
				setState(6765);
				match(RightParen);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6767);
				match(LEADING_HINT);
				setState(6768);
				match(LeftParen);
				setState(6769);
				qb_name_option();
				setState(6770);
				relation_factor_in_hint_list();
				setState(6771);
				match(RightParen);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6773);
				_la = _input.LA(1);
				if ( !(_la==PQ_MAP || _la==FULL_HINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6774);
				match(LeftParen);
				setState(6775);
				qb_name_option();
				setState(6776);
				relation_factor_in_hint();
				setState(6777);
				match(RightParen);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6779);
				match(USE_PLAN_CACHE);
				setState(6780);
				match(LeftParen);
				setState(6781);
				use_plan_cache_type();
				setState(6782);
				match(RightParen);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6784);
				_la = _input.LA(1);
				if ( !(_la==NO_PX_JOIN_FILTER || ((((_la - 1216)) & ~0x3f) == 0 && ((1L << (_la - 1216)) & ((1L << (USE_MERGE - 1216)) | (1L << (NO_USE_MERGE - 1216)) | (1L << (USE_HASH - 1216)) | (1L << (NO_USE_HASH - 1216)) | (1L << (USE_NL - 1216)) | (1L << (PX_JOIN_FILTER - 1216)) | (1L << (NO_USE_NL - 1216)) | (1L << (USE_BNL - 1216)) | (1L << (NO_USE_BNL - 1216)) | (1L << (USE_NL_MATERIALIZATION - 1216)) | (1L << (NO_USE_NL_MATERIALIZATION - 1216)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6785);
				match(LeftParen);
				setState(6786);
				qb_name_option();
				setState(6787);
				relation_factor_in_use_join_hint_list(0);
				setState(6788);
				match(RightParen);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6790);
				_la = _input.LA(1);
				if ( !(_la==MATERIALIZE || _la==INLINE || ((((_la - 1227)) & ~0x3f) == 0 && ((1L << (_la - 1227)) & ((1L << (MERGE_HINT - 1227)) | (1L << (NO_MERGE_HINT - 1227)) | (1L << (NO_EXPAND - 1227)) | (1L << (USE_CONCAT - 1227)) | (1L << (UNNEST - 1227)) | (1L << (NO_UNNEST - 1227)) | (1L << (PLACE_GROUP_BY - 1227)) | (1L << (NO_PLACE_GROUP_BY - 1227)) | (1L << (NO_PRED_DEDUCE - 1227)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(6791);
					match(LeftParen);
					setState(6792);
					qb_name_option();
					setState(6793);
					match(RightParen);
					}
					break;
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6797);
				match(USE_JIT);
				setState(6798);
				match(LeftParen);
				setState(6799);
				use_jit_type();
				setState(6800);
				match(RightParen);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6802);
				_la = _input.LA(1);
				if ( !(_la==TRACING || _la==STAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6803);
				match(LeftParen);
				setState(6804);
				tracing_num_list();
				setState(6805);
				match(RightParen);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6807);
				match(DOP);
				setState(6808);
				match(LeftParen);
				setState(6809);
				match(INTNUM);
				setState(6810);
				match(Comma);
				setState(6811);
				match(INTNUM);
				setState(6812);
				match(RightParen);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6813);
				match(TRANS_PARAM);
				setState(6814);
				match(LeftParen);
				setState(6815);
				trans_param_name();
				setState(6817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Comma) {
					{
					setState(6816);
					match(Comma);
					}
				}

				setState(6819);
				trans_param_value();
				setState(6820);
				match(RightParen);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6822);
				match(FORCE_REFRESH_LOCATION_CACHE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6823);
				match(QB_NAME);
				setState(6824);
				match(LeftParen);
				setState(6825);
				match(NAME_OB);
				setState(6826);
				match(RightParen);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6827);
				_la = _input.LA(1);
				if ( !(_la==PARALLEL || _la==MAX_CONCURRENT || _la==LOAD_BATCH_SIZE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6828);
				match(LeftParen);
				setState(6829);
				match(INTNUM);
				setState(6830);
				match(RightParen);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6831);
				match(PQ_DISTRIBUTE);
				setState(6832);
				match(LeftParen);
				setState(6833);
				qb_name_option();
				setState(6834);
				relation_factor_in_pq_hint();
				setState(6836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Comma) {
					{
					setState(6835);
					match(Comma);
					}
				}

				setState(6838);
				distribute_method();
				setState(6843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (LOCAL - 218)) | (1L << (PARTITION - 218)) | (1L << (RANGE - 218)))) != 0) || _la==HASH || _la==BC2HOST || _la==NONE || _la==RANDOM || _la==BASIC || _la==Comma || ((((_la - 1244)) & ~0x3f) == 0 && ((1L << (_la - 1244)) & ((1L << (RANDOM_LOCAL - 1244)) | (1L << (BROADCAST - 1244)) | (1L << (LIST - 1244)))) != 0)) {
					{
					setState(6840);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Comma) {
						{
						setState(6839);
						match(Comma);
						}
					}

					setState(6842);
					distribute_method();
					}
				}

				setState(6845);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Consistency_levelContext extends ParserRuleContext {
		public TerminalNode WEAK() { return getToken(OBParser.WEAK, 0); }
		public TerminalNode STRONG() { return getToken(OBParser.STRONG, 0); }
		public TerminalNode FROZEN() { return getToken(OBParser.FROZEN, 0); }
		public Consistency_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consistency_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterConsistency_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitConsistency_level(this);
		}
	}

	public final Consistency_levelContext consistency_level() throws RecognitionException {
		Consistency_levelContext _localctx = new Consistency_levelContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_consistency_level);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6849);
			_la = _input.LA(1);
			if ( !(((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (STRONG - 365)) | (1L << (WEAK - 365)) | (1L << (FROZEN - 365)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_plan_cache_typeContext extends ParserRuleContext {
		public TerminalNode NONE() { return getToken(OBParser.NONE, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Use_plan_cache_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_plan_cache_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUse_plan_cache_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUse_plan_cache_type(this);
		}
	}

	public final Use_plan_cache_typeContext use_plan_cache_type() throws RecognitionException {
		Use_plan_cache_typeContext _localctx = new Use_plan_cache_typeContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_use_plan_cache_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6851);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==NONE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_jit_typeContext extends ParserRuleContext {
		public TerminalNode AUTO() { return getToken(OBParser.AUTO, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public Use_jit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_jit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUse_jit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUse_jit_type(this);
		}
	}

	public final Use_jit_typeContext use_jit_type() throws RecognitionException {
		Use_jit_typeContext _localctx = new Use_jit_typeContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_use_jit_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6853);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==AUTO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distribute_methodContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode NONE() { return getToken(OBParser.NONE, 0); }
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode RANDOM() { return getToken(OBParser.RANDOM, 0); }
		public TerminalNode RANDOM_LOCAL() { return getToken(OBParser.RANDOM_LOCAL, 0); }
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public TerminalNode BROADCAST() { return getToken(OBParser.BROADCAST, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode BC2HOST() { return getToken(OBParser.BC2HOST, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(OBParser.LIST, 0); }
		public TerminalNode BASIC() { return getToken(OBParser.BASIC, 0); }
		public Distribute_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distribute_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDistribute_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDistribute_method(this);
		}
	}

	public final Distribute_methodContext distribute_method() throws RecognitionException {
		Distribute_methodContext _localctx = new Distribute_methodContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_distribute_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6855);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (LOCAL - 218)) | (1L << (PARTITION - 218)) | (1L << (RANGE - 218)))) != 0) || _la==HASH || _la==BC2HOST || _la==NONE || _la==RANDOM || _la==BASIC || ((((_la - 1244)) & ~0x3f) == 0 && ((1L << (_la - 1244)) & ((1L << (RANDOM_LOCAL - 1244)) | (1L << (BROADCAST - 1244)) | (1L << (LIST - 1244)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_exprContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(OBParser.QUESTIONMARK, 0); }
		public Column_refContext column_ref() {
			return getRuleContext(Column_refContext.class,0);
		}
		public Limit_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLimit_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLimit_expr(this);
		}
	}

	public final Limit_exprContext limit_expr() throws RecognitionException {
		Limit_exprContext _localctx = new Limit_exprContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_limit_expr);
		try {
			setState(6860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTNUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6857);
				match(INTNUM);
				}
				break;
			case QUESTIONMARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(6858);
				match(QUESTIONMARK);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case ACCESSIBLE:
			case ADD:
			case AGAINST:
			case ALTER:
			case ALWAYS:
			case AND:
			case ANALYZE:
			case NAMESPACE:
			case AS:
			case ASENSITIVE:
			case ASC:
			case BETWEEN:
			case BEFORE:
			case BIGINT:
			case BINARY:
			case BLOB:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CHANGE:
			case CHARACTER:
			case CHECK:
			case CIPHER:
			case CONDITION:
			case CONSTRAINT:
			case CONTINUE:
			case CONVERT:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case LS:
			case CREATE:
			case CROSS:
			case CYCLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case DAY_HOUR:
			case DAY_MICROSECOND:
			case DAY_MINUTE:
			case DAY_SECOND:
			case DATABASE:
			case DATABASES:
			case NUMBER:
			case DECIMAL:
			case DECLARE:
			case ROWID:
			case DEFAULT:
			case DELAYED:
			case DELETE:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case DESC:
			case DESCRIBE:
			case DETERMINISTIC:
			case DIV:
			case DISTINCTROW:
			case DOUBLE:
			case DROP:
			case DUAL:
			case EACH:
			case ENCLOSED:
			case ELSE:
			case ELSEIF:
			case ESCAPED:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case FETCH:
			case FIELDS:
			case FOREIGN:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case FOR:
			case FORCE:
			case FULL:
			case FULLTEXT:
			case GET:
			case GENERATED:
			case GRANT:
			case GROUP:
			case HAVING:
			case HIGH_PRIORITY:
			case HOUR_MICROSECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case ID:
			case IF:
			case IN:
			case INDEX:
			case INNER:
			case INFILE:
			case INOUT:
			case INCLUDING:
			case INSENSITIVE:
			case INTEGER:
			case INT1:
			case INT2:
			case INT3:
			case LIB:
			case INT4:
			case INT8:
			case INTERVAL:
			case INSERT:
			case ORDINALITY:
			case INTO:
			case IO_AFTER_GTIDS:
			case IO_BEFORE_GTIDS:
			case IS:
			case ISSUER:
			case ITERATE:
			case JOIN:
			case KEY:
			case KEYS:
			case KILL:
			case LANGUAGE:
			case LEAVE:
			case LEFT:
			case LIMIT:
			case LIKE:
			case LINEAR:
			case LINES:
			case BISON_LIST:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LONG:
			case UNLIMITED:
			case LONGBLOB:
			case LONGTEXT:
			case LOOP:
			case LOW_PRIORITY:
			case MASTER_BIND:
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MATCH:
			case MAXVALUE:
			case MEDIUMBLOB:
			case MEDIUMINT:
			case MERGE:
			case MEDIUMTEXT:
			case MIDDLEINT:
			case MINUTE_MICROSECOND:
			case MINUTE_SECOND:
			case MOD:
			case MODE:
			case MODIFIES:
			case NATURAL:
			case NO_WRITE_TO_BINLOG:
			case ON:
			case OPTION:
			case OPTIMIZE:
			case OPTIONALLY:
			case OR:
			case ORDER:
			case OUT:
			case IOPS_WEIGHT:
			case OUTER:
			case OUTFILE:
			case PARSER:
			case PROCEDURE:
			case MIN_MAX:
			case PURGE:
			case PARTITION:
			case PRECISION:
			case PRIMARY:
			case PUBLIC:
			case RANGE:
			case READ:
			case READ_WRITE:
			case READS:
			case REAL:
			case RELEASE:
			case REFERENCES:
			case REGEXP:
			case RENAME:
			case REPLACE:
			case REPEAT:
			case REQUIRE:
			case RESIGNAL:
			case RESTRICT:
			case RETURN:
			case REVOKE:
			case RIGHT:
			case ROWS:
			case SECOND_MICROSECOND:
			case SCHEMA:
			case SCHEMAS:
			case SEPARATOR:
			case SET:
			case REJECT:
			case SENSITIVE:
			case SHOW:
			case SIGNAL:
			case SMALLINT:
			case SPATIAL:
			case SPECIFIC:
			case SQL:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQL_BIG_RESULT:
			case SQL_SMALL_RESULT:
			case SSL:
			case STARTING:
			case NUMERIC:
			case STORED:
			case PLUS:
			case STRAIGHT_JOIN:
			case SUBJECT:
			case SYSDATE:
			case TERMINATED:
			case TEXT:
			case TINYBLOB:
			case TINYINT:
			case TINYTEXT:
			case TABLE:
			case THEN:
			case TO:
			case TRIGGER:
			case UNDO:
			case CALIBRATION:
			case UNION:
			case UNLOCK:
			case LINE_DELIMITER:
			case UNSIGNED:
			case UPDATE:
			case USAGE:
			case GEOMCOLLECTION:
			case USE:
			case USING:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case VALUES:
			case QUERY_RESPONSE_TIME:
			case VARBINARY:
			case VARCHAR:
			case VARYING:
			case VIRTUAL:
			case WHERE:
			case REDUNDANCY:
			case WHILE:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case WITH:
			case WRITE:
			case XOR:
			case X509:
			case YEAR_MONTH:
			case ZEROFILL:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case NOT:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case IGNORE:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case VARCHARACTER:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case RLIKE:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case CHAR:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case INT:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case Dot:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(6859);
				column_ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public Opt_for_update_waitContext opt_for_update_wait() {
			return getRuleContext(Opt_for_update_waitContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_for_update_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6862);
			match(FOR);
			setState(6863);
			match(UPDATE);
			setState(6864);
			opt_for_update_wait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_lock_in_share_modeContext extends ParserRuleContext {
		public TerminalNode LOCK_() { return getToken(OBParser.LOCK_, 0); }
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(OBParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(OBParser.MODE, 0); }
		public Opt_lock_in_share_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_lock_in_share_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_lock_in_share_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_lock_in_share_mode(this);
		}
	}

	public final Opt_lock_in_share_modeContext opt_lock_in_share_mode() throws RecognitionException {
		Opt_lock_in_share_modeContext _localctx = new Opt_lock_in_share_modeContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_opt_lock_in_share_mode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6866);
			match(LOCK_);
			setState(6867);
			match(IN);
			setState(6868);
			match(SHARE);
			setState(6869);
			match(MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_update_waitContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(OBParser.WAIT, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode NOWAIT() { return getToken(OBParser.NOWAIT, 0); }
		public TerminalNode NO_WAIT() { return getToken(OBParser.NO_WAIT, 0); }
		public Opt_for_update_waitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_update_wait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_for_update_wait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_for_update_wait(this);
		}
	}

	public final Opt_for_update_waitContext opt_for_update_wait() throws RecognitionException {
		Opt_for_update_waitContext _localctx = new Opt_for_update_waitContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_opt_for_update_wait);
		try {
			setState(6878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6871);
				empty();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6872);
				match(WAIT);
				setState(6873);
				match(DECIMAL_VAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6874);
				match(WAIT);
				setState(6875);
				match(INTNUM);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6876);
				match(NOWAIT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6877);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterized_trimContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode BOTH() { return getToken(OBParser.BOTH, 0); }
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(OBParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(OBParser.TRAILING, 0); }
		public Parameterized_trimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterized_trim; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterParameterized_trim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitParameterized_trim(this);
		}
	}

	public final Parameterized_trimContext parameterized_trim() throws RecognitionException {
		Parameterized_trimContext _localctx = new Parameterized_trimContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_parameterized_trim);
		int _la;
		try {
			setState(6898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BOTH) {
					{
					setState(6880);
					match(BOTH);
					setState(6881);
					match(FROM);
					}
				}

				setState(6884);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BOTH) {
					{
					setState(6885);
					match(BOTH);
					}
				}

				setState(6888);
				expr(0);
				setState(6889);
				match(FROM);
				setState(6890);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6892);
				_la = _input.LA(1);
				if ( !(_la==LEADING || _la==TRAILING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnderlineUTF8MB3) | (1L << UnderlineASCII) | (1L << UnderlineTIS620) | (1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (LeftBracket - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (ACCESSIBLE - 64)) | (1L << (ADD - 64)) | (1L << (AGAINST - 64)) | (1L << (ALTER - 64)) | (1L << (ALWAYS - 64)) | (1L << (AND - 64)) | (1L << (ANALYZE - 64)) | (1L << (NAMESPACE - 64)) | (1L << (AS - 64)) | (1L << (ASENSITIVE - 64)) | (1L << (ASC - 64)) | (1L << (BETWEEN - 64)) | (1L << (BEFORE - 64)) | (1L << (BIGINT - 64)) | (1L << (BINARY - 64)) | (1L << (BLOB - 64)) | (1L << (BY - 64)) | (1L << (CALL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHECK - 64)) | (1L << (CIPHER - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (COLLATE - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CYCLE - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (DAY_HOUR - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DAY_MICROSECOND - 128)) | (1L << (DAY_MINUTE - 128)) | (1L << (DAY_SECOND - 128)) | (1L << (DATABASE - 128)) | (1L << (DATABASES - 128)) | (1L << (NUMBER - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (ROWID - 128)) | (1L << (DEFAULT - 128)) | (1L << (DELAYED - 128)) | (1L << (DELETE - 128)) | (1L << (SYNCHRONOUS - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIV - 128)) | (1L << (DISTINCTROW - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DUAL - 128)) | (1L << (EACH - 128)) | (1L << (ENCLOSED - 128)) | (1L << (ELSE - 128)) | (1L << (ELSEIF - 128)) | (1L << (ESCAPED - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FOREIGN - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOAT4 - 128)) | (1L << (FLOAT8 - 128)) | (1L << (FOR - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FULLTEXT - 128)) | (1L << (GET - 128)) | (1L << (GENERATED - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (HAVING - 128)) | (1L << (HIGH_PRIORITY - 128)) | (1L << (HOUR_MICROSECOND - 128)) | (1L << (HOUR_MINUTE - 128)) | (1L << (HOUR_SECOND - 128)) | (1L << (ID - 128)) | (1L << (IF - 128)) | (1L << (IN - 128)) | (1L << (INDEX - 128)) | (1L << (INNER - 128)) | (1L << (INFILE - 128)) | (1L << (INOUT - 128)) | (1L << (INCLUDING - 128)) | (1L << (INSENSITIVE - 128)) | (1L << (INTEGER - 128)) | (1L << (INT1 - 128)) | (1L << (INT2 - 128)) | (1L << (INT3 - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LIB - 192)) | (1L << (INT4 - 192)) | (1L << (INT8 - 192)) | (1L << (INTERVAL - 192)) | (1L << (INSERT - 192)) | (1L << (ORDINALITY - 192)) | (1L << (INTO - 192)) | (1L << (IO_AFTER_GTIDS - 192)) | (1L << (IO_BEFORE_GTIDS - 192)) | (1L << (IS - 192)) | (1L << (ISSUER - 192)) | (1L << (ITERATE - 192)) | (1L << (JOIN - 192)) | (1L << (KEY - 192)) | (1L << (KEYS - 192)) | (1L << (KILL - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LEAVE - 192)) | (1L << (LEFT - 192)) | (1L << (LIMIT - 192)) | (1L << (LIKE - 192)) | (1L << (LINEAR - 192)) | (1L << (LINES - 192)) | (1L << (BISON_LIST - 192)) | (1L << (LOAD - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCALTIME - 192)) | (1L << (LOCALTIMESTAMP - 192)) | (1L << (LONG - 192)) | (1L << (UNLIMITED - 192)) | (1L << (LONGBLOB - 192)) | (1L << (LONGTEXT - 192)) | (1L << (LOOP - 192)) | (1L << (LOW_PRIORITY - 192)) | (1L << (MASTER_BIND - 192)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 192)) | (1L << (MATCH - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEDIUMBLOB - 192)) | (1L << (MEDIUMINT - 192)) | (1L << (MERGE - 192)) | (1L << (MEDIUMTEXT - 192)) | (1L << (MIDDLEINT - 192)) | (1L << (MINUTE_MICROSECOND - 192)) | (1L << (MINUTE_SECOND - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODIFIES - 192)) | (1L << (NATURAL - 192)) | (1L << (NO_WRITE_TO_BINLOG - 192)) | (1L << (ON - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIMIZE - 192)) | (1L << (OPTIONALLY - 192)) | (1L << (OR - 192)) | (1L << (ORDER - 192)) | (1L << (OUT - 192)) | (1L << (IOPS_WEIGHT - 192)) | (1L << (OUTER - 192)) | (1L << (OUTFILE - 192)) | (1L << (PARSER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (PROCEDURE - 256)) | (1L << (MIN_MAX - 256)) | (1L << (PURGE - 256)) | (1L << (PARTITION - 256)) | (1L << (PRECISION - 256)) | (1L << (PRIMARY - 256)) | (1L << (PUBLIC - 256)) | (1L << (RANGE - 256)) | (1L << (READ - 256)) | (1L << (READ_WRITE - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RELEASE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REGEXP - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (REPEAT - 256)) | (1L << (REQUIRE - 256)) | (1L << (RESIGNAL - 256)) | (1L << (RESTRICT - 256)) | (1L << (RETURN - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROWS - 256)) | (1L << (SECOND_MICROSECOND - 256)) | (1L << (SCHEMA - 256)) | (1L << (SCHEMAS - 256)) | (1L << (SEPARATOR - 256)) | (1L << (SET - 256)) | (1L << (REJECT - 256)) | (1L << (SENSITIVE - 256)) | (1L << (SHOW - 256)) | (1L << (SIGNAL - 256)) | (1L << (SMALLINT - 256)) | (1L << (SPATIAL - 256)) | (1L << (SPECIFIC - 256)) | (1L << (SQL - 256)) | (1L << (SQLEXCEPTION - 256)) | (1L << (SQLSTATE - 256)) | (1L << (SQLWARNING - 256)) | (1L << (SQL_BIG_RESULT - 256)) | (1L << (SQL_SMALL_RESULT - 256)) | (1L << (SSL - 256)) | (1L << (STARTING - 256)) | (1L << (NUMERIC - 256)) | (1L << (STORED - 256)) | (1L << (PLUS - 256)) | (1L << (STRAIGHT_JOIN - 256)) | (1L << (SUBJECT - 256)) | (1L << (SYSDATE - 256)) | (1L << (TERMINATED - 256)) | (1L << (TEXT - 256)) | (1L << (TINYBLOB - 256)) | (1L << (TINYINT - 256)) | (1L << (TINYTEXT - 256)) | (1L << (TABLE - 256)) | (1L << (THEN - 256)) | (1L << (TO - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (TRIGGER - 320)) | (1L << (UNDO - 320)) | (1L << (CALIBRATION - 320)) | (1L << (UNION - 320)) | (1L << (UNLOCK - 320)) | (1L << (LINE_DELIMITER - 320)) | (1L << (UNSIGNED - 320)) | (1L << (UPDATE - 320)) | (1L << (USAGE - 320)) | (1L << (GEOMCOLLECTION - 320)) | (1L << (USE - 320)) | (1L << (USING - 320)) | (1L << (UTC_DATE - 320)) | (1L << (UTC_TIME - 320)) | (1L << (UTC_TIMESTAMP - 320)) | (1L << (VALUES - 320)) | (1L << (QUERY_RESPONSE_TIME - 320)) | (1L << (VARBINARY - 320)) | (1L << (VARCHAR - 320)) | (1L << (VARYING - 320)) | (1L << (VIRTUAL - 320)) | (1L << (WHERE - 320)) | (1L << (REDUNDANCY - 320)) | (1L << (WHILE - 320)) | (1L << (CALIBRATION_INFO - 320)) | (1L << (SCN - 320)) | (1L << (WINDOW - 320)) | (1L << (WITH - 320)) | (1L << (WRITE - 320)) | (1L << (XOR - 320)) | (1L << (X509 - 320)) | (1L << (YEAR_MONTH - 320)) | (1L << (ZEROFILL - 320)) | (1L << (GLOBAL_ALIAS - 320)) | (1L << (SESSION_ALIAS - 320)) | (1L << (UnderlineUTF8 - 320)) | (1L << (UnderlineUTF8MB4 - 320)) | (1L << (UnderlineGBK - 320)) | (1L << (UnderlineGB18030 - 320)) | (1L << (UnderlineBINARY - 320)) | (1L << (UnderlineUTF16 - 320)) | (1L << (UnderlineLATIN1 - 320)) | (1L << (UnderlineGB18030_2022 - 320)) | (1L << (STRONG - 320)) | (1L << (WEAK - 320)) | (1L << (CONNECT - 320)) | (1L << (FROZEN - 320)) | (1L << (EXCEPT - 320)) | (1L << (MINUS - 320)) | (1L << (INTERSECT - 320)) | (1L << (ISNULL - 320)) | (1L << (NOT - 320)) | (1L << (NULLX - 320)) | (1L << (INTNUM - 320)) | (1L << (AUDIT - 320)) | (1L << (WARNINGS - 320)) | (1L << (FORMAT - 320)) | (1L << (MINVALUE - 320)) | (1L << (EMPTY_FIELD_AS_NULL - 320)) | (1L << (UNINSTALL - 320)) | (1L << (UNDOFILE - 320)) | (1L << (MASTER_SSL_CA - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (YEAR - 384)) | (1L << (DISCONNECT - 384)) | (1L << (STOP - 384)) | (1L << (SIZE - 384)) | (1L << (AT - 384)) | (1L << (RELAY_LOG_POS - 384)) | (1L << (POOL - 384)) | (1L << (CURDATE - 384)) | (1L << (JSON_VALUE - 384)) | (1L << (ZONE_TYPE - 384)) | (1L << (LOCATION - 384)) | (1L << (WEIGHT_STRING - 384)) | (1L << (CHANGED - 384)) | (1L << (MASTER_SSL_CAPATH - 384)) | (1L << (NTH_VALUE - 384)) | (1L << (SERIAL - 384)) | (1L << (PROGRESSIVE_MERGE_NUM - 384)) | (1L << (QUEUE_TIME - 384)) | (1L << (TABLET_MAX_SIZE - 384)) | (1L << (ILOGCACHE - 384)) | (1L << (AUTHORS - 384)) | (1L << (MIGRATE - 384)) | (1L << (CONSISTENT - 384)) | (1L << (SUSPEND - 384)) | (1L << (REMOTE_OSS - 384)) | (1L << (SECURITY - 384)) | (1L << (SET_SLAVE_CLUSTER - 384)) | (1L << (FAST - 384)) | (1L << (PREVIEW - 384)) | (1L << (BANDWIDTH - 384)) | (1L << (TRUNCATE - 384)) | (1L << (BACKUP_BACKUP_DEST - 384)) | (1L << (CONSTRAINT_SCHEMA - 384)) | (1L << (STATEMENT - 384)) | (1L << (MASTER_SSL_CERT - 384)) | (1L << (TABLE_NAME - 384)) | (1L << (PRIORITY - 384)) | (1L << (DO - 384)) | (1L << (MASTER_RETRY_COUNT - 384)) | (1L << (REPLICA - 384)) | (1L << (RECOVERY - 384)) | (1L << (OLD_KEY - 384)) | (1L << (DISABLE - 384)) | (1L << (PORT - 384)) | (1L << (REBUILD - 384)) | (1L << (FOLLOWER - 384)) | (1L << (ROOT - 384)) | (1L << (REDOFILE - 384)) | (1L << (MASTER_SERVER_ID - 384)) | (1L << (NCHAR - 384)) | (1L << (KEY_BLOCK_SIZE - 384)) | (1L << (SEQUENCE - 384)) | (1L << (MIGRATION - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (ROW_NUMBER - 384)) | (1L << (COMPRESSION - 384)) | (1L << (BIT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (UNLOCKED - 448)) | (1L << (CLASS_ORIGIN - 448)) | (1L << (STATEMENTS - 448)) | (1L << (ACTION - 448)) | (1L << (REDUNDANT - 448)) | (1L << (UPGRADE - 448)) | (1L << (VALIDATE - 448)) | (1L << (START - 448)) | (1L << (TEMPTABLE - 448)) | (1L << (RECYCLEBIN - 448)) | (1L << (PROFILES - 448)) | (1L << (TIMESTAMP_VALUE - 448)) | (1L << (ERRORS - 448)) | (1L << (LEAVES - 448)) | (1L << (UNDEFINED - 448)) | (1L << (EVERY - 448)) | (1L << (SHARDING - 448)) | (1L << (BYTE - 448)) | (1L << (FLUSH - 448)) | (1L << (MIN_ROWS - 448)) | (1L << (ERROR_P - 448)) | (1L << (MAX_USER_CONNECTIONS - 448)) | (1L << (MAX_CPU - 448)) | (1L << (LOCKED - 448)) | (1L << (IO - 448)) | (1L << (BTREE - 448)) | (1L << (SLOT_IDX - 448)) | (1L << (APPROXNUM - 448)) | (1L << (HASH - 448)) | (1L << (ROTATE - 448)) | (1L << (COLLATION - 448)) | (1L << (MASTER - 448)) | (1L << (ENCRYPTION - 448)) | (1L << (MAX - 448)) | (1L << (TRANSACTION - 448)) | (1L << (SQL_TSI_MONTH - 448)) | (1L << (ARBITRATION - 448)) | (1L << (IGNORE - 448)) | (1L << (MAX_QUERIES_PER_HOUR - 448)) | (1L << (COMMENT - 448)) | (1L << (CTX_ID - 448)) | (1L << (MIN_IOPS - 448)) | (1L << (NVARCHAR - 448)) | (1L << (OFF - 448)) | (1L << (BIT_XOR - 448)) | (1L << (PAUSE - 448)) | (1L << (QUICK - 448)) | (1L << (PRETTY - 448)) | (1L << (DUPLICATE - 448)) | (1L << (WAIT - 448)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 448)) | (1L << (DES_KEY_FILE - 448)) | (1L << (ENGINES - 448)) | (1L << (RETURNS - 448)) | (1L << (MASTER_USER - 448)) | (1L << (SOCKET - 448)) | (1L << (MASTER_DELAY - 448)) | (1L << (FILE_ID - 448)) | (1L << (FIRST - 448)) | (1L << (TABLET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CLIENT - 512)) | (1L << (ENGINE_ - 512)) | (1L << (EXCLUDING - 512)) | (1L << (TABLES - 512)) | (1L << (TRADITIONAL - 512)) | (1L << (BOOTSTRAP - 512)) | (1L << (STDDEV - 512)) | (1L << (DATAFILE - 512)) | (1L << (VARCHARACTER - 512)) | (1L << (INVOKER - 512)) | (1L << (DEPTH - 512)) | (1L << (NORMAL - 512)) | (1L << (LN - 512)) | (1L << (COLUMN_NAME - 512)) | (1L << (TRIGGERS - 512)) | (1L << (RESET - 512)) | (1L << (EVENT - 512)) | (1L << (COALESCE - 512)) | (1L << (RESPECT - 512)) | (1L << (STATUS - 512)) | (1L << (AUTO_INCREMENT_MODE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (WRAPPER - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (PARTITIONS - 512)) | (1L << (SUBSTR - 512)) | (1L << (CHUNK - 512)) | (1L << (FILEX - 512)) | (1L << (BACKUPSET - 512)) | (1L << (UNIT - 512)) | (1L << (NATIONAL_LITERAL - 512)) | (1L << (PRIVILEGES - 512)) | (1L << (DEMAND - 512)) | (1L << (BACKUPPIECE - 512)) | (1L << (LESS - 512)) | (1L << (SWITCH - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (REDO_BUFFER_SIZE - 512)) | (1L << (NO - 512)) | (1L << (MAJOR - 512)) | (1L << (ACTIVE - 512)) | (1L << (ROUTINE - 512)) | (1L << (FOLLOWING - 512)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 512)) | (1L << (LOB_INROW_THRESHOLD - 512)) | (1L << (SCHEMA_ID - 512)) | (1L << (LATERAL - 512)) | (1L << (ROLLBACK - 512)) | (1L << (READ_ONLY - 512)) | (1L << (MEMBER - 512)) | (1L << (PARTITION_ID - 512)) | (1L << (DUMP - 512)) | (1L << (EXTERNAL - 512)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 512)) | (1L << (GROUPING - 512)) | (1L << (OF - 512)) | (1L << (SLOG - 512)) | (1L << (OJ - 512)) | (1L << (ARCHIVELOG - 512)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 512)) | (1L << (ASYNCHRONOUS - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (ENCODING - 576)) | (1L << (SECOND - 576)) | (1L << (UNKNOWN - 576)) | (1L << (POINT - 576)) | (1L << (PL - 576)) | (1L << (MEMSTORE_PERCENT - 576)) | (1L << (STD - 576)) | (1L << (POLYGON - 576)) | (1L << (PS - 576)) | (1L << (OLD - 576)) | (1L << (TABLE_ID - 576)) | (1L << (CONTEXT - 576)) | (1L << (FINAL_COUNT - 576)) | (1L << (MASTER_CONNECT_RETRY - 576)) | (1L << (POSITION - 576)) | (1L << (DISCARD - 576)) | (1L << (PREV - 576)) | (1L << (RECOVER - 576)) | (1L << (PROCESS - 576)) | (1L << (DEALLOCATE - 576)) | (1L << (OLD_PASSWORD - 576)) | (1L << (FAILOVER - 576)) | (1L << (LISTAGG - 576)) | (1L << (SLOW - 576)) | (1L << (NOAUDIT - 576)) | (1L << (SUM - 576)) | (1L << (OPTIONS - 576)) | (1L << (MIN - 576)) | (1L << (RT - 576)) | (1L << (RELOAD - 576)) | (1L << (ONE - 576)) | (1L << (DELAY_KEY_WRITE - 576)) | (1L << (ORIG_DEFAULT - 576)) | (1L << (RLIKE - 576)) | (1L << (INDEXED - 576)) | (1L << (RETURNING - 576)) | (1L << (SQL_TSI_HOUR - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (RESTORE - 576)) | (1L << (OFFSET - 576)) | (1L << (TEMPORARY - 576)) | (1L << (VARIANCE - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (STATISTICS - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (COMMITTED - 576)) | (1L << (INDEXES - 576)) | (1L << (FREEZE - 576)) | (1L << (SCOPE - 576)) | (1L << (IDC - 576)) | (1L << (VIEW - 576)) | (1L << (ONE_SHOT - 576)) | (1L << (ACCOUNT - 576)) | (1L << (LOCALITY - 576)) | (1L << (REVERSE - 576)) | (1L << (UP - 576)) | (1L << (CLUSTER_ID - 576)) | (1L << (NOARCHIVELOG - 576)) | (1L << (MAX_SIZE - 576)) | (1L << (PAGE - 576)) | (1L << (NAME - 576)) | (1L << (ROW_COUNT - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (LAST - 640)) | (1L << (WASH - 640)) | (1L << (LOGONLY_REPLICA_NUM - 640)) | (1L << (DELAY - 640)) | (1L << (SUBDATE - 640)) | (1L << (INCREMENTAL - 640)) | (1L << (ROLLING - 640)) | (1L << (VERIFY - 640)) | (1L << (CONTAINS - 640)) | (1L << (GENERAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (SIGNED - 640)) | (1L << (SERVER - 640)) | (1L << (NEXT - 640)) | (1L << (ENDS - 640)) | (1L << (GLOBAL - 640)) | (1L << (ROOTSERVICE_LIST - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (VERBOSE - 640)) | (1L << (CLUSTER_NAME - 640)) | (1L << (MASTER_PORT - 640)) | (1L << (MYSQL_ERRNO - 640)) | (1L << (XA - 640)) | (1L << (TIME - 640)) | (1L << (DATETIME - 640)) | (1L << (NOMINVALUE - 640)) | (1L << (BOOL - 640)) | (1L << (DIRECTORY - 640)) | (1L << (DATA_TABLE_ID - 640)) | (1L << (SEQUENCES - 640)) | (1L << (PRETTY_COLOR - 640)) | (1L << (VALID - 640)) | (1L << (MASTER_SSL_KEY - 640)) | (1L << (MASTER_PASSWORD - 640)) | (1L << (PLAN - 640)) | (1L << (SHARE - 640)) | (1L << (MULTIPOLYGON - 640)) | (1L << (STDDEV_SAMP - 640)) | (1L << (USE_BLOOM_FILTER - 640)) | (1L << (CONSTRAINT_CATALOG - 640)) | (1L << (CLUSTER - 640)) | (1L << (EXCHANGE - 640)) | (1L << (GRANTS - 640)) | (1L << (CAST - 640)) | (1L << (SERVER_PORT - 640)) | (1L << (SQL_CACHE - 640)) | (1L << (MAX_USED_PART_ID - 640)) | (1L << (HYBRID_HIST - 640)) | (1L << (INSTANCE - 640)) | (1L << (FUNCTION - 640)) | (1L << (NOWAIT - 640)) | (1L << (INVISIBLE - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (COUNT - 640)) | (1L << (NAMES - 640)) | (1L << (MY_NAME - 640)) | (1L << (CHAR - 640)) | (1L << (P_ENTITY - 640)) | (1L << (ISOLATE - 640)) | (1L << (MAX_ROWS - 640)) | (1L << (CTXCAT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (ISOLATION - 704)) | (1L << (REPLICATION - 704)) | (1L << (DECRYPTION - 704)) | (1L << (REMOVE - 704)) | (1L << (STATS_AUTO_RECALC - 704)) | (1L << (CONSISTENT_MODE - 704)) | (1L << (MODIFY - 704)) | (1L << (UNCOMMITTED - 704)) | (1L << (PHYSICAL - 704)) | (1L << (NO_WAIT - 704)) | (1L << (BACKUP_COPIES - 704)) | (1L << (UNIT_NUM - 704)) | (1L << (PERCENTAGE - 704)) | (1L << (MAX_IOPS - 704)) | (1L << (SPFILE - 704)) | (1L << (REPEATABLE - 704)) | (1L << (COMPLETION - 704)) | (1L << (CONDENSED - 704)) | (1L << (ROOTTABLE - 704)) | (1L << (SUBSTRING - 704)) | (1L << (ZONE - 704)) | (1L << (BACKED - 704)) | (1L << (SERVICE - 704)) | (1L << (TEMPLATE - 704)) | (1L << (DATE_SUB - 704)) | (1L << (EXPIRE_INFO - 704)) | (1L << (EXPIRE - 704)) | (1L << (ENABLE - 704)) | (1L << (HOSTS - 704)) | (1L << (SCHEMA_NAME - 704)) | (1L << (EXPANSION - 704)) | (1L << (REORGANIZE - 704)) | (1L << (BLOCK_SIZE - 704)) | (1L << (TRIM_SPACE - 704)) | (1L << (MINOR - 704)) | (1L << (RESUME - 704)) | (1L << (INT - 704)) | (1L << (COMPLETE - 704)) | (1L << (STATS_PERSISTENT - 704)) | (1L << (NODEGROUP - 704)) | (1L << (PARTITIONING - 704)) | (1L << (BIT_AND - 704)) | (1L << (SUPER - 704)) | (1L << (TIMES - 704)) | (1L << (COMMIT - 704)) | (1L << (SAVEPOINT - 704)) | (1L << (UNTIL - 704)) | (1L << (USER - 704)) | (1L << (LEAK_RATE - 704)) | (1L << (MEMTABLE - 704)) | (1L << (CHARSET - 704)) | (1L << (MOVE - 704)) | (1L << (XML - 704)) | (1L << (PATH - 704)) | (1L << (IPC - 704)) | (1L << (TRIM - 704)) | (1L << (PERFORMANCE - 704)) | (1L << (RANK - 704)) | (1L << (VAR_POP - 704)) | (1L << (DEFAULT_AUTH - 704)) | (1L << (EXTENT_SIZE - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (BINLOG - 768)) | (1L << (LEAK_MOD - 768)) | (1L << (CLOG - 768)) | (1L << (GEOMETRYCOLLECTION - 768)) | (1L << (STORAGE - 768)) | (1L << (MEDIUM - 768)) | (1L << (USE_FRM - 768)) | (1L << (MASTER_HEARTBEAT_PERIOD - 768)) | (1L << (SUBPARTITIONS - 768)) | (1L << (CUBE - 768)) | (1L << (FRAGMENTATION - 768)) | (1L << (BALANCE - 768)) | (1L << (QUERY - 768)) | (1L << (POLICY - 768)) | (1L << (THROTTLE - 768)) | (1L << (SQL_TSI_QUARTER - 768)) | (1L << (REPAIR - 768)) | (1L << (MASTER_SSL_CIPHER - 768)) | (1L << (KEY_VERSION - 768)) | (1L << (CATALOG_NAME - 768)) | (1L << (NDBCLUSTER - 768)) | (1L << (CONNECTION - 768)) | (1L << (COMPACT - 768)) | (1L << (SYNCHRONIZATION - 768)) | (1L << (AVAILABILITY - 768)) | (1L << (INCR - 768)) | (1L << (CANCEL - 768)) | (1L << (SIMPLE - 768)) | (1L << (VARIABLES - 768)) | (1L << (SQL_TSI_WEEK - 768)) | (1L << (P_CHUNK - 768)) | (1L << (SYSTEM - 768)) | (1L << (ROOTSERVICE - 768)) | (1L << (PLUGIN_DIR - 768)) | (1L << (ASCII - 768)) | (1L << (INFO - 768)) | (1L << (SKIP_HEADER - 768)) | (1L << (SQL_THREAD - 768)) | (1L << (TYPES - 768)) | (1L << (LEADER - 768)) | (1L << (FOUND - 768)) | (1L << (EXTRACT - 768)) | (1L << (FIXED - 768)) | (1L << (CACHE - 768)) | (1L << (KV_ATTRIBUTES - 768)) | (1L << (CURRENT - 768)) | (1L << (STACKED - 768)) | (1L << (RETURNED_SQLSTATE - 768)) | (1L << (SKIP_INDEX - 768)) | (1L << (END - 768)) | (1L << (PRESERVE - 768)) | (1L << (BADFILE - 768)) | (1L << (LOG_DISK_SIZE - 768)) | (1L << (SQL_BUFFER_RESULT - 768)) | (1L << (JSON - 768)) | (1L << (SOME - 768)) | (1L << (INDEX_TABLE_ID - 768)) | (1L << (PATTERN - 768)) | (1L << (RECOVERY_WINDOW - 768)) | (1L << (FREQUENCY - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (LOCKS - 832)) | (1L << (MANUAL - 832)) | (1L << (GEOMETRY - 832)) | (1L << (IDENTIFIED - 832)) | (1L << (STORAGE_FORMAT_VERSION - 832)) | (1L << (OVER - 832)) | (1L << (USER_RESOURCES - 832)) | (1L << (BACKUPROUND - 832)) | (1L << (DESTINATION - 832)) | (1L << (SONAME - 832)) | (1L << (OUTLINE - 832)) | (1L << (MASTER_LOG_FILE - 832)) | (1L << (NOMAXVALUE - 832)) | (1L << (ESTIMATE - 832)) | (1L << (SLAVE - 832)) | (1L << (SKIP_BLANK_LINES - 832)) | (1L << (GTS - 832)) | (1L << (EXPORT - 832)) | (1L << (AVG_ROW_LENGTH - 832)) | (1L << (ENFORCED - 832)) | (1L << (FLASHBACK - 832)) | (1L << (SESSION_USER - 832)) | (1L << (TABLEGROUPS - 832)) | (1L << (CURTIME - 832)) | (1L << (REPLICA_TYPE - 832)) | (1L << (AGGREGATE - 832)) | (1L << (TRANSFER - 832)) | (1L << (JSON_ARRAYAGG - 832)) | (1L << (PERCENT_RANK - 832)) | (1L << (ENUM - 832)) | (1L << (NATIONAL - 832)) | (1L << (RECYCLE - 832)) | (1L << (REGION - 832)) | (1L << (MUTEX - 832)) | (1L << (PARALLEL - 832)) | (1L << (NOPARALLEL - 832)) | (1L << (NDB - 832)) | (1L << (SYSTEM_USER - 832)) | (1L << (MAXIMIZE - 832)) | (1L << (MAX_UPDATES_PER_HOUR - 832)) | (1L << (CURSOR_NAME - 832)) | (1L << (CONCURRENT - 832)) | (1L << (DUMPFILE - 832)) | (1L << (COMPRESSED - 832)) | (1L << (LINESTRING - 832)) | (1L << (DYNAMIC - 832)) | (1L << (CHAIN - 832)) | (1L << (INCREMENT - 832)) | (1L << (LAG - 832)) | (1L << (BASELINE_ID - 832)) | (1L << (NEW - 832)) | (1L << (SQL_TSI_YEAR - 832)) | (1L << (THAN - 832)) | (1L << (CPU - 832)) | (1L << (HOST - 832)) | (1L << (VALUE - 832)) | (1L << (LOGS - 832)) | (1L << (SERIALIZABLE - 832)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (BACKUP - 896)) | (1L << (LOGFILE - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (SET_MASTER_CLUSTER - 896)) | (1L << (MINUTE - 896)) | (1L << (SWAPS - 896)) | (1L << (TASK - 896)) | (1L << (INNODB - 896)) | (1L << (IO_THREAD - 896)) | (1L << (HISTOGRAM - 896)) | (1L << (PCTFREE - 896)) | (1L << (PARAMETERS - 896)) | (1L << (OBJECT - 896)) | (1L << (TABLESPACE - 896)) | (1L << (OBCONFIG_URL - 896)) | (1L << (AUTO - 896)) | (1L << (PASSWORD - 896)) | (1L << (ROW - 896)) | (1L << (MESSAGE_TEXT - 896)) | (1L << (DISK - 896)) | (1L << (FAULTS - 896)) | (1L << (HOUR - 896)) | (1L << (REFRESH - 896)) | (1L << (COLUMN_STAT - 896)) | (1L << (ANY - 896)) | (1L << (UNIT_GROUP - 896)) | (1L << (TTL - 896)) | (1L << (ERROR_CODE - 896)) | (1L << (PHASE - 896)) | (1L << (ENTITY - 896)) | (1L << (PROFILE - 896)) | (1L << (LAST_VALUE - 896)) | (1L << (RESTART - 896)) | (1L << (TRACE - 896)) | (1L << (LOGICAL_READS - 896)) | (1L << (DATE_ADD - 896)) | (1L << (BLOCK_INDEX - 896)) | (1L << (SERVER_IP - 896)) | (1L << (CODE - 896)) | (1L << (PLUGINS - 896)) | (1L << (ADDDATE - 896)) | (1L << (VIRTUAL_COLUMN_ID - 896)) | (1L << (COLUMN_FORMAT - 896)) | (1L << (NESTED - 896)) | (1L << (CLEAN - 896)) | (1L << (MASTER_SSL - 896)) | (1L << (CLEAR - 896)) | (1L << (CHECKSUM - 896)) | (1L << (INSTALL - 896)) | (1L << (MONTH - 896)) | (1L << (NEVER - 896)) | (1L << (AFTER - 896)) | (1L << (CLOSE - 896)) | (1L << (JSON_OBJECTAGG - 896)) | (1L << (SET_TP - 896)) | (1L << (OWNER - 896)) | (1L << (BLOOM_FILTER - 896)))) != 0) || ((((_la - 960)) & ~0x3f) == 0 && ((1L << (_la - 960)) & ((1L << (ILOG - 960)) | (1L << (META - 960)) | (1L << (STARTS - 960)) | (1L << (PLANREGRESS - 960)) | (1L << (AUTOEXTEND_SIZE - 960)) | (1L << (TABLET_ID - 960)) | (1L << (SOURCE - 960)) | (1L << (IGNORE_SERVER_IDS - 960)) | (1L << (REPLICA_NUM - 960)) | (1L << (BINDING - 960)) | (1L << (MICROSECOND - 960)) | (1L << (UNDO_BUFFER_SIZE - 960)) | (1L << (SWITCHOVER - 960)) | (1L << (EXTENDED_NOADDR - 960)) | (1L << (GLOBAL_NAME - 960)) | (1L << (SPLIT - 960)) | (1L << (BASELINE - 960)) | (1L << (MEMORY - 960)) | (1L << (DESCRIPTION - 960)) | (1L << (SEED - 960)) | (1L << (RTREE - 960)) | (1L << (RESOURCE - 960)) | (1L << (STDDEV_POP - 960)) | (1L << (RUN - 960)) | (1L << (OBSOLETE - 960)) | (1L << (SQL_AFTER_GTIDS - 960)) | (1L << (OPEN - 960)) | (1L << (SQL_TSI_DAY - 960)) | (1L << (STRING - 960)) | (1L << (RELAY_THREAD - 960)) | (1L << (BREADTH - 960)) | (1L << (NOCACHE - 960)) | (1L << (UNUSUAL - 960)) | (1L << (RELAYLOG - 960)) | (1L << (SQL_BEFORE_GTIDS - 960)) | (1L << (PRIMARY_ZONE - 960)) | (1L << (TABLE_CHECKSUM - 960)) | (1L << (ZONE_LIST - 960)) | (1L << (DATABASE_ID - 960)) | (1L << (TP_NO - 960)) | (1L << (NETWORK - 960)) | (1L << (PROTECTION - 960)) | (1L << (BOOLEAN - 960)) | (1L << (AVG - 960)) | (1L << (MULTILINESTRING - 960)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 960)) | (1L << (NOW - 960)) | (1L << (BIT_OR - 960)) | (1L << (PROXY - 960)) | (1L << (DUPLICATE_SCOPE - 960)) | (1L << (STATS_SAMPLE_PAGES - 960)) | (1L << (TABLET_SIZE - 960)) | (1L << (BASE - 960)) | (1L << (KVCACHE - 960)) | (1L << (RELAY - 960)) | (1L << (MEMORY_SIZE - 960)) | (1L << (CONTRIBUTORS - 960)) | (1L << (EMPTY - 960)) | (1L << (PARTIAL - 960)) | (1L << (REPORT - 960)))) != 0) || ((((_la - 1024)) & ~0x3f) == 0 && ((1L << (_la - 1024)) & ((1L << (ESCAPE - 1024)) | (1L << (CLONE - 1024)) | (1L << (MASTER_AUTO_POSITION - 1024)) | (1L << (DISKGROUP - 1024)) | (1L << (CALC_PARTITION_ID - 1024)) | (1L << (TP_NAME - 1024)) | (1L << (ACTIVATE - 1024)) | (1L << (SQL_AFTER_MTS_GAPS - 1024)) | (1L << (EFFECTIVE - 1024)) | (1L << (FIRST_VALUE - 1024)) | (1L << (SQL_TSI_MINUTE - 1024)) | (1L << (UNICODE - 1024)) | (1L << (QUARTER - 1024)) | (1L << (ANALYSE - 1024)) | (1L << (DEFINER - 1024)) | (1L << (NONE - 1024)) | (1L << (PROCESSLIST - 1024)) | (1L << (TYPE - 1024)) | (1L << (INSERT_METHOD - 1024)) | (1L << (EXTENDED - 1024)) | (1L << (LOG - 1024)) | (1L << (WHENEVER - 1024)) | (1L << (LEVEL - 1024)) | (1L << (TIME_ZONE_INFO - 1024)) | (1L << (TIMESTAMPADD - 1024)) | (1L << (GET_FORMAT - 1024)) | (1L << (PREPARE - 1024)) | (1L << (MATERIALIZED - 1024)) | (1L << (STANDBY - 1024)) | (1L << (WORK - 1024)) | (1L << (HANDLER - 1024)) | (1L << (CUME_DIST - 1024)) | (1L << (LEAK - 1024)) | (1L << (INITIAL_SIZE - 1024)) | (1L << (RELAY_LOG_FILE - 1024)) | (1L << (STORING - 1024)) | (1L << (IMPORT - 1024)) | (1L << (HELP - 1024)) | (1L << (CREATE_TIMESTAMP - 1024)) | (1L << (COMPUTE - 1024)) | (1L << (RANDOM - 1024)) | (1L << (SOUNDS - 1024)) | (1L << (TABLE_MODE - 1024)) | (1L << (COPY - 1024)) | (1L << (SESSION - 1024)) | (1L << (DAG - 1024)) | (1L << (NOCYCLE - 1024)) | (1L << (SQL_NO_CACHE - 1024)) | (1L << (EXECUTE - 1024)) | (1L << (PRECEDING - 1024)) | (1L << (SWITCHES - 1024)) | (1L << (PACK_KEYS - 1024)) | (1L << (ENABLE_EXTENDED_ROWID - 1024)) | (1L << (SQL_ID - 1024)) | (1L << (NOORDER - 1024)) | (1L << (TENANT_ID - 1024)) | (1L << (CHECKPOINT - 1024)) | (1L << (DAY - 1024)) | (1L << (GROUP_CONCAT - 1024)) | (1L << (JSON_TABLE - 1024)) | (1L << (LEAD - 1024)) | (1L << (EVENTS - 1024)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (RECURSIVE - 1088)) | (1L << (ONLY - 1088)) | (1L << (TABLEGROUP_ID - 1088)) | (1L << (TOP_K_FRE_HIST - 1088)) | (1L << (MASTER_SSL_CRL - 1088)) | (1L << (RESOURCE_POOL - 1088)) | (1L << (RESOURCE_POOL_LIST - 1088)) | (1L << (NTILE - 1088)) | (1L << (NULL_IF_EXETERNAL - 1088)) | (1L << (BUCKETS - 1088)) | (1L << (SKEWONLY - 1088)) | (1L << (SCHEDULE - 1088)) | (1L << (JOB - 1088)) | (1L << (SRID - 1088)) | (1L << (MASTER_LOG_POS - 1088)) | (1L << (SUBCLASS_ORIGIN - 1088)) | (1L << (MULTIPOINT - 1088)) | (1L << (BLOCK - 1088)) | (1L << (SQL_TSI_SECOND - 1088)) | (1L << (DATE - 1088)) | (1L << (ROLLUP - 1088)) | (1L << (MIN_CPU - 1088)) | (1L << (OCCUR - 1088)) | (1L << (DATA - 1088)) | (1L << (SUCCESSFUL - 1088)) | (1L << (REDO_TRANSPORT_OPTIONS - 1088)) | (1L << (FIELD_DELIMITER - 1088)) | (1L << (MASTER_HOST - 1088)) | (1L << (VAR_SAMP - 1088)) | (1L << (ALGORITHM - 1088)) | (1L << (EXPIRED - 1088)) | (1L << (CONSTRAINT_NAME - 1088)) | (1L << (APPROX_COUNT_DISTINCT - 1088)) | (1L << (BASIC - 1088)) | (1L << (DEFAULT_TABLEGROUP - 1088)) | (1L << (LIST_ - 1088)) | (1L << (WEEK - 1088)) | (1L << (LINK - 1088)) | (1L << (STATEMENT_ID - 1088)) | (1L << (NULLS - 1088)) | (1L << (MASTER_SSL_CRLPATH - 1088)) | (1L << (CASCADED - 1088)) | (1L << (PLUGIN - 1088)) | (1L << (ENCRYPTED - 1088)) | (1L << (TENANT - 1088)) | (1L << (DECIMAL_VAL - 1088)) | (1L << (ST_ASMVT - 1088)) | (1L << (STORE - 1088)) | (1L << (BOOL_VALUE - 1088)) | (1L << (LOG_RESTORE_SOURCE - 1088)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1088)) | (1L << (LeftBrace - 1088)) | (1L << (PARSER_SYNTAX_ERROR - 1088)) | (1L << (HEX_STRING_VALUE - 1088)) | (1L << (DATE_VALUE - 1088)))) != 0) || ((((_la - 1152)) & ~0x3f) == 0 && ((1L << (_la - 1152)) & ((1L << (Plus - 1152)) | (1L << (Not - 1152)) | (1L << (LeftParen - 1152)) | (1L << (Minus - 1152)) | (1L << (Dot - 1152)) | (1L << (Tilde - 1152)) | (1L << (QUESTIONMARK - 1152)) | (1L << (SYSTEM_VARIABLE - 1152)) | (1L << (USER_VARIABLE - 1152)) | (1L << (NAME_OB - 1152)) | (1L << (STRING_VALUE - 1152)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) {
					{
					setState(6893);
					expr(0);
					}
				}

				setState(6896);
				match(FROM);
				setState(6897);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Groupby_clauseContext extends ParserRuleContext {
		public Sort_list_for_group_byContext sort_list_for_group_by() {
			return getRuleContext(Sort_list_for_group_byContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(OBParser.ROLLUP, 0); }
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGroupby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGroupby_clause(this);
		}
	}

	public final Groupby_clauseContext groupby_clause() throws RecognitionException {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_groupby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6900);
			sort_list_for_group_by();
			setState(6903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				{
				setState(6901);
				match(WITH);
				setState(6902);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_list_for_group_byContext extends ParserRuleContext {
		public List<Sort_key_for_group_byContext> sort_key_for_group_by() {
			return getRuleContexts(Sort_key_for_group_byContext.class);
		}
		public Sort_key_for_group_byContext sort_key_for_group_by(int i) {
			return getRuleContext(Sort_key_for_group_byContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Sort_list_for_group_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_list_for_group_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSort_list_for_group_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSort_list_for_group_by(this);
		}
	}

	public final Sort_list_for_group_byContext sort_list_for_group_by() throws RecognitionException {
		Sort_list_for_group_byContext _localctx = new Sort_list_for_group_byContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_sort_list_for_group_by);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6905);
			sort_key_for_group_by();
			setState(6910);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,732,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6906);
					match(Comma);
					setState(6907);
					sort_key_for_group_by();
					}
					} 
				}
				setState(6912);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,732,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_key_for_group_byContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(OBParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OBParser.DESC, 0); }
		public Sort_key_for_group_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key_for_group_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSort_key_for_group_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSort_key_for_group_by(this);
		}
	}

	public final Sort_key_for_group_byContext sort_key_for_group_by() throws RecognitionException {
		Sort_key_for_group_byContext _localctx = new Sort_key_for_group_byContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_sort_key_for_group_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6913);
			expr(0);
			setState(6915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(6914);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_byContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(OBParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Sort_listContext sort_list() {
			return getRuleContext(Sort_listContext.class,0);
		}
		public Order_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOrder_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOrder_by(this);
		}
	}

	public final Order_byContext order_by() throws RecognitionException {
		Order_byContext _localctx = new Order_byContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_order_by);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6917);
			match(ORDER);
			setState(6918);
			match(BY);
			setState(6919);
			sort_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_listContext extends ParserRuleContext {
		public List<Sort_keyContext> sort_key() {
			return getRuleContexts(Sort_keyContext.class);
		}
		public Sort_keyContext sort_key(int i) {
			return getRuleContext(Sort_keyContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Sort_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSort_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSort_list(this);
		}
	}

	public final Sort_listContext sort_list() throws RecognitionException {
		Sort_listContext _localctx = new Sort_listContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_sort_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6921);
			sort_key();
			setState(6926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(6922);
				match(Comma);
				setState(6923);
				sort_key();
				}
				}
				setState(6928);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_keyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(OBParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OBParser.DESC, 0); }
		public Sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSort_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSort_key(this);
		}
	}

	public final Sort_keyContext sort_key() throws RecognitionException {
		Sort_keyContext _localctx = new Sort_keyContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_sort_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6929);
			expr(0);
			setState(6931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(6930);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expression_option_listContext extends ParserRuleContext {
		public List<Query_expression_optionContext> query_expression_option() {
			return getRuleContexts(Query_expression_optionContext.class);
		}
		public Query_expression_optionContext query_expression_option(int i) {
			return getRuleContext(Query_expression_optionContext.class,i);
		}
		public Query_expression_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterQuery_expression_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitQuery_expression_option_list(this);
		}
	}

	public final Query_expression_option_listContext query_expression_option_list() throws RecognitionException {
		Query_expression_option_listContext _localctx = new Query_expression_option_listContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_query_expression_option_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6934); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6933);
					query_expression_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6936); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,736,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expression_optionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OBParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(OBParser.UNIQUE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(OBParser.SQL_CALC_FOUND_ROWS, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(OBParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CACHE() { return getToken(OBParser.SQL_CACHE, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(OBParser.HIGH_PRIORITY, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(OBParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(OBParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(OBParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(OBParser.STRAIGHT_JOIN, 0); }
		public Query_expression_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterQuery_expression_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitQuery_expression_option(this);
		}
	}

	public final Query_expression_optionContext query_expression_option() throws RecognitionException {
		Query_expression_optionContext _localctx = new Query_expression_optionContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_query_expression_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6938);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT || _la==HIGH_PRIORITY || ((((_la - 299)) & ~0x3f) == 0 && ((1L << (_la - 299)) & ((1L << (SQL_BIG_RESULT - 299)) | (1L << (SQL_CALC_FOUND_ROWS - 299)) | (1L << (SQL_SMALL_RESULT - 299)) | (1L << (STRAIGHT_JOIN - 299)) | (1L << (UNIQUE - 299)))) != 0) || _la==SQL_CACHE || _la==SQL_BUFFER_RESULT || _la==SQL_NO_CACHE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Column_labelContext column_label() {
			return getRuleContext(Column_labelContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterProjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitProjection(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_projection);
		try {
			setState(6949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UnderlineUTF8MB3:
			case UnderlineASCII:
			case UnderlineTIS620:
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case LeftBracket:
			case ACCESS:
			case OBJECT_ID:
			case ACCESSIBLE:
			case ADD:
			case AGAINST:
			case ALTER:
			case ALWAYS:
			case AND:
			case ANALYZE:
			case NAMESPACE:
			case AS:
			case ASENSITIVE:
			case ASC:
			case BETWEEN:
			case BEFORE:
			case BIGINT:
			case BINARY:
			case BLOB:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CHANGE:
			case CHARACTER:
			case CHECK:
			case CIPHER:
			case CONDITION:
			case CONSTRAINT:
			case CONTINUE:
			case CONVERT:
			case COLLATE:
			case COLUMN:
			case COLUMNS:
			case LS:
			case CREATE:
			case CROSS:
			case CYCLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case DAY_HOUR:
			case DAY_MICROSECOND:
			case DAY_MINUTE:
			case DAY_SECOND:
			case DATABASE:
			case DATABASES:
			case NUMBER:
			case DECIMAL:
			case DECLARE:
			case ROWID:
			case DEFAULT:
			case DELAYED:
			case DELETE:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case DESC:
			case DESCRIBE:
			case DETERMINISTIC:
			case DIV:
			case DISTINCTROW:
			case DOUBLE:
			case DROP:
			case DUAL:
			case EACH:
			case ENCLOSED:
			case ELSE:
			case ELSEIF:
			case ESCAPED:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case FETCH:
			case FIELDS:
			case FOREIGN:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case FOR:
			case FORCE:
			case FULL:
			case FULLTEXT:
			case GET:
			case GENERATED:
			case GRANT:
			case GROUP:
			case HAVING:
			case HIGH_PRIORITY:
			case HOUR_MICROSECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case ID:
			case IF:
			case IN:
			case INDEX:
			case INNER:
			case INFILE:
			case INOUT:
			case INCLUDING:
			case INSENSITIVE:
			case INTEGER:
			case INT1:
			case INT2:
			case INT3:
			case LIB:
			case INT4:
			case INT8:
			case INTERVAL:
			case INSERT:
			case ORDINALITY:
			case INTO:
			case IO_AFTER_GTIDS:
			case IO_BEFORE_GTIDS:
			case IS:
			case ISSUER:
			case ITERATE:
			case JOIN:
			case KEY:
			case KEYS:
			case KILL:
			case LANGUAGE:
			case LEAVE:
			case LEFT:
			case LIMIT:
			case LIKE:
			case LINEAR:
			case LINES:
			case BISON_LIST:
			case LOAD:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LONG:
			case UNLIMITED:
			case LONGBLOB:
			case LONGTEXT:
			case LOOP:
			case LOW_PRIORITY:
			case MASTER_BIND:
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MATCH:
			case MAXVALUE:
			case MEDIUMBLOB:
			case MEDIUMINT:
			case MERGE:
			case MEDIUMTEXT:
			case MIDDLEINT:
			case MINUTE_MICROSECOND:
			case MINUTE_SECOND:
			case MOD:
			case MODE:
			case MODIFIES:
			case NATURAL:
			case NO_WRITE_TO_BINLOG:
			case ON:
			case OPTION:
			case OPTIMIZE:
			case OPTIONALLY:
			case OR:
			case ORDER:
			case OUT:
			case IOPS_WEIGHT:
			case OUTER:
			case OUTFILE:
			case PARSER:
			case PROCEDURE:
			case MIN_MAX:
			case PURGE:
			case PARTITION:
			case PRECISION:
			case PRIMARY:
			case PUBLIC:
			case RANGE:
			case READ:
			case READ_WRITE:
			case READS:
			case REAL:
			case RELEASE:
			case REFERENCES:
			case REGEXP:
			case RENAME:
			case REPLACE:
			case REPEAT:
			case REQUIRE:
			case RESIGNAL:
			case RESTRICT:
			case RETURN:
			case REVOKE:
			case RIGHT:
			case ROWS:
			case SECOND_MICROSECOND:
			case SCHEMA:
			case SCHEMAS:
			case SEPARATOR:
			case SET:
			case REJECT:
			case SENSITIVE:
			case SHOW:
			case SIGNAL:
			case SMALLINT:
			case SPATIAL:
			case SPECIFIC:
			case SQL:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQL_BIG_RESULT:
			case SQL_SMALL_RESULT:
			case SSL:
			case STARTING:
			case NUMERIC:
			case STORED:
			case PLUS:
			case STRAIGHT_JOIN:
			case SUBJECT:
			case SYSDATE:
			case TERMINATED:
			case TEXT:
			case TINYBLOB:
			case TINYINT:
			case TINYTEXT:
			case TABLE:
			case THEN:
			case TO:
			case TRIGGER:
			case UNDO:
			case CALIBRATION:
			case UNION:
			case UNLOCK:
			case LINE_DELIMITER:
			case UNSIGNED:
			case UPDATE:
			case USAGE:
			case GEOMCOLLECTION:
			case USE:
			case USING:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case VALUES:
			case QUERY_RESPONSE_TIME:
			case VARBINARY:
			case VARCHAR:
			case VARYING:
			case VIRTUAL:
			case WHERE:
			case REDUNDANCY:
			case WHILE:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case WITH:
			case WRITE:
			case XOR:
			case X509:
			case YEAR_MONTH:
			case ZEROFILL:
			case GLOBAL_ALIAS:
			case SESSION_ALIAS:
			case UnderlineUTF8:
			case UnderlineUTF8MB4:
			case UnderlineGBK:
			case UnderlineGB18030:
			case UnderlineBINARY:
			case UnderlineUTF16:
			case UnderlineLATIN1:
			case UnderlineGB18030_2022:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case NOT:
			case NULLX:
			case INTNUM:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case TIMESTAMP_VALUE:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case APPROXNUM:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case IGNORE:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case VARCHARACTER:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case NATIONAL_LITERAL:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case RLIKE:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case CHAR:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case INT:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case RANDOM:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case DECIMAL_VAL:
			case ST_ASMVT:
			case STORE:
			case BOOL_VALUE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case LeftBrace:
			case PARSER_SYNTAX_ERROR:
			case HEX_STRING_VALUE:
			case DATE_VALUE:
			case Plus:
			case Not:
			case LeftParen:
			case Minus:
			case Dot:
			case Tilde:
			case QUESTIONMARK:
			case SYSTEM_VARIABLE:
			case USER_VARIABLE:
			case NAME_OB:
			case STRING_VALUE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6940);
				expr(0);
				setState(6942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(6941);
					match(AS);
					}
					break;
				}
				setState(6946);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
				case 1:
					{
					setState(6944);
					column_label();
					}
					break;
				case 2:
					{
					setState(6945);
					match(STRING_VALUE);
					}
					break;
				}
				}
				break;
			case Star:
				enterOuterAlt(_localctx, 2);
				{
				setState(6948);
				match(Star);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_expr_listContext extends ParserRuleContext {
		public List<ProjectionContext> projection() {
			return getRuleContexts(ProjectionContext.class);
		}
		public ProjectionContext projection(int i) {
			return getRuleContext(ProjectionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Select_expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSelect_expr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSelect_expr_list(this);
		}
	}

	public final Select_expr_listContext select_expr_list() throws RecognitionException {
		Select_expr_listContext _localctx = new Select_expr_listContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_select_expr_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6951);
			projection();
			setState(6956);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,740,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6952);
					match(Comma);
					setState(6953);
					projection();
					}
					} 
				}
				setState(6958);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,740,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_listContext extends ParserRuleContext {
		public Table_referencesContext table_references() {
			return getRuleContext(Table_referencesContext.class,0);
		}
		public From_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFrom_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFrom_list(this);
		}
	}

	public final From_listContext from_list() throws RecognitionException {
		From_listContext _localctx = new From_listContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_from_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6959);
			table_references();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referencesContext extends ParserRuleContext {
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public List<Table_references_parenContext> table_references_paren() {
			return getRuleContexts(Table_references_parenContext.class);
		}
		public Table_references_parenContext table_references_paren(int i) {
			return getRuleContext(Table_references_parenContext.class,i);
		}
		public Table_referencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_references; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_references(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_references(this);
		}
	}

	public final Table_referencesContext table_references() throws RecognitionException {
		Table_referencesContext _localctx = new Table_referencesContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_table_references);
		try {
			int _alt;
			setState(6977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6961);
				table_reference();
				setState(6966);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,741,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6962);
						match(Comma);
						setState(6963);
						table_reference();
						}
						} 
					}
					setState(6968);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,741,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6969);
				table_references_paren();
				setState(6974);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,742,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6970);
						match(Comma);
						setState(6971);
						table_references_paren();
						}
						} 
					}
					setState(6976);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,742,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_references_parenContext extends ParserRuleContext {
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Table_references_parenContext table_references_paren() {
			return getRuleContext(Table_references_parenContext.class,0);
		}
		public Table_references_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_references_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_references_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_references_paren(this);
		}
	}

	public final Table_references_parenContext table_references_paren() throws RecognitionException {
		Table_references_parenContext _localctx = new Table_references_parenContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_table_references_paren);
		int _la;
		try {
			int _alt;
			setState(7009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6979);
				table_reference();
				setState(6984);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,744,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6980);
						match(Comma);
						setState(6981);
						table_reference();
						}
						} 
					}
					setState(6986);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,744,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6987);
				match(LeftParen);
				setState(6988);
				table_reference();
				setState(6993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==Comma) {
					{
					{
					setState(6989);
					match(Comma);
					setState(6990);
					table_reference();
					}
					}
					setState(6995);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6996);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6998);
				match(LeftParen);
				setState(6999);
				table_references_paren();
				setState(7004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==Comma) {
					{
					{
					setState(7000);
					match(Comma);
					setState(7001);
					table_reference();
					}
					}
					setState(7006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7007);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Table_factorContext table_factor() {
			return getRuleContext(Table_factorContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_reference(this);
		}
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_table_reference);
		try {
			setState(7013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				table_factor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7012);
				joined_table(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_factorContext extends ParserRuleContext {
		public Tbl_nameContext tbl_name() {
			return getRuleContext(Tbl_nameContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(OBParser.LATERAL, 0); }
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Use_flashbackContext use_flashback() {
			return getRuleContext(Use_flashbackContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Simple_exprContext simple_expr() {
			return getRuleContext(Simple_exprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Table_referenceContext table_reference() {
			return getRuleContext(Table_referenceContext.class,0);
		}
		public TerminalNode LeftBrace() { return getToken(OBParser.LeftBrace, 0); }
		public TerminalNode OJ() { return getToken(OBParser.OJ, 0); }
		public TerminalNode RightBrace() { return getToken(OBParser.RightBrace, 0); }
		public Json_table_exprContext json_table_expr() {
			return getRuleContext(Json_table_exprContext.class,0);
		}
		public Table_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_factor(this);
		}
	}

	public final Table_factorContext table_factor() throws RecognitionException {
		Table_factorContext _localctx = new Table_factorContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_table_factor);
		int _la;
		try {
			setState(7054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7015);
				tbl_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(7016);
					match(LATERAL);
					}
				}

				setState(7019);
				table_subquery();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(7020);
					match(LATERAL);
					}
				}

				setState(7023);
				select_with_parens();
				setState(7025);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
				case 1:
					{
					setState(7024);
					use_flashback();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7027);
				match(TABLE);
				setState(7028);
				match(LeftParen);
				setState(7029);
				simple_expr(0);
				setState(7030);
				match(RightParen);
				setState(7036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(7031);
					match(AS);
					setState(7032);
					relation_name();
					}
					break;
				case 2:
					{
					setState(7034);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
					case 1:
						{
						setState(7033);
						relation_name();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7038);
				match(LeftParen);
				setState(7039);
				table_reference();
				setState(7040);
				match(RightParen);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7042);
				match(LeftBrace);
				setState(7043);
				match(OJ);
				setState(7044);
				table_reference();
				setState(7045);
				match(RightBrace);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7047);
				json_table_expr();
				setState(7052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
				case 1:
					{
					setState(7049);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(7048);
						match(AS);
						}
					}

					setState(7051);
					relation_name();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tbl_nameContext extends ParserRuleContext {
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Use_partitionContext use_partition() {
			return getRuleContext(Use_partitionContext.class,0);
		}
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public SeedContext seed() {
			return getRuleContext(SeedContext.class,0);
		}
		public Use_flashbackContext use_flashback() {
			return getRuleContext(Use_flashbackContext.class,0);
		}
		public Index_hint_listContext index_hint_list() {
			return getRuleContext(Index_hint_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Tbl_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tbl_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTbl_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTbl_name(this);
		}
	}

	public final Tbl_nameContext tbl_name() throws RecognitionException {
		Tbl_nameContext _localctx = new Tbl_nameContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_tbl_name);
		int _la;
		try {
			setState(7120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7056);
				relation_factor();
				setState(7058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					setState(7057);
					use_partition();
					}
					break;
				}
				setState(7067);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
				case 1:
					{
					setState(7060);
					sample_clause();
					setState(7062);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
					case 1:
						{
						setState(7061);
						seed();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(7065);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
					case 1:
						{
						setState(7064);
						use_flashback();
						}
						break;
					}
					}
					break;
				}
				setState(7070);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
				case 1:
					{
					setState(7069);
					relation_name();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7072);
				relation_factor();
				setState(7074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(7073);
					use_partition();
					}
				}

				setState(7093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(7083);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
					case 1:
						{
						setState(7077);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(7076);
							match(AS);
							}
						}

						setState(7079);
						relation_name();
						}
						break;
					case 2:
						{
						setState(7081);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SAMPLE) {
							{
							setState(7080);
							sample_clause();
							}
						}

						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(7085);
					sample_clause();
					setState(7091);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
					case 1:
						{
						setState(7086);
						relation_name();
						}
						break;
					case 2:
						{
						setState(7087);
						seed();
						setState(7089);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
							{
							setState(7088);
							relation_name();
							}
						}

						}
						break;
					}
					}
					break;
				}
				setState(7095);
				index_hint_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7097);
				relation_factor();
				setState(7099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(7098);
					use_partition();
					}
				}

				setState(7102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(7101);
					use_flashback();
					}
					break;
				}
				setState(7104);
				match(AS);
				setState(7105);
				relation_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7107);
				relation_factor();
				setState(7109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(7108);
					use_partition();
					}
				}

				setState(7111);
				sample_clause();
				setState(7113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEED) {
					{
					setState(7112);
					seed();
					}
				}

				setState(7115);
				match(AS);
				setState(7116);
				relation_name();
				setState(7118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
				case 1:
					{
					setState(7117);
					index_hint_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_nameContext extends ParserRuleContext {
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Use_partitionContext use_partition() {
			return getRuleContext(Use_partitionContext.class,0);
		}
		public Dml_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDml_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDml_table_name(this);
		}
	}

	public final Dml_table_nameContext dml_table_name() throws RecognitionException {
		Dml_table_nameContext _localctx = new Dml_table_nameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_dml_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7122);
			relation_factor();
			setState(7124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7123);
				use_partition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeedContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(OBParser.SEED, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public SeedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSeed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSeed(this);
		}
	}

	public final SeedContext seed() throws RecognitionException {
		SeedContext _localctx = new SeedContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_seed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7126);
			match(SEED);
			setState(7127);
			match(LeftParen);
			setState(7128);
			match(INTNUM);
			setState(7129);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_percentContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public Sample_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSample_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSample_percent(this);
		}
	}

	public final Sample_percentContext sample_percent() throws RecognitionException {
		Sample_percentContext _localctx = new Sample_percentContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_sample_percent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7131);
			_la = _input.LA(1);
			if ( !(_la==INTNUM || _la==DECIMAL_VAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(OBParser.SAMPLE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Sample_percentContext sample_percent() {
			return getRuleContext(Sample_percentContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode BLOCK() { return getToken(OBParser.BLOCK, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode BASE() { return getToken(OBParser.BASE, 0); }
		public TerminalNode INCR() { return getToken(OBParser.INCR, 0); }
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7133);
			match(SAMPLE);
			setState(7135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(7134);
				match(BLOCK);
				}
			}

			setState(7138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==INCR || _la==BASE) {
				{
				setState(7137);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==INCR || _la==BASE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7140);
			match(LeftParen);
			setState(7141);
			sample_percent();
			setState(7142);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Table_subquery_aliasContext table_subquery_alias() {
			return getRuleContext(Table_subquery_aliasContext.class,0);
		}
		public Use_flashbackContext use_flashback() {
			return getRuleContext(Use_flashbackContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_subquery(this);
		}
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_table_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7144);
			select_with_parens();
			setState(7146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(7145);
				use_flashback();
				}
				break;
			}
			setState(7149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7148);
				match(AS);
				}
			}

			setState(7151);
			table_subquery_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subquery_aliasContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Alias_name_listContext alias_name_list() {
			return getRuleContext(Alias_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Table_subquery_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_subquery_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_subquery_alias(this);
		}
	}

	public final Table_subquery_aliasContext table_subquery_alias() throws RecognitionException {
		Table_subquery_aliasContext _localctx = new Table_subquery_aliasContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_table_subquery_alias);
		try {
			setState(7159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7153);
				relation_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7154);
				relation_name();
				setState(7155);
				match(LeftParen);
				setState(7156);
				alias_name_list();
				setState(7157);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_partitionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public External_table_partitionsContext external_table_partitions() {
			return getRuleContext(External_table_partitionsContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public Use_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUse_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUse_partition(this);
		}
	}

	public final Use_partitionContext use_partition() throws RecognitionException {
		Use_partitionContext _localctx = new Use_partitionContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_use_partition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7161);
			match(PARTITION);
			setState(7162);
			match(LeftParen);
			setState(7165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				setState(7163);
				external_table_partitions();
				}
				break;
			case 2:
				{
				setState(7164);
				name_list(0);
				}
				break;
			}
			setState(7167);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_table_partitionsContext extends ParserRuleContext {
		public List<External_table_partitionContext> external_table_partition() {
			return getRuleContexts(External_table_partitionContext.class);
		}
		public External_table_partitionContext external_table_partition(int i) {
			return getRuleContext(External_table_partitionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public External_table_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_table_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_table_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_table_partitions(this);
		}
	}

	public final External_table_partitionsContext external_table_partitions() throws RecognitionException {
		External_table_partitionsContext _localctx = new External_table_partitionsContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_external_table_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7169);
			external_table_partition();
			setState(7174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(7170);
				match(Comma);
				setState(7171);
				external_table_partition();
				}
				}
				setState(7176);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_table_partitionContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Expr_constContext expr_const() {
			return getRuleContext(Expr_constContext.class,0);
		}
		public External_table_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_table_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExternal_table_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExternal_table_partition(this);
		}
	}

	public final External_table_partitionContext external_table_partition() throws RecognitionException {
		External_table_partitionContext _localctx = new External_table_partitionContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_external_table_partition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7177);
			relation_name();
			setState(7178);
			match(COMP_EQ);
			setState(7179);
			expr_const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_flashbackContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public TerminalNode OF() { return getToken(OBParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OBParser.SNAPSHOT, 0); }
		public Bit_exprContext bit_expr() {
			return getRuleContext(Bit_exprContext.class,0);
		}
		public Use_flashbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_flashback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUse_flashback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUse_flashback(this);
		}
	}

	public final Use_flashbackContext use_flashback() throws RecognitionException {
		Use_flashbackContext _localctx = new Use_flashbackContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_use_flashback);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7181);
			match(AS);
			setState(7182);
			match(OF);
			setState(7183);
			match(SNAPSHOT);
			setState(7184);
			bit_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_hint_typeContext extends ParserRuleContext {
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public Index_hint_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_hint_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_hint_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_hint_type(this);
		}
	}

	public final Index_hint_typeContext index_hint_type() throws RecognitionException {
		Index_hint_typeContext _localctx = new Index_hint_typeContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_index_hint_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7186);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_or_indexContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public Key_or_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_or_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterKey_or_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitKey_or_index(this);
		}
	}

	public final Key_or_indexContext key_or_index() throws RecognitionException {
		Key_or_indexContext _localctx = new Key_or_indexContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_key_or_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7188);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_hint_scopeContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode JOIN() { return getToken(OBParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(OBParser.ORDER, 0); }
		public Index_hint_scopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_hint_scope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_hint_scope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_hint_scope(this);
		}
	}

	public final Index_hint_scopeContext index_hint_scope() throws RecognitionException {
		Index_hint_scopeContext _localctx = new Index_hint_scopeContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_index_hint_scope);
		try {
			setState(7201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LeftParen:
				enterOuterAlt(_localctx, 1);
				{
				setState(7190);
				empty();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7191);
				match(FOR);
				setState(7199);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JOIN:
				case ORDER:
					{
					setState(7195);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case JOIN:
						{
						setState(7192);
						match(JOIN);
						}
						break;
					case ORDER:
						{
						setState(7193);
						match(ORDER);
						setState(7194);
						match(BY);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case GROUP:
					{
					setState(7197);
					match(GROUP);
					setState(7198);
					match(BY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_elementContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public Index_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_element(this);
		}
	}

	public final Index_elementContext index_element() throws RecognitionException {
		Index_elementContext _localctx = new Index_elementContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_index_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7203);
			_la = _input.LA(1);
			if ( !(_la==PRIMARY || _la==NAME_OB) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_listContext extends ParserRuleContext {
		public List<Index_elementContext> index_element() {
			return getRuleContexts(Index_elementContext.class);
		}
		public Index_elementContext index_element(int i) {
			return getRuleContext(Index_elementContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Index_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_list(this);
		}
	}

	public final Index_listContext index_list() throws RecognitionException {
		Index_listContext _localctx = new Index_listContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_index_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7205);
			index_element();
			setState(7210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(7206);
				match(Comma);
				setState(7207);
				index_element();
				}
				}
				setState(7212);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_hint_definitionContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(OBParser.USE, 0); }
		public Key_or_indexContext key_or_index() {
			return getRuleContext(Key_or_indexContext.class,0);
		}
		public Index_hint_scopeContext index_hint_scope() {
			return getRuleContext(Index_hint_scopeContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Index_listContext index_list() {
			return getRuleContext(Index_listContext.class,0);
		}
		public Index_hint_typeContext index_hint_type() {
			return getRuleContext(Index_hint_typeContext.class,0);
		}
		public Index_hint_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_hint_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_hint_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_hint_definition(this);
		}
	}

	public final Index_hint_definitionContext index_hint_definition() throws RecognitionException {
		Index_hint_definitionContext _localctx = new Index_hint_definitionContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_index_hint_definition);
		int _la;
		try {
			setState(7229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7213);
				match(USE);
				setState(7214);
				key_or_index();
				setState(7215);
				index_hint_scope();
				setState(7216);
				match(LeftParen);
				setState(7218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY || _la==NAME_OB) {
					{
					setState(7217);
					index_list();
					}
				}

				setState(7220);
				match(RightParen);
				}
				break;
			case FORCE:
			case IGNORE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7222);
				index_hint_type();
				setState(7223);
				key_or_index();
				setState(7224);
				index_hint_scope();
				setState(7225);
				match(LeftParen);
				setState(7226);
				index_list();
				setState(7227);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_hint_listContext extends ParserRuleContext {
		public List<Index_hint_definitionContext> index_hint_definition() {
			return getRuleContexts(Index_hint_definitionContext.class);
		}
		public Index_hint_definitionContext index_hint_definition(int i) {
			return getRuleContext(Index_hint_definitionContext.class,i);
		}
		public Index_hint_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_hint_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_hint_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_hint_list(this);
		}
	}

	public final Index_hint_listContext index_hint_list() throws RecognitionException {
		Index_hint_listContext _localctx = new Index_hint_listContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_index_hint_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7232); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7231);
					index_hint_definition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7234); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,789,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factorContext extends ParserRuleContext {
		public Normal_relation_factorContext normal_relation_factor() {
			return getRuleContext(Normal_relation_factorContext.class,0);
		}
		public Dot_relation_factorContext dot_relation_factor() {
			return getRuleContext(Dot_relation_factorContext.class,0);
		}
		public Relation_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor(this);
		}
	}

	public final Relation_factorContext relation_factor() throws RecognitionException {
		Relation_factorContext _localctx = new Relation_factorContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_relation_factor);
		try {
			setState(7238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7236);
				normal_relation_factor();
				}
				break;
			case Dot:
				enterOuterAlt(_localctx, 2);
				{
				setState(7237);
				dot_relation_factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_with_star_listContext extends ParserRuleContext {
		public List<Relation_factor_with_starContext> relation_factor_with_star() {
			return getRuleContexts(Relation_factor_with_starContext.class);
		}
		public Relation_factor_with_starContext relation_factor_with_star(int i) {
			return getRuleContext(Relation_factor_with_starContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Relation_with_star_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_with_star_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_with_star_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_with_star_list(this);
		}
	}

	public final Relation_with_star_listContext relation_with_star_list() throws RecognitionException {
		Relation_with_star_listContext _localctx = new Relation_with_star_listContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_relation_with_star_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7240);
			relation_factor_with_star();
			setState(7245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(7241);
				match(Comma);
				setState(7242);
				relation_factor_with_star();
				}
				}
				setState(7247);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_with_starContext extends ParserRuleContext {
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public List<TerminalNode> Dot() { return getTokens(OBParser.Dot); }
		public TerminalNode Dot(int i) {
			return getToken(OBParser.Dot, i);
		}
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public Relation_factor_with_starContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_with_star; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_with_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_with_star(this);
		}
	}

	public final Relation_factor_with_starContext relation_factor_with_star() throws RecognitionException {
		Relation_factor_with_starContext _localctx = new Relation_factor_with_starContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_relation_factor_with_star);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7248);
			relation_name();
			setState(7251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
			case 1:
				{
				setState(7249);
				match(Dot);
				setState(7250);
				relation_name();
				}
				break;
			}
			setState(7255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Dot) {
				{
				setState(7253);
				match(Dot);
				setState(7254);
				match(Star);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Normal_relation_factorContext extends ParserRuleContext {
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public Mysql_reserved_keywordContext mysql_reserved_keyword() {
			return getRuleContext(Mysql_reserved_keywordContext.class,0);
		}
		public Normal_relation_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normal_relation_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNormal_relation_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNormal_relation_factor(this);
		}
	}

	public final Normal_relation_factorContext normal_relation_factor() throws RecognitionException {
		Normal_relation_factorContext _localctx = new Normal_relation_factorContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_normal_relation_factor);
		try {
			setState(7271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7257);
				relation_name();
				setState(7259);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
				case 1:
					{
					setState(7258);
					match(USER_VARIABLE);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7261);
				relation_name();
				setState(7262);
				match(Dot);
				setState(7263);
				relation_name();
				setState(7265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
				case 1:
					{
					setState(7264);
					match(USER_VARIABLE);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7267);
				relation_name();
				setState(7268);
				match(Dot);
				setState(7269);
				mysql_reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dot_relation_factorContext extends ParserRuleContext {
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Mysql_reserved_keywordContext mysql_reserved_keyword() {
			return getRuleContext(Mysql_reserved_keywordContext.class,0);
		}
		public Dot_relation_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dot_relation_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDot_relation_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDot_relation_factor(this);
		}
	}

	public final Dot_relation_factorContext dot_relation_factor() throws RecognitionException {
		Dot_relation_factorContext _localctx = new Dot_relation_factorContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_dot_relation_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7273);
			match(Dot);
			setState(7276);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				{
				setState(7274);
				relation_name();
				}
				break;
			case ACCESSIBLE:
			case ADD:
			case ALTER:
			case AND:
			case ANALYZE:
			case AS:
			case ASENSITIVE:
			case ASC:
			case BETWEEN:
			case BEFORE:
			case BIGINT:
			case BINARY:
			case BLOB:
			case BY:
			case CALL:
			case CASCADE:
			case CASE:
			case CHANGE:
			case CHARACTER:
			case CHECK:
			case CONDITION:
			case CONSTRAINT:
			case CONTINUE:
			case CONVERT:
			case COLLATE:
			case COLUMN:
			case CREATE:
			case CROSS:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR:
			case DAY_HOUR:
			case DAY_MICROSECOND:
			case DAY_MINUTE:
			case DAY_SECOND:
			case DATABASE:
			case DATABASES:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DELAYED:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DETERMINISTIC:
			case DIV:
			case DISTINCTROW:
			case DOUBLE:
			case DROP:
			case DUAL:
			case EACH:
			case ENCLOSED:
			case ELSE:
			case ELSEIF:
			case ESCAPED:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case FETCH:
			case FOREIGN:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case FOR:
			case FORCE:
			case FULLTEXT:
			case GET:
			case GENERATED:
			case GRANT:
			case GROUP:
			case HAVING:
			case HIGH_PRIORITY:
			case HOUR_MICROSECOND:
			case HOUR_MINUTE:
			case HOUR_SECOND:
			case IF:
			case IN:
			case INDEX:
			case INNER:
			case INFILE:
			case INOUT:
			case INSENSITIVE:
			case INTEGER:
			case INT1:
			case INT2:
			case INT3:
			case INT4:
			case INT8:
			case INTERVAL:
			case INSERT:
			case INTO:
			case IO_AFTER_GTIDS:
			case IO_BEFORE_GTIDS:
			case IS:
			case ITERATE:
			case JOIN:
			case KEY:
			case KEYS:
			case KILL:
			case LEAVE:
			case LEFT:
			case LIMIT:
			case LIKE:
			case LINEAR:
			case LINES:
			case LOAD:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LONG:
			case LONGBLOB:
			case LONGTEXT:
			case LOOP:
			case LOW_PRIORITY:
			case MASTER_BIND:
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MATCH:
			case MAXVALUE:
			case MEDIUMBLOB:
			case MEDIUMINT:
			case MEDIUMTEXT:
			case MIDDLEINT:
			case MINUTE_MICROSECOND:
			case MINUTE_SECOND:
			case MOD:
			case MODIFIES:
			case NATURAL:
			case NO_WRITE_TO_BINLOG:
			case ON:
			case OPTION:
			case OPTIMIZE:
			case OPTIONALLY:
			case OR:
			case ORDER:
			case OUT:
			case OUTER:
			case OUTFILE:
			case PROCEDURE:
			case PURGE:
			case PARTITION:
			case PRECISION:
			case PRIMARY:
			case RANGE:
			case READ:
			case READ_WRITE:
			case READS:
			case REAL:
			case RELEASE:
			case REFERENCES:
			case REGEXP:
			case RENAME:
			case REPLACE:
			case REPEAT:
			case REQUIRE:
			case RESIGNAL:
			case RESTRICT:
			case RETURN:
			case REVOKE:
			case RIGHT:
			case SECOND_MICROSECOND:
			case SCHEMA:
			case SCHEMAS:
			case SEPARATOR:
			case SET:
			case SENSITIVE:
			case SHOW:
			case SIGNAL:
			case SMALLINT:
			case SPATIAL:
			case SPECIFIC:
			case SQL:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQL_BIG_RESULT:
			case SQL_SMALL_RESULT:
			case SSL:
			case STARTING:
			case NUMERIC:
			case STORED:
			case STRAIGHT_JOIN:
			case TERMINATED:
			case TINYBLOB:
			case TINYINT:
			case TINYTEXT:
			case TABLE:
			case THEN:
			case TO:
			case TRIGGER:
			case UNDO:
			case UNION:
			case UNLOCK:
			case UNSIGNED:
			case UPDATE:
			case USAGE:
			case USE:
			case USING:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case VALUES:
			case VARBINARY:
			case VARCHAR:
			case VARYING:
			case VIRTUAL:
			case WHERE:
			case WHILE:
			case WITH:
			case WRITE:
			case XOR:
			case YEAR_MONTH:
			case ZEROFILL:
			case NOT:
			case IGNORE:
			case VARCHARACTER:
			case RLIKE:
			case CHAR:
			case INT:
				{
				setState(7275);
				mysql_reserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_in_hintContext extends ParserRuleContext {
		public Normal_relation_factorContext normal_relation_factor() {
			return getRuleContext(Normal_relation_factorContext.class,0);
		}
		public Qb_name_optionContext qb_name_option() {
			return getRuleContext(Qb_name_optionContext.class,0);
		}
		public Relation_factor_in_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_hint(this);
		}
	}

	public final Relation_factor_in_hintContext relation_factor_in_hint() throws RecognitionException {
		Relation_factor_in_hintContext _localctx = new Relation_factor_in_hintContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_relation_factor_in_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7278);
			normal_relation_factor();
			setState(7279);
			qb_name_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qb_name_optionContext extends ParserRuleContext {
		public TerminalNode At() { return getToken(OBParser.At, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Qb_name_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qb_name_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterQb_name_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitQb_name_option(this);
		}
	}

	public final Qb_name_optionContext qb_name_option() throws RecognitionException {
		Qb_name_optionContext _localctx = new Qb_name_optionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_qb_name_option);
		try {
			setState(7284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7281);
				match(At);
				setState(7282);
				match(NAME_OB);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7283);
				empty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_in_hint_listContext extends ParserRuleContext {
		public List<Relation_factor_in_hintContext> relation_factor_in_hint() {
			return getRuleContexts(Relation_factor_in_hintContext.class);
		}
		public Relation_factor_in_hintContext relation_factor_in_hint(int i) {
			return getRuleContext(Relation_factor_in_hintContext.class,i);
		}
		public List<Relation_sep_optionContext> relation_sep_option() {
			return getRuleContexts(Relation_sep_optionContext.class);
		}
		public Relation_sep_optionContext relation_sep_option(int i) {
			return getRuleContext(Relation_sep_optionContext.class,i);
		}
		public Relation_factor_in_hint_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_hint_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_hint_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_hint_list(this);
		}
	}

	public final Relation_factor_in_hint_listContext relation_factor_in_hint_list() throws RecognitionException {
		Relation_factor_in_hint_listContext _localctx = new Relation_factor_in_hint_listContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_relation_factor_in_hint_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7286);
			relation_factor_in_hint();
			setState(7292);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,799,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7287);
					relation_sep_option();
					setState(7288);
					relation_factor_in_hint();
					}
					} 
				}
				setState(7294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,799,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_sep_optionContext extends ParserRuleContext {
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Relation_sep_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_sep_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_sep_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_sep_option(this);
		}
	}

	public final Relation_sep_optionContext relation_sep_option() throws RecognitionException {
		Relation_sep_optionContext _localctx = new Relation_sep_optionContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_relation_sep_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(7295);
				match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_in_pq_hintContext extends ParserRuleContext {
		public Relation_factor_in_hintContext relation_factor_in_hint() {
			return getRuleContext(Relation_factor_in_hintContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Relation_factor_in_hint_listContext relation_factor_in_hint_list() {
			return getRuleContext(Relation_factor_in_hint_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Relation_factor_in_pq_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_pq_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_pq_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_pq_hint(this);
		}
	}

	public final Relation_factor_in_pq_hintContext relation_factor_in_pq_hint() throws RecognitionException {
		Relation_factor_in_pq_hintContext _localctx = new Relation_factor_in_pq_hintContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_relation_factor_in_pq_hint);
		try {
			setState(7303);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7298);
				relation_factor_in_hint();
				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(7299);
				match(LeftParen);
				setState(7300);
				relation_factor_in_hint_list();
				setState(7301);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_in_leading_hintContext extends ParserRuleContext {
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Relation_factor_in_hint_listContext relation_factor_in_hint_list() {
			return getRuleContext(Relation_factor_in_hint_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Relation_factor_in_leading_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_leading_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_leading_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_leading_hint(this);
		}
	}

	public final Relation_factor_in_leading_hintContext relation_factor_in_leading_hint() throws RecognitionException {
		Relation_factor_in_leading_hintContext _localctx = new Relation_factor_in_leading_hintContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_relation_factor_in_leading_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7305);
			match(LeftParen);
			setState(7306);
			relation_factor_in_hint_list();
			setState(7307);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_in_leading_hint_listContext extends ParserRuleContext {
		public Relation_factor_in_leading_hintContext relation_factor_in_leading_hint() {
			return getRuleContext(Relation_factor_in_leading_hintContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public List<Relation_factor_in_leading_hint_listContext> relation_factor_in_leading_hint_list() {
			return getRuleContexts(Relation_factor_in_leading_hint_listContext.class);
		}
		public Relation_factor_in_leading_hint_listContext relation_factor_in_leading_hint_list(int i) {
			return getRuleContext(Relation_factor_in_leading_hint_listContext.class,i);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Relation_factor_in_hint_listContext relation_factor_in_hint_list() {
			return getRuleContext(Relation_factor_in_hint_listContext.class,0);
		}
		public List<Relation_sep_optionContext> relation_sep_option() {
			return getRuleContexts(Relation_sep_optionContext.class);
		}
		public Relation_sep_optionContext relation_sep_option(int i) {
			return getRuleContext(Relation_sep_optionContext.class,i);
		}
		public Relation_factor_in_hintContext relation_factor_in_hint() {
			return getRuleContext(Relation_factor_in_hintContext.class,0);
		}
		public Relation_factor_in_leading_hint_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_leading_hint_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_leading_hint_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_leading_hint_list(this);
		}
	}

	public final Relation_factor_in_leading_hint_listContext relation_factor_in_leading_hint_list() throws RecognitionException {
		return relation_factor_in_leading_hint_list(0);
	}

	private Relation_factor_in_leading_hint_listContext relation_factor_in_leading_hint_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_factor_in_leading_hint_listContext _localctx = new Relation_factor_in_leading_hint_listContext(_ctx, _parentState);
		Relation_factor_in_leading_hint_listContext _prevctx = _localctx;
		int _startState = 868;
		enterRecursionRule(_localctx, 868, RULE_relation_factor_in_leading_hint_list, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(7310);
				relation_factor_in_leading_hint();
				}
				break;
			case 2:
				{
				setState(7311);
				match(LeftParen);
				setState(7315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(7312);
					relation_factor_in_hint_list();
					setState(7313);
					relation_sep_option();
					}
				}

				setState(7317);
				relation_factor_in_leading_hint_list(0);
				setState(7318);
				match(RightParen);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7338);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,806,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7336);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
					case 1:
						{
						_localctx = new Relation_factor_in_leading_hint_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_relation_factor_in_leading_hint_list);
						setState(7322);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7323);
						relation_sep_option();
						setState(7326);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ROLE:
						case JSON_QUERY:
						case QUOTA_NAME:
						case ADMIN:
						case ALLOW:
						case EUCLIDEAN:
						case STSTOKEN:
						case REWRITE:
						case VECTOR_DISTANCE:
						case PARTITION_TYPE:
						case DOT:
						case TASK_ID:
						case COMPUTATION:
						case MANHATTAN:
						case AUTO_REFRESH:
						case ARRAY:
						case SINGLE:
						case SHARED_STORAGE_DEST:
						case DISALLOW:
						case UnderlineST_ASMVT:
						case CONDITIONAL:
						case RB_AND_AGG:
						case COMPRESSION_CODE:
						case FILE_BLOCK_SIZE:
						case APPROXIMATE:
						case MAX_NET_BANDWIDTH:
						case MULTIVALUE:
						case SHARED_STORAGE_INFO:
						case RB_OR_AGG:
						case DATA_SOURCE:
						case PROJECT_NAME:
						case VECTOR:
						case ENDPOINT:
						case DATA_DISK_SIZE:
						case BUFFER_SIZE:
						case PROPERTIES:
						case ATTRIBUTE:
						case ASIS:
						case SCALARS:
						case USER_SPECIFIED:
						case ACCESS_INFO:
						case ROARINGBITMAP:
						case VALIDATION:
						case COSINE:
						case SUM_OPNSIZE:
						case ACCESSKEY:
						case MICRO_INDEX_CLUSTERED:
						case AUTO_INCREMENT_CACHE_SIZE:
						case ACCESSTYPE:
						case EXTERNAL_STORAGE_DEST:
						case OVERWRITE:
						case LAST_REFRESH_SCN:
						case WITHOUT:
						case MAX_FILE_SIZE:
						case APPROX:
						case MISMATCH:
						case SS_MICRO_CACHE:
						case OPTIMIZER_COSTS:
						case PAXOS_REPLICA_NUM:
						case ACCESSID:
						case UNCONDITIONAL:
						case NET_BANDWIDTH_WEIGHT:
						case RB_BUILD_AGG:
						case ACCESS:
						case OBJECT_ID:
						case AGAINST:
						case ALWAYS:
						case NAMESPACE:
						case CIPHER:
						case COLUMNS:
						case LS:
						case CYCLE:
						case NUMBER:
						case ROWID:
						case SYNCHRONOUS:
						case IMMEDIATE:
						case FIELDS:
						case FULL:
						case ID:
						case INCLUDING:
						case LIB:
						case ORDINALITY:
						case ISSUER:
						case LANGUAGE:
						case BISON_LIST:
						case LOCAL:
						case UNLIMITED:
						case MERGE:
						case MODE:
						case IOPS_WEIGHT:
						case PARSER:
						case MIN_MAX:
						case PUBLIC:
						case ROWS:
						case REJECT:
						case PLUS:
						case SUBJECT:
						case SYSDATE:
						case TEXT:
						case CALIBRATION:
						case LINE_DELIMITER:
						case GEOMCOLLECTION:
						case QUERY_RESPONSE_TIME:
						case REDUNDANCY:
						case CALIBRATION_INFO:
						case SCN:
						case WINDOW:
						case X509:
						case STRONG:
						case WEAK:
						case CONNECT:
						case FROZEN:
						case EXCEPT:
						case MINUS:
						case INTERSECT:
						case ISNULL:
						case AUDIT:
						case WARNINGS:
						case FORMAT:
						case MINVALUE:
						case EMPTY_FIELD_AS_NULL:
						case UNINSTALL:
						case UNDOFILE:
						case MASTER_SSL_CA:
						case YEAR:
						case DISCONNECT:
						case STOP:
						case SIZE:
						case AT:
						case RELAY_LOG_POS:
						case POOL:
						case CURDATE:
						case JSON_VALUE:
						case ZONE_TYPE:
						case LOCATION:
						case WEIGHT_STRING:
						case CHANGED:
						case MASTER_SSL_CAPATH:
						case NTH_VALUE:
						case SERIAL:
						case PROGRESSIVE_MERGE_NUM:
						case QUEUE_TIME:
						case TABLET_MAX_SIZE:
						case ILOGCACHE:
						case AUTHORS:
						case MIGRATE:
						case CONSISTENT:
						case SUSPEND:
						case REMOTE_OSS:
						case SECURITY:
						case SET_SLAVE_CLUSTER:
						case FAST:
						case PREVIEW:
						case BANDWIDTH:
						case TRUNCATE:
						case BACKUP_BACKUP_DEST:
						case CONSTRAINT_SCHEMA:
						case STATEMENT:
						case MASTER_SSL_CERT:
						case TABLE_NAME:
						case PRIORITY:
						case DO:
						case MASTER_RETRY_COUNT:
						case REPLICA:
						case RECOVERY:
						case OLD_KEY:
						case DISABLE:
						case PORT:
						case REBUILD:
						case FOLLOWER:
						case ROOT:
						case REDOFILE:
						case MASTER_SERVER_ID:
						case NCHAR:
						case KEY_BLOCK_SIZE:
						case SEQUENCE:
						case MIGRATION:
						case SUBPARTITION:
						case ROW_NUMBER:
						case COMPRESSION:
						case BIT:
						case SAMPLE:
						case UNLOCKED:
						case CLASS_ORIGIN:
						case STATEMENTS:
						case ACTION:
						case REDUNDANT:
						case UPGRADE:
						case VALIDATE:
						case START:
						case TEMPTABLE:
						case RECYCLEBIN:
						case PROFILES:
						case ERRORS:
						case LEAVES:
						case UNDEFINED:
						case EVERY:
						case SHARDING:
						case BYTE:
						case FLUSH:
						case MIN_ROWS:
						case ERROR_P:
						case MAX_USER_CONNECTIONS:
						case MAX_CPU:
						case LOCKED:
						case IO:
						case BTREE:
						case SLOT_IDX:
						case HASH:
						case ROTATE:
						case COLLATION:
						case MASTER:
						case ENCRYPTION:
						case MAX:
						case TRANSACTION:
						case SQL_TSI_MONTH:
						case ARBITRATION:
						case MAX_QUERIES_PER_HOUR:
						case COMMENT:
						case CTX_ID:
						case MIN_IOPS:
						case NVARCHAR:
						case OFF:
						case BIT_XOR:
						case PAUSE:
						case QUICK:
						case PRETTY:
						case DUPLICATE:
						case WAIT:
						case FIELD_OPTIONALLY_ENCLOSED_BY:
						case DES_KEY_FILE:
						case ENGINES:
						case RETURNS:
						case MASTER_USER:
						case SOCKET:
						case MASTER_DELAY:
						case FILE_ID:
						case FIRST:
						case TABLET:
						case CLIENT:
						case ENGINE_:
						case EXCLUDING:
						case TABLES:
						case TRADITIONAL:
						case BOOTSTRAP:
						case STDDEV:
						case DATAFILE:
						case INVOKER:
						case DEPTH:
						case NORMAL:
						case LN:
						case COLUMN_NAME:
						case TRIGGERS:
						case RESET:
						case EVENT:
						case COALESCE:
						case RESPECT:
						case STATUS:
						case AUTO_INCREMENT_MODE:
						case UNBOUNDED:
						case WRAPPER:
						case TIMESTAMP:
						case PARTITIONS:
						case SUBSTR:
						case CHUNK:
						case FILEX:
						case BACKUPSET:
						case UNIT:
						case PRIVILEGES:
						case DEMAND:
						case BACKUPPIECE:
						case LESS:
						case SWITCH:
						case DIAGNOSTICS:
						case REDO_BUFFER_SIZE:
						case NO:
						case MAJOR:
						case ACTIVE:
						case ROUTINE:
						case FOLLOWING:
						case DEFAULT_LOB_INROW_THRESHOLD:
						case LOB_INROW_THRESHOLD:
						case SCHEMA_ID:
						case LATERAL:
						case ROLLBACK:
						case READ_ONLY:
						case MEMBER:
						case PARTITION_ID:
						case DUMP:
						case EXTERNAL:
						case APPROX_COUNT_DISTINCT_SYNOPSIS:
						case GROUPING:
						case OF:
						case SLOG:
						case OJ:
						case ARCHIVELOG:
						case MAX_CONNECTIONS_PER_HOUR:
						case ASYNCHRONOUS:
						case ENCODING:
						case SECOND:
						case UNKNOWN:
						case POINT:
						case PL:
						case MEMSTORE_PERCENT:
						case STD:
						case POLYGON:
						case PS:
						case OLD:
						case TABLE_ID:
						case CONTEXT:
						case FINAL_COUNT:
						case MASTER_CONNECT_RETRY:
						case POSITION:
						case DISCARD:
						case PREV:
						case RECOVER:
						case PROCESS:
						case DEALLOCATE:
						case OLD_PASSWORD:
						case FAILOVER:
						case LISTAGG:
						case SLOW:
						case NOAUDIT:
						case SUM:
						case OPTIONS:
						case MIN:
						case RT:
						case RELOAD:
						case ONE:
						case DELAY_KEY_WRITE:
						case ORIG_DEFAULT:
						case INDEXED:
						case RETURNING:
						case SQL_TSI_HOUR:
						case TIMESTAMPDIFF:
						case RESTORE:
						case OFFSET:
						case TEMPORARY:
						case VARIANCE:
						case SNAPSHOT:
						case STATISTICS:
						case SERVER_TYPE:
						case COMMITTED:
						case INDEXES:
						case FREEZE:
						case SCOPE:
						case IDC:
						case VIEW:
						case ONE_SHOT:
						case ACCOUNT:
						case LOCALITY:
						case REVERSE:
						case UP:
						case CLUSTER_ID:
						case NOARCHIVELOG:
						case MAX_SIZE:
						case PAGE:
						case NAME:
						case ROW_COUNT:
						case LAST:
						case WASH:
						case LOGONLY_REPLICA_NUM:
						case DELAY:
						case SUBDATE:
						case INCREMENTAL:
						case ROLLING:
						case VERIFY:
						case CONTAINS:
						case GENERAL:
						case VISIBLE:
						case SIGNED:
						case SERVER:
						case NEXT:
						case ENDS:
						case GLOBAL:
						case ROOTSERVICE_LIST:
						case SHUTDOWN:
						case VERBOSE:
						case CLUSTER_NAME:
						case MASTER_PORT:
						case MYSQL_ERRNO:
						case XA:
						case TIME:
						case DATETIME:
						case NOMINVALUE:
						case BOOL:
						case DIRECTORY:
						case DATA_TABLE_ID:
						case SEQUENCES:
						case PRETTY_COLOR:
						case VALID:
						case MASTER_SSL_KEY:
						case MASTER_PASSWORD:
						case PLAN:
						case SHARE:
						case MULTIPOLYGON:
						case STDDEV_SAMP:
						case USE_BLOOM_FILTER:
						case CONSTRAINT_CATALOG:
						case CLUSTER:
						case EXCHANGE:
						case GRANTS:
						case CAST:
						case SERVER_PORT:
						case SQL_CACHE:
						case MAX_USED_PART_ID:
						case HYBRID_HIST:
						case INSTANCE:
						case FUNCTION:
						case NOWAIT:
						case INVISIBLE:
						case DENSE_RANK:
						case COUNT:
						case NAMES:
						case MY_NAME:
						case P_ENTITY:
						case ISOLATE:
						case MAX_ROWS:
						case CTXCAT:
						case ISOLATION:
						case REPLICATION:
						case DECRYPTION:
						case REMOVE:
						case STATS_AUTO_RECALC:
						case CONSISTENT_MODE:
						case MODIFY:
						case UNCOMMITTED:
						case PHYSICAL:
						case NO_WAIT:
						case BACKUP_COPIES:
						case UNIT_NUM:
						case PERCENTAGE:
						case MAX_IOPS:
						case SPFILE:
						case REPEATABLE:
						case COMPLETION:
						case CONDENSED:
						case ROOTTABLE:
						case SUBSTRING:
						case ZONE:
						case BACKED:
						case SERVICE:
						case TEMPLATE:
						case DATE_SUB:
						case EXPIRE_INFO:
						case EXPIRE:
						case ENABLE:
						case HOSTS:
						case SCHEMA_NAME:
						case EXPANSION:
						case REORGANIZE:
						case BLOCK_SIZE:
						case TRIM_SPACE:
						case MINOR:
						case RESUME:
						case COMPLETE:
						case STATS_PERSISTENT:
						case NODEGROUP:
						case PARTITIONING:
						case BIT_AND:
						case SUPER:
						case TIMES:
						case COMMIT:
						case SAVEPOINT:
						case UNTIL:
						case USER:
						case LEAK_RATE:
						case MEMTABLE:
						case CHARSET:
						case MOVE:
						case XML:
						case PATH:
						case IPC:
						case TRIM:
						case PERFORMANCE:
						case RANK:
						case VAR_POP:
						case DEFAULT_AUTH:
						case EXTENT_SIZE:
						case BINLOG:
						case LEAK_MOD:
						case CLOG:
						case GEOMETRYCOLLECTION:
						case STORAGE:
						case MEDIUM:
						case USE_FRM:
						case MASTER_HEARTBEAT_PERIOD:
						case SUBPARTITIONS:
						case CUBE:
						case FRAGMENTATION:
						case BALANCE:
						case QUERY:
						case POLICY:
						case THROTTLE:
						case SQL_TSI_QUARTER:
						case REPAIR:
						case MASTER_SSL_CIPHER:
						case KEY_VERSION:
						case CATALOG_NAME:
						case NDBCLUSTER:
						case CONNECTION:
						case COMPACT:
						case SYNCHRONIZATION:
						case AVAILABILITY:
						case INCR:
						case CANCEL:
						case SIMPLE:
						case VARIABLES:
						case SQL_TSI_WEEK:
						case P_CHUNK:
						case SYSTEM:
						case ROOTSERVICE:
						case PLUGIN_DIR:
						case ASCII:
						case INFO:
						case SKIP_HEADER:
						case SQL_THREAD:
						case TYPES:
						case LEADER:
						case FOUND:
						case EXTRACT:
						case FIXED:
						case CACHE:
						case KV_ATTRIBUTES:
						case CURRENT:
						case STACKED:
						case RETURNED_SQLSTATE:
						case SKIP_INDEX:
						case END:
						case PRESERVE:
						case BADFILE:
						case LOG_DISK_SIZE:
						case SQL_BUFFER_RESULT:
						case JSON:
						case SOME:
						case INDEX_TABLE_ID:
						case PATTERN:
						case RECOVERY_WINDOW:
						case FREQUENCY:
						case LOCKS:
						case MANUAL:
						case GEOMETRY:
						case IDENTIFIED:
						case STORAGE_FORMAT_VERSION:
						case OVER:
						case USER_RESOURCES:
						case BACKUPROUND:
						case DESTINATION:
						case SONAME:
						case OUTLINE:
						case MASTER_LOG_FILE:
						case NOMAXVALUE:
						case ESTIMATE:
						case SLAVE:
						case SKIP_BLANK_LINES:
						case GTS:
						case EXPORT:
						case AVG_ROW_LENGTH:
						case ENFORCED:
						case FLASHBACK:
						case SESSION_USER:
						case TABLEGROUPS:
						case CURTIME:
						case REPLICA_TYPE:
						case AGGREGATE:
						case TRANSFER:
						case JSON_ARRAYAGG:
						case PERCENT_RANK:
						case ENUM:
						case NATIONAL:
						case RECYCLE:
						case REGION:
						case MUTEX:
						case PARALLEL:
						case NOPARALLEL:
						case NDB:
						case SYSTEM_USER:
						case MAXIMIZE:
						case MAX_UPDATES_PER_HOUR:
						case CURSOR_NAME:
						case CONCURRENT:
						case DUMPFILE:
						case COMPRESSED:
						case LINESTRING:
						case DYNAMIC:
						case CHAIN:
						case INCREMENT:
						case LAG:
						case BASELINE_ID:
						case NEW:
						case SQL_TSI_YEAR:
						case THAN:
						case CPU:
						case HOST:
						case VALUE:
						case LOGS:
						case SERIALIZABLE:
						case AUTO_INCREMENT:
						case BACKUP:
						case LOGFILE:
						case ROW_FORMAT:
						case SET_MASTER_CLUSTER:
						case MINUTE:
						case SWAPS:
						case TASK:
						case INNODB:
						case IO_THREAD:
						case HISTOGRAM:
						case PCTFREE:
						case PARAMETERS:
						case OBJECT:
						case TABLESPACE:
						case OBCONFIG_URL:
						case AUTO:
						case PASSWORD:
						case ROW:
						case MESSAGE_TEXT:
						case DISK:
						case FAULTS:
						case HOUR:
						case REFRESH:
						case COLUMN_STAT:
						case ANY:
						case UNIT_GROUP:
						case TTL:
						case ERROR_CODE:
						case PHASE:
						case ENTITY:
						case PROFILE:
						case LAST_VALUE:
						case RESTART:
						case TRACE:
						case LOGICAL_READS:
						case DATE_ADD:
						case BLOCK_INDEX:
						case SERVER_IP:
						case CODE:
						case PLUGINS:
						case ADDDATE:
						case VIRTUAL_COLUMN_ID:
						case COLUMN_FORMAT:
						case NESTED:
						case CLEAN:
						case MASTER_SSL:
						case CLEAR:
						case CHECKSUM:
						case INSTALL:
						case MONTH:
						case NEVER:
						case AFTER:
						case CLOSE:
						case JSON_OBJECTAGG:
						case SET_TP:
						case OWNER:
						case BLOOM_FILTER:
						case ILOG:
						case META:
						case STARTS:
						case PLANREGRESS:
						case AUTOEXTEND_SIZE:
						case TABLET_ID:
						case SOURCE:
						case IGNORE_SERVER_IDS:
						case REPLICA_NUM:
						case BINDING:
						case MICROSECOND:
						case UNDO_BUFFER_SIZE:
						case SWITCHOVER:
						case EXTENDED_NOADDR:
						case GLOBAL_NAME:
						case SPLIT:
						case BASELINE:
						case MEMORY:
						case DESCRIPTION:
						case SEED:
						case RTREE:
						case RESOURCE:
						case STDDEV_POP:
						case RUN:
						case OBSOLETE:
						case SQL_AFTER_GTIDS:
						case OPEN:
						case SQL_TSI_DAY:
						case STRING:
						case RELAY_THREAD:
						case BREADTH:
						case NOCACHE:
						case UNUSUAL:
						case RELAYLOG:
						case SQL_BEFORE_GTIDS:
						case PRIMARY_ZONE:
						case TABLE_CHECKSUM:
						case ZONE_LIST:
						case DATABASE_ID:
						case TP_NO:
						case NETWORK:
						case PROTECTION:
						case BOOLEAN:
						case AVG:
						case MULTILINESTRING:
						case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
						case NOW:
						case BIT_OR:
						case PROXY:
						case DUPLICATE_SCOPE:
						case STATS_SAMPLE_PAGES:
						case TABLET_SIZE:
						case BASE:
						case KVCACHE:
						case RELAY:
						case MEMORY_SIZE:
						case CONTRIBUTORS:
						case EMPTY:
						case PARTIAL:
						case REPORT:
						case ESCAPE:
						case CLONE:
						case MASTER_AUTO_POSITION:
						case DISKGROUP:
						case CALC_PARTITION_ID:
						case TP_NAME:
						case ACTIVATE:
						case SQL_AFTER_MTS_GAPS:
						case EFFECTIVE:
						case FIRST_VALUE:
						case SQL_TSI_MINUTE:
						case UNICODE:
						case QUARTER:
						case ANALYSE:
						case DEFINER:
						case NONE:
						case PROCESSLIST:
						case TYPE:
						case INSERT_METHOD:
						case EXTENDED:
						case LOG:
						case WHENEVER:
						case LEVEL:
						case TIME_ZONE_INFO:
						case TIMESTAMPADD:
						case GET_FORMAT:
						case PREPARE:
						case MATERIALIZED:
						case STANDBY:
						case WORK:
						case HANDLER:
						case CUME_DIST:
						case LEAK:
						case INITIAL_SIZE:
						case RELAY_LOG_FILE:
						case STORING:
						case IMPORT:
						case HELP:
						case CREATE_TIMESTAMP:
						case COMPUTE:
						case SOUNDS:
						case TABLE_MODE:
						case COPY:
						case SESSION:
						case DAG:
						case NOCYCLE:
						case SQL_NO_CACHE:
						case EXECUTE:
						case PRECEDING:
						case SWITCHES:
						case PACK_KEYS:
						case ENABLE_EXTENDED_ROWID:
						case SQL_ID:
						case NOORDER:
						case TENANT_ID:
						case CHECKPOINT:
						case DAY:
						case GROUP_CONCAT:
						case JSON_TABLE:
						case LEAD:
						case EVENTS:
						case RECURSIVE:
						case ONLY:
						case TABLEGROUP_ID:
						case TOP_K_FRE_HIST:
						case MASTER_SSL_CRL:
						case RESOURCE_POOL:
						case RESOURCE_POOL_LIST:
						case NTILE:
						case NULL_IF_EXETERNAL:
						case BUCKETS:
						case SKEWONLY:
						case SCHEDULE:
						case JOB:
						case SRID:
						case MASTER_LOG_POS:
						case SUBCLASS_ORIGIN:
						case MULTIPOINT:
						case BLOCK:
						case SQL_TSI_SECOND:
						case DATE:
						case ROLLUP:
						case MIN_CPU:
						case OCCUR:
						case DATA:
						case SUCCESSFUL:
						case REDO_TRANSPORT_OPTIONS:
						case FIELD_DELIMITER:
						case MASTER_HOST:
						case VAR_SAMP:
						case ALGORITHM:
						case EXPIRED:
						case CONSTRAINT_NAME:
						case APPROX_COUNT_DISTINCT:
						case BASIC:
						case DEFAULT_TABLEGROUP:
						case LIST_:
						case WEEK:
						case LINK:
						case STATEMENT_ID:
						case NULLS:
						case MASTER_SSL_CRLPATH:
						case CASCADED:
						case PLUGIN:
						case ENCRYPTED:
						case TENANT:
						case STORE:
						case LOG_RESTORE_SOURCE:
						case ENABLE_ARBITRATION_SERVICE:
						case NAME_OB:
						case STAT:
						case ALL_META:
						case ALL_USER:
						case BEGI:
						case REMAP:
						case HIDDEN:
							{
							setState(7324);
							relation_factor_in_hint();
							}
							break;
						case LeftParen:
							{
							setState(7325);
							relation_factor_in_leading_hint();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 2:
						{
						_localctx = new Relation_factor_in_leading_hint_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_relation_factor_in_leading_hint_list);
						setState(7328);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7329);
						relation_sep_option();
						setState(7330);
						match(LeftParen);
						setState(7331);
						relation_factor_in_hint_list();
						setState(7332);
						relation_sep_option();
						setState(7333);
						relation_factor_in_leading_hint_list(0);
						setState(7334);
						match(RightParen);
						}
						break;
					}
					} 
				}
				setState(7340);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,806,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Relation_factor_in_leading_hint_list_entryContext extends ParserRuleContext {
		public Relation_factor_in_leading_hint_listContext relation_factor_in_leading_hint_list() {
			return getRuleContext(Relation_factor_in_leading_hint_listContext.class,0);
		}
		public Relation_factor_in_hint_listContext relation_factor_in_hint_list() {
			return getRuleContext(Relation_factor_in_hint_listContext.class,0);
		}
		public Relation_sep_optionContext relation_sep_option() {
			return getRuleContext(Relation_sep_optionContext.class,0);
		}
		public Relation_factor_in_leading_hint_list_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_leading_hint_list_entry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_leading_hint_list_entry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_leading_hint_list_entry(this);
		}
	}

	public final Relation_factor_in_leading_hint_list_entryContext relation_factor_in_leading_hint_list_entry() throws RecognitionException {
		Relation_factor_in_leading_hint_list_entryContext _localctx = new Relation_factor_in_leading_hint_list_entryContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_relation_factor_in_leading_hint_list_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
				{
				setState(7341);
				relation_factor_in_hint_list();
				setState(7342);
				relation_sep_option();
				}
			}

			setState(7346);
			relation_factor_in_leading_hint_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_factor_in_use_join_hint_listContext extends ParserRuleContext {
		public Relation_factor_in_hintContext relation_factor_in_hint() {
			return getRuleContext(Relation_factor_in_hintContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Relation_factor_in_hint_listContext relation_factor_in_hint_list() {
			return getRuleContext(Relation_factor_in_hint_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Relation_factor_in_use_join_hint_listContext relation_factor_in_use_join_hint_list() {
			return getRuleContext(Relation_factor_in_use_join_hint_listContext.class,0);
		}
		public Relation_sep_optionContext relation_sep_option() {
			return getRuleContext(Relation_sep_optionContext.class,0);
		}
		public Relation_factor_in_use_join_hint_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_factor_in_use_join_hint_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_factor_in_use_join_hint_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_factor_in_use_join_hint_list(this);
		}
	}

	public final Relation_factor_in_use_join_hint_listContext relation_factor_in_use_join_hint_list() throws RecognitionException {
		return relation_factor_in_use_join_hint_list(0);
	}

	private Relation_factor_in_use_join_hint_listContext relation_factor_in_use_join_hint_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relation_factor_in_use_join_hint_listContext _localctx = new Relation_factor_in_use_join_hint_listContext(_ctx, _parentState);
		Relation_factor_in_use_join_hint_listContext _prevctx = _localctx;
		int _startState = 872;
		enterRecursionRule(_localctx, 872, RULE_relation_factor_in_use_join_hint_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7354);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				{
				setState(7349);
				relation_factor_in_hint();
				}
				break;
			case LeftParen:
				{
				setState(7350);
				match(LeftParen);
				setState(7351);
				relation_factor_in_hint_list();
				setState(7352);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(7368);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,810,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7366);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
					case 1:
						{
						_localctx = new Relation_factor_in_use_join_hint_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_relation_factor_in_use_join_hint_list);
						setState(7356);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7357);
						relation_sep_option();
						setState(7358);
						relation_factor_in_hint();
						}
						break;
					case 2:
						{
						_localctx = new Relation_factor_in_use_join_hint_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_relation_factor_in_use_join_hint_list);
						setState(7360);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7361);
						relation_sep_option();
						setState(7362);
						match(LeftParen);
						setState(7363);
						relation_factor_in_hint_list();
						setState(7364);
						match(RightParen);
						}
						break;
					}
					} 
				}
				setState(7370);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,810,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Tracing_num_listContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Relation_sep_optionContext relation_sep_option() {
			return getRuleContext(Relation_sep_optionContext.class,0);
		}
		public Tracing_num_listContext tracing_num_list() {
			return getRuleContext(Tracing_num_listContext.class,0);
		}
		public Tracing_num_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tracing_num_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTracing_num_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTracing_num_list(this);
		}
	}

	public final Tracing_num_listContext tracing_num_list() throws RecognitionException {
		Tracing_num_listContext _localctx = new Tracing_num_listContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_tracing_num_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7371);
			match(INTNUM);
			setState(7375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTNUM || _la==Comma) {
				{
				setState(7372);
				relation_sep_option();
				setState(7373);
				tracing_num_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_conditionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Join_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJoin_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJoin_condition(this);
		}
	}

	public final Join_conditionContext join_condition() throws RecognitionException {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_join_condition);
		try {
			setState(7384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(7377);
				match(ON);
				setState(7378);
				expr(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(7379);
				match(USING);
				setState(7380);
				match(LeftParen);
				setState(7381);
				column_list();
				setState(7382);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public List<Table_factorContext> table_factor() {
			return getRuleContexts(Table_factorContext.class);
		}
		public Table_factorContext table_factor(int i) {
			return getRuleContext(Table_factorContext.class,i);
		}
		public Inner_join_typeContext inner_join_type() {
			return getRuleContext(Inner_join_typeContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public Join_conditionContext join_condition() {
			return getRuleContext(Join_conditionContext.class,0);
		}
		public Natural_join_typeContext natural_join_type() {
			return getRuleContext(Natural_join_typeContext.class,0);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJoined_table(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		return joined_table(0);
	}

	private Joined_tableContext joined_table(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, _parentState);
		Joined_tableContext _prevctx = _localctx;
		int _startState = 878;
		enterRecursionRule(_localctx, 878, RULE_joined_table, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				setState(7387);
				table_factor();
				setState(7388);
				inner_join_type();
				setState(7389);
				table_factor();
				setState(7392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(7390);
					match(ON);
					setState(7391);
					expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7394);
				table_factor();
				setState(7395);
				inner_join_type();
				setState(7396);
				table_factor();
				setState(7397);
				match(USING);
				setState(7398);
				match(LeftParen);
				setState(7399);
				column_list();
				setState(7400);
				match(RightParen);
				}
				break;
			case 3:
				{
				setState(7402);
				table_factor();
				setState(7403);
				outer_join_type();
				setState(7404);
				table_factor();
				setState(7406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(7405);
					join_condition();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(7408);
				table_factor();
				setState(7409);
				natural_join_type();
				setState(7410);
				table_factor();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7441);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,819,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7439);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
					case 1:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7414);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7415);
						inner_join_type();
						setState(7416);
						table_factor();
						setState(7419);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
						case 1:
							{
							setState(7417);
							match(ON);
							setState(7418);
							expr(0);
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7421);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7422);
						inner_join_type();
						setState(7423);
						table_factor();
						setState(7424);
						match(USING);
						setState(7425);
						match(LeftParen);
						setState(7426);
						column_list();
						setState(7427);
						match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7429);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7430);
						outer_join_type();
						setState(7431);
						table_factor();
						setState(7433);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
						case 1:
							{
							setState(7432);
							join_condition();
							}
							break;
						}
						}
						break;
					case 4:
						{
						_localctx = new Joined_tableContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_joined_table);
						setState(7435);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7436);
						natural_join_type();
						setState(7437);
						table_factor();
						}
						break;
					}
					} 
				}
				setState(7443);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,819,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Natural_join_typeContext extends ParserRuleContext {
		public TerminalNode NATURAL() { return getToken(OBParser.NATURAL, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public TerminalNode JOIN() { return getToken(OBParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(OBParser.INNER, 0); }
		public Natural_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_natural_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNatural_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNatural_join_type(this);
		}
	}

	public final Natural_join_typeContext natural_join_type() throws RecognitionException {
		Natural_join_typeContext _localctx = new Natural_join_typeContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_natural_join_type);
		int _la;
		try {
			setState(7451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7444);
				match(NATURAL);
				setState(7445);
				outer_join_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7446);
				match(NATURAL);
				setState(7448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(7447);
					match(INNER);
					}
				}

				setState(7450);
				match(JOIN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inner_join_typeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(OBParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(OBParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(OBParser.CROSS, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(OBParser.STRAIGHT_JOIN, 0); }
		public Inner_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inner_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInner_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInner_join_type(this);
		}
	}

	public final Inner_join_typeContext inner_join_type() throws RecognitionException {
		Inner_join_typeContext _localctx = new Inner_join_typeContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_inner_join_type);
		int _la;
		try {
			setState(7460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(7453);
					match(INNER);
					}
				}

				setState(7456);
				match(JOIN);
				}
				break;
			case CROSS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7457);
				match(CROSS);
				setState(7458);
				match(JOIN);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(7459);
				match(STRAIGHT_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(OBParser.JOIN, 0); }
		public TerminalNode FULL() { return getToken(OBParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(OBParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(OBParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(OBParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7462);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(7463);
				match(OUTER);
				}
			}

			setState(7466);
			match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public With_listContext with_list() {
			return getRuleContext(With_listContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(OBParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWith_clause(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7468);
			match(WITH);
			setState(7470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
			case 1:
				{
				setState(7469);
				match(RECURSIVE);
				}
				break;
			}
			setState(7472);
			with_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_listContext extends ParserRuleContext {
		public List<Common_table_exprContext> common_table_expr() {
			return getRuleContexts(Common_table_exprContext.class);
		}
		public Common_table_exprContext common_table_expr(int i) {
			return getRuleContext(Common_table_exprContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public With_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWith_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWith_list(this);
		}
	}

	public final With_listContext with_list() throws RecognitionException {
		With_listContext _localctx = new With_listContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_with_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7474);
			common_table_expr();
			setState(7479);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(7475);
				match(Comma);
				setState(7476);
				common_table_expr();
				}
				}
				setState(7481);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_exprContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public List<TerminalNode> LeftParen() { return getTokens(OBParser.LeftParen); }
		public TerminalNode LeftParen(int i) {
			return getToken(OBParser.LeftParen, i);
		}
		public List<TerminalNode> RightParen() { return getTokens(OBParser.RightParen); }
		public TerminalNode RightParen(int i) {
			return getToken(OBParser.RightParen, i);
		}
		public Select_no_parensContext select_no_parens() {
			return getRuleContext(Select_no_parensContext.class,0);
		}
		public Select_with_parensContext select_with_parens() {
			return getRuleContext(Select_with_parensContext.class,0);
		}
		public Alias_name_listContext alias_name_list() {
			return getRuleContext(Alias_name_listContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Common_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCommon_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCommon_table_expr(this);
		}
	}

	public final Common_table_exprContext common_table_expr() throws RecognitionException {
		Common_table_exprContext _localctx = new Common_table_exprContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_common_table_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7482);
			relation_name();
			setState(7487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LeftParen) {
				{
				setState(7483);
				match(LeftParen);
				setState(7484);
				alias_name_list();
				setState(7485);
				match(RightParen);
				}
			}

			setState(7489);
			match(AS);
			setState(7490);
			match(LeftParen);
			setState(7492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(7491);
				with_clause();
				}
			}

			setState(7496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(7494);
				select_no_parens();
				}
				break;
			case 2:
				{
				setState(7495);
				select_with_parens();
				}
				break;
			}
			setState(7498);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_name_listContext extends ParserRuleContext {
		public List<Column_alias_nameContext> column_alias_name() {
			return getRuleContexts(Column_alias_nameContext.class);
		}
		public Column_alias_nameContext column_alias_name(int i) {
			return getRuleContext(Column_alias_nameContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Alias_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlias_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlias_name_list(this);
		}
	}

	public final Alias_name_listContext alias_name_list() throws RecognitionException {
		Alias_name_listContext _localctx = new Alias_name_listContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_alias_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7500);
			column_alias_name();
			setState(7505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(7501);
				match(Comma);
				setState(7502);
				column_alias_name();
				}
				}
				setState(7507);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Column_alias_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_alias_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_alias_name(this);
		}
	}

	public final Column_alias_nameContext column_alias_name() throws RecognitionException {
		Column_alias_nameContext _localctx = new Column_alias_nameContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_column_alias_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7508);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public Values_row_listContext values_row_list() {
			return getRuleContext(Values_row_listContext.class,0);
		}
		public Table_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_values_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_values_clause(this);
		}
	}

	public final Table_values_clauseContext table_values_clause() throws RecognitionException {
		Table_values_clauseContext _localctx = new Table_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_table_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7510);
			match(VALUES);
			setState(7511);
			values_row_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_values_clause_with_order_by_and_limitContext extends ParserRuleContext {
		public Table_values_clauseContext table_values_clause() {
			return getRuleContext(Table_values_clauseContext.class,0);
		}
		public Order_byContext order_by() {
			return getRuleContext(Order_byContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Table_values_clause_with_order_by_and_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_values_clause_with_order_by_and_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTable_values_clause_with_order_by_and_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTable_values_clause_with_order_by_and_limit(this);
		}
	}

	public final Table_values_clause_with_order_by_and_limitContext table_values_clause_with_order_by_and_limit() throws RecognitionException {
		Table_values_clause_with_order_by_and_limitContext _localctx = new Table_values_clause_with_order_by_and_limitContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_table_values_clause_with_order_by_and_limit);
		int _la;
		try {
			setState(7522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7513);
				table_values_clause();
				setState(7514);
				order_by();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7516);
				table_values_clause();
				setState(7518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7517);
					order_by();
					}
				}

				setState(7520);
				limit_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_row_listContext extends ParserRuleContext {
		public List<Row_valueContext> row_value() {
			return getRuleContexts(Row_valueContext.class);
		}
		public Row_valueContext row_value(int i) {
			return getRuleContext(Row_valueContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Values_row_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_row_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterValues_row_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitValues_row_list(this);
		}
	}

	public final Values_row_listContext values_row_list() throws RecognitionException {
		Values_row_listContext _localctx = new Values_row_listContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_values_row_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7524);
			row_value();
			setState(7529);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7525);
					match(Comma);
					setState(7526);
					row_value();
					}
					} 
				}
				setState(7531);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_valueContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(OBParser.ROW, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Insert_valsContext insert_vals() {
			return getRuleContext(Insert_valsContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Row_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRow_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRow_value(this);
		}
	}

	public final Row_valueContext row_value() throws RecognitionException {
		Row_valueContext _localctx = new Row_valueContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_row_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7532);
			match(ROW);
			setState(7533);
			match(LeftParen);
			setState(7534);
			insert_vals(0);
			setState(7535);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_stmtContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(OBParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public TerminalNode HISTOGRAM() { return getToken(OBParser.HISTOGRAM, 0); }
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode BUCKETS() { return getToken(OBParser.BUCKETS, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Analyze_statistics_clauseContext analyze_statistics_clause() {
			return getRuleContext(Analyze_statistics_clauseContext.class,0);
		}
		public Use_partitionContext use_partition() {
			return getRuleContext(Use_partitionContext.class,0);
		}
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAnalyze_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAnalyze_stmt(this);
		}
	}

	public final Analyze_stmtContext analyze_stmt() throws RecognitionException {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_analyze_stmt);
		int _la;
		try {
			setState(7567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7537);
				match(ANALYZE);
				setState(7538);
				match(TABLE);
				setState(7539);
				relation_factor();
				setState(7540);
				match(UPDATE);
				setState(7541);
				match(HISTOGRAM);
				setState(7542);
				match(ON);
				setState(7543);
				column_name_list();
				setState(7544);
				match(WITH);
				setState(7545);
				match(INTNUM);
				setState(7546);
				match(BUCKETS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7548);
				match(ANALYZE);
				setState(7549);
				match(TABLE);
				setState(7550);
				relation_factor();
				setState(7551);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7552);
				match(HISTOGRAM);
				setState(7553);
				match(ON);
				setState(7554);
				column_name_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7556);
				match(ANALYZE);
				setState(7557);
				match(TABLE);
				setState(7558);
				relation_factor();
				setState(7560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(7559);
					use_partition();
					}
				}

				setState(7562);
				analyze_statistics_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7564);
				match(ANALYZE);
				setState(7565);
				match(TABLE);
				setState(7566);
				table_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_statistics_clauseContext extends ParserRuleContext {
		public TerminalNode COMPUTE() { return getToken(OBParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(OBParser.STATISTICS, 0); }
		public Opt_analyze_for_clause_listContext opt_analyze_for_clause_list() {
			return getRuleContext(Opt_analyze_for_clause_listContext.class,0);
		}
		public TerminalNode ESTIMATE() { return getToken(OBParser.ESTIMATE, 0); }
		public TerminalNode SAMPLE() { return getToken(OBParser.SAMPLE, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Sample_optionContext sample_option() {
			return getRuleContext(Sample_optionContext.class,0);
		}
		public Analyze_statistics_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_statistics_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAnalyze_statistics_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAnalyze_statistics_clause(this);
		}
	}

	public final Analyze_statistics_clauseContext analyze_statistics_clause() throws RecognitionException {
		Analyze_statistics_clauseContext _localctx = new Analyze_statistics_clauseContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_analyze_statistics_clause);
		int _la;
		try {
			setState(7584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7569);
				match(COMPUTE);
				setState(7570);
				match(STATISTICS);
				setState(7572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7571);
					opt_analyze_for_clause_list();
					}
				}

				}
				break;
			case ESTIMATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7574);
				match(ESTIMATE);
				setState(7575);
				match(STATISTICS);
				setState(7577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(7576);
					opt_analyze_for_clause_list();
					}
				}

				setState(7582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAMPLE) {
					{
					setState(7579);
					match(SAMPLE);
					setState(7580);
					match(INTNUM);
					setState(7581);
					sample_option();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_analyze_for_clause_listContext extends ParserRuleContext {
		public Opt_analyze_for_clause_elementContext opt_analyze_for_clause_element() {
			return getRuleContext(Opt_analyze_for_clause_elementContext.class,0);
		}
		public Opt_analyze_for_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_analyze_for_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_analyze_for_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_analyze_for_clause_list(this);
		}
	}

	public final Opt_analyze_for_clause_listContext opt_analyze_for_clause_list() throws RecognitionException {
		Opt_analyze_for_clause_listContext _localctx = new Opt_analyze_for_clause_listContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_opt_analyze_for_clause_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7586);
			opt_analyze_for_clause_element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_analyze_for_clause_elementContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public For_allContext for_all() {
			return getRuleContext(For_allContext.class,0);
		}
		public For_columnsContext for_columns() {
			return getRuleContext(For_columnsContext.class,0);
		}
		public Opt_analyze_for_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_analyze_for_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_analyze_for_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_analyze_for_clause_element(this);
		}
	}

	public final Opt_analyze_for_clause_elementContext opt_analyze_for_clause_element() throws RecognitionException {
		Opt_analyze_for_clause_elementContext _localctx = new Opt_analyze_for_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_opt_analyze_for_clause_element);
		try {
			setState(7592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7588);
				match(FOR);
				setState(7589);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7590);
				for_all();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7591);
				for_columns();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_optionContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(OBParser.ROWS, 0); }
		public TerminalNode PERCENTAGE() { return getToken(OBParser.PERCENTAGE, 0); }
		public Sample_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSample_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSample_option(this);
		}
	}

	public final Sample_optionContext sample_option() throws RecognitionException {
		Sample_optionContext _localctx = new Sample_optionContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_sample_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7594);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==PERCENTAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_allContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(OBParser.INDEXED, 0); }
		public TerminalNode HIDDEN_() { return getToken(OBParser.HIDDEN_, 0); }
		public For_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFor_all(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFor_all(this);
		}
	}

	public final For_allContext for_all() throws RecognitionException {
		For_allContext _localctx = new For_allContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_for_all);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7596);
			match(FOR);
			setState(7597);
			match(ALL);
			setState(7599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED || _la==HIDDEN_) {
				{
				setState(7598);
				_la = _input.LA(1);
				if ( !(_la==INDEXED || _la==HIDDEN_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7601);
			match(COLUMNS);
			setState(7603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(7602);
				size_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Size_clauseContext extends ParserRuleContext {
		public TerminalNode SIZE() { return getToken(OBParser.SIZE, 0); }
		public TerminalNode AUTO() { return getToken(OBParser.AUTO, 0); }
		public TerminalNode REPEAT() { return getToken(OBParser.REPEAT, 0); }
		public TerminalNode SKEWONLY() { return getToken(OBParser.SKEWONLY, 0); }
		public Number_literalContext number_literal() {
			return getRuleContext(Number_literalContext.class,0);
		}
		public Size_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_size_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSize_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSize_clause(this);
		}
	}

	public final Size_clauseContext size_clause() throws RecognitionException {
		Size_clauseContext _localctx = new Size_clauseContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_size_clause);
		int _la;
		try {
			setState(7609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7605);
				match(SIZE);
				setState(7606);
				_la = _input.LA(1);
				if ( !(_la==REPEAT || _la==AUTO || _la==SKEWONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7607);
				match(SIZE);
				setState(7608);
				number_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_columnsContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public For_columns_listContext for_columns_list() {
			return getRuleContext(For_columns_listContext.class,0);
		}
		public For_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFor_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFor_columns(this);
		}
	}

	public final For_columnsContext for_columns() throws RecognitionException {
		For_columnsContext _localctx = new For_columnsContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_for_columns);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7611);
			match(FOR);
			setState(7612);
			match(COLUMNS);
			setState(7614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(7613);
				for_columns_list(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_columns_listContext extends ParserRuleContext {
		public For_columns_itemContext for_columns_item() {
			return getRuleContext(For_columns_itemContext.class,0);
		}
		public For_columns_listContext for_columns_list() {
			return getRuleContext(For_columns_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public For_columns_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_columns_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFor_columns_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFor_columns_list(this);
		}
	}

	public final For_columns_listContext for_columns_list() throws RecognitionException {
		return for_columns_list(0);
	}

	private For_columns_listContext for_columns_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		For_columns_listContext _localctx = new For_columns_listContext(_ctx, _parentState);
		For_columns_listContext _prevctx = _localctx;
		int _startState = 920;
		enterRecursionRule(_localctx, 920, RULE_for_columns_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7617);
			for_columns_item();
			}
			_ctx.stop = _input.LT(-1);
			setState(7626);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,846,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7624);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
					case 1:
						{
						_localctx = new For_columns_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_for_columns_list);
						setState(7619);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7620);
						for_columns_item();
						}
						break;
					case 2:
						{
						_localctx = new For_columns_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_for_columns_list);
						setState(7621);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7622);
						match(Comma);
						setState(7623);
						for_columns_item();
						}
						break;
					}
					} 
				}
				setState(7628);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,846,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class For_columns_itemContext extends ParserRuleContext {
		public Column_clauseContext column_clause() {
			return getRuleContext(Column_clauseContext.class,0);
		}
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public For_columns_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_columns_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFor_columns_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFor_columns_item(this);
		}
	}

	public final For_columns_itemContext for_columns_item() throws RecognitionException {
		For_columns_itemContext _localctx = new For_columns_itemContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_for_columns_item);
		try {
			setState(7634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7629);
				column_clause();
				setState(7631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(7630);
					size_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7633);
				size_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_clause(this);
		}
	}

	public final Column_clauseContext column_clause() throws RecognitionException {
		Column_clauseContext _localctx = new Column_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_column_clause);
		try {
			setState(7641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7636);
				column_name();
				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(7637);
				match(LeftParen);
				setState(7638);
				column_name_list();
				setState(7639);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_outline_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode OUTLINE() { return getToken(OBParser.OUTLINE, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public List<Explainable_stmtContext> explainable_stmt() {
			return getRuleContexts(Explainable_stmtContext.class);
		}
		public Explainable_stmtContext explainable_stmt(int i) {
			return getRuleContext(Explainable_stmtContext.class,i);
		}
		public TerminalNode OR() { return getToken(OBParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public TerminalNode HINT_HINT_BEGIN() { return getToken(OBParser.HINT_HINT_BEGIN, 0); }
		public Hint_list_with_endContext hint_list_with_end() {
			return getRuleContext(Hint_list_with_endContext.class,0);
		}
		public Create_outline_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_outline_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_outline_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_outline_stmt(this);
		}
	}

	public final Create_outline_stmtContext create_outline_stmt() throws RecognitionException {
		Create_outline_stmtContext _localctx = new Create_outline_stmtContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_create_outline_stmt);
		int _la;
		try {
			setState(7669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7643);
				match(CREATE);
				setState(7646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7644);
					match(OR);
					setState(7645);
					match(REPLACE);
					}
				}

				setState(7648);
				match(OUTLINE);
				setState(7649);
				relation_name();
				setState(7650);
				match(ON);
				setState(7651);
				explainable_stmt();
				setState(7654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(7652);
					match(TO);
					setState(7653);
					explainable_stmt();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7656);
				match(CREATE);
				setState(7659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7657);
					match(OR);
					setState(7658);
					match(REPLACE);
					}
				}

				setState(7661);
				match(OUTLINE);
				setState(7662);
				relation_name();
				setState(7663);
				match(ON);
				setState(7664);
				match(STRING_VALUE);
				setState(7665);
				match(USING);
				setState(7666);
				match(HINT_HINT_BEGIN);
				setState(7667);
				hint_list_with_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_outline_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode OUTLINE() { return getToken(OBParser.OUTLINE, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public List<Explainable_stmtContext> explainable_stmt() {
			return getRuleContexts(Explainable_stmtContext.class);
		}
		public Explainable_stmtContext explainable_stmt(int i) {
			return getRuleContext(Explainable_stmtContext.class,i);
		}
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Alter_outline_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_outline_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_outline_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_outline_stmt(this);
		}
	}

	public final Alter_outline_stmtContext alter_outline_stmt() throws RecognitionException {
		Alter_outline_stmtContext _localctx = new Alter_outline_stmtContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_alter_outline_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7671);
			match(ALTER);
			setState(7672);
			match(OUTLINE);
			setState(7673);
			relation_name();
			setState(7674);
			match(ADD);
			setState(7675);
			explainable_stmt();
			setState(7678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(7676);
				match(TO);
				setState(7677);
				explainable_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_outline_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode OUTLINE() { return getToken(OBParser.OUTLINE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Drop_outline_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_outline_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_outline_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_outline_stmt(this);
		}
	}

	public final Drop_outline_stmtContext drop_outline_stmt() throws RecognitionException {
		Drop_outline_stmtContext _localctx = new Drop_outline_stmtContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_drop_outline_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7680);
			match(DROP);
			setState(7681);
			match(OUTLINE);
			setState(7682);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_stmtContext extends ParserRuleContext {
		public Explain_or_descContext explain_or_desc() {
			return getRuleContext(Explain_or_descContext.class,0);
		}
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Explainable_stmtContext explainable_stmt() {
			return getRuleContext(Explainable_stmtContext.class,0);
		}
		public TerminalNode PRETTY() { return getToken(OBParser.PRETTY, 0); }
		public TerminalNode PRETTY_COLOR() { return getToken(OBParser.PRETTY_COLOR, 0); }
		public TerminalNode BASIC() { return getToken(OBParser.BASIC, 0); }
		public TerminalNode OUTLINE() { return getToken(OBParser.OUTLINE, 0); }
		public TerminalNode EXTENDED() { return getToken(OBParser.EXTENDED, 0); }
		public TerminalNode EXTENDED_NOADDR() { return getToken(OBParser.EXTENDED_NOADDR, 0); }
		public TerminalNode PLANREGRESS() { return getToken(OBParser.PLANREGRESS, 0); }
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(OBParser.STATEMENT_ID, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode FORMAT() { return getToken(OBParser.FORMAT, 0); }
		public Format_nameContext format_name() {
			return getRuleContext(Format_nameContext.class,0);
		}
		public Explain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExplain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExplain_stmt(this);
		}
	}

	public final Explain_stmtContext explain_stmt() throws RecognitionException {
		Explain_stmtContext _localctx = new Explain_stmtContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_explain_stmt);
		try {
			setState(7812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7684);
				explain_or_desc();
				setState(7685);
				relation_factor();
				setState(7688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_VALUE:
					{
					setState(7686);
					match(STRING_VALUE);
					}
					break;
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case ACCESS:
				case OBJECT_ID:
				case AGAINST:
				case ALWAYS:
				case NAMESPACE:
				case CIPHER:
				case COLUMNS:
				case LS:
				case CYCLE:
				case NUMBER:
				case ROWID:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case FIELDS:
				case FULL:
				case ID:
				case INCLUDING:
				case LIB:
				case ORDINALITY:
				case ISSUER:
				case LANGUAGE:
				case BISON_LIST:
				case LOCAL:
				case UNLIMITED:
				case MERGE:
				case MODE:
				case IOPS_WEIGHT:
				case PARSER:
				case MIN_MAX:
				case PUBLIC:
				case ROWS:
				case REJECT:
				case PLUS:
				case SUBJECT:
				case SYSDATE:
				case TEXT:
				case CALIBRATION:
				case LINE_DELIMITER:
				case GEOMCOLLECTION:
				case QUERY_RESPONSE_TIME:
				case REDUNDANCY:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case X509:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case STORE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case NAME_OB:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(7687);
					column_name();
					}
					break;
				case EOF:
				case DELIMITER:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7690);
				explain_or_desc();
				setState(7691);
				explainable_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7693);
				explain_or_desc();
				setState(7694);
				match(PRETTY);
				setState(7695);
				explainable_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7697);
				explain_or_desc();
				setState(7698);
				match(PRETTY_COLOR);
				setState(7699);
				explainable_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7701);
				explain_or_desc();
				setState(7702);
				match(BASIC);
				setState(7703);
				explainable_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7705);
				explain_or_desc();
				setState(7706);
				match(BASIC);
				setState(7707);
				match(PRETTY);
				setState(7708);
				explainable_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7710);
				explain_or_desc();
				setState(7711);
				match(BASIC);
				setState(7712);
				match(PRETTY_COLOR);
				setState(7713);
				explainable_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7715);
				explain_or_desc();
				setState(7716);
				match(OUTLINE);
				setState(7717);
				explainable_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7719);
				explain_or_desc();
				setState(7720);
				match(OUTLINE);
				setState(7721);
				match(PRETTY);
				setState(7722);
				explainable_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7724);
				explain_or_desc();
				setState(7725);
				match(OUTLINE);
				setState(7726);
				match(PRETTY_COLOR);
				setState(7727);
				explainable_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7729);
				explain_or_desc();
				setState(7730);
				match(EXTENDED);
				setState(7731);
				explainable_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7733);
				explain_or_desc();
				setState(7734);
				match(EXTENDED);
				setState(7735);
				match(PRETTY);
				setState(7736);
				explainable_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7738);
				explain_or_desc();
				setState(7739);
				match(EXTENDED);
				setState(7740);
				match(PRETTY_COLOR);
				setState(7741);
				explainable_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7743);
				explain_or_desc();
				setState(7744);
				match(EXTENDED_NOADDR);
				setState(7745);
				explainable_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7747);
				explain_or_desc();
				setState(7748);
				match(EXTENDED_NOADDR);
				setState(7749);
				match(PRETTY);
				setState(7750);
				explainable_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7752);
				explain_or_desc();
				setState(7753);
				match(EXTENDED_NOADDR);
				setState(7754);
				match(PRETTY_COLOR);
				setState(7755);
				explainable_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7757);
				explain_or_desc();
				setState(7758);
				match(PLANREGRESS);
				setState(7759);
				explainable_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7761);
				explain_or_desc();
				setState(7762);
				match(PLANREGRESS);
				setState(7763);
				match(PRETTY);
				setState(7764);
				explainable_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7766);
				explain_or_desc();
				setState(7767);
				match(PLANREGRESS);
				setState(7768);
				match(PRETTY_COLOR);
				setState(7769);
				explainable_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7771);
				explain_or_desc();
				setState(7772);
				match(PARTITIONS);
				setState(7773);
				explainable_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7775);
				explain_or_desc();
				setState(7776);
				match(PARTITIONS);
				setState(7777);
				match(PRETTY);
				setState(7778);
				explainable_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7780);
				explain_or_desc();
				setState(7781);
				match(PARTITIONS);
				setState(7782);
				match(PRETTY_COLOR);
				setState(7783);
				explainable_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7785);
				explain_or_desc();
				setState(7786);
				match(SET);
				setState(7787);
				match(STATEMENT_ID);
				setState(7788);
				match(COMP_EQ);
				setState(7789);
				literal();
				setState(7790);
				explainable_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7792);
				explain_or_desc();
				setState(7793);
				match(INTO);
				setState(7794);
				relation_name();
				setState(7795);
				explainable_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7797);
				explain_or_desc();
				setState(7798);
				match(INTO);
				setState(7799);
				relation_name();
				setState(7800);
				match(SET);
				setState(7801);
				match(STATEMENT_ID);
				setState(7802);
				match(COMP_EQ);
				setState(7803);
				literal();
				setState(7804);
				explainable_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7806);
				explain_or_desc();
				setState(7807);
				match(FORMAT);
				setState(7808);
				match(COMP_EQ);
				setState(7809);
				format_name();
				setState(7810);
				explainable_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_or_descContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(OBParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(OBParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(OBParser.DESC, 0); }
		public Explain_or_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_or_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExplain_or_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExplain_or_desc(this);
		}
	}

	public final Explain_or_descContext explain_or_desc() throws RecognitionException {
		Explain_or_descContext _localctx = new Explain_or_descContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_explain_or_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7814);
			_la = _input.LA(1);
			if ( !(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (DESC - 142)) | (1L << (DESCRIBE - 142)) | (1L << (EXPLAIN - 142)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explainable_stmtContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Explainable_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainable_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExplainable_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExplainable_stmt(this);
		}
	}

	public final Explainable_stmtContext explainable_stmt() throws RecognitionException {
		Explainable_stmtContext _localctx = new Explainable_stmtContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_explainable_stmt);
		try {
			setState(7820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7816);
				select_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7817);
				delete_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7818);
				insert_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7819);
				update_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Format_nameContext extends ParserRuleContext {
		public TerminalNode TRADITIONAL() { return getToken(OBParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(OBParser.JSON, 0); }
		public Format_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_format_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFormat_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFormat_name(this);
		}
	}

	public final Format_nameContext format_name() throws RecognitionException {
		Format_nameContext _localctx = new Format_nameContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_format_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7822);
			_la = _input.LA(1);
			if ( !(_la==TRADITIONAL || _la==JSON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_stmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(OBParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(OBParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(OBParser.FULL, 0); }
		public TerminalNode EXTENDED() { return getToken(OBParser.EXTENDED, 0); }
		public List<From_or_inContext> from_or_in() {
			return getRuleContexts(From_or_inContext.class);
		}
		public From_or_inContext from_or_in(int i) {
			return getRuleContext(From_or_inContext.class,i);
		}
		public Database_factorContext database_factor() {
			return getRuleContext(Database_factorContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(OBParser.LIKE, 0); }
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public TerminalNode ESCAPE() { return getToken(OBParser.ESCAPE, 0); }
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Databases_or_schemasContext databases_or_schemas() {
			return getRuleContext(Databases_or_schemasContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(OBParser.STATUS, 0); }
		public Columns_or_fieldsContext columns_or_fields() {
			return getRuleContext(Columns_or_fieldsContext.class,0);
		}
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode PROCEDURE() { return getToken(OBParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(OBParser.FUNCTION, 0); }
		public TerminalNode TRIGGERS() { return getToken(OBParser.TRIGGERS, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode VARIABLES() { return getToken(OBParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(OBParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(OBParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public TerminalNode CODE() { return getToken(OBParser.CODE, 0); }
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public Database_or_schemaContext database_or_schema() {
			return getRuleContext(Database_or_schemaContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public TerminalNode TRIGGER() { return getToken(OBParser.TRIGGER, 0); }
		public TerminalNode WARNINGS() { return getToken(OBParser.WARNINGS, 0); }
		public TerminalNode ERRORS() { return getToken(OBParser.ERRORS, 0); }
		public TerminalNode LIMIT() { return getToken(OBParser.LIMIT, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode COUNT() { return getToken(OBParser.COUNT, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode Star() { return getToken(OBParser.Star, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode GRANTS() { return getToken(OBParser.GRANTS, 0); }
		public Opt_for_grant_userContext opt_for_grant_user() {
			return getRuleContext(Opt_for_grant_userContext.class,0);
		}
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public TerminalNode TRACE() { return getToken(OBParser.TRACE, 0); }
		public TerminalNode COLLATION() { return getToken(OBParser.COLLATION, 0); }
		public TerminalNode PARAMETERS() { return getToken(OBParser.PARAMETERS, 0); }
		public TerminalNode TABLEGROUPS() { return getToken(OBParser.TABLEGROUPS, 0); }
		public TerminalNode FORMAT() { return getToken(OBParser.FORMAT, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Index_or_indexes_or_keysContext index_or_indexes_or_keys() {
			return getRuleContext(Index_or_indexes_or_keysContext.class,0);
		}
		public Opt_hint_valueContext opt_hint_value() {
			return getRuleContext(Opt_hint_valueContext.class,0);
		}
		public TerminalNode PROCESSLIST() { return getToken(OBParser.PROCESSLIST, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode ENGINES() { return getToken(OBParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(OBParser.STORAGE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OBParser.PRIVILEGES, 0); }
		public TerminalNode QUERY_RESPONSE_TIME() { return getToken(OBParser.QUERY_RESPONSE_TIME, 0); }
		public TerminalNode RECYCLEBIN() { return getToken(OBParser.RECYCLEBIN, 0); }
		public TerminalNode PROFILE() { return getToken(OBParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(OBParser.PROFILES, 0); }
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public TerminalNode RESTORE() { return getToken(OBParser.RESTORE, 0); }
		public TerminalNode PREVIEW() { return getToken(OBParser.PREVIEW, 0); }
		public TerminalNode SEQUENCES() { return getToken(OBParser.SEQUENCES, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public User_host_or_current_userContext user_host_or_current_user() {
			return getRuleContext(User_host_or_current_userContext.class,0);
		}
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public Opt_show_engineContext opt_show_engine() {
			return getRuleContext(Opt_show_engineContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(OBParser.OPEN, 0); }
		public List<TerminalNode> JOB() { return getTokens(OBParser.JOB); }
		public TerminalNode JOB(int i) {
			return getToken(OBParser.JOB, i);
		}
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public Check_table_optionsContext check_table_options() {
			return getRuleContext(Check_table_optionsContext.class,0);
		}
		public Show_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterShow_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitShow_stmt(this);
		}
	}

	public final Show_stmtContext show_stmt() throws RecognitionException {
		Show_stmtContext _localctx = new Show_stmtContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_show_stmt);
		int _la;
		try {
			setState(8147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7824);
				match(SHOW);
				setState(7829);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(7825);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(7826);
					match(EXTENDED);
					}
					break;
				case 3:
					{
					{
					setState(7827);
					match(EXTENDED);
					setState(7828);
					match(FULL);
					}
					}
					break;
				}
				setState(7831);
				match(TABLES);
				setState(7835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7832);
					from_or_in();
					setState(7833);
					database_factor();
					}
				}

				setState(7845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
				case 1:
					{
					{
					setState(7837);
					match(LIKE);
					setState(7838);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7839);
					match(LIKE);
					setState(7840);
					match(STRING_VALUE);
					setState(7841);
					match(ESCAPE);
					setState(7842);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7843);
					match(WHERE);
					setState(7844);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7847);
				match(SHOW);
				setState(7848);
				databases_or_schemas();
				setState(7850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STATUS) {
					{
					setState(7849);
					match(STATUS);
					}
				}

				setState(7860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
				case 1:
					{
					{
					setState(7852);
					match(LIKE);
					setState(7853);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7854);
					match(LIKE);
					setState(7855);
					match(STRING_VALUE);
					setState(7856);
					match(ESCAPE);
					setState(7857);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7858);
					match(WHERE);
					setState(7859);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7862);
				match(SHOW);
				setState(7867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
				case 1:
					{
					setState(7863);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(7864);
					match(EXTENDED);
					}
					break;
				case 3:
					{
					{
					setState(7865);
					match(EXTENDED);
					setState(7866);
					match(FULL);
					}
					}
					break;
				}
				setState(7869);
				columns_or_fields();
				setState(7870);
				from_or_in();
				setState(7871);
				relation_factor();
				setState(7875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7872);
					from_or_in();
					setState(7873);
					database_factor();
					}
				}

				setState(7885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					{
					setState(7877);
					match(LIKE);
					setState(7878);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7879);
					match(LIKE);
					setState(7880);
					match(STRING_VALUE);
					setState(7881);
					match(ESCAPE);
					setState(7882);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7883);
					match(WHERE);
					setState(7884);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7887);
				match(SHOW);
				setState(7888);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==TRIGGERS || _la==FUNCTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7889);
				match(STATUS);
				setState(7893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7890);
					from_or_in();
					setState(7891);
					database_factor();
					}
				}

				setState(7903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					{
					setState(7895);
					match(LIKE);
					setState(7896);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7897);
					match(LIKE);
					setState(7898);
					match(STRING_VALUE);
					setState(7899);
					match(ESCAPE);
					setState(7900);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7901);
					match(WHERE);
					setState(7902);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7905);
				match(SHOW);
				setState(7906);
				match(SERVER);
				setState(7907);
				match(STATUS);
				setState(7916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					{
					setState(7908);
					match(LIKE);
					setState(7909);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7910);
					match(LIKE);
					setState(7911);
					match(STRING_VALUE);
					setState(7912);
					match(ESCAPE);
					setState(7913);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7914);
					match(WHERE);
					setState(7915);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7918);
				match(SHOW);
				setState(7920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL || _la==SESSION) {
					{
					setState(7919);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7922);
				match(VARIABLES);
				setState(7931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					{
					setState(7923);
					match(LIKE);
					setState(7924);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7925);
					match(LIKE);
					setState(7926);
					match(STRING_VALUE);
					setState(7927);
					match(ESCAPE);
					setState(7928);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7929);
					match(WHERE);
					setState(7930);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7933);
				match(SHOW);
				setState(7934);
				match(SCHEMA);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7935);
				match(SHOW);
				setState(7936);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7937);
				match(CODE);
				setState(7938);
				relation_factor();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7939);
				match(SHOW);
				setState(7940);
				match(CREATE);
				setState(7941);
				database_or_schema();
				setState(7946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(7942);
					match(IF);
					setState(7943);
					not();
					setState(7944);
					match(EXISTS);
					}
				}

				setState(7948);
				database_factor();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7950);
				match(SHOW);
				setState(7951);
				match(CREATE);
				setState(7952);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==TRIGGER || _la==VIEW || _la==FUNCTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7953);
				relation_factor();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7954);
				match(SHOW);
				setState(7955);
				_la = _input.LA(1);
				if ( !(_la==WARNINGS || _la==ERRORS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
				case 1:
					{
					{
					setState(7956);
					match(LIMIT);
					setState(7957);
					match(INTNUM);
					setState(7958);
					match(Comma);
					setState(7959);
					match(INTNUM);
					}
					}
					break;
				case 2:
					{
					{
					setState(7960);
					match(LIMIT);
					setState(7961);
					match(INTNUM);
					}
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7964);
				match(SHOW);
				setState(7965);
				match(COUNT);
				setState(7966);
				match(LeftParen);
				setState(7967);
				match(Star);
				setState(7968);
				match(RightParen);
				setState(7969);
				_la = _input.LA(1);
				if ( !(_la==WARNINGS || _la==ERRORS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7970);
				match(SHOW);
				setState(7971);
				match(GRANTS);
				setState(7972);
				opt_for_grant_user();
				setState(7975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7973);
					match(USING);
					setState(7974);
					role_list();
					}
				}

				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7977);
				match(SHOW);
				setState(7978);
				charset_key();
				setState(7987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					{
					setState(7979);
					match(LIKE);
					setState(7980);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7981);
					match(LIKE);
					setState(7982);
					match(STRING_VALUE);
					setState(7983);
					match(ESCAPE);
					setState(7984);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7985);
					match(WHERE);
					setState(7986);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7989);
				match(SHOW);
				setState(7990);
				_la = _input.LA(1);
				if ( !(_la==COLLATION || _la==TABLEGROUPS || _la==PARAMETERS || _la==TRACE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					{
					setState(7991);
					match(LIKE);
					setState(7992);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(7993);
					match(LIKE);
					setState(7994);
					match(STRING_VALUE);
					setState(7995);
					match(ESCAPE);
					setState(7996);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(7997);
					match(WHERE);
					setState(7998);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8001);
				match(SHOW);
				setState(8002);
				match(TRACE);
				setState(8003);
				match(FORMAT);
				setState(8004);
				match(COMP_EQ);
				setState(8005);
				match(STRING_VALUE);
				setState(8014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
				case 1:
					{
					{
					setState(8006);
					match(LIKE);
					setState(8007);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8008);
					match(LIKE);
					setState(8009);
					match(STRING_VALUE);
					setState(8010);
					match(ESCAPE);
					setState(8011);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(8012);
					match(WHERE);
					setState(8013);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8016);
				match(SHOW);
				setState(8018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTENDED) {
					{
					setState(8017);
					match(EXTENDED);
					}
				}

				setState(8020);
				index_or_indexes_or_keys();
				setState(8021);
				from_or_in();
				setState(8022);
				relation_factor();
				setState(8026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(8023);
					from_or_in();
					setState(8024);
					database_factor();
					}
				}

				setState(8032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(8028);
					match(WHERE);
					setState(8029);
					opt_hint_value();
					setState(8030);
					expr(0);
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8034);
				match(SHOW);
				setState(8036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(8035);
					match(FULL);
					}
				}

				setState(8038);
				match(PROCESSLIST);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8039);
				match(SHOW);
				setState(8041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL || _la==SESSION) {
					{
					setState(8040);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8043);
				match(STATUS);
				setState(8052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
				case 1:
					{
					{
					setState(8044);
					match(LIKE);
					setState(8045);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8046);
					match(LIKE);
					setState(8047);
					match(STRING_VALUE);
					setState(8048);
					match(ESCAPE);
					setState(8049);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(8050);
					match(WHERE);
					setState(8051);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8054);
				match(SHOW);
				setState(8055);
				match(TENANT);
				setState(8057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STATUS) {
					{
					setState(8056);
					match(STATUS);
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8059);
				match(SHOW);
				setState(8060);
				match(CREATE);
				setState(8061);
				match(TENANT);
				setState(8062);
				relation_name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8063);
				match(SHOW);
				setState(8065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(8064);
					match(STORAGE);
					}
				}

				setState(8067);
				match(ENGINES);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8068);
				match(SHOW);
				setState(8069);
				match(PRIVILEGES);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8070);
				match(SHOW);
				setState(8071);
				match(QUERY_RESPONSE_TIME);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8072);
				match(SHOW);
				setState(8073);
				match(RECYCLEBIN);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8074);
				match(SHOW);
				setState(8075);
				match(PROFILE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8076);
				match(SHOW);
				setState(8077);
				match(PROFILES);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8078);
				match(SHOW);
				setState(8079);
				match(CREATE);
				setState(8080);
				match(TABLEGROUP);
				setState(8081);
				relation_name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8082);
				match(SHOW);
				setState(8083);
				match(RESTORE);
				setState(8084);
				match(PREVIEW);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(8085);
				match(SHOW);
				setState(8086);
				match(SEQUENCES);
				setState(8095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
				case 1:
					{
					{
					setState(8087);
					match(LIKE);
					setState(8088);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8089);
					match(LIKE);
					setState(8090);
					match(STRING_VALUE);
					setState(8091);
					match(ESCAPE);
					setState(8092);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(8093);
					match(WHERE);
					setState(8094);
					expr(0);
					}
					}
					break;
				}
				setState(8100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(8097);
					from_or_in();
					setState(8098);
					database_factor();
					}
				}

				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(8102);
				match(SHOW);
				setState(8103);
				match(CREATE);
				setState(8104);
				match(USER);
				setState(8105);
				user_host_or_current_user();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(8106);
				match(SHOW);
				setState(8107);
				match(ENGINE_);
				setState(8108);
				relation_name_or_string();
				setState(8109);
				opt_show_engine();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(8111);
				match(SHOW);
				setState(8112);
				match(OPEN);
				setState(8113);
				match(TABLES);
				setState(8117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(8114);
					from_or_in();
					setState(8115);
					database_factor();
					}
				}

				setState(8127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					{
					setState(8119);
					match(LIKE);
					setState(8120);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8121);
					match(LIKE);
					setState(8122);
					match(STRING_VALUE);
					setState(8123);
					match(ESCAPE);
					setState(8124);
					match(STRING_VALUE);
					}
					}
					break;
				case 3:
					{
					{
					setState(8125);
					match(WHERE);
					setState(8126);
					expr(0);
					}
					}
					break;
				}
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(8129);
				match(SHOW);
				setState(8130);
				match(JOB);
				setState(8131);
				match(STATUS);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(8132);
				match(SHOW);
				setState(8133);
				match(JOB);
				setState(8134);
				match(STATUS);
				setState(8135);
				match(WHERE);
				setState(8136);
				match(JOB);
				setState(8137);
				match(COMP_EQ);
				setState(8138);
				match(STRING_VALUE);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(8139);
				match(CHECK);
				setState(8140);
				match(TABLE);
				setState(8141);
				table_list();
				setState(8142);
				check_table_options();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(8144);
				match(CHECK);
				setState(8145);
				match(TABLE);
				setState(8146);
				table_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_table_optionsContext extends ParserRuleContext {
		public List<Check_table_optionContext> check_table_option() {
			return getRuleContexts(Check_table_optionContext.class);
		}
		public Check_table_optionContext check_table_option(int i) {
			return getRuleContext(Check_table_optionContext.class,i);
		}
		public Check_table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCheck_table_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCheck_table_options(this);
		}
	}

	public final Check_table_optionsContext check_table_options() throws RecognitionException {
		Check_table_optionsContext _localctx = new Check_table_optionsContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_check_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8150); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8149);
				check_table_option();
				}
				}
				setState(8152); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR || _la==CHANGED || _la==FAST || _la==QUICK || _la==MEDIUM || _la==EXTENDED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_table_optionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(OBParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(OBParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(OBParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(OBParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(OBParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(OBParser.CHANGED, 0); }
		public Check_table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_table_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCheck_table_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCheck_table_option(this);
		}
	}

	public final Check_table_optionContext check_table_option() throws RecognitionException {
		Check_table_optionContext _localctx = new Check_table_optionContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_check_table_option);
		try {
			setState(8161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8154);
				match(FOR);
				setState(8155);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(8156);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(8157);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(8158);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(8159);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(8160);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diagnostics_stmtContext extends ParserRuleContext {
		public Get_condition_diagnostics_stmtContext get_condition_diagnostics_stmt() {
			return getRuleContext(Get_condition_diagnostics_stmtContext.class,0);
		}
		public Get_statement_diagnostics_stmtContext get_statement_diagnostics_stmt() {
			return getRuleContext(Get_statement_diagnostics_stmtContext.class,0);
		}
		public Get_diagnostics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diagnostics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGet_diagnostics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGet_diagnostics_stmt(this);
		}
	}

	public final Get_diagnostics_stmtContext get_diagnostics_stmt() throws RecognitionException {
		Get_diagnostics_stmtContext _localctx = new Get_diagnostics_stmtContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_get_diagnostics_stmt);
		try {
			setState(8165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8163);
				get_condition_diagnostics_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8164);
				get_statement_diagnostics_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_condition_diagnostics_stmtContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(OBParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(OBParser.DIAGNOSTICS, 0); }
		public TerminalNode CONDITION() { return getToken(OBParser.CONDITION, 0); }
		public Condition_argContext condition_arg() {
			return getRuleContext(Condition_argContext.class,0);
		}
		public Condition_information_item_listContext condition_information_item_list() {
			return getRuleContext(Condition_information_item_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(OBParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(OBParser.STACKED, 0); }
		public Get_condition_diagnostics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_condition_diagnostics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGet_condition_diagnostics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGet_condition_diagnostics_stmt(this);
		}
	}

	public final Get_condition_diagnostics_stmtContext get_condition_diagnostics_stmt() throws RecognitionException {
		Get_condition_diagnostics_stmtContext _localctx = new Get_condition_diagnostics_stmtContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_get_condition_diagnostics_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8167);
			match(GET);
			setState(8169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(8168);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8171);
			match(DIAGNOSTICS);
			setState(8172);
			match(CONDITION);
			setState(8173);
			condition_arg();
			setState(8174);
			condition_information_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_argContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode BOOL_VALUE() { return getToken(OBParser.BOOL_VALUE, 0); }
		public TerminalNode QUESTIONMARK() { return getToken(OBParser.QUESTIONMARK, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Condition_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCondition_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCondition_arg(this);
		}
	}

	public final Condition_argContext condition_arg() throws RecognitionException {
		Condition_argContext _localctx = new Condition_argContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_condition_arg);
		try {
			setState(8182);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTNUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(8176);
				match(INTNUM);
				}
				break;
			case USER_VARIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8177);
				match(USER_VARIABLE);
				}
				break;
			case STRING_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8178);
				match(STRING_VALUE);
				}
				break;
			case BOOL_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8179);
				match(BOOL_VALUE);
				}
				break;
			case QUESTIONMARK:
				enterOuterAlt(_localctx, 5);
				{
				setState(8180);
				match(QUESTIONMARK);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8181);
				column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_item_listContext extends ParserRuleContext {
		public List<Condition_information_itemContext> condition_information_item() {
			return getRuleContexts(Condition_information_itemContext.class);
		}
		public Condition_information_itemContext condition_information_item(int i) {
			return getRuleContext(Condition_information_itemContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Condition_information_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCondition_information_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCondition_information_item_list(this);
		}
	}

	public final Condition_information_item_listContext condition_information_item_list() throws RecognitionException {
		Condition_information_item_listContext _localctx = new Condition_information_item_listContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_condition_information_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8184);
			condition_information_item();
			setState(8189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8185);
				match(Comma);
				setState(8186);
				condition_information_item();
				}
				}
				setState(8191);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_itemContext extends ParserRuleContext {
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Condition_information_item_nameContext condition_information_item_name() {
			return getRuleContext(Condition_information_item_nameContext.class,0);
		}
		public TerminalNode QUESTIONMARK() { return getToken(OBParser.QUESTIONMARK, 0); }
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Condition_information_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCondition_information_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCondition_information_item(this);
		}
	}

	public final Condition_information_itemContext condition_information_item() throws RecognitionException {
		Condition_information_itemContext _localctx = new Condition_information_itemContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_condition_information_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUESTIONMARK:
				{
				setState(8192);
				match(QUESTIONMARK);
				}
				break;
			case USER_VARIABLE:
				{
				setState(8193);
				match(USER_VARIABLE);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				{
				setState(8194);
				column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8197);
			match(COMP_EQ);
			setState(8198);
			condition_information_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_information_item_nameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(OBParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(OBParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(OBParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(OBParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(OBParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(OBParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(OBParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(OBParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(OBParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(OBParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(OBParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(OBParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(OBParser.CURSOR_NAME, 0); }
		public Condition_information_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_information_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCondition_information_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCondition_information_item_name(this);
		}
	}

	public final Condition_information_item_nameContext condition_information_item_name() throws RecognitionException {
		Condition_information_item_nameContext _localctx = new Condition_information_item_nameContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_condition_information_item_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8200);
			_la = _input.LA(1);
			if ( !(((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (CONSTRAINT_SCHEMA - 419)) | (1L << (TABLE_NAME - 419)) | (1L << (CLASS_ORIGIN - 419)))) != 0) || _la==COLUMN_NAME || _la==MYSQL_ERRNO || _la==CONSTRAINT_CATALOG || _la==SCHEMA_NAME || _la==CATALOG_NAME || _la==RETURNED_SQLSTATE || _la==CURSOR_NAME || _la==MESSAGE_TEXT || _la==SUBCLASS_ORIGIN || _la==CONSTRAINT_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_statement_diagnostics_stmtContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(OBParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(OBParser.DIAGNOSTICS, 0); }
		public Statement_information_item_listContext statement_information_item_list() {
			return getRuleContext(Statement_information_item_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(OBParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(OBParser.STACKED, 0); }
		public Get_statement_diagnostics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_statement_diagnostics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGet_statement_diagnostics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGet_statement_diagnostics_stmt(this);
		}
	}

	public final Get_statement_diagnostics_stmtContext get_statement_diagnostics_stmt() throws RecognitionException {
		Get_statement_diagnostics_stmtContext _localctx = new Get_statement_diagnostics_stmtContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_get_statement_diagnostics_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8202);
			match(GET);
			setState(8204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(8203);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8206);
			match(DIAGNOSTICS);
			setState(8207);
			statement_information_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_item_listContext extends ParserRuleContext {
		public List<Statement_information_itemContext> statement_information_item() {
			return getRuleContexts(Statement_information_itemContext.class);
		}
		public Statement_information_itemContext statement_information_item(int i) {
			return getRuleContext(Statement_information_itemContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Statement_information_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterStatement_information_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitStatement_information_item_list(this);
		}
	}

	public final Statement_information_item_listContext statement_information_item_list() throws RecognitionException {
		Statement_information_item_listContext _localctx = new Statement_information_item_listContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_statement_information_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8209);
			statement_information_item();
			setState(8214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8210);
				match(Comma);
				setState(8211);
				statement_information_item();
				}
				}
				setState(8216);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_itemContext extends ParserRuleContext {
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Statement_information_item_nameContext statement_information_item_name() {
			return getRuleContext(Statement_information_item_nameContext.class,0);
		}
		public TerminalNode QUESTIONMARK() { return getToken(OBParser.QUESTIONMARK, 0); }
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Statement_information_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterStatement_information_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitStatement_information_item(this);
		}
	}

	public final Statement_information_itemContext statement_information_item() throws RecognitionException {
		Statement_information_itemContext _localctx = new Statement_information_itemContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_statement_information_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUESTIONMARK:
				{
				setState(8217);
				match(QUESTIONMARK);
				}
				break;
			case USER_VARIABLE:
				{
				setState(8218);
				match(USER_VARIABLE);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				{
				setState(8219);
				column_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8222);
			match(COMP_EQ);
			setState(8223);
			statement_information_item_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Statement_information_item_nameContext extends ParserRuleContext {
		public TerminalNode NUMBER() { return getToken(OBParser.NUMBER, 0); }
		public TerminalNode ROW_COUNT() { return getToken(OBParser.ROW_COUNT, 0); }
		public Statement_information_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement_information_item_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterStatement_information_item_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitStatement_information_item_name(this);
		}
	}

	public final Statement_information_item_nameContext statement_information_item_name() throws RecognitionException {
		Statement_information_item_nameContext _localctx = new Statement_information_item_nameContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_statement_information_item_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8225);
			_la = _input.LA(1);
			if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Databases_or_schemasContext extends ParserRuleContext {
		public TerminalNode DATABASES() { return getToken(OBParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(OBParser.SCHEMAS, 0); }
		public Databases_or_schemasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databases_or_schemas; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabases_or_schemas(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabases_or_schemas(this);
		}
	}

	public final Databases_or_schemasContext databases_or_schemas() throws RecognitionException {
		Databases_or_schemasContext _localctx = new Databases_or_schemasContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_databases_or_schemas);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8227);
			_la = _input.LA(1);
			if ( !(_la==DATABASES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_grant_userContext extends ParserRuleContext {
		public Opt_for_userContext opt_for_user() {
			return getRuleContext(Opt_for_userContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Opt_for_grant_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_grant_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_for_grant_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_for_grant_user(this);
		}
	}

	public final Opt_for_grant_userContext opt_for_grant_user() throws RecognitionException {
		Opt_for_grant_userContext _localctx = new Opt_for_grant_userContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_opt_for_grant_user);
		int _la;
		try {
			setState(8236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8229);
				opt_for_user();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8230);
				match(FOR);
				setState(8231);
				match(CURRENT_USER);
				setState(8234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LeftParen) {
					{
					setState(8232);
					match(LeftParen);
					setState(8233);
					match(RightParen);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_storageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(OBParser.STORAGE, 0); }
		public Opt_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_storage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_storage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_storage(this);
		}
	}

	public final Opt_storageContext opt_storage() throws RecognitionException {
		Opt_storageContext _localctx = new Opt_storageContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_opt_storage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE) {
				{
				setState(8238);
				match(STORAGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Columns_or_fieldsContext extends ParserRuleContext {
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(OBParser.FIELDS, 0); }
		public Columns_or_fieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columns_or_fields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumns_or_fields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumns_or_fields(this);
		}
	}

	public final Columns_or_fieldsContext columns_or_fields() throws RecognitionException {
		Columns_or_fieldsContext _localctx = new Columns_or_fieldsContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_columns_or_fields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8241);
			_la = _input.LA(1);
			if ( !(_la==COLUMNS || _la==FIELDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_or_schemaContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public Database_or_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_or_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDatabase_or_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDatabase_or_schema(this);
		}
	}

	public final Database_or_schemaContext database_or_schema() throws RecognitionException {
		Database_or_schemaContext _localctx = new Database_or_schemaContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_database_or_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8243);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_or_indexes_or_keysContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(OBParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(OBParser.KEYS, 0); }
		public Index_or_indexes_or_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_or_indexes_or_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIndex_or_indexes_or_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIndex_or_indexes_or_keys(this);
		}
	}

	public final Index_or_indexes_or_keysContext index_or_indexes_or_keys() throws RecognitionException {
		Index_or_indexes_or_keysContext _localctx = new Index_or_indexes_or_keysContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_index_or_indexes_or_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8245);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_or_inContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public From_or_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_or_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFrom_or_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFrom_or_in(this);
		}
	}

	public final From_or_inContext from_or_in() throws RecognitionException {
		From_or_inContext _localctx = new From_or_inContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_from_or_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8247);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Calibration_info_listContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Calibration_info_listContext calibration_info_list() {
			return getRuleContext(Calibration_info_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Calibration_info_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_calibration_info_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCalibration_info_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCalibration_info_list(this);
		}
	}

	public final Calibration_info_listContext calibration_info_list() throws RecognitionException {
		return calibration_info_list(0);
	}

	private Calibration_info_listContext calibration_info_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Calibration_info_listContext _localctx = new Calibration_info_listContext(_ctx, _parentState);
		Calibration_info_listContext _prevctx = _localctx;
		int _startState = 980;
		enterRecursionRule(_localctx, 980, RULE_calibration_info_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				setState(8250);
				empty();
				}
				break;
			case 2:
				{
				setState(8251);
				match(STRING_VALUE);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8259);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,904,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Calibration_info_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_calibration_info_list);
					setState(8254);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8255);
					match(Comma);
					setState(8256);
					match(STRING_VALUE);
					}
					} 
				}
				setState(8261);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,904,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Opt_show_engineContext extends ParserRuleContext {
		public TerminalNode STATUS() { return getToken(OBParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(OBParser.MUTEX, 0); }
		public Opt_show_engineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_show_engine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_show_engine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_show_engine(this);
		}
	}

	public final Opt_show_engineContext opt_show_engine() throws RecognitionException {
		Opt_show_engineContext _localctx = new Opt_show_engineContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_opt_show_engine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8262);
			_la = _input.LA(1);
			if ( !(_la==STATUS || _la==MUTEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Help_stmtContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(OBParser.HELP, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Help_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_help_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHelp_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHelp_stmt(this);
		}
	}

	public final Help_stmtContext help_stmt() throws RecognitionException {
		Help_stmtContext _localctx = new Help_stmtContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_help_stmt);
		try {
			setState(8268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8264);
				match(HELP);
				setState(8265);
				match(STRING_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8266);
				match(HELP);
				setState(8267);
				match(NAME_OB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespace_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public Permanent_tablespaceContext permanent_tablespace() {
			return getRuleContext(Permanent_tablespaceContext.class,0);
		}
		public Create_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_tablespace_stmt(this);
		}
	}

	public final Create_tablespace_stmtContext create_tablespace_stmt() throws RecognitionException {
		Create_tablespace_stmtContext _localctx = new Create_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_create_tablespace_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8270);
			match(CREATE);
			setState(8271);
			match(TABLESPACE);
			setState(8272);
			tablespace();
			setState(8273);
			permanent_tablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permanent_tablespaceContext extends ParserRuleContext {
		public Permanent_tablespace_optionsContext permanent_tablespace_options() {
			return getRuleContext(Permanent_tablespace_optionsContext.class,0);
		}
		public Opt_tablespace_optionsContext opt_tablespace_options() {
			return getRuleContext(Opt_tablespace_optionsContext.class,0);
		}
		public Permanent_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permanent_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPermanent_tablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPermanent_tablespace(this);
		}
	}

	public final Permanent_tablespaceContext permanent_tablespace() throws RecognitionException {
		Permanent_tablespaceContext _localctx = new Permanent_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_permanent_tablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				{
				setState(8275);
				permanent_tablespace_options();
				}
				break;
			case FILE_BLOCK_SIZE:
			case ADD:
			case USE:
			case COMMENT:
			case WAIT:
			case ENGINE_:
			case MAX_SIZE:
			case NODEGROUP:
			case EXTENT_SIZE:
			case AUTOEXTEND_SIZE:
			case INITIAL_SIZE:
				{
				setState(8276);
				opt_tablespace_options();
				}
				break;
			case EOF:
			case DELIMITER:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permanent_tablespace_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(OBParser.ENCRYPTION, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Permanent_tablespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permanent_tablespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPermanent_tablespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPermanent_tablespace_option(this);
		}
	}

	public final Permanent_tablespace_optionContext permanent_tablespace_option() throws RecognitionException {
		Permanent_tablespace_optionContext _localctx = new Permanent_tablespace_optionContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_permanent_tablespace_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8279);
			match(ENCRYPTION);
			setState(8281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(8280);
				match(COMP_EQ);
				}
			}

			setState(8283);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tablespace_optionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(OBParser.DATAFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(OBParser.FILE_BLOCK_SIZE, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode USE() { return getToken(OBParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(OBParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode NODEGROUP() { return getToken(OBParser.NODEGROUP, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(OBParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(OBParser.MAX_SIZE, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(OBParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(OBParser.INITIAL_SIZE, 0); }
		public TerminalNode WAIT() { return getToken(OBParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public Opt_tablespace_engineContext opt_tablespace_engine() {
			return getRuleContext(Opt_tablespace_engineContext.class,0);
		}
		public Opt_tablespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_tablespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_tablespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_tablespace_option(this);
		}
	}

	public final Opt_tablespace_optionContext opt_tablespace_option() throws RecognitionException {
		Opt_tablespace_optionContext _localctx = new Opt_tablespace_optionContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_opt_tablespace_option);
		int _la;
		try {
			setState(8312);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(8285);
				match(ADD);
				setState(8286);
				match(DATAFILE);
				setState(8287);
				match(STRING_VALUE);
				}
				break;
			case FILE_BLOCK_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8288);
				match(FILE_BLOCK_SIZE);
				setState(8289);
				opt_equal_mark();
				setState(8290);
				match(INTNUM);
				}
				break;
			case USE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8292);
				match(USE);
				setState(8293);
				match(LOGFILE);
				setState(8294);
				match(GROUP);
				setState(8295);
				match(STRING_VALUE);
				}
				break;
			case MAX_SIZE:
			case NODEGROUP:
			case EXTENT_SIZE:
			case AUTOEXTEND_SIZE:
			case INITIAL_SIZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8301);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAX_SIZE:
				case EXTENT_SIZE:
				case AUTOEXTEND_SIZE:
				case INITIAL_SIZE:
					{
					setState(8298);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case MAX_SIZE:
					case AUTOEXTEND_SIZE:
						{
						setState(8296);
						_la = _input.LA(1);
						if ( !(_la==MAX_SIZE || _la==AUTOEXTEND_SIZE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case EXTENT_SIZE:
					case INITIAL_SIZE:
						{
						setState(8297);
						_la = _input.LA(1);
						if ( !(_la==EXTENT_SIZE || _la==INITIAL_SIZE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NODEGROUP:
					{
					setState(8300);
					match(NODEGROUP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8303);
				opt_equal_mark();
				setState(8304);
				match(INTNUM);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 5);
				{
				setState(8306);
				match(WAIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(8307);
				match(COMMENT);
				setState(8308);
				opt_equal_mark();
				setState(8309);
				match(STRING_VALUE);
				}
				break;
			case ENGINE_:
				enterOuterAlt(_localctx, 7);
				{
				setState(8311);
				opt_tablespace_engine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tablespace_engineContext extends ParserRuleContext {
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public Opt_tablespace_engineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_tablespace_engine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_tablespace_engine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_tablespace_engine(this);
		}
	}

	public final Opt_tablespace_engineContext opt_tablespace_engine() throws RecognitionException {
		Opt_tablespace_engineContext _localctx = new Opt_tablespace_engineContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_opt_tablespace_engine);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8314);
			match(ENGINE_);
			setState(8315);
			opt_equal_mark();
			setState(8316);
			relation_name_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tablespace_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public Opt_tablespace_engineContext opt_tablespace_engine() {
			return getRuleContext(Opt_tablespace_engineContext.class,0);
		}
		public Drop_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_tablespace_stmt(this);
		}
	}

	public final Drop_tablespace_stmtContext drop_tablespace_stmt() throws RecognitionException {
		Drop_tablespace_stmtContext _localctx = new Drop_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_drop_tablespace_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8318);
			match(DROP);
			setState(8319);
			match(TABLESPACE);
			setState(8320);
			tablespace();
			setState(8322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_) {
				{
				setState(8321);
				opt_tablespace_engine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespace_optionsContext extends ParserRuleContext {
		public Alter_tablespace_actionsContext alter_tablespace_actions() {
			return getRuleContext(Alter_tablespace_actionsContext.class,0);
		}
		public Opt_alter_tablespace_optionsContext opt_alter_tablespace_options() {
			return getRuleContext(Opt_alter_tablespace_optionsContext.class,0);
		}
		public Alter_tablespace_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablespace_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablespace_options(this);
		}
	}

	public final Alter_tablespace_optionsContext alter_tablespace_options() throws RecognitionException {
		Alter_tablespace_optionsContext _localctx = new Alter_tablespace_optionsContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_alter_tablespace_options);
		try {
			setState(8326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(8324);
				alter_tablespace_actions();
				}
				break;
			case ADD:
			case DROP:
			case WAIT:
			case ENGINE_:
			case INITIAL_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8325);
				opt_alter_tablespace_options();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespace_actionContext extends ParserRuleContext {
		public Permanent_tablespace_optionContext permanent_tablespace_option() {
			return getRuleContext(Permanent_tablespace_optionContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Alter_tablespace_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablespace_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablespace_action(this);
		}
	}

	public final Alter_tablespace_actionContext alter_tablespace_action() throws RecognitionException {
		Alter_tablespace_actionContext _localctx = new Alter_tablespace_actionContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_alter_tablespace_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(8328);
				match(SET);
				}
			}

			setState(8331);
			permanent_tablespace_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespace_actionsContext extends ParserRuleContext {
		public List<Alter_tablespace_actionContext> alter_tablespace_action() {
			return getRuleContexts(Alter_tablespace_actionContext.class);
		}
		public Alter_tablespace_actionContext alter_tablespace_action(int i) {
			return getRuleContext(Alter_tablespace_actionContext.class,i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Alter_tablespace_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablespace_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablespace_actions(this);
		}
	}

	public final Alter_tablespace_actionsContext alter_tablespace_actions() throws RecognitionException {
		Alter_tablespace_actionsContext _localctx = new Alter_tablespace_actionsContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_alter_tablespace_actions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8333);
			alter_tablespace_action();
			setState(8336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(8334);
				match(Comma);
				setState(8335);
				alter_tablespace_action();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_alter_tablespace_optionsContext extends ParserRuleContext {
		public List<Opt_alter_tablespace_optionContext> opt_alter_tablespace_option() {
			return getRuleContexts(Opt_alter_tablespace_optionContext.class);
		}
		public Opt_alter_tablespace_optionContext opt_alter_tablespace_option(int i) {
			return getRuleContext(Opt_alter_tablespace_optionContext.class,i);
		}
		public Opt_alter_tablespace_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_alter_tablespace_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_alter_tablespace_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_alter_tablespace_options(this);
		}
	}

	public final Opt_alter_tablespace_optionsContext opt_alter_tablespace_options() throws RecognitionException {
		Opt_alter_tablespace_optionsContext _localctx = new Opt_alter_tablespace_optionsContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_opt_alter_tablespace_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8339); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8338);
				opt_alter_tablespace_option();
				}
				}
				setState(8341); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==DROP || _la==WAIT || _la==ENGINE_ || _la==INITIAL_SIZE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_alter_tablespace_optionContext extends ParserRuleContext {
		public TerminalNode DATAFILE() { return getToken(OBParser.DATAFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(OBParser.INITIAL_SIZE, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode WAIT() { return getToken(OBParser.WAIT, 0); }
		public Opt_tablespace_engineContext opt_tablespace_engine() {
			return getRuleContext(Opt_tablespace_engineContext.class,0);
		}
		public Opt_alter_tablespace_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_alter_tablespace_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_alter_tablespace_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_alter_tablespace_option(this);
		}
	}

	public final Opt_alter_tablespace_optionContext opt_alter_tablespace_option() throws RecognitionException {
		Opt_alter_tablespace_optionContext _localctx = new Opt_alter_tablespace_optionContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_opt_alter_tablespace_option);
		int _la;
		try {
			setState(8352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8343);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8344);
				match(DATAFILE);
				setState(8345);
				match(STRING_VALUE);
				}
				break;
			case INITIAL_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8346);
				match(INITIAL_SIZE);
				setState(8347);
				opt_equal_mark();
				setState(8348);
				match(INTNUM);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8350);
				match(WAIT);
				}
				break;
			case ENGINE_:
				enterOuterAlt(_localctx, 4);
				{
				setState(8351);
				opt_tablespace_engine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespace_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public Alter_tablespace_optionsContext alter_tablespace_options() {
			return getRuleContext(Alter_tablespace_optionsContext.class,0);
		}
		public Alter_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablespace_stmt(this);
		}
	}

	public final Alter_tablespace_stmtContext alter_tablespace_stmt() throws RecognitionException {
		Alter_tablespace_stmtContext _localctx = new Alter_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_alter_tablespace_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8354);
			match(ALTER);
			setState(8355);
			match(TABLESPACE);
			setState(8356);
			tablespace();
			setState(8357);
			alter_tablespace_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rotate_master_key_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(OBParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(OBParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(OBParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(OBParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public Rotate_master_key_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rotate_master_key_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRotate_master_key_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRotate_master_key_stmt(this);
		}
	}

	public final Rotate_master_key_stmtContext rotate_master_key_stmt() throws RecognitionException {
		Rotate_master_key_stmtContext _localctx = new Rotate_master_key_stmtContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_rotate_master_key_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8359);
			match(ALTER);
			setState(8360);
			match(INSTANCE);
			setState(8361);
			match(ROTATE);
			setState(8362);
			match(INNODB);
			setState(8363);
			match(MASTER);
			setState(8364);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permanent_tablespace_optionsContext extends ParserRuleContext {
		public List<Permanent_tablespace_optionContext> permanent_tablespace_option() {
			return getRuleContexts(Permanent_tablespace_optionContext.class);
		}
		public Permanent_tablespace_optionContext permanent_tablespace_option(int i) {
			return getRuleContext(Permanent_tablespace_optionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Permanent_tablespace_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permanent_tablespace_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPermanent_tablespace_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPermanent_tablespace_options(this);
		}
	}

	public final Permanent_tablespace_optionsContext permanent_tablespace_options() throws RecognitionException {
		Permanent_tablespace_optionsContext _localctx = new Permanent_tablespace_optionsContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_permanent_tablespace_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8366);
			permanent_tablespace_option();
			setState(8371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8367);
				match(Comma);
				setState(8368);
				permanent_tablespace_option();
				}
				}
				setState(8373);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_tablespace_optionsContext extends ParserRuleContext {
		public List<Opt_tablespace_optionContext> opt_tablespace_option() {
			return getRuleContexts(Opt_tablespace_optionContext.class);
		}
		public Opt_tablespace_optionContext opt_tablespace_option(int i) {
			return getRuleContext(Opt_tablespace_optionContext.class,i);
		}
		public Opt_tablespace_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_tablespace_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_tablespace_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_tablespace_options(this);
		}
	}

	public final Opt_tablespace_optionsContext opt_tablespace_options() throws RecognitionException {
		Opt_tablespace_optionsContext _localctx = new Opt_tablespace_optionsContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_opt_tablespace_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8375); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8374);
				opt_tablespace_option();
				}
				}
				setState(8377); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FILE_BLOCK_SIZE || _la==ADD || _la==USE || ((((_la - 491)) & ~0x3f) == 0 && ((1L << (_la - 491)) & ((1L << (COMMENT - 491)) | (1L << (WAIT - 491)) | (1L << (ENGINE_ - 491)))) != 0) || _la==MAX_SIZE || _la==NODEGROUP || _la==EXTENT_SIZE || _la==AUTOEXTEND_SIZE || _la==INITIAL_SIZE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public User_specification_listContext user_specification_list() {
			return getRuleContext(User_specification_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Require_specificationContext require_specification() {
			return getRuleContext(Require_specificationContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public Resource_option_listContext resource_option_list() {
			return getRuleContext(Resource_option_listContext.class,0);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_user_stmt(this);
		}
	}

	public final Create_user_stmtContext create_user_stmt() throws RecognitionException {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_create_user_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8379);
			match(CREATE);
			setState(8380);
			match(USER);
			setState(8385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8381);
				match(IF);
				setState(8382);
				not();
				setState(8383);
				match(EXISTS);
				}
			}

			setState(8387);
			user_specification_list();
			setState(8389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(8388);
				require_specification();
				}
			}

			setState(8393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8391);
				match(WITH);
				setState(8392);
				resource_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_specification_listContext extends ParserRuleContext {
		public List<User_specificationContext> user_specification() {
			return getRuleContexts(User_specificationContext.class);
		}
		public User_specificationContext user_specification(int i) {
			return getRuleContext(User_specificationContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public User_specification_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_specification_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_specification_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_specification_list(this);
		}
	}

	public final User_specification_listContext user_specification_list() throws RecognitionException {
		User_specification_listContext _localctx = new User_specification_listContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_user_specification_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8395);
			user_specification();
			setState(8400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8396);
				match(Comma);
				setState(8397);
				user_specification();
				}
				}
				setState(8402);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_specificationContext extends ParserRuleContext {
		public User_specification_without_passwordContext user_specification_without_password() {
			return getRuleContext(User_specification_without_passwordContext.class,0);
		}
		public User_specification_with_passwordContext user_specification_with_password() {
			return getRuleContext(User_specification_with_passwordContext.class,0);
		}
		public User_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_specification(this);
		}
	}

	public final User_specificationContext user_specification() throws RecognitionException {
		User_specificationContext _localctx = new User_specificationContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_user_specification);
		try {
			setState(8405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8403);
				user_specification_without_password();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8404);
				user_specification_with_password();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_specification_without_passwordContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public User_specification_without_passwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_specification_without_password; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_specification_without_password(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_specification_without_password(this);
		}
	}

	public final User_specification_without_passwordContext user_specification_without_password() throws RecognitionException {
		User_specification_without_passwordContext _localctx = new User_specification_without_passwordContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_user_specification_without_password);
		int _la;
		try {
			setState(8415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8407);
				user();
				setState(8409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_VARIABLE) {
					{
					setState(8408);
					match(USER_VARIABLE);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8411);
				match(CURRENT_USER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8412);
				match(CURRENT_USER);
				setState(8413);
				match(LeftParen);
				setState(8414);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_specification_with_passwordContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(OBParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public PasswordContext password() {
			return getRuleContext(PasswordContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode PASSWORD() { return getToken(OBParser.PASSWORD, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public User_specification_with_passwordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_specification_with_password; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_specification_with_password(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_specification_with_password(this);
		}
	}

	public final User_specification_with_passwordContext user_specification_with_password() throws RecognitionException {
		User_specification_with_passwordContext _localctx = new User_specification_with_passwordContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_user_specification_with_password);
		int _la;
		try {
			setState(8469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8417);
				user();
				setState(8419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_VARIABLE) {
					{
					setState(8418);
					match(USER_VARIABLE);
					}
				}

				setState(8421);
				match(IDENTIFIED);
				setState(8426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					{
					setState(8422);
					match(WITH);
					setState(8423);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8424);
					match(WITH);
					setState(8425);
					match(NAME_OB);
					}
					}
					break;
				}
				setState(8428);
				match(BY);
				setState(8429);
				password();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8431);
				user();
				setState(8433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_VARIABLE) {
					{
					setState(8432);
					match(USER_VARIABLE);
					}
				}

				setState(8435);
				match(IDENTIFIED);
				setState(8440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					{
					setState(8436);
					match(WITH);
					setState(8437);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8438);
					match(WITH);
					setState(8439);
					match(NAME_OB);
					}
					}
					break;
				}
				setState(8442);
				match(BY);
				setState(8443);
				match(PASSWORD);
				setState(8444);
				password();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8446);
				match(CURRENT_USER);
				setState(8447);
				match(IDENTIFIED);
				setState(8452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					{
					setState(8448);
					match(WITH);
					setState(8449);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8450);
					match(WITH);
					setState(8451);
					match(NAME_OB);
					}
					}
					break;
				}
				setState(8454);
				match(BY);
				setState(8455);
				password();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8456);
				match(CURRENT_USER);
				setState(8457);
				match(LeftParen);
				setState(8458);
				match(RightParen);
				setState(8459);
				match(IDENTIFIED);
				setState(8464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					{
					setState(8460);
					match(WITH);
					setState(8461);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8462);
					match(WITH);
					setState(8463);
					match(NAME_OB);
					}
					}
					break;
				}
				setState(8466);
				match(BY);
				setState(8467);
				match(PASSWORD);
				setState(8468);
				password();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Require_specificationContext extends ParserRuleContext {
		public TerminalNode REQUIRE() { return getToken(OBParser.REQUIRE, 0); }
		public TerminalNode NONE() { return getToken(OBParser.NONE, 0); }
		public TerminalNode SSL() { return getToken(OBParser.SSL, 0); }
		public TerminalNode X509() { return getToken(OBParser.X509, 0); }
		public Tls_option_listContext tls_option_list() {
			return getRuleContext(Tls_option_listContext.class,0);
		}
		public Require_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_require_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRequire_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRequire_specification(this);
		}
	}

	public final Require_specificationContext require_specification() throws RecognitionException {
		Require_specificationContext _localctx = new Require_specificationContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_require_specification);
		int _la;
		try {
			setState(8475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8471);
				match(REQUIRE);
				setState(8472);
				_la = _input.LA(1);
				if ( !(_la==SSL || _la==X509 || _la==NONE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8473);
				match(REQUIRE);
				setState(8474);
				tls_option_list(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resource_option_listContext extends ParserRuleContext {
		public List<Resource_optionContext> resource_option() {
			return getRuleContexts(Resource_optionContext.class);
		}
		public Resource_optionContext resource_option(int i) {
			return getRuleContext(Resource_optionContext.class,i);
		}
		public Resource_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterResource_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitResource_option_list(this);
		}
	}

	public final Resource_option_listContext resource_option_list() throws RecognitionException {
		Resource_option_listContext _localctx = new Resource_option_listContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_resource_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8478); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8477);
				resource_option();
				}
				}
				setState(8480); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MAX_USER_CONNECTIONS || _la==MAX_CONNECTIONS_PER_HOUR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resource_optionContext extends ParserRuleContext {
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(OBParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(OBParser.MAX_USER_CONNECTIONS, 0); }
		public Resource_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterResource_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitResource_option(this);
		}
	}

	public final Resource_optionContext resource_option() throws RecognitionException {
		Resource_optionContext _localctx = new Resource_optionContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_resource_option);
		try {
			setState(8486);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8482);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(8483);
				match(INTNUM);
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8484);
				match(MAX_USER_CONNECTIONS);
				setState(8485);
				match(INTNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tls_option_listContext extends ParserRuleContext {
		public Tls_optionContext tls_option() {
			return getRuleContext(Tls_optionContext.class,0);
		}
		public Tls_option_listContext tls_option_list() {
			return getRuleContext(Tls_option_listContext.class,0);
		}
		public TerminalNode AND() { return getToken(OBParser.AND, 0); }
		public Tls_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tls_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTls_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTls_option_list(this);
		}
	}

	public final Tls_option_listContext tls_option_list() throws RecognitionException {
		return tls_option_list(0);
	}

	private Tls_option_listContext tls_option_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Tls_option_listContext _localctx = new Tls_option_listContext(_ctx, _parentState);
		Tls_option_listContext _prevctx = _localctx;
		int _startState = 1032;
		enterRecursionRule(_localctx, 1032, RULE_tls_option_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8489);
			tls_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(8498);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,937,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8496);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
					case 1:
						{
						_localctx = new Tls_option_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tls_option_list);
						setState(8491);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8492);
						tls_option();
						}
						break;
					case 2:
						{
						_localctx = new Tls_option_listContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_tls_option_list);
						setState(8493);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8494);
						match(AND);
						setState(8495);
						tls_option();
						}
						break;
					}
					} 
				}
				setState(8500);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,937,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Tls_optionContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode CIPHER() { return getToken(OBParser.CIPHER, 0); }
		public TerminalNode ISSUER() { return getToken(OBParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(OBParser.SUBJECT, 0); }
		public Tls_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tls_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTls_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTls_option(this);
		}
	}

	public final Tls_optionContext tls_option() throws RecognitionException {
		Tls_optionContext _localctx = new Tls_optionContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_tls_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8501);
			_la = _input.LA(1);
			if ( !(_la==CIPHER || _la==ISSUER || _la==SUBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8502);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_user);
		try {
			setState(8507);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8504);
				match(STRING_VALUE);
				}
				break;
			case NAME_OB:
				enterOuterAlt(_localctx, 2);
				{
				setState(8505);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(8506);
				unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_host_nameContext extends ParserRuleContext {
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Opt_host_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_host_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_host_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_host_name(this);
		}
	}

	public final Opt_host_nameContext opt_host_name() throws RecognitionException {
		Opt_host_nameContext _localctx = new Opt_host_nameContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_opt_host_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_VARIABLE) {
				{
				setState(8509);
				match(USER_VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_host_or_current_userContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public User_host_or_current_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_host_or_current_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_host_or_current_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_host_or_current_user(this);
		}
	}

	public final User_host_or_current_userContext user_host_or_current_user() throws RecognitionException {
		User_host_or_current_userContext _localctx = new User_host_or_current_userContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_user_host_or_current_user);
		int _la;
		try {
			setState(8520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8512);
				user();
				setState(8514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_VARIABLE) {
					{
					setState(8513);
					match(USER_VARIABLE);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8516);
				match(CURRENT_USER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8517);
				match(CURRENT_USER);
				setState(8518);
				match(LeftParen);
				setState(8519);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_with_host_nameContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public User_with_host_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_with_host_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_with_host_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_with_host_name(this);
		}
	}

	public final User_with_host_nameContext user_with_host_name() throws RecognitionException {
		User_with_host_nameContext _localctx = new User_with_host_nameContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_user_with_host_name);
		int _la;
		try {
			setState(8530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8522);
				user();
				setState(8524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_VARIABLE) {
					{
					setState(8523);
					match(USER_VARIABLE);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8526);
				match(CURRENT_USER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8527);
				match(CURRENT_USER);
				setState(8528);
				match(LeftParen);
				setState(8529);
				match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public PasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPassword(this);
		}
	}

	public final PasswordContext password() throws RecognitionException {
		PasswordContext _localctx = new PasswordContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_password);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8532);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_user_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public User_listContext user_list() {
			return getRuleContext(User_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_user_stmt(this);
		}
	}

	public final Drop_user_stmtContext drop_user_stmt() throws RecognitionException {
		Drop_user_stmtContext _localctx = new Drop_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_drop_user_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8534);
			match(DROP);
			setState(8535);
			match(USER);
			setState(8538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8536);
				match(IF);
				setState(8537);
				match(EXISTS);
				}
			}

			setState(8540);
			user_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_listContext extends ParserRuleContext {
		public List<User_with_host_nameContext> user_with_host_name() {
			return getRuleContexts(User_with_host_nameContext.class);
		}
		public User_with_host_nameContext user_with_host_name(int i) {
			return getRuleContext(User_with_host_nameContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public User_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_list(this);
		}
	}

	public final User_listContext user_list() throws RecognitionException {
		User_listContext _localctx = new User_listContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_user_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8542);
			user_with_host_name();
			setState(8547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8543);
				match(Comma);
				setState(8544);
				user_with_host_name();
				}
				}
				setState(8549);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_role_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(OBParser.ROLE, 0); }
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Create_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_role_stmt(this);
		}
	}

	public final Create_role_stmtContext create_role_stmt() throws RecognitionException {
		Create_role_stmtContext _localctx = new Create_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_create_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8550);
			match(CREATE);
			setState(8551);
			match(ROLE);
			setState(8556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8552);
				match(IF);
				setState(8553);
				not();
				setState(8554);
				match(EXISTS);
				}
			}

			setState(8558);
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_listContext extends ParserRuleContext {
		public List<Role_with_hostContext> role_with_host() {
			return getRuleContexts(Role_with_hostContext.class);
		}
		public Role_with_hostContext role_with_host(int i) {
			return getRuleContext(Role_with_hostContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRole_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRole_list(this);
		}
	}

	public final Role_listContext role_list() throws RecognitionException {
		Role_listContext _localctx = new Role_listContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_role_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8560);
			role_with_host();
			setState(8565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8561);
				match(Comma);
				setState(8562);
				role_with_host();
				}
				}
				setState(8567);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_specification_without_password_listContext extends ParserRuleContext {
		public List<User_specification_without_passwordContext> user_specification_without_password() {
			return getRuleContexts(User_specification_without_passwordContext.class);
		}
		public User_specification_without_passwordContext user_specification_without_password(int i) {
			return getRuleContext(User_specification_without_passwordContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public User_specification_without_password_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_specification_without_password_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUser_specification_without_password_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUser_specification_without_password_list(this);
		}
	}

	public final User_specification_without_password_listContext user_specification_without_password_list() throws RecognitionException {
		User_specification_without_password_listContext _localctx = new User_specification_without_password_listContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_user_specification_without_password_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8568);
			user_specification_without_password();
			setState(8573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8569);
				match(Comma);
				setState(8570);
				user_specification_without_password();
				}
				}
				setState(8575);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_role_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(OBParser.ROLE, 0); }
		public User_listContext user_list() {
			return getRuleContext(User_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_role_stmt(this);
		}
	}

	public final Drop_role_stmtContext drop_role_stmt() throws RecognitionException {
		Drop_role_stmtContext _localctx = new Drop_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_drop_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8576);
			match(DROP);
			setState(8577);
			match(ROLE);
			setState(8582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8578);
				match(IF);
				setState(8579);
				not();
				setState(8580);
				match(EXISTS);
				}
			}

			setState(8584);
			user_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_with_hostContext extends ParserRuleContext {
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Role_with_hostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_with_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRole_with_host(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRole_with_host(this);
		}
	}

	public final Role_with_hostContext role_with_host() throws RecognitionException {
		Role_with_hostContext _localctx = new Role_with_hostContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_role_with_host);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8586);
			role();
			setState(8588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_VARIABLE) {
				{
				setState(8587);
				match(USER_VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keyword_for_role_nameContext unreserved_keyword_for_role_name() {
			return getRuleContext(Unreserved_keyword_for_role_nameContext.class,0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRole(this);
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_role);
		try {
			setState(8593);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8590);
				match(STRING_VALUE);
				}
				break;
			case NAME_OB:
				enterOuterAlt(_localctx, 2);
				{
				setState(8591);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(8592);
				unreserved_keyword_for_role_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_password_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public List<TerminalNode> PASSWORD() { return getTokens(OBParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(OBParser.PASSWORD, i);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public Opt_host_nameContext opt_host_name() {
			return getRuleContext(Opt_host_nameContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public PasswordContext password() {
			return getRuleContext(PasswordContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public User_with_host_nameContext user_with_host_name() {
			return getRuleContext(User_with_host_nameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(OBParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Require_specificationContext require_specification() {
			return getRuleContext(Require_specificationContext.class,0);
		}
		public Resource_option_listContext resource_option_list() {
			return getRuleContext(Resource_option_listContext.class,0);
		}
		public Set_password_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_password_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_password_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_password_stmt(this);
		}
	}

	public final Set_password_stmtContext set_password_stmt() throws RecognitionException {
		Set_password_stmtContext _localctx = new Set_password_stmtContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_set_password_stmt);
		int _la;
		try {
			setState(8643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8595);
				match(SET);
				setState(8596);
				match(PASSWORD);
				setState(8601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8597);
					match(FOR);
					setState(8598);
					user();
					setState(8599);
					opt_host_name();
					}
				}

				setState(8603);
				match(COMP_EQ);
				setState(8604);
				match(STRING_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8605);
				match(SET);
				setState(8606);
				match(PASSWORD);
				setState(8611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8607);
					match(FOR);
					setState(8608);
					user();
					setState(8609);
					opt_host_name();
					}
				}

				setState(8613);
				match(COMP_EQ);
				setState(8614);
				match(PASSWORD);
				setState(8615);
				match(LeftParen);
				setState(8616);
				password();
				setState(8617);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8619);
				match(ALTER);
				setState(8620);
				match(USER);
				setState(8621);
				user_with_host_name();
				setState(8622);
				match(IDENTIFIED);
				setState(8627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
				case 1:
					{
					{
					setState(8623);
					match(WITH);
					setState(8624);
					match(STRING_VALUE);
					}
					}
					break;
				case 2:
					{
					{
					setState(8625);
					match(WITH);
					setState(8626);
					match(NAME_OB);
					}
					}
					break;
				}
				setState(8629);
				match(BY);
				setState(8630);
				password();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8632);
				match(ALTER);
				setState(8633);
				match(USER);
				setState(8634);
				user_with_host_name();
				setState(8635);
				require_specification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8637);
				match(ALTER);
				setState(8638);
				match(USER);
				setState(8639);
				user_with_host_name();
				setState(8640);
				match(WITH);
				setState(8641);
				resource_option_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_for_userContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public Opt_host_nameContext opt_host_name() {
			return getRuleContext(Opt_host_nameContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Opt_for_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_for_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_for_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_for_user(this);
		}
	}

	public final Opt_for_userContext opt_for_user() throws RecognitionException {
		Opt_for_userContext _localctx = new Opt_for_userContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_opt_for_user);
		try {
			setState(8650);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8645);
				match(FOR);
				setState(8646);
				user();
				setState(8647);
				opt_host_name();
				}
				break;
			case EOF:
			case USING:
			case DELIMITER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8649);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_user_stmtContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public Rename_listContext rename_list() {
			return getRuleContext(Rename_listContext.class,0);
		}
		public Rename_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRename_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRename_user_stmt(this);
		}
	}

	public final Rename_user_stmtContext rename_user_stmt() throws RecognitionException {
		Rename_user_stmtContext _localctx = new Rename_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_rename_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8652);
			match(RENAME);
			setState(8653);
			match(USER);
			setState(8654);
			rename_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_infoContext extends ParserRuleContext {
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public List<TerminalNode> USER_VARIABLE() { return getTokens(OBParser.USER_VARIABLE); }
		public TerminalNode USER_VARIABLE(int i) {
			return getToken(OBParser.USER_VARIABLE, i);
		}
		public Rename_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRename_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRename_info(this);
		}
	}

	public final Rename_infoContext rename_info() throws RecognitionException {
		Rename_infoContext _localctx = new Rename_infoContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_rename_info);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8656);
			user();
			setState(8658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_VARIABLE) {
				{
				setState(8657);
				match(USER_VARIABLE);
				}
			}

			setState(8660);
			match(TO);
			setState(8661);
			user();
			setState(8663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_VARIABLE) {
				{
				setState(8662);
				match(USER_VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_listContext extends ParserRuleContext {
		public List<Rename_infoContext> rename_info() {
			return getRuleContexts(Rename_infoContext.class);
		}
		public Rename_infoContext rename_info(int i) {
			return getRuleContext(Rename_infoContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Rename_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRename_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRename_list(this);
		}
	}

	public final Rename_listContext rename_list() throws RecognitionException {
		Rename_listContext _localctx = new Rename_listContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_rename_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8665);
			rename_info();
			setState(8670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8666);
				match(Comma);
				setState(8667);
				rename_info();
				}
				}
				setState(8672);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_user_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public User_listContext user_list() {
			return getRuleContext(User_listContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(OBParser.ACCOUNT, 0); }
		public Lock_spec_mysql57Context lock_spec_mysql57() {
			return getRuleContext(Lock_spec_mysql57Context.class,0);
		}
		public Lock_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLock_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLock_user_stmt(this);
		}
	}

	public final Lock_user_stmtContext lock_user_stmt() throws RecognitionException {
		Lock_user_stmtContext _localctx = new Lock_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_lock_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8673);
			match(ALTER);
			setState(8674);
			match(USER);
			setState(8675);
			user_list();
			setState(8676);
			match(ACCOUNT);
			setState(8677);
			lock_spec_mysql57();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_spec_mysql57Context extends ParserRuleContext {
		public TerminalNode LOCK_() { return getToken(OBParser.LOCK_, 0); }
		public TerminalNode UNLOCK() { return getToken(OBParser.UNLOCK, 0); }
		public Lock_spec_mysql57Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_spec_mysql57; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLock_spec_mysql57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLock_spec_mysql57(this);
		}
	}

	public final Lock_spec_mysql57Context lock_spec_mysql57() throws RecognitionException {
		Lock_spec_mysql57Context _localctx = new Lock_spec_mysql57Context(_ctx, getState());
		enterRule(_localctx, 1074, RULE_lock_spec_mysql57);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8679);
			_la = _input.LA(1);
			if ( !(_la==LOCK_ || _la==UNLOCK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tables_stmtContext extends ParserRuleContext {
		public TerminalNode LOCK_() { return getToken(OBParser.LOCK_, 0); }
		public Table_or_tablesContext table_or_tables() {
			return getRuleContext(Table_or_tablesContext.class,0);
		}
		public Lock_table_listContext lock_table_list() {
			return getRuleContext(Lock_table_listContext.class,0);
		}
		public Lock_tables_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_tables_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLock_tables_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLock_tables_stmt(this);
		}
	}

	public final Lock_tables_stmtContext lock_tables_stmt() throws RecognitionException {
		Lock_tables_stmtContext _localctx = new Lock_tables_stmtContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_lock_tables_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8681);
			match(LOCK_);
			setState(8682);
			table_or_tables();
			setState(8683);
			lock_table_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unlock_tables_stmtContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(OBParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(OBParser.TABLES, 0); }
		public Unlock_tables_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlock_tables_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnlock_tables_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnlock_tables_stmt(this);
		}
	}

	public final Unlock_tables_stmtContext unlock_tables_stmt() throws RecognitionException {
		Unlock_tables_stmtContext _localctx = new Unlock_tables_stmtContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_unlock_tables_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8685);
			match(UNLOCK);
			setState(8686);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_listContext extends ParserRuleContext {
		public List<Lock_tableContext> lock_table() {
			return getRuleContexts(Lock_tableContext.class);
		}
		public Lock_tableContext lock_table(int i) {
			return getRuleContext(Lock_tableContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Lock_table_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLock_table_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLock_table_list(this);
		}
	}

	public final Lock_table_listContext lock_table_list() throws RecognitionException {
		Lock_table_listContext _localctx = new Lock_table_listContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_lock_table_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8688);
			lock_table();
			setState(8693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8689);
				match(Comma);
				setState(8690);
				lock_table();
				}
				}
				setState(8695);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Lock_typeContext lock_type() {
			return getRuleContext(Lock_typeContext.class,0);
		}
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLock_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLock_table(this);
		}
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_lock_table);
		int _la;
		try {
			setState(8706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8696);
				relation_factor();
				setState(8697);
				lock_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8699);
				relation_factor();
				setState(8701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8700);
					match(AS);
					}
				}

				setState(8703);
				relation_name();
				setState(8704);
				lock_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_typeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(OBParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(OBParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(OBParser.LOW_PRIORITY, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLock_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLock_type(this);
		}
	}

	public final Lock_typeContext lock_type() throws RecognitionException {
		Lock_typeContext _localctx = new Lock_typeContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_lock_type);
		int _la;
		try {
			setState(8715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(8708);
				match(READ);
				setState(8710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(8709);
					match(LOCAL);
					}
				}

				}
				break;
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8712);
				match(WRITE);
				}
				break;
			case LOW_PRIORITY:
				enterOuterAlt(_localctx, 3);
				{
				setState(8713);
				match(LOW_PRIORITY);
				setState(8714);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(OBParser.SEQUENCE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Sequence_option_listContext sequence_option_list() {
			return getRuleContext(Sequence_option_listContext.class,0);
		}
		public Create_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_sequence_stmt(this);
		}
	}

	public final Create_sequence_stmtContext create_sequence_stmt() throws RecognitionException {
		Create_sequence_stmtContext _localctx = new Create_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_create_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8717);
			match(CREATE);
			setState(8718);
			match(SEQUENCE);
			setState(8723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8719);
				match(IF);
				setState(8720);
				not();
				setState(8721);
				match(EXISTS);
				}
			}

			setState(8725);
			relation_factor();
			setState(8727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE || _la==MAXVALUE || _la==ORDER || _la==MINVALUE || _la==START || _la==NOMINVALUE || _la==CACHE || _la==NOMAXVALUE || _la==INCREMENT || _la==RESTART || _la==NOCACHE || _la==NOCYCLE || _la==NOORDER) {
				{
				setState(8726);
				sequence_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_option_listContext extends ParserRuleContext {
		public List<Sequence_optionContext> sequence_option() {
			return getRuleContexts(Sequence_optionContext.class);
		}
		public Sequence_optionContext sequence_option(int i) {
			return getRuleContext(Sequence_optionContext.class,i);
		}
		public Sequence_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSequence_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSequence_option_list(this);
		}
	}

	public final Sequence_option_listContext sequence_option_list() throws RecognitionException {
		Sequence_option_listContext _localctx = new Sequence_option_listContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_sequence_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8730); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8729);
				sequence_option();
				}
				}
				setState(8732); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CYCLE || _la==MAXVALUE || _la==ORDER || _la==MINVALUE || _la==START || _la==NOMINVALUE || _la==CACHE || _la==NOMAXVALUE || _la==INCREMENT || _la==RESTART || _la==NOCACHE || _la==NOCYCLE || _la==NOORDER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_optionContext extends ParserRuleContext {
		public Simple_numContext simple_num() {
			return getRuleContext(Simple_numContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(OBParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(OBParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(OBParser.MINVALUE, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(OBParser.NOMAXVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(OBParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(OBParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(OBParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(OBParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(OBParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(OBParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(OBParser.NOORDER, 0); }
		public TerminalNode RESTART() { return getToken(OBParser.RESTART, 0); }
		public Sequence_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSequence_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSequence_option(this);
		}
	}

	public final Sequence_optionContext sequence_option() throws RecognitionException {
		Sequence_optionContext _localctx = new Sequence_optionContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_sequence_option);
		try {
			setState(8756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAXVALUE:
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8737);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENT:
					{
					setState(8734);
					match(INCREMENT);
					setState(8735);
					match(BY);
					}
					break;
				case MAXVALUE:
					{
					setState(8736);
					match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8739);
				simple_num();
				}
				break;
			case MINVALUE:
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(8743);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(8740);
					match(MINVALUE);
					}
					break;
				case START:
					{
					setState(8741);
					match(START);
					setState(8742);
					match(WITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8745);
				simple_num();
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8746);
				match(NOMAXVALUE);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8747);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8748);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(8749);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8750);
				match(CACHE);
				setState(8751);
				simple_num();
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(8752);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 9);
				{
				setState(8753);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(8754);
				match(NOORDER);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 11);
				{
				setState(8755);
				match(RESTART);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_numContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode DECIMAL_VAL() { return getToken(OBParser.DECIMAL_VAL, 0); }
		public TerminalNode Minus() { return getToken(OBParser.Minus, 0); }
		public TerminalNode Plus() { return getToken(OBParser.Plus, 0); }
		public Simple_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSimple_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSimple_num(this);
		}
	}

	public final Simple_numContext simple_num() throws RecognitionException {
		Simple_numContext _localctx = new Simple_numContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_simple_num);
		int _la;
		try {
			setState(8761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTNUM:
			case DECIMAL_VAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8758);
				_la = _input.LA(1);
				if ( !(_la==INTNUM || _la==DECIMAL_VAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case Plus:
			case Minus:
				enterOuterAlt(_localctx, 2);
				{
				setState(8759);
				_la = _input.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8760);
				_la = _input.LA(1);
				if ( !(_la==INTNUM || _la==DECIMAL_VAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequence_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(OBParser.SEQUENCE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_sequence_stmt(this);
		}
	}

	public final Drop_sequence_stmtContext drop_sequence_stmt() throws RecognitionException {
		Drop_sequence_stmtContext _localctx = new Drop_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_drop_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8763);
			match(DROP);
			setState(8764);
			match(SEQUENCE);
			setState(8767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8765);
				match(IF);
				setState(8766);
				match(EXISTS);
				}
			}

			setState(8769);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(OBParser.SEQUENCE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Sequence_option_listContext sequence_option_list() {
			return getRuleContext(Sequence_option_listContext.class,0);
		}
		public Alter_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_sequence_stmt(this);
		}
	}

	public final Alter_sequence_stmtContext alter_sequence_stmt() throws RecognitionException {
		Alter_sequence_stmtContext _localctx = new Alter_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_alter_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8771);
			match(ALTER);
			setState(8772);
			match(SEQUENCE);
			setState(8773);
			relation_factor();
			setState(8775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE || _la==MAXVALUE || _la==ORDER || _la==MINVALUE || _la==START || _la==NOMINVALUE || _la==CACHE || _la==NOMAXVALUE || _la==INCREMENT || _la==RESTART || _la==NOCACHE || _la==NOCYCLE || _la==NOORDER) {
				{
				setState(8774);
				sequence_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_dblink_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public List<TerminalNode> DATABASE() { return getTokens(OBParser.DATABASE); }
		public TerminalNode DATABASE(int i) {
			return getToken(OBParser.DATABASE, i);
		}
		public TerminalNode LINK() { return getToken(OBParser.LINK, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode CONNECT() { return getToken(OBParser.CONNECT, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Database_factorContext database_factor() {
			return getRuleContext(Database_factorContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(OBParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public PasswordContext password() {
			return getRuleContext(PasswordContext.class,0);
		}
		public Ip_portContext ip_port() {
			return getRuleContext(Ip_portContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public NotContext not() {
			return getRuleContext(NotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Create_dblink_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_dblink_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_dblink_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_dblink_stmt(this);
		}
	}

	public final Create_dblink_stmtContext create_dblink_stmt() throws RecognitionException {
		Create_dblink_stmtContext _localctx = new Create_dblink_stmtContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_create_dblink_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8777);
			match(CREATE);
			setState(8778);
			match(DATABASE);
			setState(8779);
			match(LINK);
			setState(8784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8780);
				match(IF);
				setState(8781);
				not();
				setState(8782);
				match(EXISTS);
				}
			}

			setState(8786);
			relation_name();
			setState(8787);
			match(CONNECT);
			setState(8788);
			match(TO);
			setState(8789);
			user();
			setState(8790);
			match(USER_VARIABLE);
			setState(8791);
			match(DATABASE);
			setState(8792);
			database_factor();
			setState(8793);
			match(IDENTIFIED);
			setState(8794);
			match(BY);
			setState(8795);
			password();
			setState(8796);
			ip_port();
			setState(8799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER) {
				{
				setState(8797);
				match(CLUSTER);
				setState(8798);
				match(STRING_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dblink_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode LINK() { return getToken(OBParser.LINK, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_dblink_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dblink_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_dblink_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_dblink_stmt(this);
		}
	}

	public final Drop_dblink_stmtContext drop_dblink_stmt() throws RecognitionException {
		Drop_dblink_stmtContext _localctx = new Drop_dblink_stmtContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_drop_dblink_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8801);
			match(DROP);
			setState(8802);
			match(DATABASE);
			setState(8803);
			match(LINK);
			setState(8806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8804);
				match(IF);
				setState(8805);
				match(EXISTS);
				}
			}

			setState(8808);
			relation_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_stmtContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(OBParser.BEGIN, 0); }
		public TerminalNode HINT_VALUE() { return getToken(OBParser.HINT_VALUE, 0); }
		public TerminalNode WORK() { return getToken(OBParser.WORK, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(OBParser.TRANSACTION, 0); }
		public Transaction_access_modeContext transaction_access_mode() {
			return getRuleContext(Transaction_access_modeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(OBParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OBParser.SNAPSHOT, 0); }
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Begin_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBegin_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBegin_stmt(this);
		}
	}

	public final Begin_stmtContext begin_stmt() throws RecognitionException {
		Begin_stmtContext _localctx = new Begin_stmtContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_begin_stmt);
		int _la;
		try {
			setState(8839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8810);
				match(BEGIN);
				setState(8812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HINT_VALUE) {
					{
					setState(8811);
					match(HINT_VALUE);
					}
				}

				setState(8815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(8814);
					match(WORK);
					}
				}

				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(8817);
				match(START);
				setState(8819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HINT_VALUE) {
					{
					setState(8818);
					match(HINT_VALUE);
					}
				}

				setState(8821);
				match(TRANSACTION);
				setState(8837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					{
					setState(8822);
					match(WITH);
					setState(8823);
					match(CONSISTENT);
					setState(8824);
					match(SNAPSHOT);
					}
					}
					break;
				case 2:
					{
					setState(8825);
					transaction_access_mode();
					}
					break;
				case 3:
					{
					{
					setState(8826);
					match(WITH);
					setState(8827);
					match(CONSISTENT);
					setState(8828);
					match(SNAPSHOT);
					setState(8829);
					match(Comma);
					setState(8830);
					transaction_access_mode();
					}
					}
					break;
				case 4:
					{
					{
					setState(8831);
					transaction_access_mode();
					setState(8832);
					match(Comma);
					setState(8833);
					match(WITH);
					setState(8834);
					match(CONSISTENT);
					setState(8835);
					match(SNAPSHOT);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_begin_stmtContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OBParser.XA, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode BEGIN() { return getToken(OBParser.BEGIN, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public Xa_begin_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_begin_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterXa_begin_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitXa_begin_stmt(this);
		}
	}

	public final Xa_begin_stmtContext xa_begin_stmt() throws RecognitionException {
		Xa_begin_stmtContext _localctx = new Xa_begin_stmtContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_xa_begin_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8841);
			match(XA);
			setState(8842);
			_la = _input.LA(1);
			if ( !(_la==START || _la==BEGIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8843);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_end_stmtContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OBParser.XA, 0); }
		public TerminalNode END() { return getToken(OBParser.END, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Xa_end_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_end_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterXa_end_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitXa_end_stmt(this);
		}
	}

	public final Xa_end_stmtContext xa_end_stmt() throws RecognitionException {
		Xa_end_stmtContext _localctx = new Xa_end_stmtContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_xa_end_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8845);
			match(XA);
			setState(8846);
			match(END);
			setState(8847);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_prepare_stmtContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OBParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(OBParser.PREPARE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Xa_prepare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_prepare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterXa_prepare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitXa_prepare_stmt(this);
		}
	}

	public final Xa_prepare_stmtContext xa_prepare_stmt() throws RecognitionException {
		Xa_prepare_stmtContext _localctx = new Xa_prepare_stmtContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_xa_prepare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8849);
			match(XA);
			setState(8850);
			match(PREPARE);
			setState(8851);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_commit_stmtContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OBParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(OBParser.COMMIT, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Xa_commit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_commit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterXa_commit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitXa_commit_stmt(this);
		}
	}

	public final Xa_commit_stmtContext xa_commit_stmt() throws RecognitionException {
		Xa_commit_stmtContext _localctx = new Xa_commit_stmtContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_xa_commit_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8853);
			match(XA);
			setState(8854);
			match(COMMIT);
			setState(8855);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xa_rollback_stmtContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OBParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(OBParser.ROLLBACK, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Xa_rollback_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xa_rollback_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterXa_rollback_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitXa_rollback_stmt(this);
		}
	}

	public final Xa_rollback_stmtContext xa_rollback_stmt() throws RecognitionException {
		Xa_rollback_stmtContext _localctx = new Xa_rollback_stmtContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_xa_rollback_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8857);
			match(XA);
			setState(8858);
			match(ROLLBACK);
			setState(8859);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_stmtContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(OBParser.COMMIT, 0); }
		public TerminalNode HINT_VALUE() { return getToken(OBParser.HINT_VALUE, 0); }
		public TerminalNode WORK() { return getToken(OBParser.WORK, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCommit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCommit_stmt(this);
		}
	}

	public final Commit_stmtContext commit_stmt() throws RecognitionException {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_commit_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8861);
			match(COMMIT);
			setState(8863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HINT_VALUE) {
				{
				setState(8862);
				match(HINT_VALUE);
				}
			}

			setState(8866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(8865);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_stmtContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(OBParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(OBParser.WORK, 0); }
		public TerminalNode HINT_VALUE() { return getToken(OBParser.HINT_VALUE, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRollback_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRollback_stmt(this);
		}
	}

	public final Rollback_stmtContext rollback_stmt() throws RecognitionException {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_rollback_stmt);
		int _la;
		try {
			setState(8877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8868);
				match(ROLLBACK);
				setState(8870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(8869);
					match(WORK);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8872);
				match(ROLLBACK);
				setState(8873);
				match(HINT_VALUE);
				setState(8875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(8874);
					match(WORK);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_stmtContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(OBParser.KILL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(OBParser.QUERY, 0); }
		public TerminalNode CONNECTION() { return getToken(OBParser.CONNECTION, 0); }
		public Kill_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterKill_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitKill_stmt(this);
		}
	}

	public final Kill_stmtContext kill_stmt() throws RecognitionException {
		Kill_stmtContext _localctx = new Kill_stmtContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_kill_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8879);
			match(KILL);
			setState(8884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
			case 1:
				{
				setState(8881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					setState(8880);
					match(CONNECTION);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8883);
				match(QUERY);
				}
				break;
			}
			setState(8886);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_stmtContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(OBParser.GRANT, 0); }
		public Grant_privilegesContext grant_privileges() {
			return getRuleContext(Grant_privilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Priv_levelContext priv_level() {
			return getRuleContext(Priv_levelContext.class,0);
		}
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public User_specification_listContext user_specification_list() {
			return getRuleContext(User_specification_listContext.class,0);
		}
		public Grant_optionsContext grant_options() {
			return getRuleContext(Grant_optionsContext.class,0);
		}
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public Role_or_priv_listContext role_or_priv_list() {
			return getRuleContext(Role_or_priv_listContext.class,0);
		}
		public User_specification_without_password_listContext user_specification_without_password_list() {
			return getRuleContext(User_specification_without_password_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(OBParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public Grant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGrant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGrant_stmt(this);
		}
	}

	public final Grant_stmtContext grant_stmt() throws RecognitionException {
		Grant_stmtContext _localctx = new Grant_stmtContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_grant_stmt);
		int _la;
		try {
			setState(8917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8888);
				match(GRANT);
				setState(8889);
				grant_privileges();
				setState(8890);
				match(ON);
				setState(8892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(8891);
					object_type();
					}
					break;
				}
				setState(8894);
				priv_level();
				setState(8895);
				match(TO);
				setState(8896);
				user_specification_list();
				setState(8897);
				grant_options();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8899);
				match(GRANT);
				setState(8900);
				grant_privileges();
				setState(8901);
				match(ON);
				setState(8902);
				object_type();
				setState(8903);
				priv_level();
				setState(8904);
				match(TO);
				setState(8905);
				user_specification_list();
				setState(8906);
				grant_options();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8908);
				match(GRANT);
				setState(8909);
				role_or_priv_list();
				setState(8910);
				match(TO);
				setState(8911);
				user_specification_without_password_list();
				setState(8915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8912);
					match(WITH);
					setState(8913);
					match(ADMIN);
					setState(8914);
					match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_privilegesContext extends ParserRuleContext {
		public Role_or_priv_listContext role_or_priv_list() {
			return getRuleContext(Role_or_priv_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OBParser.PRIVILEGES, 0); }
		public Grant_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGrant_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGrant_privileges(this);
		}
	}

	public final Grant_privilegesContext grant_privileges() throws RecognitionException {
		Grant_privilegesContext _localctx = new Grant_privilegesContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_grant_privileges);
		int _la;
		try {
			setState(8924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALTER:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CREATE:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case DELETE:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case DROP:
			case FIELDS:
			case FULL:
			case GRANT:
			case ID:
			case INDEX:
			case INCLUDING:
			case LIB:
			case INSERT:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case REFERENCES:
			case ROWS:
			case SELECT:
			case REJECT:
			case SHOW:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case TRIGGER:
			case CALIBRATION:
			case LINE_DELIMITER:
			case UPDATE:
			case USAGE:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STRING_VALUE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8919);
				role_or_priv_list();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8920);
				match(ALL);
				setState(8922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(8921);
					match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_or_priv_listContext extends ParserRuleContext {
		public List<Role_or_privContext> role_or_priv() {
			return getRuleContexts(Role_or_privContext.class);
		}
		public Role_or_privContext role_or_priv(int i) {
			return getRuleContext(Role_or_privContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Role_or_priv_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_or_priv_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRole_or_priv_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRole_or_priv_list(this);
		}
	}

	public final Role_or_priv_listContext role_or_priv_list() throws RecognitionException {
		Role_or_priv_listContext _localctx = new Role_or_priv_listContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_role_or_priv_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8926);
			role_or_priv();
			setState(8931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(8927);
				match(Comma);
				setState(8928);
				role_or_priv();
				}
				}
				setState(8933);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_or_privContext extends ParserRuleContext {
		public Role_with_hostContext role_with_host() {
			return getRuleContext(Role_with_hostContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(OBParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(OBParser.POOL, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode LINK() { return getToken(OBParser.LINK, 0); }
		public TerminalNode ROLE() { return getToken(OBParser.ROLE, 0); }
		public TerminalNode GRANT() { return getToken(OBParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public TerminalNode INSERT() { return getToken(OBParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public TerminalNode SELECT() { return getToken(OBParser.SELECT, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode REFERENCES() { return getToken(OBParser.REFERENCES, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public TerminalNode SHOW() { return getToken(OBParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(OBParser.DATABASES, 0); }
		public TerminalNode SUPER() { return getToken(OBParser.SUPER, 0); }
		public TerminalNode PROCESS() { return getToken(OBParser.PROCESS, 0); }
		public TerminalNode USAGE() { return getToken(OBParser.USAGE, 0); }
		public TerminalNode FILEX() { return getToken(OBParser.FILEX, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode REPLICATION() { return getToken(OBParser.REPLICATION, 0); }
		public TerminalNode SLAVE() { return getToken(OBParser.SLAVE, 0); }
		public TerminalNode CLIENT() { return getToken(OBParser.CLIENT, 0); }
		public TerminalNode ROUTINE() { return getToken(OBParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(OBParser.EXECUTE, 0); }
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OBParser.SHUTDOWN, 0); }
		public TerminalNode RELOAD() { return getToken(OBParser.RELOAD, 0); }
		public TerminalNode TRIGGER() { return getToken(OBParser.TRIGGER, 0); }
		public Role_or_privContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_or_priv; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRole_or_priv(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRole_or_priv(this);
		}
	}

	public final Role_or_privContext role_or_priv() throws RecognitionException {
		Role_or_privContext _localctx = new Role_or_privContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_role_or_priv);
		int _la;
		try {
			setState(9005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8934);
				role_with_host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8935);
				match(ALTER);
				setState(8937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(8936);
					match(TENANT);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8939);
				match(CREATE);
				setState(8945);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESOURCE:
					{
					setState(8940);
					match(RESOURCE);
					setState(8941);
					match(POOL);
					}
					break;
				case EOF:
				case FROM:
				case ON:
				case TO:
				case USER:
				case Comma:
				case DELIMITER:
					{
					setState(8943);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USER) {
						{
						setState(8942);
						match(USER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8947);
				match(DELETE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8948);
				match(DROP);
				setState(8952);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(8949);
					match(DATABASE);
					setState(8950);
					match(LINK);
					}
					break;
				case ROLE:
					{
					setState(8951);
					match(ROLE);
					}
					break;
				case EOF:
				case FROM:
				case ON:
				case TO:
				case Comma:
				case DELIMITER:
					break;
				default:
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8954);
				match(GRANT);
				setState(8955);
				match(OPTION);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8956);
				match(INSERT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8957);
				match(UPDATE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8958);
				match(SELECT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8961);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INSERT:
				case UPDATE:
					{
					setState(8959);
					_la = _input.LA(1);
					if ( !(_la==INSERT || _la==UPDATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case REFERENCES:
				case SELECT:
					{
					setState(8960);
					_la = _input.LA(1);
					if ( !(_la==REFERENCES || _la==SELECT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8963);
				match(LeftParen);
				setState(8964);
				column_name_list();
				setState(8965);
				match(RightParen);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8967);
				match(INDEX);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8968);
				match(CREATE);
				setState(8972);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESOURCE:
					{
					setState(8969);
					match(RESOURCE);
					setState(8970);
					match(UNIT);
					}
					break;
				case VIEW:
					{
					setState(8971);
					match(VIEW);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8974);
				match(SHOW);
				setState(8975);
				match(VIEW);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8976);
				match(SHOW);
				setState(8977);
				match(DATABASES);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8978);
				match(SUPER);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8979);
				match(PROCESS);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8980);
				match(USAGE);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8981);
				match(FILEX);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8982);
				match(ALTER);
				setState(8983);
				match(SYSTEM);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8984);
				match(REPLICATION);
				setState(8985);
				match(SLAVE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8986);
				match(REPLICATION);
				setState(8987);
				match(CLIENT);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8988);
				match(CREATE);
				setState(8992);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(8989);
					match(DATABASE);
					setState(8990);
					match(LINK);
					}
					break;
				case ROUTINE:
					{
					setState(8991);
					match(ROUTINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8994);
				match(EXECUTE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8995);
				match(ALTER);
				setState(8996);
				match(ROUTINE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8997);
				match(CREATE);
				setState(8998);
				match(TABLESPACE);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8999);
				match(SHUTDOWN);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9000);
				match(RELOAD);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(9001);
				match(REFERENCES);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(9002);
				match(CREATE);
				setState(9003);
				match(ROLE);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(9004);
				match(TRIGGER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_typeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode PROCEDURE() { return getToken(OBParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(OBParser.FUNCTION, 0); }
		public Object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterObject_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitObject_type(this);
		}
	}

	public final Object_typeContext object_type() throws RecognitionException {
		Object_typeContext _localctx = new Object_typeContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9007);
			_la = _input.LA(1);
			if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Priv_levelContext extends ParserRuleContext {
		public List<TerminalNode> Star() { return getTokens(OBParser.Star); }
		public TerminalNode Star(int i) {
			return getToken(OBParser.Star, i);
		}
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public Priv_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_priv_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPriv_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPriv_level(this);
		}
	}

	public final Priv_levelContext priv_level() throws RecognitionException {
		Priv_levelContext _localctx = new Priv_levelContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_priv_level);
		int _la;
		try {
			setState(9023);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Star:
				enterOuterAlt(_localctx, 1);
				{
				setState(9009);
				match(Star);
				setState(9012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Dot) {
					{
					setState(9010);
					match(Dot);
					setState(9011);
					match(Star);
					}
				}

				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9014);
				relation_name();
				setState(9021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
				case 1:
					{
					setState(9017);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Dot) {
						{
						setState(9015);
						match(Dot);
						setState(9016);
						match(Star);
						}
					}

					}
					break;
				case 2:
					{
					setState(9019);
					match(Dot);
					setState(9020);
					relation_name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(OBParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Grant_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterGrant_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitGrant_options(this);
		}
	}

	public final Grant_optionsContext grant_options() throws RecognitionException {
		Grant_optionsContext _localctx = new Grant_optionsContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_grant_options);
		try {
			setState(9029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(9025);
				match(WITH);
				setState(9026);
				match(GRANT);
				setState(9027);
				match(OPTION);
				}
				break;
			case EOF:
			case DELIMITER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9028);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_stmtContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(OBParser.REVOKE, 0); }
		public Grant_privilegesContext grant_privileges() {
			return getRuleContext(Grant_privilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Priv_levelContext priv_level() {
			return getRuleContext(Priv_levelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public User_listContext user_list() {
			return getRuleContext(User_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public TerminalNode UNKNOWN() { return getToken(OBParser.UNKNOWN, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode GRANT() { return getToken(OBParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OBParser.PRIVILEGES, 0); }
		public Role_or_priv_listContext role_or_priv_list() {
			return getRuleContext(Role_or_priv_listContext.class,0);
		}
		public User_specification_without_password_listContext user_specification_without_password_list() {
			return getRuleContext(User_specification_without_password_listContext.class,0);
		}
		public Revoke_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRevoke_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRevoke_stmt(this);
		}
	}

	public final Revoke_stmtContext revoke_stmt() throws RecognitionException {
		Revoke_stmtContext _localctx = new Revoke_stmtContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_revoke_stmt);
		int _la;
		try {
			setState(9094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9031);
				match(REVOKE);
				setState(9034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(9032);
					match(IF);
					setState(9033);
					match(EXISTS);
					}
				}

				setState(9036);
				grant_privileges();
				setState(9037);
				match(ON);
				setState(9038);
				priv_level();
				setState(9039);
				match(FROM);
				setState(9040);
				user_list();
				setState(9044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(9041);
					match(IGNORE);
					setState(9042);
					match(UNKNOWN);
					setState(9043);
					match(USER);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9046);
				match(REVOKE);
				setState(9049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(9047);
					match(IF);
					setState(9048);
					match(EXISTS);
					}
				}

				setState(9051);
				grant_privileges();
				setState(9052);
				match(ON);
				setState(9053);
				object_type();
				setState(9054);
				priv_level();
				setState(9055);
				match(FROM);
				setState(9056);
				user_list();
				setState(9060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(9057);
					match(IGNORE);
					setState(9058);
					match(UNKNOWN);
					setState(9059);
					match(USER);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9062);
				match(REVOKE);
				setState(9065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(9063);
					match(IF);
					setState(9064);
					match(EXISTS);
					}
				}

				setState(9067);
				match(ALL);
				setState(9069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(9068);
					match(PRIVILEGES);
					}
				}

				setState(9071);
				match(Comma);
				setState(9072);
				match(GRANT);
				setState(9073);
				match(OPTION);
				setState(9074);
				match(FROM);
				setState(9075);
				user_list();
				setState(9079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(9076);
					match(IGNORE);
					setState(9077);
					match(UNKNOWN);
					setState(9078);
					match(USER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9081);
				match(REVOKE);
				setState(9084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(9082);
					match(IF);
					setState(9083);
					match(EXISTS);
					}
				}

				setState(9086);
				role_or_priv_list();
				setState(9087);
				match(FROM);
				setState(9088);
				user_specification_without_password_list();
				setState(9092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(9089);
					match(IGNORE);
					setState(9090);
					match(UNKNOWN);
					setState(9091);
					match(USER);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepare_stmtContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(OBParser.PREPARE, 0); }
		public Stmt_nameContext stmt_name() {
			return getRuleContext(Stmt_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OBParser.FROM, 0); }
		public Preparable_stmtContext preparable_stmt() {
			return getRuleContext(Preparable_stmtContext.class,0);
		}
		public Prepare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPrepare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPrepare_stmt(this);
		}
	}

	public final Prepare_stmtContext prepare_stmt() throws RecognitionException {
		Prepare_stmtContext _localctx = new Prepare_stmtContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_prepare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9096);
			match(PREPARE);
			setState(9097);
			stmt_name();
			setState(9098);
			match(FROM);
			setState(9099);
			preparable_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stmt_nameContext extends ParserRuleContext {
		public Column_labelContext column_label() {
			return getRuleContext(Column_labelContext.class,0);
		}
		public Stmt_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterStmt_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitStmt_name(this);
		}
	}

	public final Stmt_nameContext stmt_name() throws RecognitionException {
		Stmt_nameContext _localctx = new Stmt_nameContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_stmt_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9101);
			column_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preparable_stmtContext extends ParserRuleContext {
		public Text_stringContext text_string() {
			return getRuleContext(Text_stringContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Preparable_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparable_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPreparable_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPreparable_stmt(this);
		}
	}

	public final Preparable_stmtContext preparable_stmt() throws RecognitionException {
		Preparable_stmtContext _localctx = new Preparable_stmtContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_preparable_stmt);
		try {
			setState(9105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARSER_SYNTAX_ERROR:
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9103);
				text_string();
				}
				break;
			case USER_VARIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9104);
				match(USER_VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_set_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Var_and_val_listContext var_and_val_list() {
			return getRuleContext(Var_and_val_listContext.class,0);
		}
		public Variable_set_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_set_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVariable_set_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVariable_set_stmt(this);
		}
	}

	public final Variable_set_stmtContext variable_set_stmt() throws RecognitionException {
		Variable_set_stmtContext _localctx = new Variable_set_stmtContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_variable_set_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9107);
			match(SET);
			setState(9108);
			var_and_val_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sys_var_and_val_listContext extends ParserRuleContext {
		public List<Sys_var_and_valContext> sys_var_and_val() {
			return getRuleContexts(Sys_var_and_valContext.class);
		}
		public Sys_var_and_valContext sys_var_and_val(int i) {
			return getRuleContext(Sys_var_and_valContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Sys_var_and_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sys_var_and_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSys_var_and_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSys_var_and_val_list(this);
		}
	}

	public final Sys_var_and_val_listContext sys_var_and_val_list() throws RecognitionException {
		Sys_var_and_val_listContext _localctx = new Sys_var_and_val_listContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_sys_var_and_val_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9110);
			sys_var_and_val();
			setState(9115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(9111);
				match(Comma);
				setState(9112);
				sys_var_and_val();
				}
				}
				setState(9117);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_and_val_listContext extends ParserRuleContext {
		public List<Var_and_valContext> var_and_val() {
			return getRuleContexts(Var_and_valContext.class);
		}
		public Var_and_valContext var_and_val(int i) {
			return getRuleContext(Var_and_valContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Var_and_val_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_and_val_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVar_and_val_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVar_and_val_list(this);
		}
	}

	public final Var_and_val_listContext var_and_val_list() throws RecognitionException {
		Var_and_val_listContext _localctx = new Var_and_val_listContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_var_and_val_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9118);
			var_and_val();
			setState(9123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(9119);
				match(Comma);
				setState(9120);
				var_and_val();
				}
				}
				setState(9125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_expr_or_defaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Set_expr_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_expr_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_expr_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_expr_or_default(this);
		}
	}

	public final Set_expr_or_defaultContext set_expr_or_default() throws RecognitionException {
		Set_expr_or_defaultContext _localctx = new Set_expr_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_set_expr_or_default);
		try {
			setState(9130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9126);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9127);
				match(ON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9128);
				match(BINARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9129);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_and_valContext extends ParserRuleContext {
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode SET_VAR() { return getToken(OBParser.SET_VAR, 0); }
		public To_or_eqContext to_or_eq() {
			return getRuleContext(To_or_eqContext.class,0);
		}
		public Sys_var_and_valContext sys_var_and_val() {
			return getRuleContext(Sys_var_and_valContext.class,0);
		}
		public Set_expr_or_defaultContext set_expr_or_default() {
			return getRuleContext(Set_expr_or_defaultContext.class,0);
		}
		public TerminalNode SYSTEM_VARIABLE() { return getToken(OBParser.SYSTEM_VARIABLE, 0); }
		public Scope_or_scope_aliasContext scope_or_scope_alias() {
			return getRuleContext(Scope_or_scope_aliasContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode NAMES() { return getToken(OBParser.NAMES, 0); }
		public Charset_name_or_defaultContext charset_name_or_default() {
			return getRuleContext(Charset_name_or_defaultContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Var_and_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_and_val; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVar_and_val(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVar_and_val(this);
		}
	}

	public final Var_and_valContext var_and_val() throws RecognitionException {
		Var_and_valContext _localctx = new Var_and_valContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_var_and_val);
		int _la;
		try {
			setState(9160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9132);
				match(USER_VARIABLE);
				setState(9135);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1022,_ctx) ) {
				case 1:
					{
					setState(9133);
					match(SET_VAR);
					}
					break;
				case 2:
					{
					setState(9134);
					to_or_eq();
					}
					break;
				}
				setState(9137);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9138);
				sys_var_and_val();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9143);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SYSTEM_VARIABLE:
					{
					setState(9139);
					match(SYSTEM_VARIABLE);
					}
					break;
				case GLOBAL_ALIAS:
				case SESSION_ALIAS:
				case GLOBAL:
				case SESSION:
					{
					setState(9140);
					scope_or_scope_alias();
					setState(9141);
					column_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9145);
				to_or_eq();
				setState(9146);
				set_expr_or_default();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9148);
				match(SYSTEM_VARIABLE);
				setState(9149);
				to_or_eq();
				setState(9150);
				set_expr_or_default();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9152);
				match(NAMES);
				setState(9153);
				charset_name_or_default();
				setState(9155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(9154);
					collation();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9157);
				charset_key();
				setState(9158);
				charset_name_or_default();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sys_var_and_valContext extends ParserRuleContext {
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Set_expr_or_defaultContext set_expr_or_default() {
			return getRuleContext(Set_expr_or_defaultContext.class,0);
		}
		public TerminalNode SET_VAR() { return getToken(OBParser.SET_VAR, 0); }
		public To_or_eqContext to_or_eq() {
			return getRuleContext(To_or_eqContext.class,0);
		}
		public Sys_var_and_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sys_var_and_val; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSys_var_and_val(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSys_var_and_val(this);
		}
	}

	public final Sys_var_and_valContext sys_var_and_val() throws RecognitionException {
		Sys_var_and_valContext _localctx = new Sys_var_and_valContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_sys_var_and_val);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9162);
			var_name();
			setState(9165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
			case 1:
				{
				setState(9163);
				match(SET_VAR);
				}
				break;
			case 2:
				{
				setState(9164);
				to_or_eq();
				}
				break;
			}
			setState(9167);
			set_expr_or_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scope_or_scope_aliasContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(OBParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(OBParser.SESSION, 0); }
		public TerminalNode GLOBAL_ALIAS() { return getToken(OBParser.GLOBAL_ALIAS, 0); }
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public TerminalNode SESSION_ALIAS() { return getToken(OBParser.SESSION_ALIAS, 0); }
		public Scope_or_scope_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope_or_scope_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterScope_or_scope_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitScope_or_scope_alias(this);
		}
	}

	public final Scope_or_scope_aliasContext scope_or_scope_alias() throws RecognitionException {
		Scope_or_scope_aliasContext _localctx = new Scope_or_scope_aliasContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_scope_or_scope_alias);
		try {
			setState(9175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9169);
				match(GLOBAL);
				}
				break;
			case SESSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(9170);
				match(SESSION);
				}
				break;
			case GLOBAL_ALIAS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9171);
				match(GLOBAL_ALIAS);
				setState(9172);
				match(Dot);
				}
				break;
			case SESSION_ALIAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9173);
				match(SESSION_ALIAS);
				setState(9174);
				match(Dot);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class To_or_eqContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode SET_VAR() { return getToken(OBParser.SET_VAR, 0); }
		public To_or_eqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_to_or_eq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTo_or_eq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTo_or_eq(this);
		}
	}

	public final To_or_eqContext to_or_eq() throws RecognitionException {
		To_or_eqContext _localctx = new To_or_eqContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_to_or_eq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9177);
			_la = _input.LA(1);
			if ( !(_la==TO || _la==COMP_EQ || _la==SET_VAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_role_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(OBParser.ROLE, 0); }
		public Set_role_clauseContext set_role_clause() {
			return getRuleContext(Set_role_clauseContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Default_set_role_clauseContext default_set_role_clause() {
			return getRuleContext(Default_set_role_clauseContext.class,0);
		}
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public User_listContext user_list() {
			return getRuleContext(User_listContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public User_with_host_nameContext user_with_host_name() {
			return getRuleContext(User_with_host_nameContext.class,0);
		}
		public Set_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_role_stmt(this);
		}
	}

	public final Set_role_stmtContext set_role_stmt() throws RecognitionException {
		Set_role_stmtContext _localctx = new Set_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_set_role_stmt);
		try {
			setState(9196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9179);
				match(SET);
				setState(9180);
				match(ROLE);
				setState(9181);
				set_role_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9182);
				match(SET);
				setState(9183);
				match(DEFAULT);
				setState(9184);
				match(ROLE);
				setState(9185);
				default_set_role_clause();
				setState(9186);
				match(TO);
				setState(9187);
				user_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9189);
				match(ALTER);
				setState(9190);
				match(USER);
				setState(9191);
				user_with_host_name();
				setState(9192);
				match(DEFAULT);
				setState(9193);
				match(ROLE);
				setState(9194);
				default_set_role_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_set_role_clauseContext extends ParserRuleContext {
		public Role_listContext role_list() {
			return getRuleContext(Role_listContext.class,0);
		}
		public TerminalNode NONE() { return getToken(OBParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public Default_set_role_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_set_role_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDefault_set_role_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDefault_set_role_clause(this);
		}
	}

	public final Default_set_role_clauseContext default_set_role_clause() throws RecognitionException {
		Default_set_role_clauseContext _localctx = new Default_set_role_clauseContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_default_set_role_clause);
		try {
			setState(9201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STRING_VALUE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(9198);
				role_list();
				}
				break;
			case NONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9199);
				match(NONE);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 3);
				{
				setState(9200);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_role_clauseContext extends ParserRuleContext {
		public Default_set_role_clauseContext default_set_role_clause() {
			return getRuleContext(Default_set_role_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(OBParser.EXCEPT, 0); }
		public Grant_privilegesContext grant_privileges() {
			return getRuleContext(Grant_privilegesContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Set_role_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_role_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_role_clause(this);
		}
	}

	public final Set_role_clauseContext set_role_clause() throws RecognitionException {
		Set_role_clauseContext _localctx = new Set_role_clauseContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_set_role_clause);
		try {
			setState(9208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9203);
				default_set_role_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9204);
				match(ALL);
				setState(9205);
				match(EXCEPT);
				setState(9206);
				grant_privileges();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9207);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_stmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(OBParser.EXECUTE, 0); }
		public Stmt_nameContext stmt_name() {
			return getRuleContext(Stmt_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Execute_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterExecute_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitExecute_stmt(this);
		}
	}

	public final Execute_stmtContext execute_stmt() throws RecognitionException {
		Execute_stmtContext _localctx = new Execute_stmtContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_execute_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9210);
			match(EXECUTE);
			setState(9211);
			stmt_name();
			setState(9214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(9212);
				match(USING);
				setState(9213);
				argument_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_listContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterArgument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitArgument_list(this);
		}
	}

	public final Argument_listContext argument_list() throws RecognitionException {
		Argument_listContext _localctx = new Argument_listContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9216);
			argument();
			setState(9221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(9217);
				match(Comma);
				setState(9218);
				argument();
				}
				}
				setState(9223);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9224);
			match(USER_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_prepare_stmtContext extends ParserRuleContext {
		public Deallocate_or_dropContext deallocate_or_drop() {
			return getRuleContext(Deallocate_or_dropContext.class,0);
		}
		public TerminalNode PREPARE() { return getToken(OBParser.PREPARE, 0); }
		public Stmt_nameContext stmt_name() {
			return getRuleContext(Stmt_nameContext.class,0);
		}
		public Deallocate_prepare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_prepare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDeallocate_prepare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDeallocate_prepare_stmt(this);
		}
	}

	public final Deallocate_prepare_stmtContext deallocate_prepare_stmt() throws RecognitionException {
		Deallocate_prepare_stmtContext _localctx = new Deallocate_prepare_stmtContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_deallocate_prepare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9226);
			deallocate_or_drop();
			setState(9227);
			match(PREPARE);
			setState(9228);
			stmt_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_or_dropContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(OBParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Deallocate_or_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_or_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDeallocate_or_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDeallocate_or_drop(this);
		}
	}

	public final Deallocate_or_dropContext deallocate_or_drop() throws RecognitionException {
		Deallocate_or_dropContext _localctx = new Deallocate_or_dropContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_deallocate_or_drop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9230);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_table_stmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Truncate_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTruncate_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTruncate_table_stmt(this);
		}
	}

	public final Truncate_table_stmtContext truncate_table_stmt() throws RecognitionException {
		Truncate_table_stmtContext _localctx = new Truncate_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_truncate_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9232);
			match(TRUNCATE);
			setState(9234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(9233);
				match(TABLE);
				}
			}

			setState(9236);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_stmtContext extends ParserRuleContext {
		public Audit_or_noauditContext audit_or_noaudit() {
			return getRuleContext(Audit_or_noauditContext.class,0);
		}
		public Audit_clauseContext audit_clause() {
			return getRuleContext(Audit_clauseContext.class,0);
		}
		public Audit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_stmt(this);
		}
	}

	public final Audit_stmtContext audit_stmt() throws RecognitionException {
		Audit_stmtContext _localctx = new Audit_stmtContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_audit_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9238);
			audit_or_noaudit();
			setState(9239);
			audit_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_or_noauditContext extends ParserRuleContext {
		public TerminalNode AUDIT() { return getToken(OBParser.AUDIT, 0); }
		public TerminalNode NOAUDIT() { return getToken(OBParser.NOAUDIT, 0); }
		public Audit_or_noauditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_or_noaudit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_or_noaudit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_or_noaudit(this);
		}
	}

	public final Audit_or_noauditContext audit_or_noaudit() throws RecognitionException {
		Audit_or_noauditContext _localctx = new Audit_or_noauditContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_audit_or_noaudit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9241);
			_la = _input.LA(1);
			if ( !(_la==AUDIT || _la==NOAUDIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_clauseContext extends ParserRuleContext {
		public Audit_operation_clauseContext audit_operation_clause() {
			return getRuleContext(Audit_operation_clauseContext.class,0);
		}
		public Op_audit_tail_clauseContext op_audit_tail_clause() {
			return getRuleContext(Op_audit_tail_clauseContext.class,0);
		}
		public Auditing_by_user_clauseContext auditing_by_user_clause() {
			return getRuleContext(Auditing_by_user_clauseContext.class,0);
		}
		public Auditing_on_clauseContext auditing_on_clause() {
			return getRuleContext(Auditing_on_clauseContext.class,0);
		}
		public Audit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_clause(this);
		}
	}

	public final Audit_clauseContext audit_clause() throws RecognitionException {
		Audit_clauseContext _localctx = new Audit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_audit_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9243);
			audit_operation_clause();
			setState(9248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1035,_ctx) ) {
			case 1:
				{
				setState(9244);
				auditing_by_user_clause();
				}
				break;
			case 2:
				{
				setState(9246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(9245);
					auditing_on_clause();
					}
				}

				}
				break;
			}
			setState(9250);
			op_audit_tail_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_operation_clauseContext extends ParserRuleContext {
		public Audit_all_shortcut_listContext audit_all_shortcut_list() {
			return getRuleContext(Audit_all_shortcut_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode STATEMENTS() { return getToken(OBParser.STATEMENTS, 0); }
		public Audit_operation_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_operation_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_operation_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_operation_clause(this);
		}
	}

	public final Audit_operation_clauseContext audit_operation_clause() throws RecognitionException {
		Audit_operation_clauseContext _localctx = new Audit_operation_clauseContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_audit_operation_clause);
		int _la;
		try {
			setState(9257);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case DELETE:
			case GRANT:
			case INDEX:
			case INSERT:
			case PROCEDURE:
			case RENAME:
			case SELECT:
			case TABLE:
			case TRIGGER:
			case UPDATE:
			case NOT:
			case AUDIT:
			case COMMENT:
			case CONTEXT:
			case VIEW:
			case CLUSTER:
			case USER:
			case SYSTEM:
			case OUTLINE:
			case FLASHBACK:
			case TABLESPACE:
			case PROFILE:
			case TYPE:
			case MATERIALIZED:
			case SESSION:
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9252);
				audit_all_shortcut_list();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9253);
				match(ALL);
				setState(9255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STATEMENTS) {
					{
					setState(9254);
					match(STATEMENTS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_all_shortcut_listContext extends ParserRuleContext {
		public List<Audit_all_shortcutContext> audit_all_shortcut() {
			return getRuleContexts(Audit_all_shortcutContext.class);
		}
		public Audit_all_shortcutContext audit_all_shortcut(int i) {
			return getRuleContext(Audit_all_shortcutContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Audit_all_shortcut_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_all_shortcut_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_all_shortcut_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_all_shortcut_list(this);
		}
	}

	public final Audit_all_shortcut_listContext audit_all_shortcut_list() throws RecognitionException {
		Audit_all_shortcut_listContext _localctx = new Audit_all_shortcut_listContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_audit_all_shortcut_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9259);
			audit_all_shortcut();
			setState(9264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(9260);
				match(Comma);
				setState(9261);
				audit_all_shortcut();
				}
				}
				setState(9266);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auditing_on_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public Normal_relation_factorContext normal_relation_factor() {
			return getRuleContext(Normal_relation_factorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Auditing_on_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auditing_on_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAuditing_on_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAuditing_on_clause(this);
		}
	}

	public final Auditing_on_clauseContext auditing_on_clause() throws RecognitionException {
		Auditing_on_clauseContext _localctx = new Auditing_on_clauseContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_auditing_on_clause);
		try {
			setState(9271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9267);
				match(ON);
				setState(9268);
				normal_relation_factor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9269);
				match(ON);
				setState(9270);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_user_listContext extends ParserRuleContext {
		public List<Audit_user_with_host_nameContext> audit_user_with_host_name() {
			return getRuleContexts(Audit_user_with_host_nameContext.class);
		}
		public Audit_user_with_host_nameContext audit_user_with_host_name(int i) {
			return getRuleContext(Audit_user_with_host_nameContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Audit_user_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_user_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_user_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_user_list(this);
		}
	}

	public final Audit_user_listContext audit_user_list() throws RecognitionException {
		Audit_user_listContext _localctx = new Audit_user_listContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_audit_user_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9273);
			audit_user_with_host_name();
			setState(9278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(9274);
				match(Comma);
				setState(9275);
				audit_user_with_host_name();
				}
				}
				setState(9280);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_user_with_host_nameContext extends ParserRuleContext {
		public Audit_userContext audit_user() {
			return getRuleContext(Audit_userContext.class,0);
		}
		public TerminalNode USER_VARIABLE() { return getToken(OBParser.USER_VARIABLE, 0); }
		public Audit_user_with_host_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_user_with_host_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_user_with_host_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_user_with_host_name(this);
		}
	}

	public final Audit_user_with_host_nameContext audit_user_with_host_name() throws RecognitionException {
		Audit_user_with_host_nameContext _localctx = new Audit_user_with_host_nameContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_audit_user_with_host_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9281);
			audit_user();
			setState(9283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_VARIABLE) {
				{
				setState(9282);
				match(USER_VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_userContext extends ParserRuleContext {
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keyword_normalContext unreserved_keyword_normal() {
			return getRuleContext(Unreserved_keyword_normalContext.class,0);
		}
		public Audit_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_user(this);
		}
	}

	public final Audit_userContext audit_user() throws RecognitionException {
		Audit_userContext _localctx = new Audit_userContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_audit_user);
		try {
			setState(9288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9285);
				match(STRING_VALUE);
				}
				break;
			case NAME_OB:
				enterOuterAlt(_localctx, 2);
				{
				setState(9286);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(9287);
				unreserved_keyword_normal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auditing_by_user_clauseContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public Audit_user_listContext audit_user_list() {
			return getRuleContext(Audit_user_listContext.class,0);
		}
		public Auditing_by_user_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auditing_by_user_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAuditing_by_user_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAuditing_by_user_clause(this);
		}
	}

	public final Auditing_by_user_clauseContext auditing_by_user_clause() throws RecognitionException {
		Auditing_by_user_clauseContext _localctx = new Auditing_by_user_clauseContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_auditing_by_user_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9290);
			match(BY);
			setState(9291);
			audit_user_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Op_audit_tail_clauseContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Audit_by_session_access_optionContext audit_by_session_access_option() {
			return getRuleContext(Audit_by_session_access_optionContext.class,0);
		}
		public Audit_whenever_optionContext audit_whenever_option() {
			return getRuleContext(Audit_whenever_optionContext.class,0);
		}
		public Op_audit_tail_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op_audit_tail_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOp_audit_tail_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOp_audit_tail_clause(this);
		}
	}

	public final Op_audit_tail_clauseContext op_audit_tail_clause() throws RecognitionException {
		Op_audit_tail_clauseContext _localctx = new Op_audit_tail_clauseContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_op_audit_tail_clause);
		int _la;
		try {
			setState(9299);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case DELIMITER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9293);
				empty();
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(9294);
				audit_by_session_access_option();
				setState(9296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHENEVER) {
					{
					setState(9295);
					audit_whenever_option();
					}
				}

				}
				break;
			case WHENEVER:
				enterOuterAlt(_localctx, 3);
				{
				setState(9298);
				audit_whenever_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_by_session_access_optionContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode ACCESS() { return getToken(OBParser.ACCESS, 0); }
		public Audit_by_session_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_by_session_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_by_session_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_by_session_access_option(this);
		}
	}

	public final Audit_by_session_access_optionContext audit_by_session_access_option() throws RecognitionException {
		Audit_by_session_access_optionContext _localctx = new Audit_by_session_access_optionContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_audit_by_session_access_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9301);
			match(BY);
			setState(9302);
			match(ACCESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_whenever_optionContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(OBParser.WHENEVER, 0); }
		public TerminalNode SUCCESSFUL() { return getToken(OBParser.SUCCESSFUL, 0); }
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public Audit_whenever_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_whenever_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_whenever_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_whenever_option(this);
		}
	}

	public final Audit_whenever_optionContext audit_whenever_option() throws RecognitionException {
		Audit_whenever_optionContext _localctx = new Audit_whenever_optionContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_audit_whenever_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9304);
			match(WHENEVER);
			setState(9306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(9305);
				match(NOT);
				}
			}

			setState(9308);
			match(SUCCESSFUL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Audit_all_shortcutContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public TerminalNode CONTEXT() { return getToken(OBParser.CONTEXT, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode OUTLINE() { return getToken(OBParser.OUTLINE, 0); }
		public TerminalNode PROCEDURE() { return getToken(OBParser.PROCEDURE, 0); }
		public TerminalNode EXECUTE() { return getToken(OBParser.EXECUTE, 0); }
		public TerminalNode PROFILE() { return getToken(OBParser.PROFILE, 0); }
		public TerminalNode SESSION() { return getToken(OBParser.SESSION, 0); }
		public TerminalNode AUDIT() { return getToken(OBParser.AUDIT, 0); }
		public TerminalNode GRANT() { return getToken(OBParser.GRANT, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TerminalNode TRIGGER() { return getToken(OBParser.TRIGGER, 0); }
		public TerminalNode TYPE() { return getToken(OBParser.TYPE, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(OBParser.INSERT, 0); }
		public TerminalNode SELECT() { return getToken(OBParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public TerminalNode FLASHBACK() { return getToken(OBParser.FLASHBACK, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public Audit_all_shortcutContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_audit_all_shortcut; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAudit_all_shortcut(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAudit_all_shortcut(this);
		}
	}

	public final Audit_all_shortcutContext audit_all_shortcut() throws RecognitionException {
		Audit_all_shortcutContext _localctx = new Audit_all_shortcutContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_audit_all_shortcut);
		int _la;
		try {
			setState(9376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1058,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9310);
				match(ALTER);
				setState(9312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(9311);
					match(SYSTEM);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9314);
				match(CLUSTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9315);
				match(CONTEXT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(9316);
					match(MATERIALIZED);
					}
				}

				setState(9319);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9320);
				match(NOT);
				setState(9321);
				match(EXISTS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9322);
				match(OUTLINE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTE) {
					{
					setState(9323);
					match(EXECUTE);
					}
				}

				setState(9326);
				match(PROCEDURE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9327);
				match(PROFILE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9328);
				match(SESSION);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(9329);
					match(SYSTEM);
					}
				}

				setState(9332);
				match(AUDIT);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM) {
					{
					setState(9333);
					match(SYSTEM);
					}
				}

				setState(9336);
				match(GRANT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALTER) {
					{
					setState(9337);
					match(ALTER);
					}
				}

				setState(9340);
				match(TABLE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9341);
				match(TABLESPACE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9342);
				match(TRIGGER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(9343);
					match(GRANT);
					}
				}

				setState(9346);
				match(TYPE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9347);
				match(USER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9348);
				match(COMMENT);
				setState(9350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(9349);
					match(TABLE);
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9352);
				match(DELETE);
				setState(9354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(9353);
					match(TABLE);
					}
				}

				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9356);
				match(GRANT);
				setState(9357);
				match(PROCEDURE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9358);
				match(GRANT);
				setState(9359);
				match(TABLE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9360);
				match(INSERT);
				setState(9362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(9361);
					match(TABLE);
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9364);
				match(SELECT);
				setState(9366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(9365);
					match(TABLE);
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9368);
				match(UPDATE);
				setState(9370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(9369);
					match(TABLE);
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(9372);
				match(EXECUTE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(9373);
				match(FLASHBACK);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(9374);
				match(INDEX);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9375);
				match(RENAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_table_stmtContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Rename_table_actionsContext rename_table_actions() {
			return getRuleContext(Rename_table_actionsContext.class,0);
		}
		public Rename_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRename_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRename_table_stmt(this);
		}
	}

	public final Rename_table_stmtContext rename_table_stmt() throws RecognitionException {
		Rename_table_stmtContext _localctx = new Rename_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_rename_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9378);
			match(RENAME);
			setState(9379);
			match(TABLE);
			setState(9380);
			rename_table_actions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_table_actionsContext extends ParserRuleContext {
		public List<Rename_table_actionContext> rename_table_action() {
			return getRuleContexts(Rename_table_actionContext.class);
		}
		public Rename_table_actionContext rename_table_action(int i) {
			return getRuleContext(Rename_table_actionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Rename_table_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_table_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRename_table_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRename_table_actions(this);
		}
	}

	public final Rename_table_actionsContext rename_table_actions() throws RecognitionException {
		Rename_table_actionsContext _localctx = new Rename_table_actionsContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_rename_table_actions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9382);
			rename_table_action();
			setState(9387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(9383);
				match(Comma);
				setState(9384);
				rename_table_action();
				}
				}
				setState(9389);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_table_actionContext extends ParserRuleContext {
		public List<Relation_factorContext> relation_factor() {
			return getRuleContexts(Relation_factorContext.class);
		}
		public Relation_factorContext relation_factor(int i) {
			return getRuleContext(Relation_factorContext.class,i);
		}
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Rename_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRename_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRename_table_action(this);
		}
	}

	public final Rename_table_actionContext rename_table_action() throws RecognitionException {
		Rename_table_actionContext _localctx = new Rename_table_actionContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_rename_table_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9390);
			relation_factor();
			setState(9391);
			match(TO);
			setState(9392);
			relation_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(OBParser.EXTERNAL, 0); }
		public Alter_table_actionsContext alter_table_actions() {
			return getRuleContext(Alter_table_actionsContext.class,0);
		}
		public Alter_column_group_actionContext alter_column_group_action() {
			return getRuleContext(Alter_column_group_actionContext.class,0);
		}
		public Alter_external_table_actionContext alter_external_table_action() {
			return getRuleContext(Alter_external_table_actionContext.class,0);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_table_stmt(this);
		}
	}

	public final Alter_table_stmtContext alter_table_stmt() throws RecognitionException {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_alter_table_stmt);
		int _la;
		try {
			setState(9414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9394);
				match(ALTER);
				setState(9396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(9395);
					match(EXTERNAL);
					}
				}

				setState(9398);
				match(TABLE);
				setState(9399);
				relation_factor();
				setState(9401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PARTITION_TYPE) | (1L << AUTO_REFRESH) | (1L << PROPERTIES) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (ADD - 83)) | (1L << (ALTER - 83)) | (1L << (CHANGE - 83)) | (1L << (CHARACTER - 83)) | (1L << (CONVERT - 83)) | (1L << (COLLATE - 83)) | (1L << (DEFAULT - 83)))) != 0) || _la==DROP || _la==INDEX || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (PARTITION - 260)) | (1L << (READ - 260)) | (1L << (RENAME - 260)) | (1L << (SET - 260)) | (1L << (TABLEGROUP - 260)) | (1L << (UNION - 260)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (FORMAT - 378)) | (1L << (LOCATION - 378)) | (1L << (PROGRESSIVE_MERGE_NUM - 378)) | (1L << (TRUNCATE - 378)) | (1L << (KEY_BLOCK_SIZE - 378)))) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & ((1L << (COMPRESSION - 445)) | (1L << (MIN_ROWS - 445)) | (1L << (ENCRYPTION - 445)) | (1L << (COMMENT - 445)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (ENGINE_ - 513)) | (1L << (AUTO_INCREMENT_MODE - 513)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 513)) | (1L << (LOB_INROW_THRESHOLD - 513)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (LOCALITY - 586)))) != 0) || ((((_la - 679)) & ~0x3f) == 0 && ((1L << (_la - 679)) & ((1L << (USE_BLOOM_FILTER - 679)) | (1L << (EXCHANGE - 679)) | (1L << (MAX_USED_PART_ID - 679)) | (1L << (MAX_ROWS - 679)) | (1L << (REMOVE - 679)) | (1L << (STATS_AUTO_RECALC - 679)) | (1L << (MODIFY - 679)) | (1L << (EXPIRE_INFO - 679)) | (1L << (REORGANIZE - 679)) | (1L << (BLOCK_SIZE - 679)))) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (STATS_PERSISTENT - 745)) | (1L << (CHARSET - 745)) | (1L << (CONNECTION - 745)))) != 0) || ((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (KV_ATTRIBUTES - 815)) | (1L << (JSON - 815)) | (1L << (PATTERN - 815)) | (1L << (STORAGE_FORMAT_VERSION - 815)) | (1L << (AVG_ROW_LENGTH - 815)) | (1L << (PARALLEL - 815)) | (1L << (NOPARALLEL - 815)))) != 0) || ((((_la - 896)) & ~0x3f) == 0 && ((1L << (_la - 896)) & ((1L << (AUTO_INCREMENT - 896)) | (1L << (ROW_FORMAT - 896)) | (1L << (PCTFREE - 896)) | (1L << (TABLESPACE - 896)) | (1L << (PASSWORD - 896)) | (1L << (REFRESH - 896)) | (1L << (TTL - 896)) | (1L << (SORTKEY - 896)) | (1L << (CHECKSUM - 896)))) != 0) || ((((_la - 969)) & ~0x3f) == 0 && ((1L << (_la - 969)) & ((1L << (REPLICA_NUM - 969)) | (1L << (PRIMARY_ZONE - 969)) | (1L << (DUPLICATE_SCOPE - 969)) | (1L << (STATS_SAMPLE_PAGES - 969)) | (1L << (TABLET_SIZE - 969)))) != 0) || ((((_la - 1042)) & ~0x3f) == 0 && ((1L << (_la - 1042)) & ((1L << (INSERT_METHOD - 1042)) | (1L << (TABLE_MODE - 1042)) | (1L << (PACK_KEYS - 1042)) | (1L << (ENABLE_EXTENDED_ROWID - 1042)))) != 0) || _la==DATA) {
					{
					setState(9400);
					alter_table_actions(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9403);
				match(ALTER);
				setState(9404);
				match(TABLE);
				setState(9405);
				relation_factor();
				setState(9406);
				alter_column_group_action();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9408);
				match(ALTER);
				setState(9409);
				match(EXTERNAL);
				setState(9410);
				match(TABLE);
				setState(9411);
				relation_factor();
				setState(9412);
				alter_external_table_action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_table_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode LOCATION() { return getToken(OBParser.LOCATION, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Add_external_table_partition_actionsContext add_external_table_partition_actions() {
			return getRuleContext(Add_external_table_partition_actionsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Alter_external_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_external_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_external_table_action(this);
		}
	}

	public final Alter_external_table_actionContext alter_external_table_action() throws RecognitionException {
		Alter_external_table_actionContext _localctx = new Alter_external_table_actionContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_alter_external_table_action);
		int _la;
		try {
			setState(9429);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(9416);
				match(ADD);
				setState(9417);
				match(PARTITION);
				setState(9418);
				match(LeftParen);
				setState(9420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(9419);
					add_external_table_partition_actions(0);
					}
				}

				setState(9422);
				match(RightParen);
				setState(9423);
				match(LOCATION);
				setState(9424);
				match(STRING_VALUE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(9425);
				match(DROP);
				setState(9426);
				match(PARTITION);
				setState(9427);
				match(LOCATION);
				setState(9428);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_external_table_partition_actionsContext extends ParserRuleContext {
		public Add_external_table_partition_actionContext add_external_table_partition_action() {
			return getRuleContext(Add_external_table_partition_actionContext.class,0);
		}
		public Add_external_table_partition_actionsContext add_external_table_partition_actions() {
			return getRuleContext(Add_external_table_partition_actionsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Add_external_table_partition_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_external_table_partition_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAdd_external_table_partition_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAdd_external_table_partition_actions(this);
		}
	}

	public final Add_external_table_partition_actionsContext add_external_table_partition_actions() throws RecognitionException {
		return add_external_table_partition_actions(0);
	}

	private Add_external_table_partition_actionsContext add_external_table_partition_actions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Add_external_table_partition_actionsContext _localctx = new Add_external_table_partition_actionsContext(_ctx, _parentState);
		Add_external_table_partition_actionsContext _prevctx = _localctx;
		int _startState = 1214;
		enterRecursionRule(_localctx, 1214, RULE_add_external_table_partition_actions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9432);
			add_external_table_partition_action();
			}
			_ctx.stop = _input.LT(-1);
			setState(9439);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1065,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Add_external_table_partition_actionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_add_external_table_partition_actions);
					setState(9434);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9435);
					match(Comma);
					setState(9436);
					add_external_table_partition_action();
					}
					} 
				}
				setState(9441);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1065,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Add_external_table_partition_actionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public Expr_constContext expr_const() {
			return getRuleContext(Expr_constContext.class,0);
		}
		public Add_external_table_partition_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_external_table_partition_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAdd_external_table_partition_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAdd_external_table_partition_action(this);
		}
	}

	public final Add_external_table_partition_actionContext add_external_table_partition_action() throws RecognitionException {
		Add_external_table_partition_actionContext _localctx = new Add_external_table_partition_actionContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_add_external_table_partition_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9442);
			column_name();
			setState(9443);
			opt_equal_mark();
			setState(9444);
			expr_const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_actionsContext extends ParserRuleContext {
		public Alter_table_actionContext alter_table_action() {
			return getRuleContext(Alter_table_actionContext.class,0);
		}
		public Alter_table_actionsContext alter_table_actions() {
			return getRuleContext(Alter_table_actionsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Alter_table_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_table_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_table_actions(this);
		}
	}

	public final Alter_table_actionsContext alter_table_actions() throws RecognitionException {
		return alter_table_actions(0);
	}

	private Alter_table_actionsContext alter_table_actions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_table_actionsContext _localctx = new Alter_table_actionsContext(_ctx, _parentState);
		Alter_table_actionsContext _prevctx = _localctx;
		int _startState = 1218;
		enterRecursionRule(_localctx, 1218, RULE_alter_table_actions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(9447);
			alter_table_action();
			}
			_ctx.stop = _input.LT(-1);
			setState(9454);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1066,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_table_actionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_table_actions);
					setState(9449);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(9450);
					match(Comma);
					setState(9451);
					alter_table_action();
					}
					} 
				}
				setState(9456);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1066,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_table_actionContext extends ParserRuleContext {
		public Table_option_list_space_seperatedContext table_option_list_space_seperated() {
			return getRuleContext(Table_option_list_space_seperatedContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode CONVERT() { return getToken(OBParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public Charset_nameContext charset_name() {
			return getRuleContext(Charset_nameContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public Alter_column_optionContext alter_column_option() {
			return getRuleContext(Alter_column_optionContext.class,0);
		}
		public Alter_tablegroup_optionContext alter_tablegroup_option() {
			return getRuleContext(Alter_tablegroup_optionContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public Alter_index_optionContext alter_index_option() {
			return getRuleContext(Alter_index_optionContext.class,0);
		}
		public Alter_partition_optionContext alter_partition_option() {
			return getRuleContext(Alter_partition_optionContext.class,0);
		}
		public Alter_constraint_optionContext alter_constraint_option() {
			return getRuleContext(Alter_constraint_optionContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(OBParser.REFRESH, 0); }
		public Alter_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_table_action(this);
		}
	}

	public final Alter_table_actionContext alter_table_action() throws RecognitionException {
		Alter_table_actionContext _localctx = new Alter_table_actionContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_alter_table_action);
		int _la;
		try {
			setState(9480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(9457);
					match(SET);
					}
				}

				setState(9460);
				table_option_list_space_seperated();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9461);
				match(CONVERT);
				setState(9462);
				match(TO);
				setState(9463);
				match(CHARACTER);
				setState(9464);
				match(SET);
				setState(9465);
				charset_name();
				setState(9467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
				case 1:
					{
					setState(9466);
					collation();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9469);
				alter_column_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9470);
				alter_tablegroup_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9471);
				match(RENAME);
				setState(9473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(9472);
					match(TO);
					}
				}

				setState(9475);
				relation_factor();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9476);
				alter_index_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9477);
				alter_partition_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9478);
				alter_constraint_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9479);
				match(REFRESH);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_constraint_optionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OBParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(OBParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public Check_stateContext check_state() {
			return getRuleContext(Check_stateContext.class,0);
		}
		public Alter_constraint_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_constraint_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_constraint_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_constraint_option(this);
		}
	}

	public final Alter_constraint_optionContext alter_constraint_option() throws RecognitionException {
		Alter_constraint_optionContext _localctx = new Alter_constraint_optionContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_alter_constraint_option);
		int _la;
		try {
			setState(9510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1071,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9482);
				match(ADD);
				setState(9483);
				out_of_line_constraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9484);
				match(ADD);
				setState(9485);
				match(LeftParen);
				setState(9486);
				out_of_line_constraint();
				setState(9487);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9489);
				match(DROP);
				setState(9490);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9491);
				match(LeftParen);
				setState(9492);
				name_list(0);
				setState(9493);
				match(RightParen);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9495);
				match(DROP);
				setState(9496);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9497);
				constraint_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9498);
				match(DROP);
				setState(9499);
				match(FOREIGN);
				setState(9500);
				match(KEY);
				setState(9501);
				index_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9502);
				match(DROP);
				setState(9503);
				match(PRIMARY);
				setState(9504);
				match(KEY);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9505);
				match(ALTER);
				setState(9506);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9507);
				constraint_name();
				setState(9508);
				check_state();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_optionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Drop_partition_name_listContext drop_partition_name_list() {
			return getRuleContext(Drop_partition_name_listContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Opt_partition_range_or_listContext opt_partition_range_or_list() {
			return getRuleContext(Opt_partition_range_or_listContext.class,0);
		}
		public Modify_partition_infoContext modify_partition_info() {
			return getRuleContext(Modify_partition_infoContext.class,0);
		}
		public TerminalNode REORGANIZE() { return getToken(OBParser.REORGANIZE, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public TerminalNode REMOVE() { return getToken(OBParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(OBParser.PARTITIONING, 0); }
		public TerminalNode EXCHANGE() { return getToken(OBParser.EXCHANGE, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(OBParser.WITHOUT, 0); }
		public TerminalNode VALIDATION() { return getToken(OBParser.VALIDATION, 0); }
		public Alter_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_partition_option(this);
		}
	}

	public final Alter_partition_optionContext alter_partition_option() throws RecognitionException {
		Alter_partition_optionContext _localctx = new Alter_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_alter_partition_option);
		int _la;
		try {
			setState(9539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				enterOuterAlt(_localctx, 1);
				{
				setState(9512);
				match(DROP);
				setState(9513);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9514);
				drop_partition_name_list();
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 2);
				{
				setState(9515);
				match(ADD);
				setState(9516);
				match(PARTITION);
				setState(9517);
				opt_partition_range_or_list();
				}
				break;
			case PARTITION:
				enterOuterAlt(_localctx, 3);
				{
				setState(9518);
				modify_partition_info();
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(9519);
				match(REORGANIZE);
				setState(9520);
				match(PARTITION);
				setState(9521);
				name_list(0);
				setState(9522);
				match(INTO);
				setState(9523);
				opt_partition_range_or_list();
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(9525);
				match(TRUNCATE);
				setState(9526);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9527);
				name_list(0);
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 6);
				{
				setState(9528);
				match(REMOVE);
				setState(9529);
				match(PARTITIONING);
				}
				break;
			case EXCHANGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9530);
				match(EXCHANGE);
				setState(9531);
				match(PARTITION);
				setState(9532);
				relation_name();
				setState(9533);
				match(WITH);
				setState(9534);
				match(TABLE);
				setState(9535);
				relation_factor();
				setState(9536);
				match(WITHOUT);
				setState(9537);
				match(VALIDATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_partition_range_or_listContext extends ParserRuleContext {
		public Opt_range_partition_listContext opt_range_partition_list() {
			return getRuleContext(Opt_range_partition_listContext.class,0);
		}
		public Opt_list_partition_listContext opt_list_partition_list() {
			return getRuleContext(Opt_list_partition_listContext.class,0);
		}
		public Opt_partition_range_or_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_partition_range_or_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_partition_range_or_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_partition_range_or_list(this);
		}
	}

	public final Opt_partition_range_or_listContext opt_partition_range_or_list() throws RecognitionException {
		Opt_partition_range_or_listContext _localctx = new Opt_partition_range_or_listContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_opt_partition_range_or_list);
		try {
			setState(9543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9541);
				opt_range_partition_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9542);
				opt_list_partition_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tg_partition_optionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Drop_partition_name_listContext drop_partition_name_list() {
			return getRuleContext(Drop_partition_name_listContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Opt_partition_range_or_listContext opt_partition_range_or_list() {
			return getRuleContext(Opt_partition_range_or_listContext.class,0);
		}
		public Modify_tg_partition_infoContext modify_tg_partition_info() {
			return getRuleContext(Modify_tg_partition_infoContext.class,0);
		}
		public TerminalNode REORGANIZE() { return getToken(OBParser.REORGANIZE, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public Alter_tg_partition_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tg_partition_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tg_partition_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tg_partition_option(this);
		}
	}

	public final Alter_tg_partition_optionContext alter_tg_partition_option() throws RecognitionException {
		Alter_tg_partition_optionContext _localctx = new Alter_tg_partition_optionContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_alter_tg_partition_option);
		int _la;
		try {
			setState(9561);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				enterOuterAlt(_localctx, 1);
				{
				setState(9545);
				match(DROP);
				setState(9546);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9547);
				drop_partition_name_list();
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 2);
				{
				setState(9548);
				match(ADD);
				setState(9549);
				match(PARTITION);
				setState(9550);
				opt_partition_range_or_list();
				}
				break;
			case PARTITION:
				enterOuterAlt(_localctx, 3);
				{
				setState(9551);
				modify_tg_partition_info();
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(9552);
				match(REORGANIZE);
				setState(9553);
				match(PARTITION);
				setState(9554);
				name_list(0);
				setState(9555);
				match(INTO);
				setState(9556);
				opt_partition_range_or_list();
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(9558);
				match(TRUNCATE);
				setState(9559);
				match(PARTITION);
				setState(9560);
				name_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_name_listContext extends ParserRuleContext {
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Drop_partition_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_partition_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_partition_name_list(this);
		}
	}

	public final Drop_partition_name_listContext drop_partition_name_list() throws RecognitionException {
		Drop_partition_name_listContext _localctx = new Drop_partition_name_listContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_drop_partition_name_list);
		try {
			setState(9568);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(9563);
				name_list(0);
				}
				break;
			case LeftParen:
				enterOuterAlt(_localctx, 2);
				{
				setState(9564);
				match(LeftParen);
				setState(9565);
				name_list(0);
				setState(9566);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_partition_infoContext extends ParserRuleContext {
		public Hash_partition_optionContext hash_partition_option() {
			return getRuleContext(Hash_partition_optionContext.class,0);
		}
		public Key_partition_optionContext key_partition_option() {
			return getRuleContext(Key_partition_optionContext.class,0);
		}
		public Range_partition_optionContext range_partition_option() {
			return getRuleContext(Range_partition_optionContext.class,0);
		}
		public List_partition_optionContext list_partition_option() {
			return getRuleContext(List_partition_optionContext.class,0);
		}
		public Modify_partition_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_partition_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterModify_partition_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitModify_partition_info(this);
		}
	}

	public final Modify_partition_infoContext modify_partition_info() throws RecognitionException {
		Modify_partition_infoContext _localctx = new Modify_partition_infoContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_modify_partition_info);
		try {
			setState(9574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1076,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9570);
				hash_partition_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9571);
				key_partition_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9572);
				range_partition_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9573);
				list_partition_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_tg_partition_infoContext extends ParserRuleContext {
		public Tg_hash_partition_optionContext tg_hash_partition_option() {
			return getRuleContext(Tg_hash_partition_optionContext.class,0);
		}
		public Tg_key_partition_optionContext tg_key_partition_option() {
			return getRuleContext(Tg_key_partition_optionContext.class,0);
		}
		public Tg_range_partition_optionContext tg_range_partition_option() {
			return getRuleContext(Tg_range_partition_optionContext.class,0);
		}
		public Tg_list_partition_optionContext tg_list_partition_option() {
			return getRuleContext(Tg_list_partition_optionContext.class,0);
		}
		public Modify_tg_partition_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_tg_partition_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterModify_tg_partition_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitModify_tg_partition_info(this);
		}
	}

	public final Modify_tg_partition_infoContext modify_tg_partition_info() throws RecognitionException {
		Modify_tg_partition_infoContext _localctx = new Modify_tg_partition_infoContext(_ctx, getState());
		enterRule(_localctx, 1234, RULE_modify_tg_partition_info);
		try {
			setState(9580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9576);
				tg_hash_partition_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9577);
				tg_key_partition_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9578);
				tg_range_partition_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9579);
				tg_list_partition_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_index_optionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Out_of_line_indexContext out_of_line_index() {
			return getRuleContext(Out_of_line_indexContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Key_or_indexContext key_or_index() {
			return getRuleContext(Key_or_indexContext.class,0);
		}
		public List<Index_nameContext> index_name() {
			return getRuleContexts(Index_nameContext.class);
		}
		public Index_nameContext index_name(int i) {
			return getRuleContext(Index_nameContext.class,i);
		}
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public Parallel_optionContext parallel_option() {
			return getRuleContext(Parallel_optionContext.class,0);
		}
		public Visibility_optionContext visibility_option() {
			return getRuleContext(Visibility_optionContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Alter_index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_index_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_index_option(this);
		}
	}

	public final Alter_index_optionContext alter_index_option() throws RecognitionException {
		Alter_index_optionContext _localctx = new Alter_index_optionContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_alter_index_option);
		try {
			setState(9606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9582);
				match(ADD);
				setState(9583);
				out_of_line_index();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9584);
				match(ADD);
				setState(9585);
				match(LeftParen);
				setState(9586);
				out_of_line_index();
				setState(9587);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9589);
				match(DROP);
				setState(9590);
				key_or_index();
				setState(9591);
				index_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9593);
				match(ALTER);
				setState(9594);
				match(INDEX);
				setState(9595);
				index_name();
				setState(9598);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARALLEL:
				case NOPARALLEL:
					{
					setState(9596);
					parallel_option();
					}
					break;
				case VISIBLE:
				case INVISIBLE:
					{
					setState(9597);
					visibility_option();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9600);
				match(RENAME);
				setState(9601);
				key_or_index();
				setState(9602);
				index_name();
				setState(9603);
				match(TO);
				setState(9604);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Visibility_optionContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(OBParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(OBParser.INVISIBLE, 0); }
		public Visibility_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVisibility_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVisibility_option(this);
		}
	}

	public final Visibility_optionContext visibility_option() throws RecognitionException {
		Visibility_optionContext _localctx = new Visibility_optionContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_visibility_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9608);
			_la = _input.LA(1);
			if ( !(_la==VISIBLE || _la==INVISIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_group_actionContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(OBParser.COLUMN, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_group_listContext column_group_list() {
			return getRuleContext(Column_group_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Alter_column_group_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_group_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_column_group_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_column_group_action(this);
		}
	}

	public final Alter_column_group_actionContext alter_column_group_action() throws RecognitionException {
		Alter_column_group_actionContext _localctx = new Alter_column_group_actionContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_alter_column_group_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9610);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9611);
			match(COLUMN);
			setState(9612);
			match(GROUP);
			setState(9613);
			match(LeftParen);
			setState(9614);
			column_group_list();
			setState(9615);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_optionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(OBParser.COLUMN, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Column_definition_refContext column_definition_ref() {
			return getRuleContext(Column_definition_refContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(OBParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(OBParser.RESTRICT, 0); }
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public Alter_column_behaviorContext alter_column_behavior() {
			return getRuleContext(Alter_column_behaviorContext.class,0);
		}
		public TerminalNode CHANGE() { return getToken(OBParser.CHANGE, 0); }
		public TerminalNode MODIFY() { return getToken(OBParser.MODIFY, 0); }
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Alter_column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_column_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_column_option(this);
		}
	}

	public final Alter_column_optionContext alter_column_option() throws RecognitionException {
		Alter_column_optionContext _localctx = new Alter_column_optionContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_alter_column_option);
		int _la;
		try {
			setState(9668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9617);
				match(ADD);
				setState(9619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9618);
					match(COLUMN);
					}
				}

				setState(9621);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9622);
				match(ADD);
				setState(9624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9623);
					match(COLUMN);
					}
				}

				setState(9626);
				match(LeftParen);
				setState(9627);
				column_definition_list();
				setState(9628);
				match(RightParen);
				setState(9630);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1082,_ctx) ) {
				case 1:
					{
					setState(9629);
					lob_storage_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9632);
				match(DROP);
				setState(9633);
				column_definition_ref();
				setState(9635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1083,_ctx) ) {
				case 1:
					{
					setState(9634);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9637);
				match(DROP);
				setState(9638);
				match(COLUMN);
				setState(9639);
				column_definition_ref();
				setState(9641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1084,_ctx) ) {
				case 1:
					{
					setState(9640);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9643);
				match(ALTER);
				setState(9645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9644);
					match(COLUMN);
					}
				}

				setState(9647);
				column_definition_ref();
				setState(9648);
				alter_column_behavior();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9650);
				match(CHANGE);
				setState(9652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9651);
					match(COLUMN);
					}
				}

				setState(9654);
				column_definition_ref();
				setState(9655);
				column_definition();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9657);
				match(MODIFY);
				setState(9659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(9658);
					match(COLUMN);
					}
				}

				setState(9661);
				column_definition();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9662);
				match(RENAME);
				setState(9663);
				match(COLUMN);
				setState(9664);
				column_definition_ref();
				setState(9665);
				match(TO);
				setState(9666);
				column_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablegroup_optionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode TABLEGROUP() { return getToken(OBParser.TABLEGROUP, 0); }
		public Alter_tablegroup_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablegroup_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_tablegroup_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_tablegroup_option(this);
		}
	}

	public final Alter_tablegroup_optionContext alter_tablegroup_option() throws RecognitionException {
		Alter_tablegroup_optionContext _localctx = new Alter_tablegroup_optionContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_alter_tablegroup_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9670);
			match(DROP);
			setState(9671);
			match(TABLEGROUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_behaviorContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Signed_literalContext signed_literal() {
			return getRuleContext(Signed_literalContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public Alter_column_behaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_behavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_column_behavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_column_behavior(this);
		}
	}

	public final Alter_column_behaviorContext alter_column_behavior() throws RecognitionException {
		Alter_column_behaviorContext _localctx = new Alter_column_behaviorContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_alter_column_behavior);
		try {
			setState(9684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1089,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9673);
				match(SET);
				setState(9674);
				match(DEFAULT);
				setState(9675);
				signed_literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9676);
				match(SET);
				setState(9677);
				match(DEFAULT);
				setState(9678);
				match(LeftParen);
				setState(9679);
				expr(0);
				setState(9680);
				match(RightParen);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9682);
				match(DROP);
				setState(9683);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_stmtContext extends ParserRuleContext {
		public TerminalNode FLASHBACK() { return getToken(OBParser.FLASHBACK, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public List<Relation_factorContext> relation_factor() {
			return getRuleContexts(Relation_factorContext.class);
		}
		public Relation_factorContext relation_factor(int i) {
			return getRuleContext(Relation_factorContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(OBParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(OBParser.TO, i);
		}
		public TerminalNode BEFORE() { return getToken(OBParser.BEFORE, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public Database_keyContext database_key() {
			return getRuleContext(Database_keyContext.class,0);
		}
		public List<Database_factorContext> database_factor() {
			return getRuleContexts(Database_factorContext.class);
		}
		public Database_factorContext database_factor(int i) {
			return getRuleContext(Database_factorContext.class,i);
		}
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public Flashback_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFlashback_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFlashback_stmt(this);
		}
	}

	public final Flashback_stmtContext flashback_stmt() throws RecognitionException {
		Flashback_stmtContext _localctx = new Flashback_stmtContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_flashback_stmt);
		int _la;
		try {
			setState(9719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1093,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9686);
				match(FLASHBACK);
				setState(9687);
				match(TABLE);
				setState(9688);
				relation_factor();
				setState(9689);
				match(TO);
				setState(9690);
				match(BEFORE);
				setState(9691);
				match(DROP);
				setState(9695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RENAME) {
					{
					setState(9692);
					match(RENAME);
					setState(9693);
					match(TO);
					setState(9694);
					relation_factor();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9697);
				match(FLASHBACK);
				setState(9698);
				database_key();
				setState(9699);
				database_factor();
				setState(9700);
				match(TO);
				setState(9701);
				match(BEFORE);
				setState(9702);
				match(DROP);
				setState(9706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RENAME) {
					{
					setState(9703);
					match(RENAME);
					setState(9704);
					match(TO);
					setState(9705);
					database_factor();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9708);
				match(FLASHBACK);
				setState(9709);
				match(TENANT);
				setState(9710);
				relation_name();
				setState(9711);
				match(TO);
				setState(9712);
				match(BEFORE);
				setState(9713);
				match(DROP);
				setState(9717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RENAME) {
					{
					setState(9714);
					match(RENAME);
					setState(9715);
					match(TO);
					setState(9716);
					relation_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Purge_stmtContext extends ParserRuleContext {
		public TerminalNode PURGE() { return getToken(OBParser.PURGE, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Relation_factorContext relation_factor() {
			return getRuleContext(Relation_factorContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode RECYCLEBIN() { return getToken(OBParser.RECYCLEBIN, 0); }
		public Database_keyContext database_key() {
			return getRuleContext(Database_keyContext.class,0);
		}
		public Database_factorContext database_factor() {
			return getRuleContext(Database_factorContext.class,0);
		}
		public Purge_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purge_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPurge_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPurge_stmt(this);
		}
	}

	public final Purge_stmtContext purge_stmt() throws RecognitionException {
		Purge_stmtContext _localctx = new Purge_stmtContext(_ctx, getState());
		enterRule(_localctx, 1250, RULE_purge_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9721);
			match(PURGE);
			setState(9734);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case INDEX:
			case SCHEMA:
			case TABLE:
			case RECYCLEBIN:
				{
				setState(9730);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INDEX:
				case TABLE:
					{
					setState(9722);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==TABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9723);
					relation_factor();
					}
					break;
				case DATABASE:
				case SCHEMA:
				case RECYCLEBIN:
					{
					setState(9728);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RECYCLEBIN:
						{
						setState(9724);
						match(RECYCLEBIN);
						}
						break;
					case DATABASE:
					case SCHEMA:
						{
						setState(9725);
						database_key();
						setState(9726);
						database_factor();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case TENANT:
				{
				setState(9732);
				match(TENANT);
				setState(9733);
				relation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_stmtContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(OBParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Table_listContext table_list() {
			return getRuleContext(Table_listContext.class,0);
		}
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Optimize_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOptimize_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOptimize_stmt(this);
		}
	}

	public final Optimize_stmtContext optimize_stmt() throws RecognitionException {
		Optimize_stmtContext _localctx = new Optimize_stmtContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_optimize_stmt);
		try {
			setState(9745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1098,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9736);
				match(OPTIMIZE);
				setState(9737);
				match(TABLE);
				setState(9738);
				table_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9739);
				match(OPTIMIZE);
				setState(9740);
				match(TENANT);
				setState(9743);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(9741);
					match(ALL);
					}
					break;
				case ROLE:
				case JSON_QUERY:
				case QUOTA_NAME:
				case ADMIN:
				case ALLOW:
				case EUCLIDEAN:
				case STSTOKEN:
				case REWRITE:
				case VECTOR_DISTANCE:
				case PARTITION_TYPE:
				case DOT:
				case TASK_ID:
				case COMPUTATION:
				case MANHATTAN:
				case AUTO_REFRESH:
				case ARRAY:
				case SINGLE:
				case SHARED_STORAGE_DEST:
				case DISALLOW:
				case UnderlineST_ASMVT:
				case CONDITIONAL:
				case RB_AND_AGG:
				case COMPRESSION_CODE:
				case FILE_BLOCK_SIZE:
				case APPROXIMATE:
				case MAX_NET_BANDWIDTH:
				case MULTIVALUE:
				case SHARED_STORAGE_INFO:
				case RB_OR_AGG:
				case DATA_SOURCE:
				case PROJECT_NAME:
				case VECTOR:
				case ENDPOINT:
				case DATA_DISK_SIZE:
				case BUFFER_SIZE:
				case PROPERTIES:
				case ATTRIBUTE:
				case ASIS:
				case SCALARS:
				case USER_SPECIFIED:
				case ACCESS_INFO:
				case ROARINGBITMAP:
				case VALIDATION:
				case COSINE:
				case SUM_OPNSIZE:
				case ACCESSKEY:
				case MICRO_INDEX_CLUSTERED:
				case AUTO_INCREMENT_CACHE_SIZE:
				case ACCESSTYPE:
				case EXTERNAL_STORAGE_DEST:
				case OVERWRITE:
				case LAST_REFRESH_SCN:
				case WITHOUT:
				case MAX_FILE_SIZE:
				case APPROX:
				case MISMATCH:
				case SS_MICRO_CACHE:
				case OPTIMIZER_COSTS:
				case PAXOS_REPLICA_NUM:
				case ACCESSID:
				case UNCONDITIONAL:
				case NET_BANDWIDTH_WEIGHT:
				case RB_BUILD_AGG:
				case ACCESS:
				case OBJECT_ID:
				case AGAINST:
				case ALWAYS:
				case NAMESPACE:
				case CIPHER:
				case COLUMNS:
				case LS:
				case CYCLE:
				case NUMBER:
				case ROWID:
				case SYNCHRONOUS:
				case IMMEDIATE:
				case FIELDS:
				case FULL:
				case ID:
				case INCLUDING:
				case LIB:
				case ORDINALITY:
				case ISSUER:
				case LANGUAGE:
				case BISON_LIST:
				case LOCAL:
				case UNLIMITED:
				case MERGE:
				case MODE:
				case IOPS_WEIGHT:
				case PARSER:
				case MIN_MAX:
				case PUBLIC:
				case ROWS:
				case REJECT:
				case PLUS:
				case SUBJECT:
				case SYSDATE:
				case TEXT:
				case CALIBRATION:
				case LINE_DELIMITER:
				case GEOMCOLLECTION:
				case QUERY_RESPONSE_TIME:
				case REDUNDANCY:
				case CALIBRATION_INFO:
				case SCN:
				case WINDOW:
				case X509:
				case STRONG:
				case WEAK:
				case CONNECT:
				case FROZEN:
				case EXCEPT:
				case MINUS:
				case INTERSECT:
				case ISNULL:
				case AUDIT:
				case WARNINGS:
				case FORMAT:
				case MINVALUE:
				case EMPTY_FIELD_AS_NULL:
				case UNINSTALL:
				case UNDOFILE:
				case MASTER_SSL_CA:
				case YEAR:
				case DISCONNECT:
				case STOP:
				case SIZE:
				case AT:
				case RELAY_LOG_POS:
				case POOL:
				case CURDATE:
				case JSON_VALUE:
				case ZONE_TYPE:
				case LOCATION:
				case WEIGHT_STRING:
				case CHANGED:
				case MASTER_SSL_CAPATH:
				case NTH_VALUE:
				case SERIAL:
				case PROGRESSIVE_MERGE_NUM:
				case QUEUE_TIME:
				case TABLET_MAX_SIZE:
				case ILOGCACHE:
				case AUTHORS:
				case MIGRATE:
				case CONSISTENT:
				case SUSPEND:
				case REMOTE_OSS:
				case SECURITY:
				case SET_SLAVE_CLUSTER:
				case FAST:
				case PREVIEW:
				case BANDWIDTH:
				case TRUNCATE:
				case BACKUP_BACKUP_DEST:
				case CONSTRAINT_SCHEMA:
				case STATEMENT:
				case MASTER_SSL_CERT:
				case TABLE_NAME:
				case PRIORITY:
				case DO:
				case MASTER_RETRY_COUNT:
				case REPLICA:
				case RECOVERY:
				case OLD_KEY:
				case DISABLE:
				case PORT:
				case REBUILD:
				case FOLLOWER:
				case ROOT:
				case REDOFILE:
				case MASTER_SERVER_ID:
				case NCHAR:
				case KEY_BLOCK_SIZE:
				case SEQUENCE:
				case MIGRATION:
				case SUBPARTITION:
				case ROW_NUMBER:
				case COMPRESSION:
				case BIT:
				case SAMPLE:
				case UNLOCKED:
				case CLASS_ORIGIN:
				case STATEMENTS:
				case ACTION:
				case REDUNDANT:
				case UPGRADE:
				case VALIDATE:
				case START:
				case TEMPTABLE:
				case RECYCLEBIN:
				case PROFILES:
				case ERRORS:
				case LEAVES:
				case UNDEFINED:
				case EVERY:
				case SHARDING:
				case BYTE:
				case FLUSH:
				case MIN_ROWS:
				case ERROR_P:
				case MAX_USER_CONNECTIONS:
				case MAX_CPU:
				case LOCKED:
				case IO:
				case BTREE:
				case SLOT_IDX:
				case HASH:
				case ROTATE:
				case COLLATION:
				case MASTER:
				case ENCRYPTION:
				case MAX:
				case TRANSACTION:
				case SQL_TSI_MONTH:
				case ARBITRATION:
				case MAX_QUERIES_PER_HOUR:
				case COMMENT:
				case CTX_ID:
				case MIN_IOPS:
				case NVARCHAR:
				case OFF:
				case BIT_XOR:
				case PAUSE:
				case QUICK:
				case PRETTY:
				case DUPLICATE:
				case WAIT:
				case FIELD_OPTIONALLY_ENCLOSED_BY:
				case DES_KEY_FILE:
				case ENGINES:
				case RETURNS:
				case MASTER_USER:
				case SOCKET:
				case MASTER_DELAY:
				case FILE_ID:
				case FIRST:
				case TABLET:
				case CLIENT:
				case ENGINE_:
				case EXCLUDING:
				case TABLES:
				case TRADITIONAL:
				case BOOTSTRAP:
				case STDDEV:
				case DATAFILE:
				case INVOKER:
				case DEPTH:
				case NORMAL:
				case LN:
				case COLUMN_NAME:
				case TRIGGERS:
				case RESET:
				case EVENT:
				case COALESCE:
				case RESPECT:
				case STATUS:
				case AUTO_INCREMENT_MODE:
				case UNBOUNDED:
				case WRAPPER:
				case TIMESTAMP:
				case PARTITIONS:
				case SUBSTR:
				case CHUNK:
				case FILEX:
				case BACKUPSET:
				case UNIT:
				case PRIVILEGES:
				case DEMAND:
				case BACKUPPIECE:
				case LESS:
				case SWITCH:
				case DIAGNOSTICS:
				case REDO_BUFFER_SIZE:
				case NO:
				case MAJOR:
				case ACTIVE:
				case ROUTINE:
				case FOLLOWING:
				case DEFAULT_LOB_INROW_THRESHOLD:
				case LOB_INROW_THRESHOLD:
				case SCHEMA_ID:
				case LATERAL:
				case ROLLBACK:
				case READ_ONLY:
				case MEMBER:
				case PARTITION_ID:
				case DUMP:
				case EXTERNAL:
				case APPROX_COUNT_DISTINCT_SYNOPSIS:
				case GROUPING:
				case OF:
				case SLOG:
				case OJ:
				case ARCHIVELOG:
				case MAX_CONNECTIONS_PER_HOUR:
				case ASYNCHRONOUS:
				case ENCODING:
				case SECOND:
				case UNKNOWN:
				case POINT:
				case PL:
				case MEMSTORE_PERCENT:
				case STD:
				case POLYGON:
				case PS:
				case OLD:
				case TABLE_ID:
				case CONTEXT:
				case FINAL_COUNT:
				case MASTER_CONNECT_RETRY:
				case POSITION:
				case DISCARD:
				case PREV:
				case RECOVER:
				case PROCESS:
				case DEALLOCATE:
				case OLD_PASSWORD:
				case FAILOVER:
				case LISTAGG:
				case SLOW:
				case NOAUDIT:
				case SUM:
				case OPTIONS:
				case MIN:
				case RT:
				case RELOAD:
				case ONE:
				case DELAY_KEY_WRITE:
				case ORIG_DEFAULT:
				case INDEXED:
				case RETURNING:
				case SQL_TSI_HOUR:
				case TIMESTAMPDIFF:
				case RESTORE:
				case OFFSET:
				case TEMPORARY:
				case VARIANCE:
				case SNAPSHOT:
				case STATISTICS:
				case SERVER_TYPE:
				case COMMITTED:
				case INDEXES:
				case FREEZE:
				case SCOPE:
				case IDC:
				case VIEW:
				case ONE_SHOT:
				case ACCOUNT:
				case LOCALITY:
				case REVERSE:
				case UP:
				case CLUSTER_ID:
				case NOARCHIVELOG:
				case MAX_SIZE:
				case PAGE:
				case NAME:
				case ROW_COUNT:
				case LAST:
				case WASH:
				case LOGONLY_REPLICA_NUM:
				case DELAY:
				case SUBDATE:
				case INCREMENTAL:
				case ROLLING:
				case VERIFY:
				case CONTAINS:
				case GENERAL:
				case VISIBLE:
				case SIGNED:
				case SERVER:
				case NEXT:
				case ENDS:
				case GLOBAL:
				case ROOTSERVICE_LIST:
				case SHUTDOWN:
				case VERBOSE:
				case CLUSTER_NAME:
				case MASTER_PORT:
				case MYSQL_ERRNO:
				case XA:
				case TIME:
				case DATETIME:
				case NOMINVALUE:
				case BOOL:
				case DIRECTORY:
				case DATA_TABLE_ID:
				case SEQUENCES:
				case PRETTY_COLOR:
				case VALID:
				case MASTER_SSL_KEY:
				case MASTER_PASSWORD:
				case PLAN:
				case SHARE:
				case MULTIPOLYGON:
				case STDDEV_SAMP:
				case USE_BLOOM_FILTER:
				case CONSTRAINT_CATALOG:
				case CLUSTER:
				case EXCHANGE:
				case GRANTS:
				case CAST:
				case SERVER_PORT:
				case SQL_CACHE:
				case MAX_USED_PART_ID:
				case HYBRID_HIST:
				case INSTANCE:
				case FUNCTION:
				case NOWAIT:
				case INVISIBLE:
				case DENSE_RANK:
				case COUNT:
				case NAMES:
				case MY_NAME:
				case P_ENTITY:
				case ISOLATE:
				case MAX_ROWS:
				case CTXCAT:
				case ISOLATION:
				case REPLICATION:
				case DECRYPTION:
				case REMOVE:
				case STATS_AUTO_RECALC:
				case CONSISTENT_MODE:
				case MODIFY:
				case UNCOMMITTED:
				case PHYSICAL:
				case NO_WAIT:
				case BACKUP_COPIES:
				case UNIT_NUM:
				case PERCENTAGE:
				case MAX_IOPS:
				case SPFILE:
				case REPEATABLE:
				case COMPLETION:
				case CONDENSED:
				case ROOTTABLE:
				case SUBSTRING:
				case ZONE:
				case BACKED:
				case SERVICE:
				case TEMPLATE:
				case DATE_SUB:
				case EXPIRE_INFO:
				case EXPIRE:
				case ENABLE:
				case HOSTS:
				case SCHEMA_NAME:
				case EXPANSION:
				case REORGANIZE:
				case BLOCK_SIZE:
				case TRIM_SPACE:
				case MINOR:
				case RESUME:
				case COMPLETE:
				case STATS_PERSISTENT:
				case NODEGROUP:
				case PARTITIONING:
				case BIT_AND:
				case SUPER:
				case TIMES:
				case COMMIT:
				case SAVEPOINT:
				case UNTIL:
				case USER:
				case LEAK_RATE:
				case MEMTABLE:
				case CHARSET:
				case MOVE:
				case XML:
				case PATH:
				case IPC:
				case TRIM:
				case PERFORMANCE:
				case RANK:
				case VAR_POP:
				case DEFAULT_AUTH:
				case EXTENT_SIZE:
				case BINLOG:
				case LEAK_MOD:
				case CLOG:
				case GEOMETRYCOLLECTION:
				case STORAGE:
				case MEDIUM:
				case USE_FRM:
				case MASTER_HEARTBEAT_PERIOD:
				case SUBPARTITIONS:
				case CUBE:
				case FRAGMENTATION:
				case BALANCE:
				case QUERY:
				case POLICY:
				case THROTTLE:
				case SQL_TSI_QUARTER:
				case REPAIR:
				case MASTER_SSL_CIPHER:
				case KEY_VERSION:
				case CATALOG_NAME:
				case NDBCLUSTER:
				case CONNECTION:
				case COMPACT:
				case SYNCHRONIZATION:
				case AVAILABILITY:
				case INCR:
				case CANCEL:
				case SIMPLE:
				case VARIABLES:
				case SQL_TSI_WEEK:
				case P_CHUNK:
				case SYSTEM:
				case ROOTSERVICE:
				case PLUGIN_DIR:
				case ASCII:
				case INFO:
				case SKIP_HEADER:
				case SQL_THREAD:
				case TYPES:
				case LEADER:
				case FOUND:
				case EXTRACT:
				case FIXED:
				case CACHE:
				case KV_ATTRIBUTES:
				case CURRENT:
				case STACKED:
				case RETURNED_SQLSTATE:
				case SKIP_INDEX:
				case END:
				case PRESERVE:
				case BADFILE:
				case LOG_DISK_SIZE:
				case SQL_BUFFER_RESULT:
				case JSON:
				case SOME:
				case INDEX_TABLE_ID:
				case PATTERN:
				case RECOVERY_WINDOW:
				case FREQUENCY:
				case LOCKS:
				case MANUAL:
				case GEOMETRY:
				case IDENTIFIED:
				case STORAGE_FORMAT_VERSION:
				case OVER:
				case USER_RESOURCES:
				case BACKUPROUND:
				case DESTINATION:
				case SONAME:
				case OUTLINE:
				case MASTER_LOG_FILE:
				case NOMAXVALUE:
				case ESTIMATE:
				case SLAVE:
				case SKIP_BLANK_LINES:
				case GTS:
				case EXPORT:
				case AVG_ROW_LENGTH:
				case ENFORCED:
				case FLASHBACK:
				case SESSION_USER:
				case TABLEGROUPS:
				case CURTIME:
				case REPLICA_TYPE:
				case AGGREGATE:
				case TRANSFER:
				case JSON_ARRAYAGG:
				case PERCENT_RANK:
				case ENUM:
				case NATIONAL:
				case RECYCLE:
				case REGION:
				case MUTEX:
				case PARALLEL:
				case NOPARALLEL:
				case NDB:
				case SYSTEM_USER:
				case MAXIMIZE:
				case MAX_UPDATES_PER_HOUR:
				case CURSOR_NAME:
				case CONCURRENT:
				case DUMPFILE:
				case COMPRESSED:
				case LINESTRING:
				case DYNAMIC:
				case CHAIN:
				case INCREMENT:
				case LAG:
				case BASELINE_ID:
				case NEW:
				case SQL_TSI_YEAR:
				case THAN:
				case CPU:
				case HOST:
				case VALUE:
				case LOGS:
				case SERIALIZABLE:
				case AUTO_INCREMENT:
				case BACKUP:
				case LOGFILE:
				case ROW_FORMAT:
				case SET_MASTER_CLUSTER:
				case MINUTE:
				case SWAPS:
				case TASK:
				case INNODB:
				case IO_THREAD:
				case HISTOGRAM:
				case PCTFREE:
				case PARAMETERS:
				case OBJECT:
				case TABLESPACE:
				case OBCONFIG_URL:
				case AUTO:
				case PASSWORD:
				case ROW:
				case MESSAGE_TEXT:
				case DISK:
				case FAULTS:
				case HOUR:
				case REFRESH:
				case COLUMN_STAT:
				case ANY:
				case UNIT_GROUP:
				case TTL:
				case ERROR_CODE:
				case PHASE:
				case ENTITY:
				case PROFILE:
				case LAST_VALUE:
				case RESTART:
				case TRACE:
				case LOGICAL_READS:
				case DATE_ADD:
				case BLOCK_INDEX:
				case SERVER_IP:
				case CODE:
				case PLUGINS:
				case ADDDATE:
				case VIRTUAL_COLUMN_ID:
				case COLUMN_FORMAT:
				case NESTED:
				case CLEAN:
				case MASTER_SSL:
				case CLEAR:
				case CHECKSUM:
				case INSTALL:
				case MONTH:
				case NEVER:
				case AFTER:
				case CLOSE:
				case JSON_OBJECTAGG:
				case SET_TP:
				case OWNER:
				case BLOOM_FILTER:
				case ILOG:
				case META:
				case STARTS:
				case PLANREGRESS:
				case AUTOEXTEND_SIZE:
				case TABLET_ID:
				case SOURCE:
				case IGNORE_SERVER_IDS:
				case REPLICA_NUM:
				case BINDING:
				case MICROSECOND:
				case UNDO_BUFFER_SIZE:
				case SWITCHOVER:
				case EXTENDED_NOADDR:
				case GLOBAL_NAME:
				case SPLIT:
				case BASELINE:
				case MEMORY:
				case DESCRIPTION:
				case SEED:
				case RTREE:
				case RESOURCE:
				case STDDEV_POP:
				case RUN:
				case OBSOLETE:
				case SQL_AFTER_GTIDS:
				case OPEN:
				case SQL_TSI_DAY:
				case STRING:
				case RELAY_THREAD:
				case BREADTH:
				case NOCACHE:
				case UNUSUAL:
				case RELAYLOG:
				case SQL_BEFORE_GTIDS:
				case PRIMARY_ZONE:
				case TABLE_CHECKSUM:
				case ZONE_LIST:
				case DATABASE_ID:
				case TP_NO:
				case NETWORK:
				case PROTECTION:
				case BOOLEAN:
				case AVG:
				case MULTILINESTRING:
				case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
				case NOW:
				case BIT_OR:
				case PROXY:
				case DUPLICATE_SCOPE:
				case STATS_SAMPLE_PAGES:
				case TABLET_SIZE:
				case BASE:
				case KVCACHE:
				case RELAY:
				case MEMORY_SIZE:
				case CONTRIBUTORS:
				case EMPTY:
				case PARTIAL:
				case REPORT:
				case ESCAPE:
				case CLONE:
				case MASTER_AUTO_POSITION:
				case DISKGROUP:
				case CALC_PARTITION_ID:
				case TP_NAME:
				case ACTIVATE:
				case SQL_AFTER_MTS_GAPS:
				case EFFECTIVE:
				case FIRST_VALUE:
				case SQL_TSI_MINUTE:
				case UNICODE:
				case QUARTER:
				case ANALYSE:
				case DEFINER:
				case NONE:
				case PROCESSLIST:
				case TYPE:
				case INSERT_METHOD:
				case EXTENDED:
				case LOG:
				case WHENEVER:
				case LEVEL:
				case TIME_ZONE_INFO:
				case TIMESTAMPADD:
				case GET_FORMAT:
				case PREPARE:
				case MATERIALIZED:
				case STANDBY:
				case WORK:
				case HANDLER:
				case CUME_DIST:
				case LEAK:
				case INITIAL_SIZE:
				case RELAY_LOG_FILE:
				case STORING:
				case IMPORT:
				case HELP:
				case CREATE_TIMESTAMP:
				case COMPUTE:
				case SOUNDS:
				case TABLE_MODE:
				case COPY:
				case SESSION:
				case DAG:
				case NOCYCLE:
				case SQL_NO_CACHE:
				case EXECUTE:
				case PRECEDING:
				case SWITCHES:
				case PACK_KEYS:
				case ENABLE_EXTENDED_ROWID:
				case SQL_ID:
				case NOORDER:
				case TENANT_ID:
				case CHECKPOINT:
				case DAY:
				case GROUP_CONCAT:
				case JSON_TABLE:
				case LEAD:
				case EVENTS:
				case RECURSIVE:
				case ONLY:
				case TABLEGROUP_ID:
				case TOP_K_FRE_HIST:
				case MASTER_SSL_CRL:
				case RESOURCE_POOL:
				case RESOURCE_POOL_LIST:
				case NTILE:
				case NULL_IF_EXETERNAL:
				case BUCKETS:
				case SKEWONLY:
				case SCHEDULE:
				case JOB:
				case SRID:
				case MASTER_LOG_POS:
				case SUBCLASS_ORIGIN:
				case MULTIPOINT:
				case BLOCK:
				case SQL_TSI_SECOND:
				case DATE:
				case ROLLUP:
				case MIN_CPU:
				case OCCUR:
				case DATA:
				case SUCCESSFUL:
				case REDO_TRANSPORT_OPTIONS:
				case FIELD_DELIMITER:
				case MASTER_HOST:
				case VAR_SAMP:
				case ALGORITHM:
				case EXPIRED:
				case CONSTRAINT_NAME:
				case APPROX_COUNT_DISTINCT:
				case BASIC:
				case DEFAULT_TABLEGROUP:
				case LIST_:
				case WEEK:
				case LINK:
				case STATEMENT_ID:
				case NULLS:
				case MASTER_SSL_CRLPATH:
				case CASCADED:
				case PLUGIN:
				case ENCRYPTED:
				case TENANT:
				case STORE:
				case LOG_RESTORE_SOURCE:
				case ENABLE_ARBITRATION_SERVICE:
				case NAME_OB:
				case STAT:
				case ALL_META:
				case ALL_USER:
				case BEGI:
				case REMAP:
				case HIDDEN:
					{
					setState(9742);
					relation_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dump_memory_stmtContext extends ParserRuleContext {
		public TerminalNode DUMP() { return getToken(OBParser.DUMP, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode CHUNK() { return getToken(OBParser.CHUNK, 0); }
		public TerminalNode ENTITY() { return getToken(OBParser.ENTITY, 0); }
		public TerminalNode P_ENTITY() { return getToken(OBParser.P_ENTITY, 0); }
		public List<TerminalNode> COMP_EQ() { return getTokens(OBParser.COMP_EQ); }
		public TerminalNode COMP_EQ(int i) {
			return getToken(OBParser.COMP_EQ, i);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode SLOT_IDX() { return getToken(OBParser.SLOT_IDX, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode TENANT_ID() { return getToken(OBParser.TENANT_ID, 0); }
		public TerminalNode CTX_ID() { return getToken(OBParser.CTX_ID, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode P_CHUNK() { return getToken(OBParser.P_CHUNK, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public TerminalNode LEAK_MOD() { return getToken(OBParser.LEAK_MOD, 0); }
		public TerminalNode LEAK_RATE() { return getToken(OBParser.LEAK_RATE, 0); }
		public TerminalNode MEMORY() { return getToken(OBParser.MEMORY, 0); }
		public TerminalNode LEAK() { return getToken(OBParser.LEAK, 0); }
		public Dump_memory_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dump_memory_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDump_memory_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDump_memory_stmt(this);
		}
	}

	public final Dump_memory_stmtContext dump_memory_stmt() throws RecognitionException {
		Dump_memory_stmtContext _localctx = new Dump_memory_stmtContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_dump_memory_stmt);
		int _la;
		try {
			setState(9786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1099,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9747);
				match(DUMP);
				setState(9748);
				_la = _input.LA(1);
				if ( !(_la==CHUNK || _la==ENTITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9749);
				match(ALL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9750);
				match(DUMP);
				setState(9751);
				match(ENTITY);
				setState(9752);
				match(P_ENTITY);
				setState(9753);
				match(COMP_EQ);
				setState(9754);
				match(STRING_VALUE);
				setState(9755);
				match(Comma);
				setState(9756);
				match(SLOT_IDX);
				setState(9757);
				match(COMP_EQ);
				setState(9758);
				match(INTNUM);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9759);
				match(DUMP);
				setState(9760);
				match(CHUNK);
				setState(9761);
				match(TENANT_ID);
				setState(9762);
				match(COMP_EQ);
				setState(9763);
				match(INTNUM);
				setState(9764);
				match(Comma);
				setState(9765);
				match(CTX_ID);
				setState(9766);
				match(COMP_EQ);
				setState(9767);
				relation_name_or_string();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9768);
				match(DUMP);
				setState(9769);
				match(CHUNK);
				setState(9770);
				match(P_CHUNK);
				setState(9771);
				match(COMP_EQ);
				setState(9772);
				match(STRING_VALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9773);
				match(SET);
				setState(9774);
				match(OPTION);
				setState(9775);
				match(LEAK_MOD);
				setState(9776);
				match(COMP_EQ);
				setState(9777);
				match(STRING_VALUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9778);
				match(SET);
				setState(9779);
				match(OPTION);
				setState(9780);
				match(LEAK_RATE);
				setState(9781);
				match(COMP_EQ);
				setState(9782);
				match(INTNUM);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9783);
				match(DUMP);
				setState(9784);
				match(MEMORY);
				setState(9785);
				match(LEAK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_system_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode BOOTSTRAP() { return getToken(OBParser.BOOTSTRAP, 0); }
		public Server_info_listContext server_info_list() {
			return getRuleContext(Server_info_listContext.class,0);
		}
		public Shared_storage_infoContext shared_storage_info() {
			return getRuleContext(Shared_storage_infoContext.class,0);
		}
		public TerminalNode FLUSH() { return getToken(OBParser.FLUSH, 0); }
		public Cache_typeContext cache_type() {
			return getRuleContext(Cache_typeContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(OBParser.CACHE, 0); }
		public Flush_scopeContext flush_scope() {
			return getRuleContext(Flush_scopeContext.class,0);
		}
		public Namespace_exprContext namespace_expr() {
			return getRuleContext(Namespace_exprContext.class,0);
		}
		public Sql_id_or_schema_id_exprContext sql_id_or_schema_id_expr() {
			return getRuleContext(Sql_id_or_schema_id_exprContext.class,0);
		}
		public Databases_exprContext databases_expr() {
			return getRuleContext(Databases_exprContext.class,0);
		}
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public List<Opt_equal_markContext> opt_equal_mark() {
			return getRuleContexts(Opt_equal_markContext.class);
		}
		public Opt_equal_markContext opt_equal_mark(int i) {
			return getRuleContext(Opt_equal_markContext.class,i);
		}
		public Tenant_name_listContext tenant_name_list() {
			return getRuleContext(Tenant_name_listContext.class,0);
		}
		public TerminalNode SQL() { return getToken(OBParser.SQL, 0); }
		public TerminalNode KVCACHE() { return getToken(OBParser.KVCACHE, 0); }
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public Cache_nameContext cache_name() {
			return getRuleContext(Cache_nameContext.class,0);
		}
		public TerminalNode SS_MICRO_CACHE() { return getToken(OBParser.SS_MICRO_CACHE, 0); }
		public TerminalNode DAG() { return getToken(OBParser.DAG, 0); }
		public TerminalNode WARNINGS() { return getToken(OBParser.WARNINGS, 0); }
		public TerminalNode ILOGCACHE() { return getToken(OBParser.ILOGCACHE, 0); }
		public File_idContext file_id() {
			return getRuleContext(File_idContext.class,0);
		}
		public TerminalNode SWITCH() { return getToken(OBParser.SWITCH, 0); }
		public TerminalNode REPLICA() { return getToken(OBParser.REPLICA, 0); }
		public Ls_roleContext ls_role() {
			return getRuleContext(Ls_roleContext.class,0);
		}
		public Ls_server_or_server_or_zone_or_tenantContext ls_server_or_server_or_zone_or_tenant() {
			return getRuleContext(Ls_server_or_server_or_zone_or_tenantContext.class,0);
		}
		public TerminalNode ROOTSERVICE() { return getToken(OBParser.ROOTSERVICE, 0); }
		public Partition_roleContext partition_role() {
			return getRuleContext(Partition_roleContext.class,0);
		}
		public Server_or_zoneContext server_or_zone() {
			return getRuleContext(Server_or_zoneContext.class,0);
		}
		public TerminalNode REPORT() { return getToken(OBParser.REPORT, 0); }
		public TerminalNode RECYCLE() { return getToken(OBParser.RECYCLE, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode MERGE() { return getToken(OBParser.MERGE, 0); }
		public Zone_descContext zone_desc() {
			return getRuleContext(Zone_descContext.class,0);
		}
		public Suspend_or_resumeContext suspend_or_resume() {
			return getRuleContext(Suspend_or_resumeContext.class,0);
		}
		public Tenant_list_tupleContext tenant_list_tuple() {
			return getRuleContext(Tenant_list_tupleContext.class,0);
		}
		public TerminalNode RECOVERY() { return getToken(OBParser.RECOVERY, 0); }
		public TerminalNode CLEAR() { return getToken(OBParser.CLEAR, 0); }
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode ARBITRATION() { return getToken(OBParser.ARBITRATION, 0); }
		public TerminalNode SERVICE() { return getToken(OBParser.SERVICE, 0); }
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public TerminalNode REMOVE() { return getToken(OBParser.REMOVE, 0); }
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode CANCEL() { return getToken(OBParser.CANCEL, 0); }
		public Cancel_task_typeContext cancel_task_type() {
			return getRuleContext(Cancel_task_typeContext.class,0);
		}
		public TerminalNode TASK() { return getToken(OBParser.TASK, 0); }
		public TerminalNode MAJOR() { return getToken(OBParser.MAJOR, 0); }
		public TerminalNode FREEZE() { return getToken(OBParser.FREEZE, 0); }
		public Opt_tablet_id_no_emptyContext opt_tablet_id_no_empty() {
			return getRuleContext(Opt_tablet_id_no_emptyContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(OBParser.REBUILD, 0); }
		public TerminalNode COLUMN() { return getToken(OBParser.COLUMN, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public Opt_tablet_idContext opt_tablet_id() {
			return getRuleContext(Opt_tablet_idContext.class,0);
		}
		public LsContext ls() {
			return getRuleContext(LsContext.class,0);
		}
		public TerminalNode CHECKPOINT() { return getToken(OBParser.CHECKPOINT, 0); }
		public TerminalNode MINOR() { return getToken(OBParser.MINOR, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Server_listContext server_list() {
			return getRuleContext(Server_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode SLOG() { return getToken(OBParser.SLOG, 0); }
		public Ip_portContext ip_port() {
			return getRuleContext(Ip_portContext.class,0);
		}
		public TerminalNode TENANT_ID() { return getToken(OBParser.TENANT_ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public List<Relation_name_or_stringContext> relation_name_or_string() {
			return getRuleContexts(Relation_name_or_stringContext.class);
		}
		public Relation_name_or_stringContext relation_name_or_string(int i) {
			return getRuleContext(Relation_name_or_stringContext.class,i);
		}
		public TerminalNode ROOTTABLE() { return getToken(OBParser.ROOTTABLE, 0); }
		public Server_actionContext server_action() {
			return getRuleContext(Server_actionContext.class,0);
		}
		public TerminalNode ZONE() { return getToken(OBParser.ZONE, 0); }
		public Add_or_alter_zone_optionsContext add_or_alter_zone_options() {
			return getRuleContext(Add_or_alter_zone_optionsContext.class,0);
		}
		public Zone_actionContext zone_action() {
			return getRuleContext(Zone_actionContext.class,0);
		}
		public Alter_or_change_or_modifyContext alter_or_change_or_modify() {
			return getRuleContext(Alter_or_change_or_modifyContext.class,0);
		}
		public TerminalNode EXTERNAL_STORAGE_DEST() { return getToken(OBParser.EXTERNAL_STORAGE_DEST, 0); }
		public Opt_path_infoContext opt_path_info() {
			return getRuleContext(Opt_path_infoContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode ACCESS_INFO() { return getToken(OBParser.ACCESS_INFO, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(OBParser.ATTRIBUTE, 0); }
		public TerminalNode SHARED_STORAGE_DEST() { return getToken(OBParser.SHARED_STORAGE_DEST, 0); }
		public Opt_storage_use_forContext opt_storage_use_for() {
			return getRuleContext(Opt_storage_use_forContext.class,0);
		}
		public Opt_scope_typeContext opt_scope_type() {
			return getRuleContext(Opt_scope_typeContext.class,0);
		}
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode REFRESH() { return getToken(OBParser.REFRESH, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public TerminalNode MEMORY() { return getToken(OBParser.MEMORY, 0); }
		public TerminalNode STAT() { return getToken(OBParser.STAT, 0); }
		public TerminalNode WASH() { return getToken(OBParser.WASH, 0); }
		public TerminalNode FRAGMENTATION() { return getToken(OBParser.FRAGMENTATION, 0); }
		public TerminalNode IO() { return getToken(OBParser.IO, 0); }
		public TerminalNode CALIBRATION() { return getToken(OBParser.CALIBRATION, 0); }
		public TerminalNode STORAGE() { return getToken(OBParser.STORAGE, 0); }
		public TerminalNode CALIBRATION_INFO() { return getToken(OBParser.CALIBRATION_INFO, 0); }
		public Calibration_info_listContext calibration_info_list() {
			return getRuleContext(Calibration_info_listContext.class,0);
		}
		public Alter_system_set_parameter_actionsContext alter_system_set_parameter_actions() {
			return getRuleContext(Alter_system_set_parameter_actionsContext.class,0);
		}
		public TerminalNode SET_TP() { return getToken(OBParser.SET_TP, 0); }
		public Alter_system_settp_actionsContext alter_system_settp_actions() {
			return getRuleContext(Alter_system_settp_actionsContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(OBParser.LOCATION, 0); }
		public TerminalNode BALANCE() { return getToken(OBParser.BALANCE, 0); }
		public Zone_listContext zone_list() {
			return getRuleContext(Zone_listContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(OBParser.TYPE, 0); }
		public Balance_task_typeContext balance_task_type() {
			return getRuleContext(Balance_task_typeContext.class,0);
		}
		public TerminalNode RELOAD() { return getToken(OBParser.RELOAD, 0); }
		public TerminalNode GTS() { return getToken(OBParser.GTS, 0); }
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public TerminalNode MIGRATE() { return getToken(OBParser.MIGRATE, 0); }
		public TerminalNode DESTINATION() { return getToken(OBParser.DESTINATION, 0); }
		public TerminalNode REPLICA_TYPE() { return getToken(OBParser.REPLICA_TYPE, 0); }
		public TerminalNode DATA_SOURCE() { return getToken(OBParser.DATA_SOURCE, 0); }
		public TerminalNode PAXOS_REPLICA_NUM() { return getToken(OBParser.PAXOS_REPLICA_NUM, 0); }
		public TerminalNode SOURCE() { return getToken(OBParser.SOURCE, 0); }
		public TerminalNode MODIFY() { return getToken(OBParser.MODIFY, 0); }
		public TerminalNode TASK_ID() { return getToken(OBParser.TASK_ID, 0); }
		public TerminalNode UPGRADE() { return getToken(OBParser.UPGRADE, 0); }
		public TerminalNode VIRTUAL() { return getToken(OBParser.VIRTUAL, 0); }
		public TerminalNode RUN() { return getToken(OBParser.RUN, 0); }
		public TerminalNode JOB() { return getToken(OBParser.JOB, 0); }
		public Upgrade_actionContext upgrade_action() {
			return getRuleContext(Upgrade_actionContext.class,0);
		}
		public TerminalNode STOP() { return getToken(OBParser.STOP, 0); }
		public TerminalNode ROLLING() { return getToken(OBParser.ROLLING, 0); }
		public TerminalNode TIME_ZONE_INFO() { return getToken(OBParser.TIME_ZONE_INFO, 0); }
		public TerminalNode ENABLE() { return getToken(OBParser.ENABLE, 0); }
		public TerminalNode THROTTLE() { return getToken(OBParser.THROTTLE, 0); }
		public Opt_sql_throttle_using_condContext opt_sql_throttle_using_cond() {
			return getRuleContext(Opt_sql_throttle_using_condContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode PRIORITY() { return getToken(OBParser.PRIORITY, 0); }
		public TerminalNode COMP_LE() { return getToken(OBParser.COMP_LE, 0); }
		public TerminalNode DISABLE() { return getToken(OBParser.DISABLE, 0); }
		public TerminalNode DISK() { return getToken(OBParser.DISK, 0); }
		public TerminalNode VALID() { return getToken(OBParser.VALID, 0); }
		public TerminalNode NETWORK() { return getToken(OBParser.NETWORK, 0); }
		public TerminalNode BANDWIDTH() { return getToken(OBParser.BANDWIDTH, 0); }
		public TerminalNode REGION() { return getToken(OBParser.REGION, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Conf_constContext conf_const() {
			return getRuleContext(Conf_constContext.class,0);
		}
		public TerminalNode RESTORE() { return getToken(OBParser.RESTORE, 0); }
		public TerminalNode RECOVER() { return getToken(OBParser.RECOVER, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public Alter_system_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_system_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_system_stmt(this);
		}
	}

	public final Alter_system_stmtContext alter_system_stmt() throws RecognitionException {
		Alter_system_stmtContext _localctx = new Alter_system_stmtContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_alter_system_stmt);
		int _la;
		try {
			setState(10425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9788);
				match(ALTER);
				setState(9789);
				match(SYSTEM);
				setState(9790);
				match(BOOTSTRAP);
				setState(9791);
				server_info_list();
				setState(9793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Comma) {
					{
					setState(9792);
					shared_storage_info();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9795);
				match(ALTER);
				setState(9796);
				match(SYSTEM);
				setState(9797);
				match(FLUSH);
				setState(9798);
				cache_type();
				setState(9799);
				match(CACHE);
				setState(9801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NAMESPACE) {
					{
					setState(9800);
					namespace_expr();
					}
				}

				setState(9804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMA_ID || _la==SQL_ID) {
					{
					setState(9803);
					sql_id_or_schema_id_expr();
					}
				}

				setState(9807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASES) {
					{
					setState(9806);
					databases_expr();
					}
				}

				setState(9813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(9809);
					match(TENANT);
					setState(9810);
					opt_equal_mark();
					setState(9811);
					tenant_name_list();
					}
				}

				setState(9815);
				flush_scope();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9817);
				match(ALTER);
				setState(9818);
				match(SYSTEM);
				setState(9819);
				match(FLUSH);
				setState(9820);
				match(SQL);
				setState(9821);
				cache_type();
				setState(9826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(9822);
					match(TENANT);
					setState(9823);
					opt_equal_mark();
					setState(9824);
					tenant_name_list();
					}
				}

				setState(9828);
				flush_scope();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9830);
				match(ALTER);
				setState(9831);
				match(SYSTEM);
				setState(9832);
				match(FLUSH);
				setState(9833);
				match(KVCACHE);
				setState(9835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(9834);
					tenant_name();
					}
				}

				setState(9838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CACHE) {
					{
					setState(9837);
					cache_name();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9840);
				match(ALTER);
				setState(9841);
				match(SYSTEM);
				setState(9842);
				match(FLUSH);
				setState(9843);
				match(SS_MICRO_CACHE);
				setState(9845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(9844);
					tenant_name();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9847);
				match(ALTER);
				setState(9848);
				match(SYSTEM);
				setState(9849);
				match(FLUSH);
				setState(9850);
				match(DAG);
				setState(9851);
				match(WARNINGS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9852);
				match(ALTER);
				setState(9853);
				match(SYSTEM);
				setState(9854);
				match(FLUSH);
				setState(9855);
				match(ILOGCACHE);
				setState(9857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILE_ID) {
					{
					setState(9856);
					file_id();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9859);
				match(ALTER);
				setState(9860);
				match(SYSTEM);
				setState(9861);
				match(SWITCH);
				setState(9862);
				match(REPLICA);
				setState(9863);
				ls_role();
				setState(9864);
				ls_server_or_server_or_zone_or_tenant();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9866);
				match(ALTER);
				setState(9867);
				match(SYSTEM);
				setState(9868);
				match(SWITCH);
				setState(9869);
				match(ROOTSERVICE);
				setState(9870);
				partition_role();
				setState(9871);
				server_or_zone();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9873);
				match(ALTER);
				setState(9874);
				match(SYSTEM);
				setState(9875);
				match(REPORT);
				setState(9876);
				match(REPLICA);
				setState(9878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(9877);
					server_or_zone();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9880);
				match(ALTER);
				setState(9881);
				match(SYSTEM);
				setState(9882);
				match(RECYCLE);
				setState(9883);
				match(REPLICA);
				setState(9885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(9884);
					server_or_zone();
					}
				}

				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9887);
				match(ALTER);
				setState(9888);
				match(SYSTEM);
				setState(9889);
				match(START);
				setState(9890);
				match(MERGE);
				setState(9891);
				zone_desc();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9892);
				match(ALTER);
				setState(9893);
				match(SYSTEM);
				setState(9894);
				suspend_or_resume();
				setState(9895);
				match(MERGE);
				setState(9897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(9896);
					tenant_list_tuple();
					}
				}

				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9899);
				match(ALTER);
				setState(9900);
				match(SYSTEM);
				setState(9901);
				suspend_or_resume();
				setState(9902);
				match(RECOVERY);
				setState(9904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZONE) {
					{
					setState(9903);
					zone_desc();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9906);
				match(ALTER);
				setState(9907);
				match(SYSTEM);
				setState(9908);
				match(CLEAR);
				setState(9909);
				match(MERGE);
				setState(9910);
				match(ERROR_P);
				setState(9912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(9911);
					tenant_list_tuple();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9914);
				match(ALTER);
				setState(9915);
				match(SYSTEM);
				setState(9916);
				match(ADD);
				setState(9917);
				match(ARBITRATION);
				setState(9918);
				match(SERVICE);
				setState(9919);
				match(STRING_VALUE);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9920);
				match(ALTER);
				setState(9921);
				match(SYSTEM);
				setState(9922);
				match(REMOVE);
				setState(9923);
				match(ARBITRATION);
				setState(9924);
				match(SERVICE);
				setState(9925);
				match(STRING_VALUE);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9926);
				match(ALTER);
				setState(9927);
				match(SYSTEM);
				setState(9928);
				match(REPLACE);
				setState(9929);
				match(ARBITRATION);
				setState(9930);
				match(SERVICE);
				setState(9931);
				match(STRING_VALUE);
				setState(9932);
				match(WITH);
				setState(9933);
				match(STRING_VALUE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9934);
				match(ALTER);
				setState(9935);
				match(SYSTEM);
				setState(9936);
				match(CANCEL);
				setState(9937);
				cancel_task_type();
				setState(9938);
				match(TASK);
				setState(9939);
				match(STRING_VALUE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9941);
				match(ALTER);
				setState(9942);
				match(SYSTEM);
				setState(9943);
				match(MAJOR);
				setState(9944);
				match(FREEZE);
				setState(9953);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
				case 1:
					{
					{
					setState(9945);
					tenant_list_tuple();
					setState(9946);
					opt_tablet_id();
					}
					}
					break;
				case 2:
					{
					{
					setState(9948);
					tenant_list_tuple();
					setState(9949);
					ls();
					setState(9950);
					opt_tablet_id();
					}
					}
					break;
				case 3:
					{
					setState(9952);
					opt_tablet_id_no_empty();
					}
					break;
				}
				setState(9958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REBUILD) {
					{
					setState(9955);
					match(REBUILD);
					setState(9956);
					match(COLUMN);
					setState(9957);
					match(GROUP);
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9960);
				match(ALTER);
				setState(9961);
				match(SYSTEM);
				setState(9962);
				match(CHECKPOINT);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9963);
				match(ALTER);
				setState(9964);
				match(SYSTEM);
				setState(9965);
				match(MINOR);
				setState(9966);
				match(FREEZE);
				setState(9975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
				case 1:
					{
					{
					setState(9967);
					tenant_list_tuple();
					setState(9968);
					opt_tablet_id();
					}
					}
					break;
				case 2:
					{
					{
					setState(9970);
					tenant_list_tuple();
					setState(9971);
					ls();
					setState(9972);
					opt_tablet_id();
					}
					}
					break;
				case 3:
					{
					setState(9974);
					opt_tablet_id_no_empty();
					}
					break;
				}
				setState(9983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER) {
					{
					setState(9977);
					match(SERVER);
					setState(9978);
					opt_equal_mark();
					setState(9979);
					match(LeftParen);
					setState(9980);
					server_list();
					setState(9981);
					match(RightParen);
					}
				}

				setState(9986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZONE) {
					{
					setState(9985);
					zone_desc();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9988);
				match(ALTER);
				setState(9989);
				match(SYSTEM);
				setState(9990);
				match(CHECKPOINT);
				setState(9991);
				match(SLOG);
				setState(10000);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TENANT_ID:
					{
					{
					setState(9992);
					match(TENANT_ID);
					setState(9993);
					opt_equal_mark();
					setState(9994);
					match(INTNUM);
					}
					}
					break;
				case TENANT:
					{
					{
					setState(9996);
					match(TENANT);
					setState(9997);
					opt_equal_mark();
					setState(9998);
					relation_name_or_string();
					}
					}
					break;
				case SERVER:
				case HOST:
					break;
				default:
					break;
				}
				setState(10002);
				ip_port();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10003);
				match(ALTER);
				setState(10004);
				match(SYSTEM);
				setState(10005);
				match(CLEAR);
				setState(10006);
				match(ROOTTABLE);
				setState(10008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10007);
					tenant_name();
					}
				}

				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10010);
				match(ALTER);
				setState(10011);
				match(SYSTEM);
				setState(10012);
				server_action();
				setState(10013);
				match(SERVER);
				setState(10014);
				server_list();
				setState(10016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZONE) {
					{
					setState(10015);
					zone_desc();
					}
				}

				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(10018);
				match(ALTER);
				setState(10019);
				match(SYSTEM);
				setState(10020);
				match(ADD);
				setState(10021);
				match(ZONE);
				setState(10022);
				relation_name_or_string();
				setState(10023);
				add_or_alter_zone_options(0);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(10025);
				match(ALTER);
				setState(10026);
				match(SYSTEM);
				setState(10027);
				zone_action();
				setState(10028);
				match(ZONE);
				setState(10029);
				relation_name_or_string();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(10031);
				match(ALTER);
				setState(10032);
				match(SYSTEM);
				setState(10033);
				alter_or_change_or_modify();
				setState(10034);
				match(EXTERNAL_STORAGE_DEST);
				setState(10035);
				opt_path_info();
				setState(10037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(10036);
					match(SET);
					}
				}

				setState(10043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCESS_INFO) {
					{
					setState(10039);
					match(ACCESS_INFO);
					setState(10040);
					opt_equal_mark();
					setState(10041);
					match(STRING_VALUE);
					}
				}

				setState(10049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ATTRIBUTE) {
					{
					setState(10045);
					match(ATTRIBUTE);
					setState(10046);
					opt_equal_mark();
					setState(10047);
					match(STRING_VALUE);
					}
				}

				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(10051);
				match(ALTER);
				setState(10052);
				match(SYSTEM);
				setState(10053);
				alter_or_change_or_modify();
				setState(10054);
				match(ZONE);
				setState(10055);
				relation_name_or_string();
				setState(10057);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1126,_ctx) ) {
				case 1:
					{
					setState(10056);
					match(SET);
					}
					break;
				}
				setState(10059);
				add_or_alter_zone_options(0);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(10061);
				match(ALTER);
				setState(10062);
				match(SYSTEM);
				setState(10063);
				match(ADD);
				setState(10064);
				match(SHARED_STORAGE_DEST);
				setState(10065);
				opt_path_info();
				setState(10070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCESS_INFO) {
					{
					setState(10066);
					match(ACCESS_INFO);
					setState(10067);
					opt_equal_mark();
					setState(10068);
					match(STRING_VALUE);
					}
				}

				setState(10076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ATTRIBUTE) {
					{
					setState(10072);
					match(ATTRIBUTE);
					setState(10073);
					opt_equal_mark();
					setState(10074);
					match(STRING_VALUE);
					}
				}

				setState(10078);
				opt_storage_use_for();
				setState(10079);
				opt_scope_type();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(10081);
				match(ALTER);
				setState(10082);
				match(SYSTEM);
				setState(10083);
				match(DROP);
				setState(10084);
				match(SHARED_STORAGE_DEST);
				setState(10085);
				opt_path_info();
				setState(10086);
				opt_storage_use_for();
				setState(10087);
				opt_scope_type();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(10089);
				match(ALTER);
				setState(10090);
				match(SYSTEM);
				setState(10091);
				alter_or_change_or_modify();
				setState(10092);
				match(SHARED_STORAGE_DEST);
				setState(10093);
				opt_path_info();
				setState(10095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(10094);
					match(SET);
					}
				}

				setState(10101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCESS_INFO) {
					{
					setState(10097);
					match(ACCESS_INFO);
					setState(10098);
					opt_equal_mark();
					setState(10099);
					match(STRING_VALUE);
					}
				}

				setState(10107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ATTRIBUTE) {
					{
					setState(10103);
					match(ATTRIBUTE);
					setState(10104);
					opt_equal_mark();
					setState(10105);
					match(STRING_VALUE);
					}
				}

				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(10109);
				match(ALTER);
				setState(10110);
				match(SYSTEM);
				setState(10111);
				match(REFRESH);
				setState(10112);
				match(SCHEMA);
				setState(10114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10113);
					server_or_zone();
					}
				}

				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(10116);
				match(ALTER);
				setState(10117);
				match(SYSTEM);
				setState(10118);
				match(REFRESH);
				setState(10119);
				match(MEMORY);
				setState(10120);
				match(STAT);
				setState(10122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10121);
					server_or_zone();
					}
				}

				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(10124);
				match(ALTER);
				setState(10125);
				match(SYSTEM);
				setState(10126);
				match(WASH);
				setState(10127);
				match(MEMORY);
				setState(10128);
				match(FRAGMENTATION);
				setState(10130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10129);
					server_or_zone();
					}
				}

				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(10132);
				match(ALTER);
				setState(10133);
				match(SYSTEM);
				setState(10134);
				match(REFRESH);
				setState(10135);
				match(IO);
				setState(10136);
				match(CALIBRATION);
				setState(10141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(10137);
					match(STORAGE);
					setState(10138);
					opt_equal_mark();
					setState(10139);
					match(STRING_VALUE);
					}
				}

				setState(10149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALIBRATION_INFO) {
					{
					setState(10143);
					match(CALIBRATION_INFO);
					setState(10144);
					opt_equal_mark();
					setState(10145);
					match(LeftParen);
					setState(10146);
					calibration_info_list(0);
					setState(10147);
					match(RightParen);
					}
				}

				setState(10152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10151);
					server_or_zone();
					}
				}

				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(10154);
				match(ALTER);
				setState(10155);
				match(SYSTEM);
				setState(10157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(10156);
					match(SET);
					}
				}

				setState(10159);
				alter_system_set_parameter_actions();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(10160);
				match(ALTER);
				setState(10161);
				match(SYSTEM);
				setState(10162);
				match(SET_TP);
				setState(10163);
				alter_system_settp_actions(0);
				setState(10165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10164);
					server_or_zone();
					}
				}

				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(10167);
				match(ALTER);
				setState(10168);
				match(SYSTEM);
				setState(10169);
				match(CLEAR);
				setState(10170);
				match(LOCATION);
				setState(10171);
				match(CACHE);
				setState(10173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10172);
					server_or_zone();
					}
				}

				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(10175);
				match(ALTER);
				setState(10176);
				match(SYSTEM);
				setState(10177);
				match(REMOVE);
				setState(10178);
				match(BALANCE);
				setState(10179);
				match(TASK);
				setState(10184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10180);
					match(TENANT);
					setState(10181);
					opt_equal_mark();
					setState(10182);
					tenant_name_list();
					}
				}

				setState(10190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZONE) {
					{
					setState(10186);
					match(ZONE);
					setState(10187);
					opt_equal_mark();
					setState(10188);
					zone_list();
					}
				}

				setState(10196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(10192);
					match(TYPE);
					setState(10193);
					opt_equal_mark();
					setState(10194);
					balance_task_type();
					}
				}

				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(10198);
				match(ALTER);
				setState(10199);
				match(SYSTEM);
				setState(10200);
				match(RELOAD);
				setState(10201);
				match(GTS);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(10202);
				match(ALTER);
				setState(10203);
				match(SYSTEM);
				setState(10204);
				match(RELOAD);
				setState(10205);
				match(UNIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(10206);
				match(ALTER);
				setState(10207);
				match(SYSTEM);
				setState(10208);
				match(RELOAD);
				setState(10209);
				match(SERVER);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(10210);
				match(ALTER);
				setState(10211);
				match(SYSTEM);
				setState(10212);
				match(RELOAD);
				setState(10213);
				match(ZONE);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(10214);
				match(ALTER);
				setState(10215);
				match(SYSTEM);
				setState(10216);
				match(MIGRATE);
				setState(10217);
				match(UNIT);
				setState(10218);
				opt_equal_mark();
				setState(10219);
				match(INTNUM);
				setState(10220);
				match(DESTINATION);
				setState(10221);
				opt_equal_mark();
				setState(10222);
				match(STRING_VALUE);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(10224);
				match(ALTER);
				setState(10225);
				match(SYSTEM);
				setState(10226);
				match(CANCEL);
				setState(10227);
				match(MIGRATE);
				setState(10228);
				match(UNIT);
				setState(10229);
				match(INTNUM);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(10230);
				match(ALTER);
				setState(10231);
				match(SYSTEM);
				setState(10232);
				match(ADD);
				setState(10233);
				match(REPLICA);
				setState(10234);
				ls();
				setState(10235);
				match(SERVER);
				setState(10236);
				opt_equal_mark();
				setState(10237);
				match(STRING_VALUE);
				setState(10238);
				match(REPLICA_TYPE);
				setState(10239);
				opt_equal_mark();
				setState(10240);
				match(STRING_VALUE);
				setState(10245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_SOURCE) {
					{
					setState(10241);
					match(DATA_SOURCE);
					setState(10242);
					opt_equal_mark();
					setState(10243);
					match(STRING_VALUE);
					}
				}

				setState(10251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PAXOS_REPLICA_NUM) {
					{
					setState(10247);
					match(PAXOS_REPLICA_NUM);
					setState(10248);
					opt_equal_mark();
					setState(10249);
					match(INTNUM);
					}
				}

				setState(10254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10253);
					tenant_name();
					}
				}

				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(10256);
				match(ALTER);
				setState(10257);
				match(SYSTEM);
				setState(10258);
				match(REMOVE);
				setState(10259);
				match(REPLICA);
				setState(10260);
				ls();
				setState(10261);
				match(SERVER);
				setState(10262);
				opt_equal_mark();
				setState(10263);
				match(STRING_VALUE);
				setState(10268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PAXOS_REPLICA_NUM) {
					{
					setState(10264);
					match(PAXOS_REPLICA_NUM);
					setState(10265);
					opt_equal_mark();
					setState(10266);
					match(INTNUM);
					}
				}

				setState(10271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10270);
					tenant_name();
					}
				}

				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(10273);
				match(ALTER);
				setState(10274);
				match(SYSTEM);
				setState(10275);
				match(MIGRATE);
				setState(10276);
				match(REPLICA);
				setState(10277);
				ls();
				setState(10278);
				match(SOURCE);
				setState(10279);
				opt_equal_mark();
				setState(10280);
				match(STRING_VALUE);
				setState(10281);
				match(DESTINATION);
				setState(10282);
				opt_equal_mark();
				setState(10283);
				match(STRING_VALUE);
				setState(10288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_SOURCE) {
					{
					setState(10284);
					match(DATA_SOURCE);
					setState(10285);
					opt_equal_mark();
					setState(10286);
					match(STRING_VALUE);
					}
				}

				setState(10291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10290);
					tenant_name();
					}
				}

				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(10293);
				match(ALTER);
				setState(10294);
				match(SYSTEM);
				setState(10295);
				match(MODIFY);
				setState(10296);
				match(REPLICA);
				setState(10297);
				ls();
				setState(10298);
				match(SERVER);
				setState(10299);
				opt_equal_mark();
				setState(10300);
				match(STRING_VALUE);
				setState(10301);
				match(REPLICA_TYPE);
				setState(10302);
				opt_equal_mark();
				setState(10303);
				match(STRING_VALUE);
				setState(10308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PAXOS_REPLICA_NUM) {
					{
					setState(10304);
					match(PAXOS_REPLICA_NUM);
					setState(10305);
					opt_equal_mark();
					setState(10306);
					match(INTNUM);
					}
				}

				setState(10311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10310);
					tenant_name();
					}
				}

				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(10313);
				match(ALTER);
				setState(10314);
				match(SYSTEM);
				setState(10315);
				match(MODIFY);
				setState(10316);
				ls();
				setState(10317);
				match(PAXOS_REPLICA_NUM);
				setState(10318);
				opt_equal_mark();
				setState(10319);
				match(INTNUM);
				setState(10321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10320);
					tenant_name();
					}
				}

				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(10323);
				match(ALTER);
				setState(10324);
				match(SYSTEM);
				setState(10325);
				match(CANCEL);
				setState(10326);
				match(REPLICA);
				setState(10327);
				match(TASK);
				setState(10328);
				match(TASK_ID);
				setState(10329);
				opt_equal_mark();
				setState(10330);
				match(STRING_VALUE);
				setState(10332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10331);
					tenant_name();
					}
				}

				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(10334);
				match(ALTER);
				setState(10335);
				match(SYSTEM);
				setState(10336);
				match(UPGRADE);
				setState(10337);
				match(VIRTUAL);
				setState(10338);
				match(SCHEMA);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(10339);
				match(ALTER);
				setState(10340);
				match(SYSTEM);
				setState(10341);
				match(RUN);
				setState(10342);
				match(JOB);
				setState(10343);
				match(STRING_VALUE);
				setState(10345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10344);
					server_or_zone();
					}
				}

				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(10347);
				match(ALTER);
				setState(10348);
				match(SYSTEM);
				setState(10349);
				upgrade_action();
				setState(10350);
				match(UPGRADE);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(10352);
				match(ALTER);
				setState(10353);
				match(SYSTEM);
				setState(10354);
				match(RUN);
				setState(10355);
				match(UPGRADE);
				setState(10356);
				match(JOB);
				setState(10357);
				match(STRING_VALUE);
				setState(10359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10358);
					tenant_list_tuple();
					}
				}

				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(10361);
				match(ALTER);
				setState(10362);
				match(SYSTEM);
				setState(10363);
				match(STOP);
				setState(10364);
				match(UPGRADE);
				setState(10365);
				match(JOB);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(10366);
				match(ALTER);
				setState(10367);
				match(SYSTEM);
				setState(10368);
				upgrade_action();
				setState(10369);
				match(ROLLING);
				setState(10370);
				match(UPGRADE);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(10372);
				match(ALTER);
				setState(10373);
				match(SYSTEM);
				setState(10374);
				match(REFRESH);
				setState(10375);
				match(TIME_ZONE_INFO);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(10376);
				match(ALTER);
				setState(10377);
				match(SYSTEM);
				setState(10378);
				match(ENABLE);
				setState(10379);
				match(SQL);
				setState(10380);
				match(THROTTLE);
				setState(10385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(10381);
					match(FOR);
					setState(10382);
					match(PRIORITY);
					setState(10383);
					match(COMP_LE);
					setState(10384);
					match(INTNUM);
					}
				}

				setState(10387);
				opt_sql_throttle_using_cond();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(10388);
				match(ALTER);
				setState(10389);
				match(SYSTEM);
				setState(10390);
				match(DISABLE);
				setState(10391);
				match(SQL);
				setState(10392);
				match(THROTTLE);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(10393);
				match(ALTER);
				setState(10394);
				match(SYSTEM);
				setState(10395);
				match(SET);
				setState(10396);
				match(DISK);
				setState(10397);
				match(VALID);
				setState(10398);
				ip_port();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(10399);
				match(ALTER);
				setState(10400);
				match(SYSTEM);
				setState(10401);
				match(SET);
				setState(10402);
				match(NETWORK);
				setState(10403);
				match(BANDWIDTH);
				setState(10404);
				match(REGION);
				setState(10405);
				relation_name_or_string();
				setState(10406);
				match(TO);
				setState(10407);
				relation_name_or_string();
				setState(10408);
				conf_const();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(10410);
				match(ALTER);
				setState(10411);
				match(SYSTEM);
				setState(10412);
				match(ADD);
				setState(10413);
				match(RESTORE);
				setState(10414);
				match(SOURCE);
				setState(10415);
				match(STRING_VALUE);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(10416);
				match(ALTER);
				setState(10417);
				match(SYSTEM);
				setState(10418);
				match(CLEAR);
				setState(10419);
				match(RESTORE);
				setState(10420);
				match(SOURCE);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(10421);
				match(ALTER);
				setState(10422);
				match(SYSTEM);
				setState(10423);
				match(RECOVER);
				setState(10424);
				match(TABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_sql_throttle_using_condContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public Sql_throttle_one_or_more_metricsContext sql_throttle_one_or_more_metrics() {
			return getRuleContext(Sql_throttle_one_or_more_metricsContext.class,0);
		}
		public Opt_sql_throttle_using_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_sql_throttle_using_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_sql_throttle_using_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_sql_throttle_using_cond(this);
		}
	}

	public final Opt_sql_throttle_using_condContext opt_sql_throttle_using_cond() throws RecognitionException {
		Opt_sql_throttle_using_condContext _localctx = new Opt_sql_throttle_using_condContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_opt_sql_throttle_using_cond);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10427);
			match(USING);
			setState(10428);
			sql_throttle_one_or_more_metrics();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_throttle_one_or_more_metricsContext extends ParserRuleContext {
		public Sql_throttle_metricContext sql_throttle_metric() {
			return getRuleContext(Sql_throttle_metricContext.class,0);
		}
		public Sql_throttle_one_or_more_metricsContext sql_throttle_one_or_more_metrics() {
			return getRuleContext(Sql_throttle_one_or_more_metricsContext.class,0);
		}
		public Sql_throttle_one_or_more_metricsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_throttle_one_or_more_metrics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSql_throttle_one_or_more_metrics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSql_throttle_one_or_more_metrics(this);
		}
	}

	public final Sql_throttle_one_or_more_metricsContext sql_throttle_one_or_more_metrics() throws RecognitionException {
		Sql_throttle_one_or_more_metricsContext _localctx = new Sql_throttle_one_or_more_metricsContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_sql_throttle_one_or_more_metrics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10430);
			sql_throttle_metric();
			setState(10432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUEUE_TIME || _la==IO || _la==RT || _la==CPU || _la==LOGICAL_READS || _la==NETWORK) {
				{
				setState(10431);
				sql_throttle_one_or_more_metrics();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_throttle_metricContext extends ParserRuleContext {
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Int_or_decimalContext int_or_decimal() {
			return getRuleContext(Int_or_decimalContext.class,0);
		}
		public TerminalNode CPU() { return getToken(OBParser.CPU, 0); }
		public TerminalNode RT() { return getToken(OBParser.RT, 0); }
		public TerminalNode NETWORK() { return getToken(OBParser.NETWORK, 0); }
		public TerminalNode QUEUE_TIME() { return getToken(OBParser.QUEUE_TIME, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode IO() { return getToken(OBParser.IO, 0); }
		public TerminalNode LOGICAL_READS() { return getToken(OBParser.LOGICAL_READS, 0); }
		public Sql_throttle_metricContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_throttle_metric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSql_throttle_metric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSql_throttle_metric(this);
		}
	}

	public final Sql_throttle_metricContext sql_throttle_metric() throws RecognitionException {
		Sql_throttle_metricContext _localctx = new Sql_throttle_metricContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_sql_throttle_metric);
		int _la;
		try {
			setState(10443);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUEUE_TIME:
			case RT:
			case CPU:
			case NETWORK:
				enterOuterAlt(_localctx, 1);
				{
				setState(10436);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RT:
				case CPU:
					{
					setState(10434);
					_la = _input.LA(1);
					if ( !(_la==RT || _la==CPU) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case QUEUE_TIME:
				case NETWORK:
					{
					setState(10435);
					_la = _input.LA(1);
					if ( !(_la==QUEUE_TIME || _la==NETWORK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10438);
				match(COMP_EQ);
				setState(10439);
				int_or_decimal();
				}
				break;
			case IO:
			case LOGICAL_READS:
				enterOuterAlt(_localctx, 2);
				{
				setState(10440);
				_la = _input.LA(1);
				if ( !(_la==IO || _la==LOGICAL_READS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10441);
				match(COMP_EQ);
				setState(10442);
				match(INTNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tenant_name_or_tenant_idContext extends ParserRuleContext {
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode TENANT_ID() { return getToken(OBParser.TENANT_ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Change_tenant_name_or_tenant_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tenant_name_or_tenant_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterChange_tenant_name_or_tenant_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitChange_tenant_name_or_tenant_id(this);
		}
	}

	public final Change_tenant_name_or_tenant_idContext change_tenant_name_or_tenant_id() throws RecognitionException {
		Change_tenant_name_or_tenant_idContext _localctx = new Change_tenant_name_or_tenant_idContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_change_tenant_name_or_tenant_id);
		int _la;
		try {
			setState(10451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10445);
				relation_name_or_string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10446);
				match(TENANT_ID);
				setState(10448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10447);
					match(COMP_EQ);
					}
				}

				setState(10450);
				match(INTNUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cache_typeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public TerminalNode LOCATION() { return getToken(OBParser.LOCATION, 0); }
		public TerminalNode CLOG() { return getToken(OBParser.CLOG, 0); }
		public TerminalNode ILOG() { return getToken(OBParser.ILOG, 0); }
		public TerminalNode COLUMN_STAT() { return getToken(OBParser.COLUMN_STAT, 0); }
		public TerminalNode BLOCK_INDEX() { return getToken(OBParser.BLOCK_INDEX, 0); }
		public TerminalNode BLOCK() { return getToken(OBParser.BLOCK, 0); }
		public TerminalNode ROW() { return getToken(OBParser.ROW, 0); }
		public TerminalNode BLOOM_FILTER() { return getToken(OBParser.BLOOM_FILTER, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public TerminalNode PLAN() { return getToken(OBParser.PLAN, 0); }
		public TerminalNode AUDIT() { return getToken(OBParser.AUDIT, 0); }
		public TerminalNode PL() { return getToken(OBParser.PL, 0); }
		public TerminalNode PS() { return getToken(OBParser.PS, 0); }
		public TerminalNode LIB() { return getToken(OBParser.LIB, 0); }
		public Cache_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cache_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCache_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCache_type(this);
		}
	}

	public final Cache_typeContext cache_type() throws RecognitionException {
		Cache_typeContext _localctx = new Cache_typeContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_cache_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10453);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==LIB || _la==SCHEMA || _la==AUDIT || _la==LOCATION || _la==PL || _la==PS || _la==PLAN || _la==CLOG || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (ROW - 916)) | (1L << (COLUMN_STAT - 916)) | (1L << (BLOCK_INDEX - 916)) | (1L << (BLOOM_FILTER - 916)) | (1L << (ILOG - 916)))) != 0) || _la==BLOCK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Balance_task_typeContext extends ParserRuleContext {
		public TerminalNode AUTO() { return getToken(OBParser.AUTO, 0); }
		public TerminalNode MANUAL() { return getToken(OBParser.MANUAL, 0); }
		public TerminalNode ALL() { return getToken(OBParser.ALL, 0); }
		public Balance_task_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_balance_task_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBalance_task_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBalance_task_type(this);
		}
	}

	public final Balance_task_typeContext balance_task_type() throws RecognitionException {
		Balance_task_typeContext _localctx = new Balance_task_typeContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_balance_task_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10455);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==MANUAL || _la==AUTO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tenant_list_tupleContext extends ParserRuleContext {
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Tenant_name_listContext tenant_name_list() {
			return getRuleContext(Tenant_name_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Tenant_list_tupleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tenant_list_tuple; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTenant_list_tuple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTenant_list_tuple(this);
		}
	}

	public final Tenant_list_tupleContext tenant_list_tuple() throws RecognitionException {
		Tenant_list_tupleContext _localctx = new Tenant_list_tupleContext(_ctx, getState());
		enterRule(_localctx, 1270, RULE_tenant_list_tuple);
		int _la;
		try {
			setState(10470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10457);
				match(TENANT);
				setState(10459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10458);
					match(COMP_EQ);
					}
				}

				setState(10461);
				match(LeftParen);
				setState(10462);
				tenant_name_list();
				setState(10463);
				match(RightParen);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10465);
				match(TENANT);
				setState(10467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10466);
					match(COMP_EQ);
					}
				}

				setState(10469);
				tenant_name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tenant_name_listContext extends ParserRuleContext {
		public List<Relation_name_or_stringContext> relation_name_or_string() {
			return getRuleContexts(Relation_name_or_stringContext.class);
		}
		public Relation_name_or_stringContext relation_name_or_string(int i) {
			return getRuleContext(Relation_name_or_stringContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Tenant_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tenant_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTenant_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTenant_name_list(this);
		}
	}

	public final Tenant_name_listContext tenant_name_list() throws RecognitionException {
		Tenant_name_listContext _localctx = new Tenant_name_listContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_tenant_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10472);
			relation_name_or_string();
			setState(10477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(10473);
				match(Comma);
				setState(10474);
				relation_name_or_string();
				}
				}
				setState(10479);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_tenant_name_listContext extends ParserRuleContext {
		public Tenant_name_listContext tenant_name_list() {
			return getRuleContext(Tenant_name_listContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Backup_tenant_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_tenant_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBackup_tenant_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBackup_tenant_name_list(this);
		}
	}

	public final Backup_tenant_name_listContext backup_tenant_name_list() throws RecognitionException {
		Backup_tenant_name_listContext _localctx = new Backup_tenant_name_listContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_backup_tenant_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10480);
				match(COMP_EQ);
				}
			}

			setState(10483);
			tenant_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_scopeContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(OBParser.GLOBAL, 0); }
		public Flush_scopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_scope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFlush_scope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFlush_scope(this);
		}
	}

	public final Flush_scopeContext flush_scope() throws RecognitionException {
		Flush_scopeContext _localctx = new Flush_scopeContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_flush_scope);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL) {
				{
				setState(10485);
				match(GLOBAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_info_listContext extends ParserRuleContext {
		public List<Server_infoContext> server_info() {
			return getRuleContexts(Server_infoContext.class);
		}
		public Server_infoContext server_info(int i) {
			return getRuleContext(Server_infoContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Server_info_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_info_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_info_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_info_list(this);
		}
	}

	public final Server_info_listContext server_info_list() throws RecognitionException {
		Server_info_listContext _localctx = new Server_info_listContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_server_info_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10488);
			server_info();
			setState(10493);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1170,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10489);
					match(Comma);
					setState(10490);
					server_info();
					}
					} 
				}
				setState(10495);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1170,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_infoContext extends ParserRuleContext {
		public TerminalNode REGION() { return getToken(OBParser.REGION, 0); }
		public List<Relation_name_or_stringContext> relation_name_or_string() {
			return getRuleContexts(Relation_name_or_stringContext.class);
		}
		public Relation_name_or_stringContext relation_name_or_string(int i) {
			return getRuleContext(Relation_name_or_stringContext.class,i);
		}
		public TerminalNode ZONE() { return getToken(OBParser.ZONE, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public List<TerminalNode> COMP_EQ() { return getTokens(OBParser.COMP_EQ); }
		public TerminalNode COMP_EQ(int i) {
			return getToken(OBParser.COMP_EQ, i);
		}
		public Server_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_info(this);
		}
	}

	public final Server_infoContext server_info() throws RecognitionException {
		Server_infoContext _localctx = new Server_infoContext(_ctx, getState());
		enterRule(_localctx, 1280, RULE_server_info);
		int _la;
		try {
			setState(10523);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGION:
				enterOuterAlt(_localctx, 1);
				{
				setState(10496);
				match(REGION);
				setState(10498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10497);
					match(COMP_EQ);
					}
				}

				setState(10500);
				relation_name_or_string();
				setState(10501);
				match(ZONE);
				setState(10503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10502);
					match(COMP_EQ);
					}
				}

				setState(10505);
				relation_name_or_string();
				setState(10506);
				match(SERVER);
				setState(10508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10507);
					match(COMP_EQ);
					}
				}

				setState(10510);
				match(STRING_VALUE);
				}
				break;
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10512);
				match(ZONE);
				setState(10514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10513);
					match(COMP_EQ);
					}
				}

				setState(10516);
				relation_name_or_string();
				setState(10517);
				match(SERVER);
				setState(10519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10518);
					match(COMP_EQ);
					}
				}

				setState(10521);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shared_storage_infoContext extends ParserRuleContext {
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public TerminalNode SHARED_STORAGE_INFO() { return getToken(OBParser.SHARED_STORAGE_INFO, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Shared_storage_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shared_storage_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterShared_storage_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitShared_storage_info(this);
		}
	}

	public final Shared_storage_infoContext shared_storage_info() throws RecognitionException {
		Shared_storage_infoContext _localctx = new Shared_storage_infoContext(_ctx, getState());
		enterRule(_localctx, 1282, RULE_shared_storage_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10525);
			match(Comma);
			setState(10526);
			match(SHARED_STORAGE_INFO);
			setState(10527);
			opt_equal_mark();
			setState(10528);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode CANCEL() { return getToken(OBParser.CANCEL, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode STOP() { return getToken(OBParser.STOP, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode ISOLATE() { return getToken(OBParser.ISOLATE, 0); }
		public Server_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_action(this);
		}
	}

	public final Server_actionContext server_action() throws RecognitionException {
		Server_actionContext _localctx = new Server_actionContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_server_action);
		int _la;
		try {
			setState(10541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(10530);
				match(ADD);
				}
				break;
			case DELETE:
			case CANCEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANCEL) {
					{
					setState(10531);
					match(CANCEL);
					}
				}

				setState(10534);
				match(DELETE);
				}
				break;
			case START:
				enterOuterAlt(_localctx, 3);
				{
				setState(10535);
				match(START);
				}
				break;
			case FORCE:
			case STOP:
				enterOuterAlt(_localctx, 4);
				{
				setState(10537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(10536);
					match(FORCE);
					}
				}

				setState(10539);
				match(STOP);
				}
				break;
			case ISOLATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(10540);
				match(ISOLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_listContext extends ParserRuleContext {
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Server_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_list(this);
		}
	}

	public final Server_listContext server_list() throws RecognitionException {
		Server_listContext _localctx = new Server_listContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_server_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10543);
			match(STRING_VALUE);
			setState(10548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(10544);
				match(Comma);
				setState(10545);
				match(STRING_VALUE);
				}
				}
				setState(10550);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_actionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode STOP() { return getToken(OBParser.STOP, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode ISOLATE() { return getToken(OBParser.ISOLATE, 0); }
		public Zone_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterZone_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitZone_action(this);
		}
	}

	public final Zone_actionContext zone_action() throws RecognitionException {
		Zone_actionContext _localctx = new Zone_actionContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_zone_action);
		int _la;
		try {
			setState(10558);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10551);
				match(DELETE);
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(10552);
				match(START);
				}
				break;
			case FORCE:
			case STOP:
				enterOuterAlt(_localctx, 3);
				{
				setState(10554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(10553);
					match(FORCE);
					}
				}

				setState(10556);
				match(STOP);
				}
				break;
			case ISOLATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(10557);
				match(ISOLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_portContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode HOST() { return getToken(OBParser.HOST, 0); }
		public Ip_portContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_port; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIp_port(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIp_port(this);
		}
	}

	public final Ip_portContext ip_port() throws RecognitionException {
		Ip_portContext _localctx = new Ip_portContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_ip_port);
		int _la;
		try {
			setState(10567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10560);
				match(SERVER);
				setState(10562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10561);
					match(COMP_EQ);
					}
				}

				setState(10564);
				match(STRING_VALUE);
				}
				break;
			case HOST:
				enterOuterAlt(_localctx, 2);
				{
				setState(10565);
				match(HOST);
				setState(10566);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zone_descContext extends ParserRuleContext {
		public TerminalNode ZONE() { return getToken(OBParser.ZONE, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Zone_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zone_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterZone_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitZone_desc(this);
		}
	}

	public final Zone_descContext zone_desc() throws RecognitionException {
		Zone_descContext _localctx = new Zone_descContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_zone_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10569);
			match(ZONE);
			setState(10571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10570);
				match(COMP_EQ);
				}
			}

			setState(10573);
			relation_name_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Policy_nameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(OBParser.POLICY, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Policy_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_policy_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPolicy_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPolicy_name(this);
		}
	}

	public final Policy_nameContext policy_name() throws RecognitionException {
		Policy_nameContext _localctx = new Policy_nameContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_policy_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10575);
			match(POLICY);
			setState(10577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10576);
				match(COMP_EQ);
				}
			}

			setState(10579);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_or_zoneContext extends ParserRuleContext {
		public Ip_portContext ip_port() {
			return getRuleContext(Ip_portContext.class,0);
		}
		public Zone_descContext zone_desc() {
			return getRuleContext(Zone_descContext.class,0);
		}
		public Server_or_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_or_zone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_or_zone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_or_zone(this);
		}
	}

	public final Server_or_zoneContext server_or_zone() throws RecognitionException {
		Server_or_zoneContext _localctx = new Server_or_zoneContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_server_or_zone);
		try {
			setState(10583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(10581);
				ip_port();
				}
				break;
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10582);
				zone_desc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_or_alter_zone_optionContext extends ParserRuleContext {
		public TerminalNode REGION() { return getToken(OBParser.REGION, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode IDC() { return getToken(OBParser.IDC, 0); }
		public TerminalNode ZONE_TYPE() { return getToken(OBParser.ZONE_TYPE, 0); }
		public Add_or_alter_zone_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_or_alter_zone_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAdd_or_alter_zone_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAdd_or_alter_zone_option(this);
		}
	}

	public final Add_or_alter_zone_optionContext add_or_alter_zone_option() throws RecognitionException {
		Add_or_alter_zone_optionContext _localctx = new Add_or_alter_zone_optionContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_add_or_alter_zone_option);
		int _la;
		try {
			setState(10600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGION:
				enterOuterAlt(_localctx, 1);
				{
				setState(10585);
				match(REGION);
				setState(10587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10586);
					match(COMP_EQ);
					}
				}

				setState(10589);
				relation_name_or_string();
				}
				break;
			case IDC:
				enterOuterAlt(_localctx, 2);
				{
				setState(10590);
				match(IDC);
				setState(10592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10591);
					match(COMP_EQ);
					}
				}

				setState(10594);
				relation_name_or_string();
				}
				break;
			case ZONE_TYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10595);
				match(ZONE_TYPE);
				setState(10597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10596);
					match(COMP_EQ);
					}
				}

				setState(10599);
				relation_name_or_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_or_alter_zone_optionsContext extends ParserRuleContext {
		public Add_or_alter_zone_optionContext add_or_alter_zone_option() {
			return getRuleContext(Add_or_alter_zone_optionContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Add_or_alter_zone_optionsContext add_or_alter_zone_options() {
			return getRuleContext(Add_or_alter_zone_optionsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Add_or_alter_zone_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_or_alter_zone_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAdd_or_alter_zone_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAdd_or_alter_zone_options(this);
		}
	}

	public final Add_or_alter_zone_optionsContext add_or_alter_zone_options() throws RecognitionException {
		return add_or_alter_zone_options(0);
	}

	private Add_or_alter_zone_optionsContext add_or_alter_zone_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Add_or_alter_zone_optionsContext _localctx = new Add_or_alter_zone_optionsContext(_ctx, _parentState);
		Add_or_alter_zone_optionsContext _prevctx = _localctx;
		int _startState = 1300;
		enterRecursionRule(_localctx, 1300, RULE_add_or_alter_zone_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1192,_ctx) ) {
			case 1:
				{
				setState(10603);
				add_or_alter_zone_option();
				}
				break;
			case 2:
				{
				setState(10604);
				empty();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(10612);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1193,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Add_or_alter_zone_optionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_add_or_alter_zone_options);
					setState(10607);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10608);
					match(Comma);
					setState(10609);
					add_or_alter_zone_option();
					}
					} 
				}
				setState(10614);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1193,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_or_change_or_modifyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode CHANGE() { return getToken(OBParser.CHANGE, 0); }
		public TerminalNode MODIFY() { return getToken(OBParser.MODIFY, 0); }
		public Alter_or_change_or_modifyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_or_change_or_modify; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_or_change_or_modify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_or_change_or_modify(this);
		}
	}

	public final Alter_or_change_or_modifyContext alter_or_change_or_modify() throws RecognitionException {
		Alter_or_change_or_modifyContext _localctx = new Alter_or_change_or_modifyContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_alter_or_change_or_modify);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10615);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CHANGE || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_path_infoContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(OBParser.PATH, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Opt_path_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_path_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_path_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_path_info(this);
		}
	}

	public final Opt_path_infoContext opt_path_info() throws RecognitionException {
		Opt_path_infoContext _localctx = new Opt_path_infoContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_opt_path_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10617);
			match(PATH);
			setState(10618);
			opt_equal_mark();
			setState(10619);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_storage_use_forContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public Opt_storage_use_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_storage_use_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_storage_use_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_storage_use_for(this);
		}
	}

	public final Opt_storage_use_forContext opt_storage_use_for() throws RecognitionException {
		Opt_storage_use_forContext _localctx = new Opt_storage_use_forContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_opt_storage_use_for);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10621);
			match(FOR);
			setState(10622);
			relation_name_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_scope_typeContext extends ParserRuleContext {
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode REGION() { return getToken(OBParser.REGION, 0); }
		public TerminalNode ZONE() { return getToken(OBParser.ZONE, 0); }
		public Opt_scope_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_scope_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_scope_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_scope_type(this);
		}
	}

	public final Opt_scope_typeContext opt_scope_type() throws RecognitionException {
		Opt_scope_typeContext _localctx = new Opt_scope_typeContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_opt_scope_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10624);
			_la = _input.LA(1);
			if ( !(_la==ZONE || _la==REGION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10625);
			opt_equal_mark();
			setState(10626);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_id_descContext extends ParserRuleContext {
		public TerminalNode PARTITION_ID() { return getToken(OBParser.PARTITION_ID, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Partition_id_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_id_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_id_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_id_desc(this);
		}
	}

	public final Partition_id_descContext partition_id_desc() throws RecognitionException {
		Partition_id_descContext _localctx = new Partition_id_descContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_partition_id_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10628);
			match(PARTITION_ID);
			setState(10630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10629);
				match(COMP_EQ);
				}
			}

			setState(10632);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LsContext extends ParserRuleContext {
		public TerminalNode LS() { return getToken(OBParser.LS, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public LsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLs(this);
		}
	}

	public final LsContext ls() throws RecognitionException {
		LsContext _localctx = new LsContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_ls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10634);
			match(LS);
			setState(10636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10635);
				match(COMP_EQ);
				}
			}

			setState(10638);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ls_server_or_server_or_zone_or_tenantContext extends ParserRuleContext {
		public LsContext ls() {
			return getRuleContext(LsContext.class,0);
		}
		public Ip_portContext ip_port() {
			return getRuleContext(Ip_portContext.class,0);
		}
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public Zone_descContext zone_desc() {
			return getRuleContext(Zone_descContext.class,0);
		}
		public Ls_server_or_server_or_zone_or_tenantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ls_server_or_server_or_zone_or_tenant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLs_server_or_server_or_zone_or_tenant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLs_server_or_server_or_zone_or_tenant(this);
		}
	}

	public final Ls_server_or_server_or_zone_or_tenantContext ls_server_or_server_or_zone_or_tenant() throws RecognitionException {
		Ls_server_or_server_or_zone_or_tenantContext _localctx = new Ls_server_or_server_or_zone_or_tenantContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_ls_server_or_server_or_zone_or_tenant);
		int _la;
		try {
			setState(10652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LS:
				enterOuterAlt(_localctx, 1);
				{
				setState(10640);
				ls();
				setState(10641);
				ip_port();
				setState(10642);
				tenant_name();
				}
				break;
			case SERVER:
			case HOST:
				enterOuterAlt(_localctx, 2);
				{
				setState(10644);
				ip_port();
				setState(10646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10645);
					tenant_name();
					}
				}

				}
				break;
			case ZONE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10648);
				zone_desc();
				setState(10650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10649);
					tenant_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Migrate_actionContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(OBParser.MOVE, 0); }
		public TerminalNode COPY() { return getToken(OBParser.COPY, 0); }
		public Migrate_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_migrate_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMigrate_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMigrate_action(this);
		}
	}

	public final Migrate_actionContext migrate_action() throws RecognitionException {
		Migrate_actionContext _localctx = new Migrate_actionContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_migrate_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10654);
			_la = _input.LA(1);
			if ( !(_la==MOVE || _la==COPY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_actionsContext extends ParserRuleContext {
		public Change_actionContext change_action() {
			return getRuleContext(Change_actionContext.class,0);
		}
		public Change_actionsContext change_actions() {
			return getRuleContext(Change_actionsContext.class,0);
		}
		public Change_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterChange_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitChange_actions(this);
		}
	}

	public final Change_actionsContext change_actions() throws RecognitionException {
		Change_actionsContext _localctx = new Change_actionsContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_change_actions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10656);
			change_action();
			setState(10658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
			case 1:
				{
				setState(10657);
				change_actions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_actionContext extends ParserRuleContext {
		public Replica_typeContext replica_type() {
			return getRuleContext(Replica_typeContext.class,0);
		}
		public Memstore_percentContext memstore_percent() {
			return getRuleContext(Memstore_percentContext.class,0);
		}
		public Change_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterChange_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitChange_action(this);
		}
	}

	public final Change_actionContext change_action() throws RecognitionException {
		Change_actionContext _localctx = new Change_actionContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_change_action);
		try {
			setState(10662);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICA_TYPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10660);
				replica_type();
				}
				break;
			case MEMSTORE_PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10661);
				memstore_percent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replica_typeContext extends ParserRuleContext {
		public TerminalNode REPLICA_TYPE() { return getToken(OBParser.REPLICA_TYPE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Replica_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replica_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterReplica_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitReplica_type(this);
		}
	}

	public final Replica_typeContext replica_type() throws RecognitionException {
		Replica_typeContext _localctx = new Replica_typeContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_replica_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10664);
			match(REPLICA_TYPE);
			setState(10666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10665);
				match(COMP_EQ);
				}
			}

			setState(10668);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memstore_percentContext extends ParserRuleContext {
		public TerminalNode MEMSTORE_PERCENT() { return getToken(OBParser.MEMSTORE_PERCENT, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Memstore_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memstore_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMemstore_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMemstore_percent(this);
		}
	}

	public final Memstore_percentContext memstore_percent() throws RecognitionException {
		Memstore_percentContext _localctx = new Memstore_percentContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_memstore_percent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10670);
			match(MEMSTORE_PERCENT);
			setState(10672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10671);
				match(COMP_EQ);
				}
			}

			setState(10674);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Suspend_or_resumeContext extends ParserRuleContext {
		public TerminalNode SUSPEND() { return getToken(OBParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(OBParser.RESUME, 0); }
		public Suspend_or_resumeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_suspend_or_resume; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSuspend_or_resume(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSuspend_or_resume(this);
		}
	}

	public final Suspend_or_resumeContext suspend_or_resume() throws RecognitionException {
		Suspend_or_resumeContext _localctx = new Suspend_or_resumeContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_suspend_or_resume);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10676);
			_la = _input.LA(1);
			if ( !(_la==SUSPEND || _la==RESUME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Baseline_id_exprContext extends ParserRuleContext {
		public TerminalNode BASELINE_ID() { return getToken(OBParser.BASELINE_ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Baseline_id_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_baseline_id_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBaseline_id_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBaseline_id_expr(this);
		}
	}

	public final Baseline_id_exprContext baseline_id_expr() throws RecognitionException {
		Baseline_id_exprContext _localctx = new Baseline_id_exprContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_baseline_id_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10678);
			match(BASELINE_ID);
			setState(10680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10679);
				match(COMP_EQ);
				}
			}

			setState(10682);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_id_exprContext extends ParserRuleContext {
		public TerminalNode SQL_ID() { return getToken(OBParser.SQL_ID, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Sql_id_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_id_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSql_id_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSql_id_expr(this);
		}
	}

	public final Sql_id_exprContext sql_id_expr() throws RecognitionException {
		Sql_id_exprContext _localctx = new Sql_id_exprContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_sql_id_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10684);
			match(SQL_ID);
			setState(10686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10685);
				match(COMP_EQ);
				}
			}

			setState(10688);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_id_or_schema_id_exprContext extends ParserRuleContext {
		public Sql_id_exprContext sql_id_expr() {
			return getRuleContext(Sql_id_exprContext.class,0);
		}
		public TerminalNode SCHEMA_ID() { return getToken(OBParser.SCHEMA_ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Sql_id_or_schema_id_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_id_or_schema_id_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSql_id_or_schema_id_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSql_id_or_schema_id_expr(this);
		}
	}

	public final Sql_id_or_schema_id_exprContext sql_id_or_schema_id_expr() throws RecognitionException {
		Sql_id_or_schema_id_exprContext _localctx = new Sql_id_or_schema_id_exprContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_sql_id_or_schema_id_expr);
		int _la;
		try {
			setState(10696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10690);
				sql_id_expr();
				}
				break;
			case SCHEMA_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10691);
				match(SCHEMA_ID);
				setState(10693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10692);
					match(COMP_EQ);
					}
				}

				setState(10695);
				match(INTNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Namespace_exprContext extends ParserRuleContext {
		public TerminalNode NAMESPACE() { return getToken(OBParser.NAMESPACE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Namespace_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNamespace_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNamespace_expr(this);
		}
	}

	public final Namespace_exprContext namespace_expr() throws RecognitionException {
		Namespace_exprContext _localctx = new Namespace_exprContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_namespace_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10698);
			match(NAMESPACE);
			setState(10700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10699);
				match(COMP_EQ);
				}
			}

			setState(10702);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Baseline_asgn_factorContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Baseline_asgn_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_baseline_asgn_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterBaseline_asgn_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitBaseline_asgn_factor(this);
		}
	}

	public final Baseline_asgn_factorContext baseline_asgn_factor() throws RecognitionException {
		Baseline_asgn_factorContext _localctx = new Baseline_asgn_factorContext(_ctx, getState());
		enterRule(_localctx, 1336, RULE_baseline_asgn_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10704);
			column_name();
			setState(10705);
			match(COMP_EQ);
			setState(10706);
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tenant_nameContext extends ParserRuleContext {
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Tenant_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tenant_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTenant_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTenant_name(this);
		}
	}

	public final Tenant_nameContext tenant_name() throws RecognitionException {
		Tenant_nameContext _localctx = new Tenant_nameContext(_ctx, getState());
		enterRule(_localctx, 1338, RULE_tenant_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10708);
			match(TENANT);
			setState(10710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10709);
				match(COMP_EQ);
				}
			}

			setState(10712);
			relation_name_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cache_nameContext extends ParserRuleContext {
		public TerminalNode CACHE() { return getToken(OBParser.CACHE, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Cache_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cache_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCache_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCache_name(this);
		}
	}

	public final Cache_nameContext cache_name() throws RecognitionException {
		Cache_nameContext _localctx = new Cache_nameContext(_ctx, getState());
		enterRule(_localctx, 1340, RULE_cache_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10714);
			match(CACHE);
			setState(10716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10715);
				match(COMP_EQ);
				}
			}

			setState(10718);
			relation_name_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_idContext extends ParserRuleContext {
		public TerminalNode FILE_ID() { return getToken(OBParser.FILE_ID, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public File_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFile_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFile_id(this);
		}
	}

	public final File_idContext file_id() throws RecognitionException {
		File_idContext _localctx = new File_idContext(_ctx, getState());
		enterRule(_localctx, 1342, RULE_file_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10720);
			match(FILE_ID);
			setState(10722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(10721);
				match(COMP_EQ);
				}
			}

			setState(10724);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cancel_task_typeContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode MIGRATION() { return getToken(OBParser.MIGRATION, 0); }
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Cancel_task_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cancel_task_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCancel_task_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCancel_task_type(this);
		}
	}

	public final Cancel_task_typeContext cancel_task_type() throws RecognitionException {
		Cancel_task_typeContext _localctx = new Cancel_task_typeContext(_ctx, getState());
		enterRule(_localctx, 1344, RULE_cancel_task_type);
		try {
			setState(10729);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITION:
				enterOuterAlt(_localctx, 1);
				{
				setState(10726);
				match(PARTITION);
				setState(10727);
				match(MIGRATION);
				}
				break;
			case TASK:
				enterOuterAlt(_localctx, 2);
				{
				setState(10728);
				empty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_system_set_parameter_actionsContext extends ParserRuleContext {
		public List<Alter_system_set_parameter_actionContext> alter_system_set_parameter_action() {
			return getRuleContexts(Alter_system_set_parameter_actionContext.class);
		}
		public Alter_system_set_parameter_actionContext alter_system_set_parameter_action(int i) {
			return getRuleContext(Alter_system_set_parameter_actionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Alter_system_set_parameter_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_set_parameter_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_system_set_parameter_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_system_set_parameter_actions(this);
		}
	}

	public final Alter_system_set_parameter_actionsContext alter_system_set_parameter_actions() throws RecognitionException {
		Alter_system_set_parameter_actionsContext _localctx = new Alter_system_set_parameter_actionsContext(_ctx, getState());
		enterRule(_localctx, 1346, RULE_alter_system_set_parameter_actions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10731);
			alter_system_set_parameter_action();
			setState(10736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(10732);
				match(Comma);
				setState(10733);
				alter_system_set_parameter_action();
				}
				}
				setState(10738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_system_set_parameter_actionContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public List<TerminalNode> COMP_EQ() { return getTokens(OBParser.COMP_EQ); }
		public TerminalNode COMP_EQ(int i) {
			return getToken(OBParser.COMP_EQ, i);
		}
		public Conf_constContext conf_const() {
			return getRuleContext(Conf_constContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public List<TerminalNode> STRING_VALUE() { return getTokens(OBParser.STRING_VALUE); }
		public TerminalNode STRING_VALUE(int i) {
			return getToken(OBParser.STRING_VALUE, i);
		}
		public Server_or_zoneContext server_or_zone() {
			return getRuleContext(Server_or_zoneContext.class,0);
		}
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public TerminalNode SCOPE() { return getToken(OBParser.SCOPE, 0); }
		public TerminalNode MEMORY() { return getToken(OBParser.MEMORY, 0); }
		public TerminalNode SPFILE() { return getToken(OBParser.SPFILE, 0); }
		public TerminalNode BOTH() { return getToken(OBParser.BOTH, 0); }
		public TerminalNode TABLET_SIZE() { return getToken(OBParser.TABLET_SIZE, 0); }
		public TerminalNode CLUSTER_ID() { return getToken(OBParser.CLUSTER_ID, 0); }
		public TerminalNode ROOTSERVICE_LIST() { return getToken(OBParser.ROOTSERVICE_LIST, 0); }
		public TerminalNode BACKUP_BACKUP_DEST() { return getToken(OBParser.BACKUP_BACKUP_DEST, 0); }
		public TerminalNode OBCONFIG_URL() { return getToken(OBParser.OBCONFIG_URL, 0); }
		public TerminalNode LOG_DISK_SIZE() { return getToken(OBParser.LOG_DISK_SIZE, 0); }
		public TerminalNode LOG_RESTORE_SOURCE() { return getToken(OBParser.LOG_RESTORE_SOURCE, 0); }
		public Alter_system_set_parameter_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_set_parameter_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_system_set_parameter_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_system_set_parameter_action(this);
		}
	}

	public final Alter_system_set_parameter_actionContext alter_system_set_parameter_action() throws RecognitionException {
		Alter_system_set_parameter_actionContext _localctx = new Alter_system_set_parameter_actionContext(_ctx, getState());
		enterRule(_localctx, 1348, RULE_alter_system_set_parameter_action);
		int _la;
		try {
			setState(10931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(10739);
				match(NAME_OB);
				setState(10740);
				match(COMP_EQ);
				setState(10741);
				conf_const();
				setState(10744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10742);
					match(COMMENT);
					setState(10743);
					match(STRING_VALUE);
					}
				}

				setState(10755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1214,_ctx) ) {
				case 1:
					{
					{
					setState(10746);
					match(SCOPE);
					setState(10747);
					match(COMP_EQ);
					setState(10748);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10749);
					match(SCOPE);
					setState(10750);
					match(COMP_EQ);
					setState(10751);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10752);
					match(SCOPE);
					setState(10753);
					match(COMP_EQ);
					setState(10754);
					match(BOTH);
					}
					}
					break;
				}
				setState(10758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10757);
					server_or_zone();
					}
				}

				setState(10761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10760);
					tenant_name();
					}
				}

				}
				break;
			case TABLET_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10763);
				match(TABLET_SIZE);
				setState(10764);
				match(COMP_EQ);
				setState(10765);
				conf_const();
				setState(10768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10766);
					match(COMMENT);
					setState(10767);
					match(STRING_VALUE);
					}
				}

				setState(10779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1218,_ctx) ) {
				case 1:
					{
					{
					setState(10770);
					match(SCOPE);
					setState(10771);
					match(COMP_EQ);
					setState(10772);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10773);
					match(SCOPE);
					setState(10774);
					match(COMP_EQ);
					setState(10775);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10776);
					match(SCOPE);
					setState(10777);
					match(COMP_EQ);
					setState(10778);
					match(BOTH);
					}
					}
					break;
				}
				setState(10782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10781);
					server_or_zone();
					}
				}

				setState(10785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10784);
					tenant_name();
					}
				}

				}
				break;
			case CLUSTER_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(10787);
				match(CLUSTER_ID);
				setState(10788);
				match(COMP_EQ);
				setState(10789);
				conf_const();
				setState(10792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10790);
					match(COMMENT);
					setState(10791);
					match(STRING_VALUE);
					}
				}

				setState(10803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1222,_ctx) ) {
				case 1:
					{
					{
					setState(10794);
					match(SCOPE);
					setState(10795);
					match(COMP_EQ);
					setState(10796);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10797);
					match(SCOPE);
					setState(10798);
					match(COMP_EQ);
					setState(10799);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10800);
					match(SCOPE);
					setState(10801);
					match(COMP_EQ);
					setState(10802);
					match(BOTH);
					}
					}
					break;
				}
				setState(10806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10805);
					server_or_zone();
					}
				}

				setState(10809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10808);
					tenant_name();
					}
				}

				}
				break;
			case ROOTSERVICE_LIST:
				enterOuterAlt(_localctx, 4);
				{
				setState(10811);
				match(ROOTSERVICE_LIST);
				setState(10812);
				match(COMP_EQ);
				setState(10813);
				match(STRING_VALUE);
				setState(10816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10814);
					match(COMMENT);
					setState(10815);
					match(STRING_VALUE);
					}
				}

				setState(10827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1226,_ctx) ) {
				case 1:
					{
					{
					setState(10818);
					match(SCOPE);
					setState(10819);
					match(COMP_EQ);
					setState(10820);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10821);
					match(SCOPE);
					setState(10822);
					match(COMP_EQ);
					setState(10823);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10824);
					match(SCOPE);
					setState(10825);
					match(COMP_EQ);
					setState(10826);
					match(BOTH);
					}
					}
					break;
				}
				setState(10830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10829);
					server_or_zone();
					}
				}

				setState(10833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10832);
					tenant_name();
					}
				}

				}
				break;
			case BACKUP_BACKUP_DEST:
				enterOuterAlt(_localctx, 5);
				{
				setState(10835);
				match(BACKUP_BACKUP_DEST);
				setState(10836);
				match(COMP_EQ);
				setState(10837);
				match(STRING_VALUE);
				setState(10840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10838);
					match(COMMENT);
					setState(10839);
					match(STRING_VALUE);
					}
				}

				setState(10851);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1230,_ctx) ) {
				case 1:
					{
					{
					setState(10842);
					match(SCOPE);
					setState(10843);
					match(COMP_EQ);
					setState(10844);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10845);
					match(SCOPE);
					setState(10846);
					match(COMP_EQ);
					setState(10847);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10848);
					match(SCOPE);
					setState(10849);
					match(COMP_EQ);
					setState(10850);
					match(BOTH);
					}
					}
					break;
				}
				setState(10854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10853);
					server_or_zone();
					}
				}

				setState(10857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10856);
					tenant_name();
					}
				}

				}
				break;
			case OBCONFIG_URL:
				enterOuterAlt(_localctx, 6);
				{
				setState(10859);
				match(OBCONFIG_URL);
				setState(10860);
				match(COMP_EQ);
				setState(10861);
				match(STRING_VALUE);
				setState(10864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10862);
					match(COMMENT);
					setState(10863);
					match(STRING_VALUE);
					}
				}

				setState(10875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1234,_ctx) ) {
				case 1:
					{
					{
					setState(10866);
					match(SCOPE);
					setState(10867);
					match(COMP_EQ);
					setState(10868);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10869);
					match(SCOPE);
					setState(10870);
					match(COMP_EQ);
					setState(10871);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10872);
					match(SCOPE);
					setState(10873);
					match(COMP_EQ);
					setState(10874);
					match(BOTH);
					}
					}
					break;
				}
				setState(10878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10877);
					server_or_zone();
					}
				}

				setState(10881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10880);
					tenant_name();
					}
				}

				}
				break;
			case LOG_DISK_SIZE:
				enterOuterAlt(_localctx, 7);
				{
				setState(10883);
				match(LOG_DISK_SIZE);
				setState(10884);
				match(COMP_EQ);
				setState(10885);
				match(STRING_VALUE);
				setState(10888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10886);
					match(COMMENT);
					setState(10887);
					match(STRING_VALUE);
					}
				}

				setState(10899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1238,_ctx) ) {
				case 1:
					{
					{
					setState(10890);
					match(SCOPE);
					setState(10891);
					match(COMP_EQ);
					setState(10892);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10893);
					match(SCOPE);
					setState(10894);
					match(COMP_EQ);
					setState(10895);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10896);
					match(SCOPE);
					setState(10897);
					match(COMP_EQ);
					setState(10898);
					match(BOTH);
					}
					}
					break;
				}
				setState(10902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10901);
					server_or_zone();
					}
				}

				setState(10905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10904);
					tenant_name();
					}
				}

				}
				break;
			case LOG_RESTORE_SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(10907);
				match(LOG_RESTORE_SOURCE);
				setState(10908);
				match(COMP_EQ);
				setState(10909);
				match(STRING_VALUE);
				setState(10912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(10910);
					match(COMMENT);
					setState(10911);
					match(STRING_VALUE);
					}
				}

				setState(10923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1242,_ctx) ) {
				case 1:
					{
					{
					setState(10914);
					match(SCOPE);
					setState(10915);
					match(COMP_EQ);
					setState(10916);
					match(MEMORY);
					}
					}
					break;
				case 2:
					{
					{
					setState(10917);
					match(SCOPE);
					setState(10918);
					match(COMP_EQ);
					setState(10919);
					match(SPFILE);
					}
					}
					break;
				case 3:
					{
					{
					setState(10920);
					match(SCOPE);
					setState(10921);
					match(COMP_EQ);
					setState(10922);
					match(BOTH);
					}
					}
					break;
				}
				setState(10926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SERVER || _la==ZONE || _la==HOST) {
					{
					setState(10925);
					server_or_zone();
					}
				}

				setState(10929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TENANT) {
					{
					setState(10928);
					tenant_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_system_settp_actionsContext extends ParserRuleContext {
		public Settp_optionContext settp_option() {
			return getRuleContext(Settp_optionContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Alter_system_settp_actionsContext alter_system_settp_actions() {
			return getRuleContext(Alter_system_settp_actionsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Alter_system_settp_actionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_settp_actions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_system_settp_actions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_system_settp_actions(this);
		}
	}

	public final Alter_system_settp_actionsContext alter_system_settp_actions() throws RecognitionException {
		return alter_system_settp_actions(0);
	}

	private Alter_system_settp_actionsContext alter_system_settp_actions(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_system_settp_actionsContext _localctx = new Alter_system_settp_actionsContext(_ctx, _parentState);
		Alter_system_settp_actionsContext _prevctx = _localctx;
		int _startState = 1350;
		enterRecursionRule(_localctx, 1350, RULE_alter_system_settp_actions, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
			case 1:
				{
				setState(10934);
				settp_option();
				}
				break;
			case 2:
				{
				setState(10935);
				empty();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(10943);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1247,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Alter_system_settp_actionsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_alter_system_settp_actions);
					setState(10938);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(10939);
					match(Comma);
					setState(10940);
					settp_option();
					}
					} 
				}
				setState(10945);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1247,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Settp_optionContext extends ParserRuleContext {
		public TerminalNode TP_NO() { return getToken(OBParser.TP_NO, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode TP_NAME() { return getToken(OBParser.TP_NAME, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public TerminalNode OCCUR() { return getToken(OBParser.OCCUR, 0); }
		public TerminalNode FREQUENCY() { return getToken(OBParser.FREQUENCY, 0); }
		public TerminalNode ERROR_CODE() { return getToken(OBParser.ERROR_CODE, 0); }
		public TerminalNode MATCH() { return getToken(OBParser.MATCH, 0); }
		public Settp_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_settp_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSettp_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSettp_option(this);
		}
	}

	public final Settp_optionContext settp_option() throws RecognitionException {
		Settp_optionContext _localctx = new Settp_optionContext(_ctx, getState());
		enterRule(_localctx, 1352, RULE_settp_option);
		int _la;
		try {
			setState(10976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TP_NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(10946);
				match(TP_NO);
				setState(10948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10947);
					match(COMP_EQ);
					}
				}

				setState(10950);
				match(INTNUM);
				}
				break;
			case TP_NAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(10951);
				match(TP_NAME);
				setState(10953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10952);
					match(COMP_EQ);
					}
				}

				setState(10955);
				relation_name_or_string();
				}
				break;
			case OCCUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(10956);
				match(OCCUR);
				setState(10958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10957);
					match(COMP_EQ);
					}
				}

				setState(10960);
				match(INTNUM);
				}
				break;
			case FREQUENCY:
				enterOuterAlt(_localctx, 4);
				{
				setState(10961);
				match(FREQUENCY);
				setState(10963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10962);
					match(COMP_EQ);
					}
				}

				setState(10965);
				match(INTNUM);
				}
				break;
			case ERROR_CODE:
				enterOuterAlt(_localctx, 5);
				{
				setState(10966);
				match(ERROR_CODE);
				setState(10968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10967);
					match(COMP_EQ);
					}
				}

				setState(10970);
				match(INTNUM);
				}
				break;
			case MATCH:
				enterOuterAlt(_localctx, 6);
				{
				setState(10971);
				match(MATCH);
				setState(10973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(10972);
					match(COMP_EQ);
					}
				}

				setState(10975);
				match(INTNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_roleContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public Cluster_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCluster_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCluster_role(this);
		}
	}

	public final Cluster_roleContext cluster_role() throws RecognitionException {
		Cluster_roleContext _localctx = new Cluster_roleContext(_ctx, getState());
		enterRule(_localctx, 1354, RULE_cluster_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10978);
			_la = _input.LA(1);
			if ( !(_la==PRIMARY || _la==STANDBY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_roleContext extends ParserRuleContext {
		public TerminalNode LEADER() { return getToken(OBParser.LEADER, 0); }
		public TerminalNode FOLLOWER() { return getToken(OBParser.FOLLOWER, 0); }
		public Partition_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPartition_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPartition_role(this);
		}
	}

	public final Partition_roleContext partition_role() throws RecognitionException {
		Partition_roleContext _localctx = new Partition_roleContext(_ctx, getState());
		enterRule(_localctx, 1356, RULE_partition_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10980);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWER || _la==LEADER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ls_roleContext extends ParserRuleContext {
		public TerminalNode LEADER() { return getToken(OBParser.LEADER, 0); }
		public TerminalNode FOLLOWER() { return getToken(OBParser.FOLLOWER, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Ls_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ls_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLs_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLs_role(this);
		}
	}

	public final Ls_roleContext ls_role() throws RecognitionException {
		Ls_roleContext _localctx = new Ls_roleContext(_ctx, getState());
		enterRule(_localctx, 1358, RULE_ls_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10982);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==FOLLOWER || _la==LEADER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upgrade_actionContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(OBParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(OBParser.END, 0); }
		public Upgrade_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upgrade_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUpgrade_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUpgrade_action(this);
		}
	}

	public final Upgrade_actionContext upgrade_action() throws RecognitionException {
		Upgrade_actionContext _localctx = new Upgrade_actionContext(_ctx, getState());
		enterRule(_localctx, 1360, RULE_upgrade_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10984);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==END) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mock_stmtContext extends ParserRuleContext {
		public Install_plugin_stmtContext install_plugin_stmt() {
			return getRuleContext(Install_plugin_stmtContext.class,0);
		}
		public Uninstall_plugin_stmtContext uninstall_plugin_stmt() {
			return getRuleContext(Uninstall_plugin_stmtContext.class,0);
		}
		public Flush_stmtContext flush_stmt() {
			return getRuleContext(Flush_stmtContext.class,0);
		}
		public Handler_stmtContext handler_stmt() {
			return getRuleContext(Handler_stmtContext.class,0);
		}
		public Show_plugin_stmtContext show_plugin_stmt() {
			return getRuleContext(Show_plugin_stmtContext.class,0);
		}
		public Create_server_stmtContext create_server_stmt() {
			return getRuleContext(Create_server_stmtContext.class,0);
		}
		public Alter_server_stmtContext alter_server_stmt() {
			return getRuleContext(Alter_server_stmtContext.class,0);
		}
		public Drop_server_stmtContext drop_server_stmt() {
			return getRuleContext(Drop_server_stmtContext.class,0);
		}
		public Create_logfile_group_stmtContext create_logfile_group_stmt() {
			return getRuleContext(Create_logfile_group_stmtContext.class,0);
		}
		public Alter_logfile_group_stmtContext alter_logfile_group_stmt() {
			return getRuleContext(Alter_logfile_group_stmtContext.class,0);
		}
		public Drop_logfile_group_stmtContext drop_logfile_group_stmt() {
			return getRuleContext(Drop_logfile_group_stmtContext.class,0);
		}
		public Mock_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mock_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMock_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMock_stmt(this);
		}
	}

	public final Mock_stmtContext mock_stmt() throws RecognitionException {
		Mock_stmtContext _localctx = new Mock_stmtContext(_ctx, getState());
		enterRule(_localctx, 1362, RULE_mock_stmt);
		try {
			setState(10997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10986);
				install_plugin_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10987);
				uninstall_plugin_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10988);
				flush_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10989);
				handler_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10990);
				show_plugin_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10991);
				create_server_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10992);
				alter_server_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10993);
				drop_server_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10994);
				create_logfile_group_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10995);
				alter_logfile_group_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10996);
				drop_logfile_group_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plugin_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Plugin_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plugin_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterPlugin_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitPlugin_name(this);
		}
	}

	public final Plugin_nameContext plugin_name() throws RecognitionException {
		Plugin_nameContext _localctx = new Plugin_nameContext(_ctx, getState());
		enterRule(_localctx, 1364, RULE_plugin_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10999);
			match(NAME_OB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Install_plugin_stmtContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(OBParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(OBParser.PLUGIN, 0); }
		public Plugin_nameContext plugin_name() {
			return getRuleContext(Plugin_nameContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(OBParser.SONAME, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Install_plugin_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_install_plugin_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterInstall_plugin_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitInstall_plugin_stmt(this);
		}
	}

	public final Install_plugin_stmtContext install_plugin_stmt() throws RecognitionException {
		Install_plugin_stmtContext _localctx = new Install_plugin_stmtContext(_ctx, getState());
		enterRule(_localctx, 1366, RULE_install_plugin_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11001);
			match(INSTALL);
			setState(11002);
			match(PLUGIN);
			setState(11003);
			plugin_name();
			setState(11004);
			match(SONAME);
			setState(11005);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Uninstall_plugin_stmtContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(OBParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(OBParser.PLUGIN, 0); }
		public Plugin_nameContext plugin_name() {
			return getRuleContext(Plugin_nameContext.class,0);
		}
		public Uninstall_plugin_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstall_plugin_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUninstall_plugin_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUninstall_plugin_stmt(this);
		}
	}

	public final Uninstall_plugin_stmtContext uninstall_plugin_stmt() throws RecognitionException {
		Uninstall_plugin_stmtContext _localctx = new Uninstall_plugin_stmtContext(_ctx, getState());
		enterRule(_localctx, 1368, RULE_uninstall_plugin_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11007);
			match(UNINSTALL);
			setState(11008);
			match(PLUGIN);
			setState(11009);
			plugin_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_stmtContext extends ParserRuleContext {
		public TerminalNode FLUSH() { return getToken(OBParser.FLUSH, 0); }
		public Flush_optionsContext flush_options() {
			return getRuleContext(Flush_optionsContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(OBParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public Flush_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFlush_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFlush_stmt(this);
		}
	}

	public final Flush_stmtContext flush_stmt() throws RecognitionException {
		Flush_stmtContext _localctx = new Flush_stmtContext(_ctx, getState());
		enterRule(_localctx, 1370, RULE_flush_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11011);
			match(FLUSH);
			setState(11013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(11012);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(11015);
			flush_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_optionsContext extends ParserRuleContext {
		public Flush_options_listContext flush_options_list() {
			return getRuleContext(Flush_options_listContext.class,0);
		}
		public Flush_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFlush_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFlush_options(this);
		}
	}

	public final Flush_optionsContext flush_options() throws RecognitionException {
		Flush_optionsContext _localctx = new Flush_optionsContext(_ctx, getState());
		enterRule(_localctx, 1372, RULE_flush_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11017);
			flush_options_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_options_listContext extends ParserRuleContext {
		public List<Flush_optionContext> flush_option() {
			return getRuleContexts(Flush_optionContext.class);
		}
		public Flush_optionContext flush_option(int i) {
			return getRuleContext(Flush_optionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Flush_options_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_options_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFlush_options_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFlush_options_list(this);
		}
	}

	public final Flush_options_listContext flush_options_list() throws RecognitionException {
		Flush_options_listContext _localctx = new Flush_options_listContext(_ctx, getState());
		enterRule(_localctx, 1374, RULE_flush_options_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11019);
			flush_option();
			setState(11024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(11020);
				match(Comma);
				setState(11021);
				flush_option();
				}
				}
				setState(11026);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flush_optionContext extends ParserRuleContext {
		public TerminalNode LOGS() { return getToken(OBParser.LOGS, 0); }
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public TerminalNode GENERAL() { return getToken(OBParser.GENERAL, 0); }
		public TerminalNode SLOW() { return getToken(OBParser.SLOW, 0); }
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public TerminalNode RELAY() { return getToken(OBParser.RELAY, 0); }
		public TerminalNode LOG() { return getToken(OBParser.LOG, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode QUERY() { return getToken(OBParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(OBParser.CACHE, 0); }
		public TerminalNode HOSTS() { return getToken(OBParser.HOSTS, 0); }
		public TerminalNode STATUS() { return getToken(OBParser.STATUS, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(OBParser.DES_KEY_FILE, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(OBParser.USER_RESOURCES, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(OBParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OBParser.PRIVILEGES, 0); }
		public Flush_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFlush_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFlush_option(this);
		}
	}

	public final Flush_optionContext flush_option() throws RecognitionException {
		Flush_optionContext _localctx = new Flush_optionContext(_ctx, getState());
		enterRule(_localctx, 1376, RULE_flush_option);
		int _la;
		try {
			setState(11053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_P:
			case LOGS:
				enterOuterAlt(_localctx, 1);
				{
				setState(11028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR_P) {
					{
					setState(11027);
					match(ERROR_P);
					}
				}

				setState(11030);
				match(LOGS);
				}
				break;
			case ENGINE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(11031);
				match(ENGINE_);
				setState(11032);
				match(LOGS);
				}
				break;
			case GENERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(11033);
				match(GENERAL);
				setState(11034);
				match(LOGS);
				}
				break;
			case SLOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(11035);
				match(SLOW);
				setState(11036);
				match(LOGS);
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 5);
				{
				setState(11037);
				match(BINARY);
				setState(11038);
				match(LOGS);
				}
				break;
			case RELAY:
				enterOuterAlt(_localctx, 6);
				{
				setState(11039);
				match(RELAY);
				setState(11043);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOG:
					{
					setState(11040);
					match(LOG);
					setState(11041);
					match(NAME_OB);
					}
					break;
				case LOGS:
					{
					setState(11042);
					match(LOGS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case QUERY:
				enterOuterAlt(_localctx, 7);
				{
				setState(11045);
				match(QUERY);
				setState(11046);
				match(CACHE);
				}
				break;
			case HOSTS:
				enterOuterAlt(_localctx, 8);
				{
				setState(11047);
				match(HOSTS);
				}
				break;
			case STATUS:
				enterOuterAlt(_localctx, 9);
				{
				setState(11048);
				match(STATUS);
				}
				break;
			case DES_KEY_FILE:
				enterOuterAlt(_localctx, 10);
				{
				setState(11049);
				match(DES_KEY_FILE);
				}
				break;
			case USER_RESOURCES:
				enterOuterAlt(_localctx, 11);
				{
				setState(11050);
				match(USER_RESOURCES);
				}
				break;
			case OPTIMIZER_COSTS:
				enterOuterAlt(_localctx, 12);
				{
				setState(11051);
				match(OPTIMIZER_COSTS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 13);
				{
				setState(11052);
				match(PRIVILEGES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_stmtContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(OBParser.HANDLER, 0); }
		public List<Relation_nameContext> relation_name() {
			return getRuleContexts(Relation_nameContext.class);
		}
		public Relation_nameContext relation_name(int i) {
			return getRuleContext(Relation_nameContext.class,i);
		}
		public TerminalNode OPEN() { return getToken(OBParser.OPEN, 0); }
		public TerminalNode CLOSE() { return getToken(OBParser.CLOSE, 0); }
		public TerminalNode READ() { return getToken(OBParser.READ, 0); }
		public Handler_read_or_scanContext handler_read_or_scan() {
			return getRuleContext(Handler_read_or_scanContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public Opt_hint_valueContext opt_hint_value() {
			return getRuleContext(Opt_hint_valueContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(OBParser.LIMIT, 0); }
		public List<TerminalNode> INTNUM() { return getTokens(OBParser.INTNUM); }
		public TerminalNode INTNUM(int i) {
			return getToken(OBParser.INTNUM, i);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Handler_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHandler_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHandler_stmt(this);
		}
	}

	public final Handler_stmtContext handler_stmt() throws RecognitionException {
		Handler_stmtContext _localctx = new Handler_stmtContext(_ctx, getState());
		enterRule(_localctx, 1378, RULE_handler_stmt);
		int _la;
		try {
			setState(11087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11055);
				match(HANDLER);
				setState(11056);
				relation_name();
				setState(11057);
				match(OPEN);
				setState(11059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (ACCESS - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (EVENT - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (FILEX - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (PROCESS - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (RELOAD - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (SHUTDOWN - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (REPLICATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (SUPER - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (PASSWORD - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (RESOURCE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (PROXY - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (NONE - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (EXECUTE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || _la==NAME_OB || _la==STAT || ((((_la - 1248)) & ~0x3f) == 0 && ((1L << (_la - 1248)) & ((1L << (ALL_META - 1248)) | (1L << (ALL_USER - 1248)) | (1L << (BEGI - 1248)) | (1L << (REMAP - 1248)) | (1L << (HIDDEN - 1248)))) != 0)) {
					{
					setState(11058);
					relation_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11061);
				match(HANDLER);
				setState(11062);
				relation_name();
				setState(11063);
				match(CLOSE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11065);
				match(HANDLER);
				setState(11066);
				relation_name();
				setState(11067);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11069);
				match(HANDLER);
				setState(11070);
				relation_name();
				setState(11071);
				match(READ);
				setState(11072);
				handler_read_or_scan();
				setState(11077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(11073);
					match(WHERE);
					setState(11074);
					opt_hint_value();
					setState(11075);
					expr(0);
					}
				}

				setState(11085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1263,_ctx) ) {
				case 1:
					{
					{
					setState(11079);
					match(LIMIT);
					setState(11080);
					match(INTNUM);
					setState(11081);
					match(Comma);
					setState(11082);
					match(INTNUM);
					}
					}
					break;
				case 2:
					{
					{
					setState(11083);
					match(LIMIT);
					setState(11084);
					match(INTNUM);
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_read_or_scanContext extends ParserRuleContext {
		public Handler_scan_functionContext handler_scan_function() {
			return getRuleContext(Handler_scan_functionContext.class,0);
		}
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Handler_rkey_functionContext handler_rkey_function() {
			return getRuleContext(Handler_rkey_functionContext.class,0);
		}
		public Handler_read_or_scanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_read_or_scan; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHandler_read_or_scan(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHandler_read_or_scan(this);
		}
	}

	public final Handler_read_or_scanContext handler_read_or_scan() throws RecognitionException {
		Handler_read_or_scanContext _localctx = new Handler_read_or_scanContext(_ctx, getState());
		enterRule(_localctx, 1380, RULE_handler_read_or_scan);
		try {
			setState(11092);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
			case NEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(11089);
				handler_scan_function();
				}
				break;
			case NAME_OB:
				enterOuterAlt(_localctx, 2);
				{
				setState(11090);
				match(NAME_OB);
				setState(11091);
				handler_rkey_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_scan_functionContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(OBParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(OBParser.NEXT, 0); }
		public Handler_scan_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_scan_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHandler_scan_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHandler_scan_function(this);
		}
	}

	public final Handler_scan_functionContext handler_scan_function() throws RecognitionException {
		Handler_scan_functionContext _localctx = new Handler_scan_functionContext(_ctx, getState());
		enterRule(_localctx, 1382, RULE_handler_scan_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11094);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_rkey_functionContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(OBParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(OBParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(OBParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(OBParser.LAST, 0); }
		public Handler_rkey_modeContext handler_rkey_mode() {
			return getRuleContext(Handler_rkey_modeContext.class,0);
		}
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Handler_rkey_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_rkey_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHandler_rkey_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHandler_rkey_function(this);
		}
	}

	public final Handler_rkey_functionContext handler_rkey_function() throws RecognitionException {
		Handler_rkey_functionContext _localctx = new Handler_rkey_functionContext(_ctx, getState());
		enterRule(_localctx, 1384, RULE_handler_rkey_function);
		try {
			setState(11105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(11096);
				match(FIRST);
				}
				break;
			case NEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11097);
				match(NEXT);
				}
				break;
			case PREV:
				enterOuterAlt(_localctx, 3);
				{
				setState(11098);
				match(PREV);
				}
				break;
			case LAST:
				enterOuterAlt(_localctx, 4);
				{
				setState(11099);
				match(LAST);
				}
				break;
			case COMP_EQ:
			case COMP_GE:
			case COMP_GT:
			case COMP_LE:
			case COMP_LT:
				enterOuterAlt(_localctx, 5);
				{
				setState(11100);
				handler_rkey_mode();
				setState(11101);
				match(LeftParen);
				setState(11102);
				expr_list();
				setState(11103);
				match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Handler_rkey_modeContext extends ParserRuleContext {
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode COMP_GE() { return getToken(OBParser.COMP_GE, 0); }
		public TerminalNode COMP_LE() { return getToken(OBParser.COMP_LE, 0); }
		public TerminalNode COMP_GT() { return getToken(OBParser.COMP_GT, 0); }
		public TerminalNode COMP_LT() { return getToken(OBParser.COMP_LT, 0); }
		public Handler_rkey_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handler_rkey_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterHandler_rkey_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitHandler_rkey_mode(this);
		}
	}

	public final Handler_rkey_modeContext handler_rkey_mode() throws RecognitionException {
		Handler_rkey_modeContext _localctx = new Handler_rkey_modeContext(_ctx, getState());
		enterRule(_localctx, 1386, RULE_handler_rkey_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11107);
			_la = _input.LA(1);
			if ( !(((((_la - 1169)) & ~0x3f) == 0 && ((1L << (_la - 1169)) & ((1L << (COMP_EQ - 1169)) | (1L << (COMP_GE - 1169)) | (1L << (COMP_GT - 1169)) | (1L << (COMP_LE - 1169)) | (1L << (COMP_LT - 1169)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_plugin_stmtContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(OBParser.SHOW, 0); }
		public TerminalNode PLUGINS() { return getToken(OBParser.PLUGINS, 0); }
		public Show_plugin_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_plugin_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterShow_plugin_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitShow_plugin_stmt(this);
		}
	}

	public final Show_plugin_stmtContext show_plugin_stmt() throws RecognitionException {
		Show_plugin_stmtContext _localctx = new Show_plugin_stmtContext(_ctx, getState());
		enterRule(_localctx, 1388, RULE_show_plugin_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11109);
			match(SHOW);
			setState(11110);
			match(PLUGINS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public List<TerminalNode> NAME_OB() { return getTokens(OBParser.NAME_OB); }
		public TerminalNode NAME_OB(int i) {
			return getToken(OBParser.NAME_OB, i);
		}
		public TerminalNode FOREIGN() { return getToken(OBParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(OBParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(OBParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(OBParser.OPTIONS, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Server_options_listContext server_options_list() {
			return getRuleContext(Server_options_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Create_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_server_stmt(this);
		}
	}

	public final Create_server_stmtContext create_server_stmt() throws RecognitionException {
		Create_server_stmtContext _localctx = new Create_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 1390, RULE_create_server_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11112);
			match(CREATE);
			setState(11113);
			match(SERVER);
			setState(11114);
			match(NAME_OB);
			setState(11115);
			match(FOREIGN);
			setState(11116);
			match(DATA);
			setState(11117);
			match(WRAPPER);
			setState(11118);
			match(NAME_OB);
			setState(11119);
			match(OPTIONS);
			setState(11120);
			match(LeftParen);
			setState(11121);
			server_options_list();
			setState(11122);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_options_listContext extends ParserRuleContext {
		public List<Server_optionContext> server_option() {
			return getRuleContexts(Server_optionContext.class);
		}
		public Server_optionContext server_option(int i) {
			return getRuleContext(Server_optionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Server_options_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_options_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_options_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_options_list(this);
		}
	}

	public final Server_options_listContext server_options_list() throws RecognitionException {
		Server_options_listContext _localctx = new Server_options_listContext(_ctx, getState());
		enterRule(_localctx, 1392, RULE_server_options_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11124);
			server_option();
			setState(11129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(11125);
				match(Comma);
				setState(11126);
				server_option();
				}
				}
				setState(11131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Server_optionContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode HOST() { return getToken(OBParser.HOST, 0); }
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode OWNER() { return getToken(OBParser.OWNER, 0); }
		public TerminalNode PASSWORD() { return getToken(OBParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(OBParser.SOCKET, 0); }
		public TerminalNode PORT() { return getToken(OBParser.PORT, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Server_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_server_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterServer_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitServer_option(this);
		}
	}

	public final Server_optionContext server_option() throws RecognitionException {
		Server_optionContext _localctx = new Server_optionContext(_ctx, getState());
		enterRule(_localctx, 1394, RULE_server_option);
		try {
			setState(11146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				enterOuterAlt(_localctx, 1);
				{
				setState(11132);
				match(USER);
				setState(11133);
				match(STRING_VALUE);
				}
				break;
			case HOST:
				enterOuterAlt(_localctx, 2);
				{
				setState(11134);
				match(HOST);
				setState(11135);
				match(STRING_VALUE);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 3);
				{
				setState(11136);
				match(DATABASE);
				setState(11137);
				match(STRING_VALUE);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 4);
				{
				setState(11138);
				match(OWNER);
				setState(11139);
				match(STRING_VALUE);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 5);
				{
				setState(11140);
				match(PASSWORD);
				setState(11141);
				match(STRING_VALUE);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 6);
				{
				setState(11142);
				match(SOCKET);
				setState(11143);
				match(STRING_VALUE);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(11144);
				match(PORT);
				setState(11145);
				match(INTNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode OPTIONS() { return getToken(OBParser.OPTIONS, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Server_options_listContext server_options_list() {
			return getRuleContext(Server_options_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public Alter_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_server_stmt(this);
		}
	}

	public final Alter_server_stmtContext alter_server_stmt() throws RecognitionException {
		Alter_server_stmtContext _localctx = new Alter_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 1396, RULE_alter_server_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11148);
			match(ALTER);
			setState(11149);
			match(SERVER);
			setState(11150);
			match(NAME_OB);
			setState(11151);
			match(OPTIONS);
			setState(11152);
			match(LeftParen);
			setState(11153);
			server_options_list();
			setState(11154);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public Drop_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_server_stmt(this);
		}
	}

	public final Drop_server_stmtContext drop_server_stmt() throws RecognitionException {
		Drop_server_stmtContext _localctx = new Drop_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 1398, RULE_drop_server_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11156);
			match(DROP);
			setState(11157);
			match(SERVER);
			setState(11160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(11158);
				match(IF);
				setState(11159);
				match(EXISTS);
				}
			}

			setState(11162);
			match(NAME_OB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_logfile_group_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(OBParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public Logfile_group_infoContext logfile_group_info() {
			return getRuleContext(Logfile_group_infoContext.class,0);
		}
		public Create_logfile_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_logfile_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_logfile_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_logfile_group_stmt(this);
		}
	}

	public final Create_logfile_group_stmtContext create_logfile_group_stmt() throws RecognitionException {
		Create_logfile_group_stmtContext _localctx = new Create_logfile_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 1400, RULE_create_logfile_group_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11164);
			match(CREATE);
			setState(11165);
			match(LOGFILE);
			setState(11166);
			match(GROUP);
			setState(11167);
			logfile_group_info();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logfile_group_infoContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Add_log_fileContext add_log_file() {
			return getRuleContext(Add_log_fileContext.class,0);
		}
		public Logfile_group_option_listContext logfile_group_option_list() {
			return getRuleContext(Logfile_group_option_listContext.class,0);
		}
		public Logfile_group_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfile_group_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLogfile_group_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLogfile_group_info(this);
		}
	}

	public final Logfile_group_infoContext logfile_group_info() throws RecognitionException {
		Logfile_group_infoContext _localctx = new Logfile_group_infoContext(_ctx, getState());
		enterRule(_localctx, 1402, RULE_logfile_group_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11169);
			match(NAME_OB);
			setState(11170);
			add_log_file();
			setState(11171);
			logfile_group_option_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_log_fileContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public Lg_undofileContext lg_undofile() {
			return getRuleContext(Lg_undofileContext.class,0);
		}
		public Lg_redofileContext lg_redofile() {
			return getRuleContext(Lg_redofileContext.class,0);
		}
		public Add_log_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_log_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAdd_log_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAdd_log_file(this);
		}
	}

	public final Add_log_fileContext add_log_file() throws RecognitionException {
		Add_log_fileContext _localctx = new Add_log_fileContext(_ctx, getState());
		enterRule(_localctx, 1404, RULE_add_log_file);
		try {
			setState(11177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11173);
				match(ADD);
				setState(11174);
				lg_undofile();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11175);
				match(ADD);
				setState(11176);
				lg_redofile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lg_undofileContext extends ParserRuleContext {
		public TerminalNode UNDOFILE() { return getToken(OBParser.UNDOFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Lg_undofileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lg_undofile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLg_undofile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLg_undofile(this);
		}
	}

	public final Lg_undofileContext lg_undofile() throws RecognitionException {
		Lg_undofileContext _localctx = new Lg_undofileContext(_ctx, getState());
		enterRule(_localctx, 1406, RULE_lg_undofile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11179);
			match(UNDOFILE);
			setState(11180);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lg_redofileContext extends ParserRuleContext {
		public TerminalNode REDOFILE() { return getToken(OBParser.REDOFILE, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Lg_redofileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lg_redofile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLg_redofile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLg_redofile(this);
		}
	}

	public final Lg_redofileContext lg_redofile() throws RecognitionException {
		Lg_redofileContext _localctx = new Lg_redofileContext(_ctx, getState());
		enterRule(_localctx, 1408, RULE_lg_redofile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11182);
			match(REDOFILE);
			setState(11183);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logfile_group_option_listContext extends ParserRuleContext {
		public Logfile_group_optionsContext logfile_group_options() {
			return getRuleContext(Logfile_group_optionsContext.class,0);
		}
		public Logfile_group_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfile_group_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLogfile_group_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLogfile_group_option_list(this);
		}
	}

	public final Logfile_group_option_listContext logfile_group_option_list() throws RecognitionException {
		Logfile_group_option_listContext _localctx = new Logfile_group_option_listContext(_ctx, getState());
		enterRule(_localctx, 1410, RULE_logfile_group_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 491)) & ~0x3f) == 0 && ((1L << (_la - 491)) & ((1L << (COMMENT - 491)) | (1L << (WAIT - 491)) | (1L << (ENGINE_ - 491)) | (1L << (REDO_BUFFER_SIZE - 491)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (STORAGE - 714)))) != 0) || _la==UNDO_BUFFER_SIZE || _la==INITIAL_SIZE) {
				{
				setState(11185);
				logfile_group_options(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logfile_group_optionsContext extends ParserRuleContext {
		public Logfile_group_optionContext logfile_group_option() {
			return getRuleContext(Logfile_group_optionContext.class,0);
		}
		public Logfile_group_optionsContext logfile_group_options() {
			return getRuleContext(Logfile_group_optionsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Logfile_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfile_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLogfile_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLogfile_group_options(this);
		}
	}

	public final Logfile_group_optionsContext logfile_group_options() throws RecognitionException {
		return logfile_group_options(0);
	}

	private Logfile_group_optionsContext logfile_group_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logfile_group_optionsContext _localctx = new Logfile_group_optionsContext(_ctx, _parentState);
		Logfile_group_optionsContext _prevctx = _localctx;
		int _startState = 1412;
		enterRecursionRule(_localctx, 1412, RULE_logfile_group_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11189);
			logfile_group_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(11198);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1273,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(11196);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1272,_ctx) ) {
					case 1:
						{
						_localctx = new Logfile_group_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logfile_group_options);
						setState(11191);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(11192);
						logfile_group_option();
						}
						break;
					case 2:
						{
						_localctx = new Logfile_group_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logfile_group_options);
						setState(11193);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(11194);
						match(Comma);
						setState(11195);
						logfile_group_option();
						}
						break;
					}
					} 
				}
				setState(11200);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1273,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logfile_group_optionContext extends ParserRuleContext {
		public Opt_ts_initial_sizeContext opt_ts_initial_size() {
			return getRuleContext(Opt_ts_initial_sizeContext.class,0);
		}
		public Opt_ts_undo_buffer_sizeContext opt_ts_undo_buffer_size() {
			return getRuleContext(Opt_ts_undo_buffer_sizeContext.class,0);
		}
		public Opt_ts_redo_buffer_sizeContext opt_ts_redo_buffer_size() {
			return getRuleContext(Opt_ts_redo_buffer_sizeContext.class,0);
		}
		public Opt_ts_nodegroupContext opt_ts_nodegroup() {
			return getRuleContext(Opt_ts_nodegroupContext.class,0);
		}
		public Opt_ts_engineContext opt_ts_engine() {
			return getRuleContext(Opt_ts_engineContext.class,0);
		}
		public Ts_waitContext ts_wait() {
			return getRuleContext(Ts_waitContext.class,0);
		}
		public Opt_ts_commentContext opt_ts_comment() {
			return getRuleContext(Opt_ts_commentContext.class,0);
		}
		public Logfile_group_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfile_group_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLogfile_group_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLogfile_group_option(this);
		}
	}

	public final Logfile_group_optionContext logfile_group_option() throws RecognitionException {
		Logfile_group_optionContext _localctx = new Logfile_group_optionContext(_ctx, getState());
		enterRule(_localctx, 1414, RULE_logfile_group_option);
		try {
			setState(11208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(11201);
				opt_ts_initial_size();
				}
				break;
			case UNDO_BUFFER_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11202);
				opt_ts_undo_buffer_size();
				}
				break;
			case REDO_BUFFER_SIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(11203);
				opt_ts_redo_buffer_size();
				}
				break;
			case NODEGROUP:
				enterOuterAlt(_localctx, 4);
				{
				setState(11204);
				opt_ts_nodegroup();
				}
				break;
			case ENGINE_:
			case STORAGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(11205);
				opt_ts_engine();
				}
				break;
			case WAIT:
			case NO_WAIT:
				enterOuterAlt(_localctx, 6);
				{
				setState(11206);
				ts_wait();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 7);
				{
				setState(11207);
				opt_ts_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ts_initial_sizeContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE() { return getToken(OBParser.INITIAL_SIZE, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Opt_ts_initial_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ts_initial_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_ts_initial_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_ts_initial_size(this);
		}
	}

	public final Opt_ts_initial_sizeContext opt_ts_initial_size() throws RecognitionException {
		Opt_ts_initial_sizeContext _localctx = new Opt_ts_initial_sizeContext(_ctx, getState());
		enterRule(_localctx, 1416, RULE_opt_ts_initial_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11210);
			match(INITIAL_SIZE);
			setState(11211);
			opt_equal_mark();
			setState(11212);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ts_undo_buffer_sizeContext extends ParserRuleContext {
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(OBParser.UNDO_BUFFER_SIZE, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Opt_ts_undo_buffer_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ts_undo_buffer_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_ts_undo_buffer_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_ts_undo_buffer_size(this);
		}
	}

	public final Opt_ts_undo_buffer_sizeContext opt_ts_undo_buffer_size() throws RecognitionException {
		Opt_ts_undo_buffer_sizeContext _localctx = new Opt_ts_undo_buffer_sizeContext(_ctx, getState());
		enterRule(_localctx, 1418, RULE_opt_ts_undo_buffer_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11214);
			match(UNDO_BUFFER_SIZE);
			setState(11215);
			opt_equal_mark();
			setState(11216);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ts_redo_buffer_sizeContext extends ParserRuleContext {
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(OBParser.REDO_BUFFER_SIZE, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Opt_ts_redo_buffer_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ts_redo_buffer_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_ts_redo_buffer_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_ts_redo_buffer_size(this);
		}
	}

	public final Opt_ts_redo_buffer_sizeContext opt_ts_redo_buffer_size() throws RecognitionException {
		Opt_ts_redo_buffer_sizeContext _localctx = new Opt_ts_redo_buffer_sizeContext(_ctx, getState());
		enterRule(_localctx, 1420, RULE_opt_ts_redo_buffer_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11218);
			match(REDO_BUFFER_SIZE);
			setState(11219);
			opt_equal_mark();
			setState(11220);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ts_nodegroupContext extends ParserRuleContext {
		public TerminalNode NODEGROUP() { return getToken(OBParser.NODEGROUP, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Opt_ts_nodegroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ts_nodegroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_ts_nodegroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_ts_nodegroup(this);
		}
	}

	public final Opt_ts_nodegroupContext opt_ts_nodegroup() throws RecognitionException {
		Opt_ts_nodegroupContext _localctx = new Opt_ts_nodegroupContext(_ctx, getState());
		enterRule(_localctx, 1422, RULE_opt_ts_nodegroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11222);
			match(NODEGROUP);
			setState(11223);
			opt_equal_mark();
			setState(11224);
			match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ts_commentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Opt_ts_commentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ts_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_ts_comment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_ts_comment(this);
		}
	}

	public final Opt_ts_commentContext opt_ts_comment() throws RecognitionException {
		Opt_ts_commentContext _localctx = new Opt_ts_commentContext(_ctx, getState());
		enterRule(_localctx, 1424, RULE_opt_ts_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11226);
			match(COMMENT);
			setState(11227);
			opt_equal_mark();
			setState(11228);
			match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_logfile_group_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(OBParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public Alter_logfile_group_infoContext alter_logfile_group_info() {
			return getRuleContext(Alter_logfile_group_infoContext.class,0);
		}
		public Alter_logfile_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_logfile_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_logfile_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_logfile_group_stmt(this);
		}
	}

	public final Alter_logfile_group_stmtContext alter_logfile_group_stmt() throws RecognitionException {
		Alter_logfile_group_stmtContext _localctx = new Alter_logfile_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 1426, RULE_alter_logfile_group_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11230);
			match(ALTER);
			setState(11231);
			match(LOGFILE);
			setState(11232);
			match(GROUP);
			setState(11233);
			alter_logfile_group_info();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_logfile_group_infoContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Add_log_fileContext add_log_file() {
			return getRuleContext(Add_log_fileContext.class,0);
		}
		public Alter_logfile_group_option_listContext alter_logfile_group_option_list() {
			return getRuleContext(Alter_logfile_group_option_listContext.class,0);
		}
		public Alter_logfile_group_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_logfile_group_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_logfile_group_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_logfile_group_info(this);
		}
	}

	public final Alter_logfile_group_infoContext alter_logfile_group_info() throws RecognitionException {
		Alter_logfile_group_infoContext _localctx = new Alter_logfile_group_infoContext(_ctx, getState());
		enterRule(_localctx, 1428, RULE_alter_logfile_group_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11235);
			match(NAME_OB);
			setState(11236);
			add_log_file();
			setState(11237);
			alter_logfile_group_option_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_logfile_group_option_listContext extends ParserRuleContext {
		public Alter_logfile_group_optionsContext alter_logfile_group_options() {
			return getRuleContext(Alter_logfile_group_optionsContext.class,0);
		}
		public Alter_logfile_group_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_logfile_group_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_logfile_group_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_logfile_group_option_list(this);
		}
	}

	public final Alter_logfile_group_option_listContext alter_logfile_group_option_list() throws RecognitionException {
		Alter_logfile_group_option_listContext _localctx = new Alter_logfile_group_option_listContext(_ctx, getState());
		enterRule(_localctx, 1430, RULE_alter_logfile_group_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT || _la==ENGINE_ || _la==NO_WAIT || _la==STORAGE || _la==INITIAL_SIZE) {
				{
				setState(11239);
				alter_logfile_group_options(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_logfile_group_optionsContext extends ParserRuleContext {
		public Alter_logfile_group_optionContext alter_logfile_group_option() {
			return getRuleContext(Alter_logfile_group_optionContext.class,0);
		}
		public Alter_logfile_group_optionsContext alter_logfile_group_options() {
			return getRuleContext(Alter_logfile_group_optionsContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Alter_logfile_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_logfile_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_logfile_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_logfile_group_options(this);
		}
	}

	public final Alter_logfile_group_optionsContext alter_logfile_group_options() throws RecognitionException {
		return alter_logfile_group_options(0);
	}

	private Alter_logfile_group_optionsContext alter_logfile_group_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Alter_logfile_group_optionsContext _localctx = new Alter_logfile_group_optionsContext(_ctx, _parentState);
		Alter_logfile_group_optionsContext _prevctx = _localctx;
		int _startState = 1432;
		enterRecursionRule(_localctx, 1432, RULE_alter_logfile_group_options, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11243);
			alter_logfile_group_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(11252);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1277,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(11250);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1276,_ctx) ) {
					case 1:
						{
						_localctx = new Alter_logfile_group_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_alter_logfile_group_options);
						setState(11245);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(11246);
						alter_logfile_group_option();
						}
						break;
					case 2:
						{
						_localctx = new Alter_logfile_group_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_alter_logfile_group_options);
						setState(11247);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(11248);
						match(Comma);
						setState(11249);
						alter_logfile_group_option();
						}
						break;
					}
					} 
				}
				setState(11254);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1277,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Alter_logfile_group_optionContext extends ParserRuleContext {
		public Opt_ts_initial_sizeContext opt_ts_initial_size() {
			return getRuleContext(Opt_ts_initial_sizeContext.class,0);
		}
		public Opt_ts_engineContext opt_ts_engine() {
			return getRuleContext(Opt_ts_engineContext.class,0);
		}
		public Ts_waitContext ts_wait() {
			return getRuleContext(Ts_waitContext.class,0);
		}
		public Alter_logfile_group_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_logfile_group_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_logfile_group_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_logfile_group_option(this);
		}
	}

	public final Alter_logfile_group_optionContext alter_logfile_group_option() throws RecognitionException {
		Alter_logfile_group_optionContext _localctx = new Alter_logfile_group_optionContext(_ctx, getState());
		enterRule(_localctx, 1434, RULE_alter_logfile_group_option);
		try {
			setState(11258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(11255);
				opt_ts_initial_size();
				}
				break;
			case ENGINE_:
			case STORAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11256);
				opt_ts_engine();
				}
				break;
			case WAIT:
			case NO_WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(11257);
				ts_wait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_logfile_group_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(OBParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Drop_ts_options_listContext drop_ts_options_list() {
			return getRuleContext(Drop_ts_options_listContext.class,0);
		}
		public Drop_logfile_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_logfile_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_logfile_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_logfile_group_stmt(this);
		}
	}

	public final Drop_logfile_group_stmtContext drop_logfile_group_stmt() throws RecognitionException {
		Drop_logfile_group_stmtContext _localctx = new Drop_logfile_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 1436, RULE_drop_logfile_group_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11260);
			match(DROP);
			setState(11261);
			match(LOGFILE);
			setState(11262);
			match(GROUP);
			setState(11263);
			match(NAME_OB);
			setState(11264);
			drop_ts_options_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ts_options_listContext extends ParserRuleContext {
		public Drop_ts_optionsContext drop_ts_options() {
			return getRuleContext(Drop_ts_optionsContext.class,0);
		}
		public Drop_ts_options_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ts_options_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_ts_options_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_ts_options_list(this);
		}
	}

	public final Drop_ts_options_listContext drop_ts_options_list() throws RecognitionException {
		Drop_ts_options_listContext _localctx = new Drop_ts_options_listContext(_ctx, getState());
		enterRule(_localctx, 1438, RULE_drop_ts_options_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT || _la==ENGINE_ || _la==NO_WAIT || _la==STORAGE || _la==Comma) {
				{
				setState(11266);
				drop_ts_options(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ts_optionsContext extends ParserRuleContext {
		public Drop_ts_optionContext drop_ts_option() {
			return getRuleContext(Drop_ts_optionContext.class,0);
		}
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Drop_ts_optionsContext drop_ts_options() {
			return getRuleContext(Drop_ts_optionsContext.class,0);
		}
		public Drop_ts_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ts_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_ts_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_ts_options(this);
		}
	}

	public final Drop_ts_optionsContext drop_ts_options() throws RecognitionException {
		return drop_ts_options(0);
	}

	private Drop_ts_optionsContext drop_ts_options(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Drop_ts_optionsContext _localctx = new Drop_ts_optionsContext(_ctx, _parentState);
		Drop_ts_optionsContext _prevctx = _localctx;
		int _startState = 1440;
		enterRecursionRule(_localctx, 1440, RULE_drop_ts_options, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(11273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(11270);
				empty();
				setState(11271);
				match(Comma);
				}
			}

			setState(11275);
			drop_ts_option();
			}
			_ctx.stop = _input.LT(-1);
			setState(11284);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1282,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(11282);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1281,_ctx) ) {
					case 1:
						{
						_localctx = new Drop_ts_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_drop_ts_options);
						setState(11277);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(11278);
						drop_ts_option();
						}
						break;
					case 2:
						{
						_localctx = new Drop_ts_optionsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_drop_ts_options);
						setState(11279);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(11280);
						match(Comma);
						setState(11281);
						drop_ts_option();
						}
						break;
					}
					} 
				}
				setState(11286);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1282,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Drop_ts_optionContext extends ParserRuleContext {
		public Opt_ts_engineContext opt_ts_engine() {
			return getRuleContext(Opt_ts_engineContext.class,0);
		}
		public Ts_waitContext ts_wait() {
			return getRuleContext(Ts_waitContext.class,0);
		}
		public Drop_ts_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ts_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDrop_ts_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDrop_ts_option(this);
		}
	}

	public final Drop_ts_optionContext drop_ts_option() throws RecognitionException {
		Drop_ts_optionContext _localctx = new Drop_ts_optionContext(_ctx, getState());
		enterRule(_localctx, 1442, RULE_drop_ts_option);
		try {
			setState(11289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE_:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(11287);
				opt_ts_engine();
				}
				break;
			case WAIT:
			case NO_WAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11288);
				ts_wait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ts_waitContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(OBParser.WAIT, 0); }
		public TerminalNode NO_WAIT() { return getToken(OBParser.NO_WAIT, 0); }
		public Ts_waitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ts_wait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTs_wait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTs_wait(this);
		}
	}

	public final Ts_waitContext ts_wait() throws RecognitionException {
		Ts_waitContext _localctx = new Ts_waitContext(_ctx, getState());
		enterRule(_localctx, 1444, RULE_ts_wait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11291);
			_la = _input.LA(1);
			if ( !(_la==WAIT || _la==NO_WAIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_ts_engineContext extends ParserRuleContext {
		public Opt_storageContext opt_storage() {
			return getRuleContext(Opt_storageContext.class,0);
		}
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public Opt_equal_markContext opt_equal_mark() {
			return getRuleContext(Opt_equal_markContext.class,0);
		}
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Opt_ts_engineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_ts_engine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_ts_engine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_ts_engine(this);
		}
	}

	public final Opt_ts_engineContext opt_ts_engine() throws RecognitionException {
		Opt_ts_engineContext _localctx = new Opt_ts_engineContext(_ctx, getState());
		enterRule(_localctx, 1446, RULE_opt_ts_engine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11293);
			opt_storage();
			setState(11294);
			match(ENGINE_);
			setState(11295);
			opt_equal_mark();
			setState(11296);
			_la = _input.LA(1);
			if ( !(_la==NAME_OB || _la==STRING_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_optContext extends ParserRuleContext {
		public Method_listContext method_list() {
			return getRuleContext(Method_listContext.class,0);
		}
		public Method_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMethod_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMethod_opt(this);
		}
	}

	public final Method_optContext method_opt() throws RecognitionException {
		Method_optContext _localctx = new Method_optContext(_ctx, getState());
		enterRule(_localctx, 1448, RULE_method_opt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11298);
			method_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_listContext extends ParserRuleContext {
		public List<MethodContext> method() {
			return getRuleContexts(MethodContext.class);
		}
		public MethodContext method(int i) {
			return getRuleContext(MethodContext.class,i);
		}
		public Method_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMethod_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMethod_list(this);
		}
	}

	public final Method_listContext method_list() throws RecognitionException {
		Method_listContext _localctx = new Method_listContext(_ctx, getState());
		enterRule(_localctx, 1450, RULE_method_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11301); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(11300);
				method();
				}
				}
				setState(11303); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodContext extends ParserRuleContext {
		public For_allContext for_all() {
			return getRuleContext(For_allContext.class,0);
		}
		public For_columnsContext for_columns() {
			return getRuleContext(For_columnsContext.class,0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMethod(this);
		}
	}

	public final MethodContext method() throws RecognitionException {
		MethodContext _localctx = new MethodContext(_ctx, getState());
		enterRule(_localctx, 1452, RULE_method);
		try {
			setState(11307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11305);
				for_all();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11306);
				for_columns();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_names_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(OBParser.NAMES, 0); }
		public Charset_name_or_defaultContext charset_name_or_default() {
			return getRuleContext(Charset_name_or_defaultContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public Set_names_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_names_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_names_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_names_stmt(this);
		}
	}

	public final Set_names_stmtContext set_names_stmt() throws RecognitionException {
		Set_names_stmtContext _localctx = new Set_names_stmtContext(_ctx, getState());
		enterRule(_localctx, 1454, RULE_set_names_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11309);
			match(SET);
			setState(11310);
			match(NAMES);
			setState(11311);
			charset_name_or_default();
			setState(11313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(11312);
				collation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_charset_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Charset_keyContext charset_key() {
			return getRuleContext(Charset_keyContext.class,0);
		}
		public Charset_name_or_defaultContext charset_name_or_default() {
			return getRuleContext(Charset_name_or_defaultContext.class,0);
		}
		public Set_charset_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_charset_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_charset_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_charset_stmt(this);
		}
	}

	public final Set_charset_stmtContext set_charset_stmt() throws RecognitionException {
		Set_charset_stmtContext _localctx = new Set_charset_stmtContext(_ctx, getState());
		enterRule(_localctx, 1456, RULE_set_charset_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11315);
			match(SET);
			setState(11316);
			charset_key();
			setState(11317);
			charset_name_or_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(OBParser.TRANSACTION, 0); }
		public Transaction_characteristicsContext transaction_characteristics() {
			return getRuleContext(Transaction_characteristicsContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(OBParser.SESSION, 0); }
		public TerminalNode GLOBAL() { return getToken(OBParser.GLOBAL, 0); }
		public Set_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSet_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSet_transaction_stmt(this);
		}
	}

	public final Set_transaction_stmtContext set_transaction_stmt() throws RecognitionException {
		Set_transaction_stmtContext _localctx = new Set_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 1458, RULE_set_transaction_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11319);
			match(SET);
			setState(11327);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRANSACTION:
			case GLOBAL:
			case SESSION:
				{
				setState(11324);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TRANSACTION:
				case GLOBAL:
					{
					setState(11321);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GLOBAL) {
						{
						setState(11320);
						match(GLOBAL);
						}
					}

					}
					break;
				case SESSION:
					{
					setState(11323);
					match(SESSION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LOCAL:
				{
				setState(11326);
				match(LOCAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(11329);
			match(TRANSACTION);
			setState(11330);
			transaction_characteristics();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_characteristicsContext extends ParserRuleContext {
		public Transaction_access_modeContext transaction_access_mode() {
			return getRuleContext(Transaction_access_modeContext.class,0);
		}
		public TerminalNode ISOLATION() { return getToken(OBParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(OBParser.LEVEL, 0); }
		public Isolation_levelContext isolation_level() {
			return getRuleContext(Isolation_levelContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Transaction_characteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_characteristics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTransaction_characteristics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTransaction_characteristics(this);
		}
	}

	public final Transaction_characteristicsContext transaction_characteristics() throws RecognitionException {
		Transaction_characteristicsContext _localctx = new Transaction_characteristicsContext(_ctx, getState());
		enterRule(_localctx, 1460, RULE_transaction_characteristics);
		int _la;
		try {
			setState(11347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11332);
				transaction_access_mode();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==READ) {
					{
					setState(11333);
					transaction_access_mode();
					setState(11334);
					match(Comma);
					}
				}

				setState(11338);
				match(ISOLATION);
				setState(11339);
				match(LEVEL);
				setState(11340);
				isolation_level();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11341);
				match(ISOLATION);
				setState(11342);
				match(LEVEL);
				setState(11343);
				isolation_level();
				setState(11344);
				match(Comma);
				setState(11345);
				transaction_access_mode();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_access_modeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(OBParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(OBParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(OBParser.WRITE, 0); }
		public Transaction_access_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_access_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterTransaction_access_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitTransaction_access_mode(this);
		}
	}

	public final Transaction_access_modeContext transaction_access_mode() throws RecognitionException {
		Transaction_access_modeContext _localctx = new Transaction_access_modeContext(_ctx, getState());
		enterRule(_localctx, 1462, RULE_transaction_access_mode);
		try {
			setState(11353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11349);
				match(READ);
				setState(11350);
				match(ONLY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11351);
				match(READ);
				setState(11352);
				match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Isolation_levelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(OBParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(OBParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(OBParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(OBParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(OBParser.SERIALIZABLE, 0); }
		public Isolation_levelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolation_level; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterIsolation_level(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitIsolation_level(this);
		}
	}

	public final Isolation_levelContext isolation_level() throws RecognitionException {
		Isolation_levelContext _localctx = new Isolation_levelContext(_ctx, getState());
		enterRule(_localctx, 1464, RULE_isolation_level);
		try {
			setState(11362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11355);
				match(READ);
				setState(11356);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11357);
				match(READ);
				setState(11358);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11359);
				match(REPEATABLE);
				setState(11360);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11361);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_encrypt_keyContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public TerminalNode ENCRYPTED() { return getToken(OBParser.ENCRYPTED, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Opt_encrypt_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_encrypt_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_encrypt_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_encrypt_key(this);
		}
	}

	public final Opt_encrypt_keyContext opt_encrypt_key() throws RecognitionException {
		Opt_encrypt_keyContext _localctx = new Opt_encrypt_keyContext(_ctx, getState());
		enterRule(_localctx, 1466, RULE_opt_encrypt_key);
		try {
			setState(11368);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
				enterOuterAlt(_localctx, 1);
				{
				setState(11364);
				empty();
				}
				break;
			case ENCRYPTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(11365);
				match(ENCRYPTED);
				setState(11366);
				match(BY);
				setState(11367);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_savepoint_stmtContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(OBParser.SAVEPOINT, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Create_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCreate_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCreate_savepoint_stmt(this);
		}
	}

	public final Create_savepoint_stmtContext create_savepoint_stmt() throws RecognitionException {
		Create_savepoint_stmtContext _localctx = new Create_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 1468, RULE_create_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11370);
			match(SAVEPOINT);
			setState(11371);
			var_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_savepoint_stmtContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(OBParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public TerminalNode WORK() { return getToken(OBParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OBParser.SAVEPOINT, 0); }
		public Rollback_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRollback_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRollback_savepoint_stmt(this);
		}
	}

	public final Rollback_savepoint_stmtContext rollback_savepoint_stmt() throws RecognitionException {
		Rollback_savepoint_stmtContext _localctx = new Rollback_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 1470, RULE_rollback_savepoint_stmt);
		int _la;
		try {
			setState(11383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11373);
				match(ROLLBACK);
				setState(11375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(11374);
					match(WORK);
					}
				}

				setState(11377);
				match(TO);
				setState(11378);
				var_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11379);
				match(ROLLBACK);
				setState(11380);
				match(TO);
				setState(11381);
				match(SAVEPOINT);
				setState(11382);
				var_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_savepoint_stmtContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(OBParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OBParser.SAVEPOINT, 0); }
		public Var_nameContext var_name() {
			return getRuleContext(Var_nameContext.class,0);
		}
		public Release_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelease_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelease_savepoint_stmt(this);
		}
	}

	public final Release_savepoint_stmtContext release_savepoint_stmt() throws RecognitionException {
		Release_savepoint_stmtContext _localctx = new Release_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 1472, RULE_release_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11385);
			match(RELEASE);
			setState(11386);
			match(SAVEPOINT);
			setState(11387);
			var_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cluster_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public Cluster_actionContext cluster_action() {
			return getRuleContext(Cluster_actionContext.class,0);
		}
		public TerminalNode VERIFY() { return getToken(OBParser.VERIFY, 0); }
		public Cluster_defineContext cluster_define() {
			return getRuleContext(Cluster_defineContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public Alter_or_change_or_modifyContext alter_or_change_or_modify() {
			return getRuleContext(Alter_or_change_or_modifyContext.class,0);
		}
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public Cluster_option_listContext cluster_option_list() {
			return getRuleContext(Cluster_option_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public Alter_cluster_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cluster_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterAlter_cluster_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitAlter_cluster_stmt(this);
		}
	}

	public final Alter_cluster_stmtContext alter_cluster_stmt() throws RecognitionException {
		Alter_cluster_stmtContext _localctx = new Alter_cluster_stmtContext(_ctx, getState());
		enterRule(_localctx, 1474, RULE_alter_cluster_stmt);
		int _la;
		try {
			setState(11411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11389);
				match(ALTER);
				setState(11390);
				match(SYSTEM);
				setState(11391);
				cluster_action();
				setState(11392);
				match(VERIFY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11394);
				match(ALTER);
				setState(11395);
				match(SYSTEM);
				setState(11396);
				cluster_action();
				setState(11397);
				cluster_define();
				setState(11399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(11398);
					match(FORCE);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11401);
				match(ALTER);
				setState(11402);
				match(SYSTEM);
				setState(11403);
				alter_or_change_or_modify();
				setState(11404);
				match(CLUSTER);
				setState(11405);
				cluster_define();
				setState(11407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(11406);
					match(SET);
					}
				}

				setState(11409);
				cluster_option_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_defineContext extends ParserRuleContext {
		public Cluster_nameContext cluster_name() {
			return getRuleContext(Cluster_nameContext.class,0);
		}
		public TerminalNode CLUSTER_ID() { return getToken(OBParser.CLUSTER_ID, 0); }
		public Conf_constContext conf_const() {
			return getRuleContext(Conf_constContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Cluster_defineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_define; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCluster_define(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCluster_define(this);
		}
	}

	public final Cluster_defineContext cluster_define() throws RecognitionException {
		Cluster_defineContext _localctx = new Cluster_defineContext(_ctx, getState());
		enterRule(_localctx, 1476, RULE_cluster_define);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11413);
			cluster_name();
			setState(11414);
			match(CLUSTER_ID);
			setState(11416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMP_EQ) {
				{
				setState(11415);
				match(COMP_EQ);
				}
			}

			setState(11418);
			conf_const();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_option_listContext extends ParserRuleContext {
		public Cluster_optionContext cluster_option() {
			return getRuleContext(Cluster_optionContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Cluster_option_listContext cluster_option_list() {
			return getRuleContext(Cluster_option_listContext.class,0);
		}
		public Cluster_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCluster_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCluster_option_list(this);
		}
	}

	public final Cluster_option_listContext cluster_option_list() throws RecognitionException {
		Cluster_option_listContext _localctx = new Cluster_option_listContext(_ctx, getState());
		enterRule(_localctx, 1478, RULE_cluster_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11420);
			cluster_option();
			setState(11423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Comma) {
				{
				setState(11421);
				match(Comma);
				setState(11422);
				cluster_option_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_optionContext extends ParserRuleContext {
		public TerminalNode ROOTSERVICE_LIST() { return getToken(OBParser.ROOTSERVICE_LIST, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public TerminalNode REDO_TRANSPORT_OPTIONS() { return getToken(OBParser.REDO_TRANSPORT_OPTIONS, 0); }
		public Relation_name_or_stringContext relation_name_or_string() {
			return getRuleContext(Relation_name_or_stringContext.class,0);
		}
		public Cluster_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCluster_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCluster_option(this);
		}
	}

	public final Cluster_optionContext cluster_option() throws RecognitionException {
		Cluster_optionContext _localctx = new Cluster_optionContext(_ctx, getState());
		enterRule(_localctx, 1480, RULE_cluster_option);
		int _la;
		try {
			setState(11435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROOTSERVICE_LIST:
				enterOuterAlt(_localctx, 1);
				{
				setState(11425);
				match(ROOTSERVICE_LIST);
				setState(11427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(11426);
					match(COMP_EQ);
					}
				}

				setState(11429);
				match(STRING_VALUE);
				}
				break;
			case REDO_TRANSPORT_OPTIONS:
				enterOuterAlt(_localctx, 2);
				{
				setState(11430);
				match(REDO_TRANSPORT_OPTIONS);
				setState(11432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMP_EQ) {
					{
					setState(11431);
					match(COMP_EQ);
					}
				}

				setState(11434);
				relation_name_or_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public TerminalNode REMOVE() { return getToken(OBParser.REMOVE, 0); }
		public TerminalNode SYNCHRONIZATION() { return getToken(OBParser.SYNCHRONIZATION, 0); }
		public TerminalNode DISABLE() { return getToken(OBParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(OBParser.ENABLE, 0); }
		public Cluster_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCluster_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCluster_action(this);
		}
	}

	public final Cluster_actionContext cluster_action() throws RecognitionException {
		Cluster_actionContext _localctx = new Cluster_actionContext(_ctx, getState());
		enterRule(_localctx, 1482, RULE_cluster_action);
		int _la;
		try {
			setState(11444);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(11437);
				match(ADD);
				setState(11438);
				match(CLUSTER);
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11439);
				match(REMOVE);
				setState(11440);
				match(CLUSTER);
				}
				break;
			case DISABLE:
			case ENABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(11441);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11442);
				match(CLUSTER);
				setState(11443);
				match(SYNCHRONIZATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchover_cluster_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public Commit_switchover_clauseContext commit_switchover_clause() {
			return getRuleContext(Commit_switchover_clauseContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public Switchover_cluster_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchover_cluster_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSwitchover_cluster_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSwitchover_cluster_stmt(this);
		}
	}

	public final Switchover_cluster_stmtContext switchover_cluster_stmt() throws RecognitionException {
		Switchover_cluster_stmtContext _localctx = new Switchover_cluster_stmtContext(_ctx, getState());
		enterRule(_localctx, 1484, RULE_switchover_cluster_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11446);
			match(ALTER);
			setState(11447);
			match(SYSTEM);
			setState(11448);
			commit_switchover_clause();
			setState(11450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(11449);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_switchover_clauseContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(OBParser.COMMIT, 0); }
		public List<TerminalNode> TO() { return getTokens(OBParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(OBParser.TO, i);
		}
		public TerminalNode SWITCHOVER() { return getToken(OBParser.SWITCHOVER, 0); }
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode SESSION() { return getToken(OBParser.SESSION, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OBParser.SHUTDOWN, 0); }
		public TerminalNode PHYSICAL() { return getToken(OBParser.PHYSICAL, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public TerminalNode ACTIVATE() { return getToken(OBParser.ACTIVATE, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public TerminalNode CONVERT() { return getToken(OBParser.CONVERT, 0); }
		public TerminalNode FAILOVER() { return getToken(OBParser.FAILOVER, 0); }
		public Cluster_defineContext cluster_define() {
			return getRuleContext(Cluster_defineContext.class,0);
		}
		public Commit_switchover_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_switchover_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCommit_switchover_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCommit_switchover_clause(this);
		}
	}

	public final Commit_switchover_clauseContext commit_switchover_clause() throws RecognitionException {
		Commit_switchover_clauseContext _localctx = new Commit_switchover_clauseContext(_ctx, getState());
		enterRule(_localctx, 1486, RULE_commit_switchover_clause);
		int _la;
		try {
			setState(11484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11452);
				match(COMMIT);
				setState(11453);
				match(TO);
				setState(11454);
				match(SWITCHOVER);
				setState(11455);
				match(TO);
				setState(11456);
				match(PRIMARY);
				setState(11460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(11457);
					match(WITH);
					setState(11458);
					match(SESSION);
					setState(11459);
					match(SHUTDOWN);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11462);
				match(COMMIT);
				setState(11463);
				match(TO);
				setState(11464);
				match(SWITCHOVER);
				setState(11465);
				match(TO);
				setState(11466);
				match(PHYSICAL);
				setState(11467);
				match(STANDBY);
				setState(11471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(11468);
					match(WITH);
					setState(11469);
					match(SESSION);
					setState(11470);
					match(SHUTDOWN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11473);
				match(ACTIVATE);
				setState(11474);
				match(PHYSICAL);
				setState(11475);
				match(STANDBY);
				setState(11476);
				match(CLUSTER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11477);
				match(CONVERT);
				setState(11478);
				match(TO);
				setState(11479);
				match(PHYSICAL);
				setState(11480);
				match(STANDBY);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11481);
				match(FAILOVER);
				setState(11482);
				match(TO);
				setState(11483);
				cluster_define();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protection_mode_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode MAXIMIZE() { return getToken(OBParser.MAXIMIZE, 0); }
		public Protection_mode_optionContext protection_mode_option() {
			return getRuleContext(Protection_mode_optionContext.class,0);
		}
		public Protection_mode_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protection_mode_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterProtection_mode_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitProtection_mode_stmt(this);
		}
	}

	public final Protection_mode_stmtContext protection_mode_stmt() throws RecognitionException {
		Protection_mode_stmtContext _localctx = new Protection_mode_stmtContext(_ctx, getState());
		enterRule(_localctx, 1488, RULE_protection_mode_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11486);
			match(ALTER);
			setState(11487);
			match(SYSTEM);
			setState(11488);
			match(SET);
			setState(11489);
			match(STANDBY);
			setState(11490);
			match(CLUSTER);
			setState(11491);
			match(TO);
			setState(11492);
			match(MAXIMIZE);
			setState(11493);
			protection_mode_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protection_mode_optionContext extends ParserRuleContext {
		public TerminalNode AVAILABILITY() { return getToken(OBParser.AVAILABILITY, 0); }
		public TerminalNode PERFORMANCE() { return getToken(OBParser.PERFORMANCE, 0); }
		public TerminalNode PROTECTION() { return getToken(OBParser.PROTECTION, 0); }
		public Protection_mode_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protection_mode_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterProtection_mode_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitProtection_mode_option(this);
		}
	}

	public final Protection_mode_optionContext protection_mode_option() throws RecognitionException {
		Protection_mode_optionContext _localctx = new Protection_mode_optionContext(_ctx, getState());
		enterRule(_localctx, 1490, RULE_protection_mode_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11495);
			_la = _input.LA(1);
			if ( !(_la==PERFORMANCE || _la==AVAILABILITY || _la==PROTECTION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_nameContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Cluster_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterCluster_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitCluster_name(this);
		}
	}

	public final Cluster_nameContext cluster_name() throws RecognitionException {
		Cluster_nameContext _localctx = new Cluster_nameContext(_ctx, getState());
		enterRule(_localctx, 1492, RULE_cluster_name);
		try {
			setState(11499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(11497);
				relation_name();
				}
				break;
			case STRING_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11498);
				match(STRING_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_cluster_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode DISCONNECT() { return getToken(OBParser.DISCONNECT, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public Cluster_defineContext cluster_define() {
			return getRuleContext(Cluster_defineContext.class,0);
		}
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode CLUSTER_NAME() { return getToken(OBParser.CLUSTER_NAME, 0); }
		public Cluster_nameContext cluster_name() {
			return getRuleContext(Cluster_nameContext.class,0);
		}
		public TerminalNode OBCONFIG_URL() { return getToken(OBParser.OBCONFIG_URL, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode VERIFY() { return getToken(OBParser.VERIFY, 0); }
		public Disconnect_cluster_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_cluster_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDisconnect_cluster_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDisconnect_cluster_stmt(this);
		}
	}

	public final Disconnect_cluster_stmtContext disconnect_cluster_stmt() throws RecognitionException {
		Disconnect_cluster_stmtContext _localctx = new Disconnect_cluster_stmtContext(_ctx, getState());
		enterRule(_localctx, 1494, RULE_disconnect_cluster_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11501);
			match(ALTER);
			setState(11502);
			match(SYSTEM);
			setState(11503);
			match(DISCONNECT);
			setState(11504);
			match(STANDBY);
			setState(11505);
			match(CLUSTER);
			setState(11506);
			cluster_define();
			setState(11507);
			match(SET);
			setState(11508);
			match(CLUSTER_NAME);
			setState(11509);
			cluster_name();
			setState(11512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBCONFIG_URL) {
				{
				setState(11510);
				match(OBCONFIG_URL);
				setState(11511);
				match(STRING_VALUE);
				}
			}

			setState(11515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(11514);
				match(FORCE);
				}
			}

			setState(11518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERIFY) {
				{
				setState(11517);
				match(VERIFY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Var_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keyword_normalContext unreserved_keyword_normal() {
			return getRuleContext(Unreserved_keyword_normalContext.class,0);
		}
		public New_or_old_column_refContext new_or_old_column_ref() {
			return getRuleContext(New_or_old_column_refContext.class,0);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVar_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVar_name(this);
		}
	}

	public final Var_nameContext var_name() throws RecognitionException {
		Var_nameContext _localctx = new Var_nameContext(_ctx, getState());
		enterRule(_localctx, 1496, RULE_var_name);
		try {
			setState(11523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11520);
				match(NAME_OB);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11521);
				unreserved_keyword_normal();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11522);
				new_or_old_column_ref();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_or_oldContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(OBParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(OBParser.OLD, 0); }
		public New_or_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_or_old; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNew_or_old(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNew_or_old(this);
		}
	}

	public final New_or_oldContext new_or_old() throws RecognitionException {
		New_or_oldContext _localctx = new New_or_oldContext(_ctx, getState());
		enterRule(_localctx, 1498, RULE_new_or_old);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11525);
			_la = _input.LA(1);
			if ( !(_la==OLD || _la==NEW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_or_old_column_refContext extends ParserRuleContext {
		public New_or_oldContext new_or_old() {
			return getRuleContext(New_or_oldContext.class,0);
		}
		public TerminalNode Dot() { return getToken(OBParser.Dot, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public New_or_old_column_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_or_old_column_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterNew_or_old_column_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitNew_or_old_column_ref(this);
		}
	}

	public final New_or_old_column_refContext new_or_old_column_ref() throws RecognitionException {
		New_or_old_column_refContext _localctx = new New_or_old_column_refContext(_ctx, getState());
		enterRule(_localctx, 1500, RULE_new_or_old_column_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11527);
			new_or_old();
			setState(11528);
			match(Dot);
			setState(11529);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 1502, RULE_column_name);
		try {
			setState(11533);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(11531);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11532);
				unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Relation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterRelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitRelation_name(this);
		}
	}

	public final Relation_nameContext relation_name() throws RecognitionException {
		Relation_nameContext _localctx = new Relation_nameContext(_ctx, getState());
		enterRule(_localctx, 1504, RULE_relation_name);
		try {
			setState(11537);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(11535);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11536);
				unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public TerminalNode RANDOM() { return getToken(OBParser.RANDOM, 0); }
		public TerminalNode DUMP() { return getToken(OBParser.DUMP, 0); }
		public TerminalNode CHARSET() { return getToken(OBParser.CHARSET, 0); }
		public TerminalNode COLLATION() { return getToken(OBParser.COLLATION, 0); }
		public TerminalNode KEY_VERSION() { return getToken(OBParser.KEY_VERSION, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public TerminalNode COALESCE() { return getToken(OBParser.COALESCE, 0); }
		public TerminalNode REPEAT() { return getToken(OBParser.REPEAT, 0); }
		public TerminalNode ROW_COUNT() { return getToken(OBParser.ROW_COUNT, 0); }
		public TerminalNode REVERSE() { return getToken(OBParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(OBParser.RIGHT, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(OBParser.SYSTEM_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(OBParser.SESSION_USER, 0); }
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public TerminalNode FORMAT() { return getToken(OBParser.FORMAT, 0); }
		public TerminalNode NORMAL() { return getToken(OBParser.NORMAL, 0); }
		public TerminalNode PASSWORD() { return getToken(OBParser.PASSWORD, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 1506, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11539);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DATABASE || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (REPLACE - 273)) | (1L << (REPEAT - 273)) | (1L << (RIGHT - 273)) | (1L << (SCHEMA - 273)))) != 0) || _la==FORMAT || _la==TRUNCATE || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (COLLATION - 482)) | (1L << (NORMAL - 482)) | (1L << (COALESCE - 482)))) != 0) || _la==DUMP || _la==REVERSE || _la==ROW_COUNT || ((((_la - 754)) & ~0x3f) == 0 && ((1L << (_la - 754)) & ((1L << (USER - 754)) | (1L << (CHARSET - 754)) | (1L << (KEY_VERSION - 754)))) != 0) || ((((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & ((1L << (SESSION_USER - 855)) | (1L << (SYSTEM_USER - 855)) | (1L << (PASSWORD - 855)))) != 0) || _la==RANDOM || _la==NAME_OB) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_labelContext extends ParserRuleContext {
		public TerminalNode NAME_OB() { return getToken(OBParser.NAME_OB, 0); }
		public Unreserved_keywordContext unreserved_keyword() {
			return getRuleContext(Unreserved_keywordContext.class,0);
		}
		public Column_labelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterColumn_label(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitColumn_label(this);
		}
	}

	public final Column_labelContext column_label() throws RecognitionException {
		Column_labelContext _localctx = new Column_labelContext(_ctx, getState());
		enterRule(_localctx, 1508, RULE_column_label);
		try {
			setState(11543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_OB:
				enterOuterAlt(_localctx, 1);
				{
				setState(11541);
				match(NAME_OB);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11542);
				unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_unitContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(OBParser.DAY, 0); }
		public TerminalNode DAY_HOUR() { return getToken(OBParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(OBParser.DAY_MICROSECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(OBParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(OBParser.DAY_SECOND, 0); }
		public TerminalNode HOUR() { return getToken(OBParser.HOUR, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(OBParser.HOUR_MICROSECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(OBParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(OBParser.HOUR_SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(OBParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(OBParser.MINUTE, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(OBParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(OBParser.MINUTE_SECOND, 0); }
		public TerminalNode MONTH() { return getToken(OBParser.MONTH, 0); }
		public TerminalNode QUARTER() { return getToken(OBParser.QUARTER, 0); }
		public TerminalNode SECOND() { return getToken(OBParser.SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(OBParser.SECOND_MICROSECOND, 0); }
		public TerminalNode WEEK() { return getToken(OBParser.WEEK, 0); }
		public TerminalNode YEAR() { return getToken(OBParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(OBParser.YEAR_MONTH, 0); }
		public Date_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterDate_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitDate_unit(this);
		}
	}

	public final Date_unitContext date_unit() throws RecognitionException {
		Date_unitContext _localctx = new Date_unitContext(_ctx, getState());
		enterRule(_localctx, 1510, RULE_date_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11545);
			_la = _input.LA(1);
			if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (DAY_HOUR - 127)) | (1L << (DAY_MICROSECOND - 127)) | (1L << (DAY_MINUTE - 127)) | (1L << (DAY_SECOND - 127)) | (1L << (HOUR_MICROSECOND - 127)) | (1L << (HOUR_MINUTE - 127)) | (1L << (HOUR_SECOND - 127)))) != 0) || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (MINUTE_MICROSECOND - 238)) | (1L << (MINUTE_SECOND - 238)) | (1L << (SECOND_MICROSECOND - 238)))) != 0) || _la==YEAR_MONTH || _la==YEAR || _la==SECOND || ((((_la - 901)) & ~0x3f) == 0 && ((1L << (_la - 901)) & ((1L << (MINUTE - 901)) | (1L << (HOUR - 901)) | (1L << (MONTH - 901)))) != 0) || _la==MICROSECOND || _la==QUARTER || _la==DAY || _la==WEEK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_name_stmtContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public Service_opContext service_op() {
			return getRuleContext(Service_opContext.class,0);
		}
		public TerminalNode SERVICE() { return getToken(OBParser.SERVICE, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Tenant_nameContext tenant_name() {
			return getRuleContext(Tenant_nameContext.class,0);
		}
		public Service_name_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterService_name_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitService_name_stmt(this);
		}
	}

	public final Service_name_stmtContext service_name_stmt() throws RecognitionException {
		Service_name_stmtContext _localctx = new Service_name_stmtContext(_ctx, getState());
		enterRule(_localctx, 1512, RULE_service_name_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11547);
			match(ALTER);
			setState(11548);
			match(SYSTEM);
			setState(11549);
			service_op();
			setState(11550);
			match(SERVICE);
			setState(11551);
			relation_name();
			setState(11553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TENANT) {
				{
				setState(11552);
				tenant_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_opContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode STOP() { return getToken(OBParser.STOP, 0); }
		public Service_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterService_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitService_op(this);
		}
	}

	public final Service_opContext service_op() throws RecognitionException {
		Service_opContext _localctx = new Service_opContext(_ctx, getState());
		enterRule(_localctx, 1514, RULE_service_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11555);
			_la = _input.LA(1);
			if ( !(_la==CREATE || _la==DELETE || _la==STOP || _la==START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_table_exprContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE() { return getToken(OBParser.JSON_TABLE, 0); }
		public List<TerminalNode> LeftParen() { return getTokens(OBParser.LeftParen); }
		public TerminalNode LeftParen(int i) {
			return getToken(OBParser.LeftParen, i);
		}
		public Simple_exprContext simple_expr() {
			return getRuleContext(Simple_exprContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Mock_jt_on_error_on_emptyContext mock_jt_on_error_on_empty() {
			return getRuleContext(Mock_jt_on_error_on_emptyContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public Jt_column_listContext jt_column_list() {
			return getRuleContext(Jt_column_listContext.class,0);
		}
		public List<TerminalNode> RightParen() { return getTokens(OBParser.RightParen); }
		public TerminalNode RightParen(int i) {
			return getToken(OBParser.RightParen, i);
		}
		public Json_table_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_table_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_table_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_table_expr(this);
		}
	}

	public final Json_table_exprContext json_table_expr() throws RecognitionException {
		Json_table_exprContext _localctx = new Json_table_exprContext(_ctx, getState());
		enterRule(_localctx, 1516, RULE_json_table_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11557);
			match(JSON_TABLE);
			setState(11558);
			match(LeftParen);
			setState(11559);
			simple_expr(0);
			setState(11560);
			match(Comma);
			setState(11561);
			literal();
			setState(11562);
			mock_jt_on_error_on_empty();
			setState(11563);
			match(COLUMNS);
			setState(11564);
			match(LeftParen);
			setState(11565);
			jt_column_list();
			setState(11566);
			match(RightParen);
			setState(11567);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mock_jt_on_error_on_emptyContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Mock_jt_on_error_on_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mock_jt_on_error_on_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMock_jt_on_error_on_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMock_jt_on_error_on_empty(this);
		}
	}

	public final Mock_jt_on_error_on_emptyContext mock_jt_on_error_on_empty() throws RecognitionException {
		Mock_jt_on_error_on_emptyContext _localctx = new Mock_jt_on_error_on_emptyContext(_ctx, getState());
		enterRule(_localctx, 1518, RULE_mock_jt_on_error_on_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11569);
			empty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Jt_column_listContext extends ParserRuleContext {
		public List<Json_table_column_defContext> json_table_column_def() {
			return getRuleContexts(Json_table_column_defContext.class);
		}
		public Json_table_column_defContext json_table_column_def(int i) {
			return getRuleContext(Json_table_column_defContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Jt_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jt_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJt_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJt_column_list(this);
		}
	}

	public final Jt_column_listContext jt_column_list() throws RecognitionException {
		Jt_column_listContext _localctx = new Jt_column_listContext(_ctx, getState());
		enterRule(_localctx, 1520, RULE_jt_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11571);
			json_table_column_def();
			setState(11576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(11572);
				match(Comma);
				setState(11573);
				json_table_column_def();
				}
				}
				setState(11578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_table_column_defContext extends ParserRuleContext {
		public Json_table_ordinality_column_defContext json_table_ordinality_column_def() {
			return getRuleContext(Json_table_ordinality_column_defContext.class,0);
		}
		public Json_table_exists_column_defContext json_table_exists_column_def() {
			return getRuleContext(Json_table_exists_column_defContext.class,0);
		}
		public Json_table_value_column_defContext json_table_value_column_def() {
			return getRuleContext(Json_table_value_column_defContext.class,0);
		}
		public Json_table_nested_column_defContext json_table_nested_column_def() {
			return getRuleContext(Json_table_nested_column_defContext.class,0);
		}
		public Json_table_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_table_column_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_table_column_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_table_column_def(this);
		}
	}

	public final Json_table_column_defContext json_table_column_def() throws RecognitionException {
		Json_table_column_defContext _localctx = new Json_table_column_defContext(_ctx, getState());
		enterRule(_localctx, 1522, RULE_json_table_column_def);
		try {
			setState(11583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11579);
				json_table_ordinality_column_def();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11580);
				json_table_exists_column_def();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11581);
				json_table_value_column_def();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11582);
				json_table_nested_column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_table_ordinality_column_defContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(OBParser.ORDINALITY, 0); }
		public Json_table_ordinality_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_table_ordinality_column_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_table_ordinality_column_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_table_ordinality_column_def(this);
		}
	}

	public final Json_table_ordinality_column_defContext json_table_ordinality_column_def() throws RecognitionException {
		Json_table_ordinality_column_defContext _localctx = new Json_table_ordinality_column_defContext(_ctx, getState());
		enterRule(_localctx, 1524, RULE_json_table_ordinality_column_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11585);
			column_name();
			setState(11586);
			match(FOR);
			setState(11587);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_table_exists_column_defContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode PATH() { return getToken(OBParser.PATH, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Mock_jt_on_error_on_emptyContext mock_jt_on_error_on_empty() {
			return getRuleContext(Mock_jt_on_error_on_emptyContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public Json_table_exists_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_table_exists_column_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_table_exists_column_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_table_exists_column_def(this);
		}
	}

	public final Json_table_exists_column_defContext json_table_exists_column_def() throws RecognitionException {
		Json_table_exists_column_defContext _localctx = new Json_table_exists_column_defContext(_ctx, getState());
		enterRule(_localctx, 1526, RULE_json_table_exists_column_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11589);
			column_name();
			setState(11590);
			data_type(0);
			setState(11592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(11591);
				collation();
				}
			}

			setState(11594);
			match(EXISTS);
			setState(11595);
			match(PATH);
			setState(11596);
			literal();
			setState(11597);
			mock_jt_on_error_on_empty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_table_value_column_defContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode PATH() { return getToken(OBParser.PATH, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public Opt_value_on_empty_or_error_or_mismatchContext opt_value_on_empty_or_error_or_mismatch() {
			return getRuleContext(Opt_value_on_empty_or_error_or_mismatchContext.class,0);
		}
		public CollationContext collation() {
			return getRuleContext(CollationContext.class,0);
		}
		public Json_table_value_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_table_value_column_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_table_value_column_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_table_value_column_def(this);
		}
	}

	public final Json_table_value_column_defContext json_table_value_column_def() throws RecognitionException {
		Json_table_value_column_defContext _localctx = new Json_table_value_column_defContext(_ctx, getState());
		enterRule(_localctx, 1528, RULE_json_table_value_column_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11599);
			column_name();
			setState(11600);
			data_type(0);
			setState(11602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(11601);
				collation();
				}
			}

			setState(11604);
			match(PATH);
			setState(11605);
			literal();
			setState(11606);
			opt_value_on_empty_or_error_or_mismatch();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_table_nested_column_defContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(OBParser.NESTED, 0); }
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Jt_column_listContext jt_column_list() {
			return getRuleContext(Jt_column_listContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode PATH() { return getToken(OBParser.PATH, 0); }
		public Json_table_nested_column_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_table_nested_column_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_table_nested_column_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_table_nested_column_def(this);
		}
	}

	public final Json_table_nested_column_defContext json_table_nested_column_def() throws RecognitionException {
		Json_table_nested_column_defContext _localctx = new Json_table_nested_column_defContext(_ctx, getState());
		enterRule(_localctx, 1530, RULE_json_table_nested_column_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11608);
			match(NESTED);
			setState(11610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATH) {
				{
				setState(11609);
				match(PATH);
				}
			}

			setState(11612);
			literal();
			setState(11613);
			match(COLUMNS);
			setState(11614);
			match(LeftParen);
			setState(11615);
			jt_column_list();
			setState(11616);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_value_on_empty_or_error_or_mismatchContext extends ParserRuleContext {
		public Opt_on_empty_or_errorContext opt_on_empty_or_error() {
			return getRuleContext(Opt_on_empty_or_errorContext.class,0);
		}
		public Opt_on_mismatchContext opt_on_mismatch() {
			return getRuleContext(Opt_on_mismatchContext.class,0);
		}
		public Opt_value_on_empty_or_error_or_mismatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_value_on_empty_or_error_or_mismatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_value_on_empty_or_error_or_mismatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_value_on_empty_or_error_or_mismatch(this);
		}
	}

	public final Opt_value_on_empty_or_error_or_mismatchContext opt_value_on_empty_or_error_or_mismatch() throws RecognitionException {
		Opt_value_on_empty_or_error_or_mismatchContext _localctx = new Opt_value_on_empty_or_error_or_mismatchContext(_ctx, getState());
		enterRule(_localctx, 1532, RULE_opt_value_on_empty_or_error_or_mismatch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11618);
			opt_on_empty_or_error();
			setState(11619);
			opt_on_mismatch();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_on_mismatchContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Opt_on_mismatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_on_mismatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_on_mismatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_on_mismatch(this);
		}
	}

	public final Opt_on_mismatchContext opt_on_mismatch() throws RecognitionException {
		Opt_on_mismatchContext _localctx = new Opt_on_mismatchContext(_ctx, getState());
		enterRule(_localctx, 1534, RULE_opt_on_mismatch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11621);
			empty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vec_index_paramsContext extends ParserRuleContext {
		public List<Vec_index_paramContext> vec_index_param() {
			return getRuleContexts(Vec_index_paramContext.class);
		}
		public Vec_index_paramContext vec_index_param(int i) {
			return getRuleContext(Vec_index_paramContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(OBParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(OBParser.Comma, i);
		}
		public Vec_index_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vec_index_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVec_index_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVec_index_params(this);
		}
	}

	public final Vec_index_paramsContext vec_index_params() throws RecognitionException {
		Vec_index_paramsContext _localctx = new Vec_index_paramsContext(_ctx, getState());
		enterRule(_localctx, 1536, RULE_vec_index_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11623);
			vec_index_param();
			setState(11628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(11624);
				match(Comma);
				setState(11625);
				vec_index_param();
				}
				}
				setState(11630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vec_index_paramContext extends ParserRuleContext {
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public TerminalNode COMP_EQ() { return getToken(OBParser.COMP_EQ, 0); }
		public Vec_index_param_valueContext vec_index_param_value() {
			return getRuleContext(Vec_index_param_valueContext.class,0);
		}
		public Vec_index_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vec_index_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVec_index_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVec_index_param(this);
		}
	}

	public final Vec_index_paramContext vec_index_param() throws RecognitionException {
		Vec_index_paramContext _localctx = new Vec_index_paramContext(_ctx, getState());
		enterRule(_localctx, 1538, RULE_vec_index_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11631);
			relation_name();
			setState(11632);
			match(COMP_EQ);
			setState(11633);
			vec_index_param_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vec_index_param_valueContext extends ParserRuleContext {
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public Relation_nameContext relation_name() {
			return getRuleContext(Relation_nameContext.class,0);
		}
		public Vec_index_param_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vec_index_param_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterVec_index_param_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitVec_index_param_value(this);
		}
	}

	public final Vec_index_param_valueContext vec_index_param_value() throws RecognitionException {
		Vec_index_param_valueContext _localctx = new Vec_index_param_valueContext(_ctx, getState());
		enterRule(_localctx, 1540, RULE_vec_index_param_value);
		try {
			setState(11637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTNUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(11635);
				match(INTNUM);
				}
				break;
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case EVENT:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case FILEX:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case PROCESS:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case RELOAD:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case SHUTDOWN:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case REPLICATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case SUPER:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case RESOURCE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case PROXY:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case NONE:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case EXECUTE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case NAME_OB:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(11636);
				relation_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_query_exprContext extends ParserRuleContext {
		public TerminalNode JSON_QUERY() { return getToken(OBParser.JSON_QUERY, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Simple_exprContext simple_expr() {
			return getRuleContext(Simple_exprContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Complex_string_literalContext complex_string_literal() {
			return getRuleContext(Complex_string_literalContext.class,0);
		}
		public Json_query_optContext json_query_opt() {
			return getRuleContext(Json_query_optContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode RETURNING() { return getToken(OBParser.RETURNING, 0); }
		public Cast_data_typeContext cast_data_type() {
			return getRuleContext(Cast_data_typeContext.class,0);
		}
		public Json_query_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_query_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_query_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_query_expr(this);
		}
	}

	public final Json_query_exprContext json_query_expr() throws RecognitionException {
		Json_query_exprContext _localctx = new Json_query_exprContext(_ctx, getState());
		enterRule(_localctx, 1542, RULE_json_query_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11639);
			match(JSON_QUERY);
			setState(11640);
			match(LeftParen);
			setState(11641);
			simple_expr(0);
			setState(11642);
			match(Comma);
			setState(11643);
			complex_string_literal();
			setState(11646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(11644);
				match(RETURNING);
				setState(11645);
				cast_data_type();
				}
			}

			setState(11648);
			json_query_opt();
			setState(11649);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_query_optContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public Scalars_optContext scalars_opt() {
			return getRuleContext(Scalars_optContext.class,0);
		}
		public TerminalNode PRETTY() { return getToken(OBParser.PRETTY, 0); }
		public TerminalNode ASCII() { return getToken(OBParser.ASCII, 0); }
		public Wrapper_optsContext wrapper_opts() {
			return getRuleContext(Wrapper_optsContext.class,0);
		}
		public TerminalNode ASIS() { return getToken(OBParser.ASIS, 0); }
		public Json_query_on_optContext json_query_on_opt() {
			return getRuleContext(Json_query_on_optContext.class,0);
		}
		public TerminalNode MULTIVALUE() { return getToken(OBParser.MULTIVALUE, 0); }
		public Json_query_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_query_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_query_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_query_opt(this);
		}
	}

	public final Json_query_optContext json_query_opt() throws RecognitionException {
		Json_query_optContext _localctx = new Json_query_optContext(_ctx, getState());
		enterRule(_localctx, 1544, RULE_json_query_opt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUNCATE) {
				{
				setState(11651);
				match(TRUNCATE);
				}
			}

			setState(11655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW || _la==DISALLOW) {
				{
				setState(11654);
				scalars_opt();
				}
			}

			setState(11658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRETTY) {
				{
				setState(11657);
				match(PRETTY);
				}
			}

			setState(11661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCII) {
				{
				setState(11660);
				match(ASCII);
				}
			}

			setState(11664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(11663);
				wrapper_opts();
				}
			}

			setState(11667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASIS) {
				{
				setState(11666);
				match(ASIS);
				}
			}

			setState(11670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT || _la==NULLX || _la==ERROR_P || _la==EMPTY) {
				{
				setState(11669);
				json_query_on_opt();
				}
			}

			setState(11673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIVALUE) {
				{
				setState(11672);
				match(MULTIVALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalars_optContext extends ParserRuleContext {
		public TerminalNode ALLOW() { return getToken(OBParser.ALLOW, 0); }
		public TerminalNode SCALARS() { return getToken(OBParser.SCALARS, 0); }
		public TerminalNode DISALLOW() { return getToken(OBParser.DISALLOW, 0); }
		public Scalars_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalars_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterScalars_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitScalars_opt(this);
		}
	}

	public final Scalars_optContext scalars_opt() throws RecognitionException {
		Scalars_optContext _localctx = new Scalars_optContext(_ctx, getState());
		enterRule(_localctx, 1546, RULE_scalars_opt);
		try {
			setState(11679);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(11675);
				match(ALLOW);
				setState(11676);
				match(SCALARS);
				}
				break;
			case DISALLOW:
				enterOuterAlt(_localctx, 2);
				{
				setState(11677);
				match(DISALLOW);
				setState(11678);
				match(SCALARS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wrapper_optsContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(OBParser.WITHOUT, 0); }
		public TerminalNode WRAPPER() { return getToken(OBParser.WRAPPER, 0); }
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(OBParser.UNCONDITIONAL, 0); }
		public TerminalNode CONDITIONAL() { return getToken(OBParser.CONDITIONAL, 0); }
		public Wrapper_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wrapper_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterWrapper_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitWrapper_opts(this);
		}
	}

	public final Wrapper_optsContext wrapper_opts() throws RecognitionException {
		Wrapper_optsContext _localctx = new Wrapper_optsContext(_ctx, getState());
		enterRule(_localctx, 1548, RULE_wrapper_opts);
		try {
			setState(11705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11681);
				match(WITHOUT);
				setState(11682);
				match(WRAPPER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11683);
				match(WITHOUT);
				setState(11684);
				match(ARRAY);
				setState(11685);
				match(WRAPPER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11686);
				match(WITH);
				setState(11687);
				match(WRAPPER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11688);
				match(WITH);
				setState(11689);
				match(ARRAY);
				setState(11690);
				match(WRAPPER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11691);
				match(WITH);
				setState(11692);
				match(UNCONDITIONAL);
				setState(11693);
				match(WRAPPER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11694);
				match(WITH);
				setState(11695);
				match(CONDITIONAL);
				setState(11696);
				match(WRAPPER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11697);
				match(WITH);
				setState(11698);
				match(UNCONDITIONAL);
				setState(11699);
				match(ARRAY);
				setState(11700);
				match(WRAPPER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11701);
				match(WITH);
				setState(11702);
				match(CONDITIONAL);
				setState(11703);
				match(ARRAY);
				setState(11704);
				match(WRAPPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_query_on_optContext extends ParserRuleContext {
		public On_empty_queryContext on_empty_query() {
			return getRuleContext(On_empty_queryContext.class,0);
		}
		public On_error_queryContext on_error_query() {
			return getRuleContext(On_error_queryContext.class,0);
		}
		public On_mismatch_queryContext on_mismatch_query() {
			return getRuleContext(On_mismatch_queryContext.class,0);
		}
		public Json_query_on_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_query_on_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_query_on_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_query_on_opt(this);
		}
	}

	public final Json_query_on_optContext json_query_on_opt() throws RecognitionException {
		Json_query_on_optContext _localctx = new Json_query_on_optContext(_ctx, getState());
		enterRule(_localctx, 1550, RULE_json_query_on_opt);
		try {
			setState(11730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11707);
				on_empty_query();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11708);
				on_error_query();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11709);
				on_mismatch_query();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11710);
				on_error_query();
				setState(11711);
				on_empty_query();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11713);
				on_empty_query();
				setState(11714);
				on_error_query();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11716);
				on_error_query();
				setState(11717);
				on_mismatch_query();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11719);
				on_empty_query();
				setState(11720);
				on_mismatch_query();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11722);
				on_error_query();
				setState(11723);
				on_empty_query();
				setState(11724);
				on_mismatch_query();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11726);
				on_empty_query();
				setState(11727);
				on_error_query();
				setState(11728);
				on_mismatch_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_response_queryContext extends ParserRuleContext {
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public Opt_response_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_response_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_response_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_response_query(this);
		}
	}

	public final Opt_response_queryContext opt_response_query() throws RecognitionException {
		Opt_response_queryContext _localctx = new Opt_response_queryContext(_ctx, getState());
		enterRule(_localctx, 1552, RULE_opt_response_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11732);
			_la = _input.LA(1);
			if ( !(_la==NULLX || _la==ERROR_P) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_mismatch_queryContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode MISMATCH() { return getToken(OBParser.MISMATCH, 0); }
		public TerminalNode DOT() { return getToken(OBParser.DOT, 0); }
		public Opt_response_queryContext opt_response_query() {
			return getRuleContext(Opt_response_queryContext.class,0);
		}
		public On_mismatch_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_mismatch_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOn_mismatch_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOn_mismatch_query(this);
		}
	}

	public final On_mismatch_queryContext on_mismatch_query() throws RecognitionException {
		On_mismatch_queryContext _localctx = new On_mismatch_queryContext(_ctx, getState());
		enterRule(_localctx, 1554, RULE_on_mismatch_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT:
				{
				setState(11734);
				match(DOT);
				}
				break;
			case NULLX:
			case ERROR_P:
				{
				setState(11735);
				opt_response_query();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(11738);
			match(ON);
			setState(11739);
			match(MISMATCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_error_queryContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public TerminalNode EMPTY() { return getToken(OBParser.EMPTY, 0); }
		public TerminalNode OBJECT() { return getToken(OBParser.OBJECT, 0); }
		public Opt_response_queryContext opt_response_query() {
			return getRuleContext(Opt_response_queryContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public On_error_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_error_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOn_error_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOn_error_query(this);
		}
	}

	public final On_error_queryContext on_error_query() throws RecognitionException {
		On_error_queryContext _localctx = new On_error_queryContext(_ctx, getState());
		enterRule(_localctx, 1556, RULE_on_error_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1341,_ctx) ) {
			case 1:
				{
				setState(11746);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EMPTY:
					{
					setState(11741);
					match(EMPTY);
					setState(11743);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ARRAY) {
						{
						setState(11742);
						match(ARRAY);
						}
					}

					}
					break;
				case NULLX:
				case ERROR_P:
					{
					setState(11745);
					opt_response_query();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(11748);
				match(EMPTY);
				setState(11749);
				match(OBJECT);
				}
				break;
			}
			setState(11752);
			match(ON);
			setState(11753);
			match(ERROR_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_empty_queryContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public List<TerminalNode> EMPTY() { return getTokens(OBParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(OBParser.EMPTY, i);
		}
		public TerminalNode OBJECT() { return getToken(OBParser.OBJECT, 0); }
		public Opt_response_queryContext opt_response_query() {
			return getRuleContext(Opt_response_queryContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public On_empty_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_empty_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOn_empty_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOn_empty_query(this);
		}
	}

	public final On_empty_queryContext on_empty_query() throws RecognitionException {
		On_empty_queryContext _localctx = new On_empty_queryContext(_ctx, getState());
		enterRule(_localctx, 1558, RULE_on_empty_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1344,_ctx) ) {
			case 1:
				{
				setState(11760);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EMPTY:
					{
					setState(11755);
					match(EMPTY);
					setState(11757);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ARRAY) {
						{
						setState(11756);
						match(ARRAY);
						}
					}

					}
					break;
				case NULLX:
				case ERROR_P:
					{
					setState(11759);
					opt_response_query();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(11762);
				match(EMPTY);
				setState(11763);
				match(OBJECT);
				}
				break;
			}
			setState(11766);
			match(ON);
			setState(11767);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_value_exprContext extends ParserRuleContext {
		public TerminalNode JSON_VALUE() { return getToken(OBParser.JSON_VALUE, 0); }
		public TerminalNode LeftParen() { return getToken(OBParser.LeftParen, 0); }
		public Simple_exprContext simple_expr() {
			return getRuleContext(Simple_exprContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Complex_string_literalContext complex_string_literal() {
			return getRuleContext(Complex_string_literalContext.class,0);
		}
		public Json_value_optContext json_value_opt() {
			return getRuleContext(Json_value_optContext.class,0);
		}
		public TerminalNode RightParen() { return getToken(OBParser.RightParen, 0); }
		public TerminalNode RETURNING() { return getToken(OBParser.RETURNING, 0); }
		public Cast_data_typeContext cast_data_type() {
			return getRuleContext(Cast_data_typeContext.class,0);
		}
		public Json_value_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_value_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_value_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_value_expr(this);
		}
	}

	public final Json_value_exprContext json_value_expr() throws RecognitionException {
		Json_value_exprContext _localctx = new Json_value_exprContext(_ctx, getState());
		enterRule(_localctx, 1560, RULE_json_value_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11769);
			match(JSON_VALUE);
			setState(11770);
			match(LeftParen);
			setState(11771);
			simple_expr(0);
			setState(11772);
			match(Comma);
			setState(11773);
			complex_string_literal();
			setState(11776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(11774);
				match(RETURNING);
				setState(11775);
				cast_data_type();
				}
			}

			setState(11778);
			json_value_opt();
			setState(11779);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_value_optContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public TerminalNode ASCII() { return getToken(OBParser.ASCII, 0); }
		public Json_value_on_optContext json_value_on_opt() {
			return getRuleContext(Json_value_on_optContext.class,0);
		}
		public Json_value_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_value_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_value_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_value_opt(this);
		}
	}

	public final Json_value_optContext json_value_opt() throws RecognitionException {
		Json_value_optContext _localctx = new Json_value_optContext(_ctx, getState());
		enterRule(_localctx, 1562, RULE_json_value_opt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUNCATE) {
				{
				setState(11781);
				match(TRUNCATE);
				}
			}

			setState(11785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCII) {
				{
				setState(11784);
				match(ASCII);
				}
			}

			setState(11788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==NULLX || _la==ERROR_P) {
				{
				setState(11787);
				json_value_on_opt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_value_on_optContext extends ParserRuleContext {
		public On_emptyContext on_empty() {
			return getRuleContext(On_emptyContext.class,0);
		}
		public On_errorContext on_error() {
			return getRuleContext(On_errorContext.class,0);
		}
		public Json_value_on_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_value_on_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_value_on_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_value_on_opt(this);
		}
	}

	public final Json_value_on_optContext json_value_on_opt() throws RecognitionException {
		Json_value_on_optContext _localctx = new Json_value_on_optContext(_ctx, getState());
		enterRule(_localctx, 1564, RULE_json_value_on_opt);
		try {
			setState(11795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11790);
				on_empty();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11791);
				on_error();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11792);
				on_empty();
				setState(11793);
				on_error();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_on_empty_or_errorContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public On_emptyContext on_empty() {
			return getRuleContext(On_emptyContext.class,0);
		}
		public On_errorContext on_error() {
			return getRuleContext(On_errorContext.class,0);
		}
		public Opt_on_empty_or_errorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_on_empty_or_error; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_on_empty_or_error(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_on_empty_or_error(this);
		}
	}

	public final Opt_on_empty_or_errorContext opt_on_empty_or_error() throws RecognitionException {
		Opt_on_empty_or_errorContext _localctx = new Opt_on_empty_or_errorContext(_ctx, getState());
		enterRule(_localctx, 1566, RULE_opt_on_empty_or_error);
		int _la;
		try {
			setState(11803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11797);
				empty();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11798);
				on_empty();
				setState(11800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULLX || _la==ERROR_P) {
					{
					setState(11799);
					on_error();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11802);
				on_error();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_emptyContext extends ParserRuleContext {
		public Json_on_responseContext json_on_response() {
			return getRuleContext(Json_on_responseContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(OBParser.EMPTY, 0); }
		public On_emptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOn_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOn_empty(this);
		}
	}

	public final On_emptyContext on_empty() throws RecognitionException {
		On_emptyContext _localctx = new On_emptyContext(_ctx, getState());
		enterRule(_localctx, 1568, RULE_on_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11805);
			json_on_response();
			setState(11806);
			match(ON);
			setState(11807);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_errorContext extends ParserRuleContext {
		public Json_on_responseContext json_on_response() {
			return getRuleContext(Json_on_responseContext.class,0);
		}
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public On_errorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_error; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOn_error(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOn_error(this);
		}
	}

	public final On_errorContext on_error() throws RecognitionException {
		On_errorContext _localctx = new On_errorContext(_ctx, getState());
		enterRule(_localctx, 1570, RULE_on_error);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11809);
			json_on_response();
			setState(11810);
			match(ON);
			setState(11811);
			match(ERROR_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_on_responseContext extends ParserRuleContext {
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public TerminalNode NULLX() { return getToken(OBParser.NULLX, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public Signed_literalContext signed_literal() {
			return getRuleContext(Signed_literalContext.class,0);
		}
		public Json_on_responseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_on_response; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterJson_on_response(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitJson_on_response(this);
		}
	}

	public final Json_on_responseContext json_on_response() throws RecognitionException {
		Json_on_responseContext _localctx = new Json_on_responseContext(_ctx, getState());
		enterRule(_localctx, 1572, RULE_json_on_response);
		try {
			setState(11817);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_P:
				enterOuterAlt(_localctx, 1);
				{
				setState(11813);
				match(ERROR_P);
				}
				break;
			case NULLX:
				enterOuterAlt(_localctx, 2);
				{
				setState(11814);
				match(NULLX);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(11815);
				match(DEFAULT);
				setState(11816);
				signed_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Opt_skip_index_type_listContext extends ParserRuleContext {
		public EmptyContext empty() {
			return getRuleContext(EmptyContext.class,0);
		}
		public Skip_index_typeContext skip_index_type() {
			return getRuleContext(Skip_index_typeContext.class,0);
		}
		public Opt_skip_index_type_listContext opt_skip_index_type_list() {
			return getRuleContext(Opt_skip_index_type_listContext.class,0);
		}
		public TerminalNode Comma() { return getToken(OBParser.Comma, 0); }
		public Opt_skip_index_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opt_skip_index_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterOpt_skip_index_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitOpt_skip_index_type_list(this);
		}
	}

	public final Opt_skip_index_type_listContext opt_skip_index_type_list() throws RecognitionException {
		return opt_skip_index_type_list(0);
	}

	private Opt_skip_index_type_listContext opt_skip_index_type_list(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Opt_skip_index_type_listContext _localctx = new Opt_skip_index_type_listContext(_ctx, _parentState);
		Opt_skip_index_type_listContext _prevctx = _localctx;
		int _startState = 1574;
		enterRecursionRule(_localctx, 1574, RULE_opt_skip_index_type_list, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1353,_ctx) ) {
			case 1:
				{
				setState(11820);
				empty();
				}
				break;
			case 2:
				{
				setState(11821);
				skip_index_type();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(11829);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1354,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Opt_skip_index_type_listContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_opt_skip_index_type_list);
					setState(11824);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(11825);
					match(Comma);
					setState(11826);
					skip_index_type();
					}
					} 
				}
				setState(11831);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1354,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Skip_index_typeContext extends ParserRuleContext {
		public TerminalNode MIN_MAX() { return getToken(OBParser.MIN_MAX, 0); }
		public TerminalNode SUM() { return getToken(OBParser.SUM, 0); }
		public Skip_index_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skip_index_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterSkip_index_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitSkip_index_type(this);
		}
	}

	public final Skip_index_typeContext skip_index_type() throws RecognitionException {
		Skip_index_typeContext _localctx = new Skip_index_typeContext(_ctx, getState());
		enterRule(_localctx, 1576, RULE_skip_index_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11832);
			_la = _input.LA(1);
			if ( !(_la==MIN_MAX || _la==SUM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_chunk_sizeContext extends ParserRuleContext {
		public TerminalNode CHUNK() { return getToken(OBParser.CHUNK, 0); }
		public TerminalNode INTNUM() { return getToken(OBParser.INTNUM, 0); }
		public TerminalNode STRING_VALUE() { return getToken(OBParser.STRING_VALUE, 0); }
		public Lob_chunk_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_chunk_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLob_chunk_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLob_chunk_size(this);
		}
	}

	public final Lob_chunk_sizeContext lob_chunk_size() throws RecognitionException {
		Lob_chunk_sizeContext _localctx = new Lob_chunk_sizeContext(_ctx, getState());
		enterRule(_localctx, 1578, RULE_lob_chunk_size);
		try {
			setState(11838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11834);
				match(CHUNK);
				setState(11835);
				match(INTNUM);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11836);
				match(CHUNK);
				setState(11837);
				match(STRING_VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parameterContext extends ParserRuleContext {
		public Lob_chunk_sizeContext lob_chunk_size() {
			return getRuleContext(Lob_chunk_sizeContext.class,0);
		}
		public Lob_storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLob_storage_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLob_storage_parameter(this);
		}
	}

	public final Lob_storage_parameterContext lob_storage_parameter() throws RecognitionException {
		Lob_storage_parameterContext _localctx = new Lob_storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 1580, RULE_lob_storage_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11840);
			lob_chunk_size();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public List<Lob_storage_parameterContext> lob_storage_parameter() {
			return getRuleContexts(Lob_storage_parameterContext.class);
		}
		public Lob_storage_parameterContext lob_storage_parameter(int i) {
			return getRuleContext(Lob_storage_parameterContext.class,i);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLob_storage_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLob_storage_parameters(this);
		}
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 1582, RULE_lob_storage_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11843); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(11842);
				lob_storage_parameter();
				}
				}
				setState(11845); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CHUNK );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode JSON() { return getToken(OBParser.JSON, 0); }
		public List<TerminalNode> LeftParen() { return getTokens(OBParser.LeftParen); }
		public TerminalNode LeftParen(int i) {
			return getToken(OBParser.LeftParen, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> RightParen() { return getTokens(OBParser.RightParen); }
		public TerminalNode RightParen(int i) {
			return getToken(OBParser.RightParen, i);
		}
		public TerminalNode STORE() { return getToken(OBParser.STORE, 0); }
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return getRuleContext(Lob_storage_parametersContext.class,0);
		}
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterLob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitLob_storage_clause(this);
		}
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 1584, RULE_lob_storage_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11847);
			match(JSON);
			setState(11848);
			match(LeftParen);
			setState(11849);
			column_name();
			setState(11850);
			match(RightParen);
			setState(11851);
			match(STORE);
			setState(11852);
			match(AS);
			setState(11853);
			match(LeftParen);
			setState(11854);
			lob_storage_parameters();
			setState(11855);
			match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keywordContext extends ParserRuleContext {
		public Unreserved_keyword_for_role_nameContext unreserved_keyword_for_role_name() {
			return getRuleContext(Unreserved_keyword_for_role_nameContext.class,0);
		}
		public Unreserved_keyword_ambiguous_rolesContext unreserved_keyword_ambiguous_roles() {
			return getRuleContext(Unreserved_keyword_ambiguous_rolesContext.class,0);
		}
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnreserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnreserved_keyword(this);
		}
	}

	public final Unreserved_keywordContext unreserved_keyword() throws RecognitionException {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1586, RULE_unreserved_keyword);
		try {
			setState(11859);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case ACCESS:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case PASSWORD:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(11857);
				unreserved_keyword_for_role_name();
				}
				break;
			case EVENT:
			case FILEX:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case REPLICATION:
			case SUPER:
			case RESOURCE:
			case PROXY:
			case NONE:
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11858);
				unreserved_keyword_ambiguous_roles();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keyword_for_role_nameContext extends ParserRuleContext {
		public Unreserved_keyword_normalContext unreserved_keyword_normal() {
			return getRuleContext(Unreserved_keyword_normalContext.class,0);
		}
		public Unreserved_keyword_specialContext unreserved_keyword_special() {
			return getRuleContext(Unreserved_keyword_specialContext.class,0);
		}
		public Unreserved_keyword_extraContext unreserved_keyword_extra() {
			return getRuleContext(Unreserved_keyword_extraContext.class,0);
		}
		public Unreserved_keyword_for_role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword_for_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnreserved_keyword_for_role_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnreserved_keyword_for_role_name(this);
		}
	}

	public final Unreserved_keyword_for_role_nameContext unreserved_keyword_for_role_name() throws RecognitionException {
		Unreserved_keyword_for_role_nameContext _localctx = new Unreserved_keyword_for_role_nameContext(_ctx, getState());
		enterRule(_localctx, 1588, RULE_unreserved_keyword_for_role_name);
		try {
			setState(11864);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
			case JSON_QUERY:
			case QUOTA_NAME:
			case ADMIN:
			case ALLOW:
			case EUCLIDEAN:
			case STSTOKEN:
			case REWRITE:
			case VECTOR_DISTANCE:
			case PARTITION_TYPE:
			case DOT:
			case TASK_ID:
			case COMPUTATION:
			case MANHATTAN:
			case AUTO_REFRESH:
			case ARRAY:
			case SINGLE:
			case SHARED_STORAGE_DEST:
			case DISALLOW:
			case UnderlineST_ASMVT:
			case CONDITIONAL:
			case RB_AND_AGG:
			case COMPRESSION_CODE:
			case FILE_BLOCK_SIZE:
			case APPROXIMATE:
			case MAX_NET_BANDWIDTH:
			case MULTIVALUE:
			case SHARED_STORAGE_INFO:
			case RB_OR_AGG:
			case DATA_SOURCE:
			case PROJECT_NAME:
			case VECTOR:
			case ENDPOINT:
			case DATA_DISK_SIZE:
			case BUFFER_SIZE:
			case PROPERTIES:
			case ATTRIBUTE:
			case ASIS:
			case SCALARS:
			case USER_SPECIFIED:
			case ACCESS_INFO:
			case ROARINGBITMAP:
			case VALIDATION:
			case COSINE:
			case SUM_OPNSIZE:
			case ACCESSKEY:
			case MICRO_INDEX_CLUSTERED:
			case AUTO_INCREMENT_CACHE_SIZE:
			case ACCESSTYPE:
			case EXTERNAL_STORAGE_DEST:
			case OVERWRITE:
			case LAST_REFRESH_SCN:
			case WITHOUT:
			case MAX_FILE_SIZE:
			case APPROX:
			case MISMATCH:
			case SS_MICRO_CACHE:
			case OPTIMIZER_COSTS:
			case PAXOS_REPLICA_NUM:
			case ACCESSID:
			case UNCONDITIONAL:
			case NET_BANDWIDTH_WEIGHT:
			case RB_BUILD_AGG:
			case OBJECT_ID:
			case AGAINST:
			case ALWAYS:
			case NAMESPACE:
			case CIPHER:
			case COLUMNS:
			case LS:
			case CYCLE:
			case NUMBER:
			case ROWID:
			case SYNCHRONOUS:
			case IMMEDIATE:
			case FIELDS:
			case FULL:
			case ID:
			case INCLUDING:
			case LIB:
			case ORDINALITY:
			case ISSUER:
			case LANGUAGE:
			case BISON_LIST:
			case LOCAL:
			case UNLIMITED:
			case MERGE:
			case MODE:
			case IOPS_WEIGHT:
			case PARSER:
			case MIN_MAX:
			case PUBLIC:
			case ROWS:
			case REJECT:
			case PLUS:
			case SUBJECT:
			case SYSDATE:
			case TEXT:
			case CALIBRATION:
			case LINE_DELIMITER:
			case GEOMCOLLECTION:
			case QUERY_RESPONSE_TIME:
			case REDUNDANCY:
			case CALIBRATION_INFO:
			case SCN:
			case WINDOW:
			case X509:
			case STRONG:
			case WEAK:
			case CONNECT:
			case FROZEN:
			case EXCEPT:
			case MINUS:
			case INTERSECT:
			case ISNULL:
			case AUDIT:
			case WARNINGS:
			case FORMAT:
			case MINVALUE:
			case EMPTY_FIELD_AS_NULL:
			case UNINSTALL:
			case UNDOFILE:
			case MASTER_SSL_CA:
			case YEAR:
			case DISCONNECT:
			case STOP:
			case SIZE:
			case AT:
			case RELAY_LOG_POS:
			case POOL:
			case CURDATE:
			case JSON_VALUE:
			case ZONE_TYPE:
			case LOCATION:
			case WEIGHT_STRING:
			case CHANGED:
			case MASTER_SSL_CAPATH:
			case NTH_VALUE:
			case SERIAL:
			case PROGRESSIVE_MERGE_NUM:
			case QUEUE_TIME:
			case TABLET_MAX_SIZE:
			case ILOGCACHE:
			case AUTHORS:
			case MIGRATE:
			case CONSISTENT:
			case SUSPEND:
			case REMOTE_OSS:
			case SECURITY:
			case SET_SLAVE_CLUSTER:
			case FAST:
			case PREVIEW:
			case BANDWIDTH:
			case TRUNCATE:
			case BACKUP_BACKUP_DEST:
			case CONSTRAINT_SCHEMA:
			case STATEMENT:
			case MASTER_SSL_CERT:
			case TABLE_NAME:
			case PRIORITY:
			case DO:
			case MASTER_RETRY_COUNT:
			case REPLICA:
			case RECOVERY:
			case OLD_KEY:
			case DISABLE:
			case PORT:
			case REBUILD:
			case FOLLOWER:
			case ROOT:
			case REDOFILE:
			case MASTER_SERVER_ID:
			case NCHAR:
			case KEY_BLOCK_SIZE:
			case SEQUENCE:
			case MIGRATION:
			case SUBPARTITION:
			case ROW_NUMBER:
			case COMPRESSION:
			case BIT:
			case SAMPLE:
			case UNLOCKED:
			case CLASS_ORIGIN:
			case STATEMENTS:
			case ACTION:
			case REDUNDANT:
			case UPGRADE:
			case VALIDATE:
			case START:
			case TEMPTABLE:
			case RECYCLEBIN:
			case PROFILES:
			case ERRORS:
			case LEAVES:
			case UNDEFINED:
			case EVERY:
			case SHARDING:
			case BYTE:
			case FLUSH:
			case MIN_ROWS:
			case ERROR_P:
			case MAX_USER_CONNECTIONS:
			case MAX_CPU:
			case LOCKED:
			case IO:
			case BTREE:
			case SLOT_IDX:
			case HASH:
			case ROTATE:
			case COLLATION:
			case MASTER:
			case ENCRYPTION:
			case MAX:
			case TRANSACTION:
			case SQL_TSI_MONTH:
			case ARBITRATION:
			case MAX_QUERIES_PER_HOUR:
			case COMMENT:
			case CTX_ID:
			case MIN_IOPS:
			case NVARCHAR:
			case OFF:
			case BIT_XOR:
			case PAUSE:
			case QUICK:
			case PRETTY:
			case DUPLICATE:
			case WAIT:
			case FIELD_OPTIONALLY_ENCLOSED_BY:
			case DES_KEY_FILE:
			case ENGINES:
			case RETURNS:
			case MASTER_USER:
			case SOCKET:
			case MASTER_DELAY:
			case FILE_ID:
			case FIRST:
			case TABLET:
			case CLIENT:
			case ENGINE_:
			case EXCLUDING:
			case TABLES:
			case TRADITIONAL:
			case BOOTSTRAP:
			case STDDEV:
			case DATAFILE:
			case INVOKER:
			case DEPTH:
			case NORMAL:
			case LN:
			case COLUMN_NAME:
			case TRIGGERS:
			case RESET:
			case COALESCE:
			case RESPECT:
			case STATUS:
			case AUTO_INCREMENT_MODE:
			case UNBOUNDED:
			case WRAPPER:
			case TIMESTAMP:
			case PARTITIONS:
			case SUBSTR:
			case CHUNK:
			case BACKUPSET:
			case UNIT:
			case PRIVILEGES:
			case DEMAND:
			case BACKUPPIECE:
			case LESS:
			case SWITCH:
			case DIAGNOSTICS:
			case REDO_BUFFER_SIZE:
			case NO:
			case MAJOR:
			case ACTIVE:
			case ROUTINE:
			case FOLLOWING:
			case DEFAULT_LOB_INROW_THRESHOLD:
			case LOB_INROW_THRESHOLD:
			case SCHEMA_ID:
			case LATERAL:
			case ROLLBACK:
			case READ_ONLY:
			case MEMBER:
			case PARTITION_ID:
			case DUMP:
			case EXTERNAL:
			case APPROX_COUNT_DISTINCT_SYNOPSIS:
			case GROUPING:
			case OF:
			case SLOG:
			case OJ:
			case ARCHIVELOG:
			case MAX_CONNECTIONS_PER_HOUR:
			case ASYNCHRONOUS:
			case ENCODING:
			case SECOND:
			case UNKNOWN:
			case POINT:
			case PL:
			case MEMSTORE_PERCENT:
			case STD:
			case POLYGON:
			case PS:
			case OLD:
			case TABLE_ID:
			case CONTEXT:
			case FINAL_COUNT:
			case MASTER_CONNECT_RETRY:
			case POSITION:
			case DISCARD:
			case PREV:
			case RECOVER:
			case DEALLOCATE:
			case OLD_PASSWORD:
			case FAILOVER:
			case LISTAGG:
			case SLOW:
			case NOAUDIT:
			case SUM:
			case OPTIONS:
			case MIN:
			case RT:
			case ONE:
			case DELAY_KEY_WRITE:
			case ORIG_DEFAULT:
			case INDEXED:
			case RETURNING:
			case SQL_TSI_HOUR:
			case TIMESTAMPDIFF:
			case RESTORE:
			case OFFSET:
			case TEMPORARY:
			case VARIANCE:
			case SNAPSHOT:
			case STATISTICS:
			case SERVER_TYPE:
			case COMMITTED:
			case INDEXES:
			case FREEZE:
			case SCOPE:
			case IDC:
			case VIEW:
			case ONE_SHOT:
			case ACCOUNT:
			case LOCALITY:
			case REVERSE:
			case UP:
			case CLUSTER_ID:
			case NOARCHIVELOG:
			case MAX_SIZE:
			case PAGE:
			case NAME:
			case ROW_COUNT:
			case LAST:
			case WASH:
			case LOGONLY_REPLICA_NUM:
			case DELAY:
			case SUBDATE:
			case INCREMENTAL:
			case ROLLING:
			case VERIFY:
			case CONTAINS:
			case GENERAL:
			case VISIBLE:
			case SIGNED:
			case SERVER:
			case NEXT:
			case ENDS:
			case GLOBAL:
			case ROOTSERVICE_LIST:
			case VERBOSE:
			case CLUSTER_NAME:
			case MASTER_PORT:
			case MYSQL_ERRNO:
			case XA:
			case TIME:
			case DATETIME:
			case NOMINVALUE:
			case BOOL:
			case DIRECTORY:
			case DATA_TABLE_ID:
			case SEQUENCES:
			case PRETTY_COLOR:
			case VALID:
			case MASTER_SSL_KEY:
			case MASTER_PASSWORD:
			case PLAN:
			case SHARE:
			case MULTIPOLYGON:
			case STDDEV_SAMP:
			case USE_BLOOM_FILTER:
			case CONSTRAINT_CATALOG:
			case CLUSTER:
			case EXCHANGE:
			case GRANTS:
			case CAST:
			case SERVER_PORT:
			case SQL_CACHE:
			case MAX_USED_PART_ID:
			case HYBRID_HIST:
			case INSTANCE:
			case FUNCTION:
			case NOWAIT:
			case INVISIBLE:
			case DENSE_RANK:
			case COUNT:
			case NAMES:
			case MY_NAME:
			case P_ENTITY:
			case ISOLATE:
			case MAX_ROWS:
			case CTXCAT:
			case ISOLATION:
			case DECRYPTION:
			case REMOVE:
			case STATS_AUTO_RECALC:
			case CONSISTENT_MODE:
			case MODIFY:
			case UNCOMMITTED:
			case PHYSICAL:
			case NO_WAIT:
			case BACKUP_COPIES:
			case UNIT_NUM:
			case PERCENTAGE:
			case MAX_IOPS:
			case SPFILE:
			case REPEATABLE:
			case COMPLETION:
			case CONDENSED:
			case ROOTTABLE:
			case SUBSTRING:
			case ZONE:
			case BACKED:
			case SERVICE:
			case TEMPLATE:
			case DATE_SUB:
			case EXPIRE_INFO:
			case EXPIRE:
			case ENABLE:
			case HOSTS:
			case SCHEMA_NAME:
			case EXPANSION:
			case REORGANIZE:
			case BLOCK_SIZE:
			case TRIM_SPACE:
			case MINOR:
			case RESUME:
			case COMPLETE:
			case STATS_PERSISTENT:
			case NODEGROUP:
			case PARTITIONING:
			case BIT_AND:
			case TIMES:
			case COMMIT:
			case SAVEPOINT:
			case UNTIL:
			case USER:
			case LEAK_RATE:
			case MEMTABLE:
			case CHARSET:
			case MOVE:
			case XML:
			case PATH:
			case IPC:
			case TRIM:
			case PERFORMANCE:
			case RANK:
			case VAR_POP:
			case DEFAULT_AUTH:
			case EXTENT_SIZE:
			case BINLOG:
			case LEAK_MOD:
			case CLOG:
			case GEOMETRYCOLLECTION:
			case STORAGE:
			case MEDIUM:
			case USE_FRM:
			case MASTER_HEARTBEAT_PERIOD:
			case SUBPARTITIONS:
			case CUBE:
			case FRAGMENTATION:
			case BALANCE:
			case QUERY:
			case POLICY:
			case THROTTLE:
			case SQL_TSI_QUARTER:
			case REPAIR:
			case MASTER_SSL_CIPHER:
			case KEY_VERSION:
			case CATALOG_NAME:
			case NDBCLUSTER:
			case CONNECTION:
			case COMPACT:
			case SYNCHRONIZATION:
			case AVAILABILITY:
			case INCR:
			case CANCEL:
			case SIMPLE:
			case VARIABLES:
			case SQL_TSI_WEEK:
			case P_CHUNK:
			case SYSTEM:
			case ROOTSERVICE:
			case PLUGIN_DIR:
			case ASCII:
			case INFO:
			case SKIP_HEADER:
			case SQL_THREAD:
			case TYPES:
			case LEADER:
			case FOUND:
			case EXTRACT:
			case FIXED:
			case CACHE:
			case KV_ATTRIBUTES:
			case CURRENT:
			case STACKED:
			case RETURNED_SQLSTATE:
			case SKIP_INDEX:
			case END:
			case PRESERVE:
			case BADFILE:
			case LOG_DISK_SIZE:
			case SQL_BUFFER_RESULT:
			case JSON:
			case SOME:
			case INDEX_TABLE_ID:
			case PATTERN:
			case RECOVERY_WINDOW:
			case FREQUENCY:
			case LOCKS:
			case MANUAL:
			case GEOMETRY:
			case IDENTIFIED:
			case STORAGE_FORMAT_VERSION:
			case OVER:
			case USER_RESOURCES:
			case BACKUPROUND:
			case DESTINATION:
			case SONAME:
			case OUTLINE:
			case MASTER_LOG_FILE:
			case NOMAXVALUE:
			case ESTIMATE:
			case SLAVE:
			case SKIP_BLANK_LINES:
			case GTS:
			case EXPORT:
			case AVG_ROW_LENGTH:
			case ENFORCED:
			case FLASHBACK:
			case SESSION_USER:
			case TABLEGROUPS:
			case CURTIME:
			case REPLICA_TYPE:
			case AGGREGATE:
			case TRANSFER:
			case JSON_ARRAYAGG:
			case PERCENT_RANK:
			case ENUM:
			case NATIONAL:
			case RECYCLE:
			case REGION:
			case MUTEX:
			case PARALLEL:
			case NOPARALLEL:
			case NDB:
			case SYSTEM_USER:
			case MAXIMIZE:
			case MAX_UPDATES_PER_HOUR:
			case CURSOR_NAME:
			case CONCURRENT:
			case DUMPFILE:
			case COMPRESSED:
			case LINESTRING:
			case DYNAMIC:
			case CHAIN:
			case INCREMENT:
			case LAG:
			case BASELINE_ID:
			case NEW:
			case SQL_TSI_YEAR:
			case THAN:
			case CPU:
			case HOST:
			case VALUE:
			case LOGS:
			case SERIALIZABLE:
			case AUTO_INCREMENT:
			case BACKUP:
			case LOGFILE:
			case ROW_FORMAT:
			case SET_MASTER_CLUSTER:
			case MINUTE:
			case SWAPS:
			case TASK:
			case INNODB:
			case IO_THREAD:
			case HISTOGRAM:
			case PCTFREE:
			case PARAMETERS:
			case OBJECT:
			case TABLESPACE:
			case OBCONFIG_URL:
			case AUTO:
			case ROW:
			case MESSAGE_TEXT:
			case DISK:
			case FAULTS:
			case HOUR:
			case REFRESH:
			case COLUMN_STAT:
			case ANY:
			case UNIT_GROUP:
			case TTL:
			case ERROR_CODE:
			case PHASE:
			case ENTITY:
			case PROFILE:
			case LAST_VALUE:
			case RESTART:
			case TRACE:
			case LOGICAL_READS:
			case DATE_ADD:
			case BLOCK_INDEX:
			case SERVER_IP:
			case CODE:
			case PLUGINS:
			case ADDDATE:
			case VIRTUAL_COLUMN_ID:
			case COLUMN_FORMAT:
			case NESTED:
			case CLEAN:
			case MASTER_SSL:
			case CLEAR:
			case CHECKSUM:
			case INSTALL:
			case MONTH:
			case NEVER:
			case AFTER:
			case CLOSE:
			case JSON_OBJECTAGG:
			case SET_TP:
			case OWNER:
			case BLOOM_FILTER:
			case ILOG:
			case META:
			case STARTS:
			case PLANREGRESS:
			case AUTOEXTEND_SIZE:
			case TABLET_ID:
			case SOURCE:
			case IGNORE_SERVER_IDS:
			case REPLICA_NUM:
			case BINDING:
			case MICROSECOND:
			case UNDO_BUFFER_SIZE:
			case SWITCHOVER:
			case EXTENDED_NOADDR:
			case GLOBAL_NAME:
			case SPLIT:
			case BASELINE:
			case MEMORY:
			case DESCRIPTION:
			case SEED:
			case RTREE:
			case STDDEV_POP:
			case RUN:
			case OBSOLETE:
			case SQL_AFTER_GTIDS:
			case OPEN:
			case SQL_TSI_DAY:
			case STRING:
			case RELAY_THREAD:
			case BREADTH:
			case NOCACHE:
			case UNUSUAL:
			case RELAYLOG:
			case SQL_BEFORE_GTIDS:
			case PRIMARY_ZONE:
			case TABLE_CHECKSUM:
			case ZONE_LIST:
			case DATABASE_ID:
			case TP_NO:
			case NETWORK:
			case PROTECTION:
			case BOOLEAN:
			case AVG:
			case MULTILINESTRING:
			case APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE:
			case NOW:
			case BIT_OR:
			case DUPLICATE_SCOPE:
			case STATS_SAMPLE_PAGES:
			case TABLET_SIZE:
			case BASE:
			case KVCACHE:
			case RELAY:
			case MEMORY_SIZE:
			case CONTRIBUTORS:
			case EMPTY:
			case PARTIAL:
			case REPORT:
			case ESCAPE:
			case CLONE:
			case MASTER_AUTO_POSITION:
			case DISKGROUP:
			case CALC_PARTITION_ID:
			case TP_NAME:
			case ACTIVATE:
			case SQL_AFTER_MTS_GAPS:
			case EFFECTIVE:
			case FIRST_VALUE:
			case SQL_TSI_MINUTE:
			case UNICODE:
			case QUARTER:
			case ANALYSE:
			case DEFINER:
			case PROCESSLIST:
			case TYPE:
			case INSERT_METHOD:
			case EXTENDED:
			case LOG:
			case WHENEVER:
			case LEVEL:
			case TIME_ZONE_INFO:
			case TIMESTAMPADD:
			case GET_FORMAT:
			case PREPARE:
			case MATERIALIZED:
			case STANDBY:
			case WORK:
			case HANDLER:
			case CUME_DIST:
			case LEAK:
			case INITIAL_SIZE:
			case RELAY_LOG_FILE:
			case STORING:
			case IMPORT:
			case HELP:
			case CREATE_TIMESTAMP:
			case COMPUTE:
			case SOUNDS:
			case TABLE_MODE:
			case COPY:
			case SESSION:
			case DAG:
			case NOCYCLE:
			case SQL_NO_CACHE:
			case PRECEDING:
			case SWITCHES:
			case PACK_KEYS:
			case ENABLE_EXTENDED_ROWID:
			case SQL_ID:
			case NOORDER:
			case TENANT_ID:
			case CHECKPOINT:
			case DAY:
			case GROUP_CONCAT:
			case JSON_TABLE:
			case LEAD:
			case EVENTS:
			case RECURSIVE:
			case ONLY:
			case TABLEGROUP_ID:
			case TOP_K_FRE_HIST:
			case MASTER_SSL_CRL:
			case RESOURCE_POOL:
			case RESOURCE_POOL_LIST:
			case NTILE:
			case NULL_IF_EXETERNAL:
			case BUCKETS:
			case SKEWONLY:
			case SCHEDULE:
			case JOB:
			case SRID:
			case MASTER_LOG_POS:
			case SUBCLASS_ORIGIN:
			case MULTIPOINT:
			case BLOCK:
			case SQL_TSI_SECOND:
			case DATE:
			case ROLLUP:
			case MIN_CPU:
			case OCCUR:
			case DATA:
			case SUCCESSFUL:
			case REDO_TRANSPORT_OPTIONS:
			case FIELD_DELIMITER:
			case MASTER_HOST:
			case VAR_SAMP:
			case ALGORITHM:
			case EXPIRED:
			case CONSTRAINT_NAME:
			case APPROX_COUNT_DISTINCT:
			case BASIC:
			case DEFAULT_TABLEGROUP:
			case LIST_:
			case WEEK:
			case LINK:
			case STATEMENT_ID:
			case NULLS:
			case MASTER_SSL_CRLPATH:
			case CASCADED:
			case PLUGIN:
			case ENCRYPTED:
			case TENANT:
			case STORE:
			case LOG_RESTORE_SOURCE:
			case ENABLE_ARBITRATION_SERVICE:
			case STAT:
			case ALL_META:
			case ALL_USER:
			case BEGI:
			case REMAP:
			case HIDDEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(11861);
				unreserved_keyword_normal();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(11862);
				unreserved_keyword_special();
				}
				break;
			case ACCESS:
				enterOuterAlt(_localctx, 3);
				{
				setState(11863);
				unreserved_keyword_extra();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keyword_normalContext extends ParserRuleContext {
		public TerminalNode ACCESS_INFO() { return getToken(OBParser.ACCESS_INFO, 0); }
		public TerminalNode ACCESSID() { return getToken(OBParser.ACCESSID, 0); }
		public TerminalNode ACCESSKEY() { return getToken(OBParser.ACCESSKEY, 0); }
		public TerminalNode ACCESSTYPE() { return getToken(OBParser.ACCESSTYPE, 0); }
		public TerminalNode ACCOUNT() { return getToken(OBParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(OBParser.ACTION, 0); }
		public TerminalNode ACTIVE() { return getToken(OBParser.ACTIVE, 0); }
		public TerminalNode ADDDATE() { return getToken(OBParser.ADDDATE, 0); }
		public TerminalNode ADMIN() { return getToken(OBParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(OBParser.AFTER, 0); }
		public TerminalNode AGAINST() { return getToken(OBParser.AGAINST, 0); }
		public TerminalNode AGGREGATE() { return getToken(OBParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(OBParser.ALGORITHM, 0); }
		public TerminalNode ALLOW() { return getToken(OBParser.ALLOW, 0); }
		public TerminalNode ALL_META() { return getToken(OBParser.ALL_META, 0); }
		public TerminalNode ALL_USER() { return getToken(OBParser.ALL_USER, 0); }
		public TerminalNode ALWAYS() { return getToken(OBParser.ALWAYS, 0); }
		public TerminalNode ANALYSE() { return getToken(OBParser.ANALYSE, 0); }
		public TerminalNode ANY() { return getToken(OBParser.ANY, 0); }
		public TerminalNode APPROX() { return getToken(OBParser.APPROX, 0); }
		public TerminalNode APPROXIMATE() { return getToken(OBParser.APPROXIMATE, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT() { return getToken(OBParser.APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_SYNOPSIS() { return getToken(OBParser.APPROX_COUNT_DISTINCT_SYNOPSIS, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE() { return getToken(OBParser.APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE, 0); }
		public TerminalNode ARCHIVELOG() { return getToken(OBParser.ARCHIVELOG, 0); }
		public TerminalNode ARBITRATION() { return getToken(OBParser.ARBITRATION, 0); }
		public TerminalNode ARRAY() { return getToken(OBParser.ARRAY, 0); }
		public TerminalNode ASIS() { return getToken(OBParser.ASIS, 0); }
		public TerminalNode ASCII() { return getToken(OBParser.ASCII, 0); }
		public TerminalNode ASYNCHRONOUS() { return getToken(OBParser.ASYNCHRONOUS, 0); }
		public TerminalNode AT() { return getToken(OBParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(OBParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(OBParser.AUDIT, 0); }
		public TerminalNode AUTHORS() { return getToken(OBParser.AUTHORS, 0); }
		public TerminalNode AUTO() { return getToken(OBParser.AUTO, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(OBParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(OBParser.AUTO_INCREMENT, 0); }
		public TerminalNode AUTO_INCREMENT_MODE() { return getToken(OBParser.AUTO_INCREMENT_MODE, 0); }
		public TerminalNode AUTO_INCREMENT_CACHE_SIZE() { return getToken(OBParser.AUTO_INCREMENT_CACHE_SIZE, 0); }
		public TerminalNode AUTO_REFRESH() { return getToken(OBParser.AUTO_REFRESH, 0); }
		public TerminalNode AVG() { return getToken(OBParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(OBParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP() { return getToken(OBParser.BACKUP, 0); }
		public TerminalNode BACKUPSET() { return getToken(OBParser.BACKUPSET, 0); }
		public TerminalNode BACKUP_COPIES() { return getToken(OBParser.BACKUP_COPIES, 0); }
		public TerminalNode BADFILE() { return getToken(OBParser.BADFILE, 0); }
		public TerminalNode BASE() { return getToken(OBParser.BASE, 0); }
		public TerminalNode BASELINE() { return getToken(OBParser.BASELINE, 0); }
		public TerminalNode BASELINE_ID() { return getToken(OBParser.BASELINE_ID, 0); }
		public TerminalNode BASIC() { return getToken(OBParser.BASIC, 0); }
		public TerminalNode BALANCE() { return getToken(OBParser.BALANCE, 0); }
		public TerminalNode BANDWIDTH() { return getToken(OBParser.BANDWIDTH, 0); }
		public TerminalNode BEGI() { return getToken(OBParser.BEGI, 0); }
		public TerminalNode BINDING() { return getToken(OBParser.BINDING, 0); }
		public TerminalNode BINLOG() { return getToken(OBParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(OBParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(OBParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(OBParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(OBParser.BIT_XOR, 0); }
		public TerminalNode BISON_LIST() { return getToken(OBParser.BISON_LIST, 0); }
		public TerminalNode BLOCK() { return getToken(OBParser.BLOCK, 0); }
		public TerminalNode BLOCK_SIZE() { return getToken(OBParser.BLOCK_SIZE, 0); }
		public TerminalNode BLOCK_INDEX() { return getToken(OBParser.BLOCK_INDEX, 0); }
		public TerminalNode BLOOM_FILTER() { return getToken(OBParser.BLOOM_FILTER, 0); }
		public TerminalNode BOOL() { return getToken(OBParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(OBParser.BOOLEAN, 0); }
		public TerminalNode BOOTSTRAP() { return getToken(OBParser.BOOTSTRAP, 0); }
		public TerminalNode BTREE() { return getToken(OBParser.BTREE, 0); }
		public TerminalNode BYTE() { return getToken(OBParser.BYTE, 0); }
		public TerminalNode BREADTH() { return getToken(OBParser.BREADTH, 0); }
		public TerminalNode BUCKETS() { return getToken(OBParser.BUCKETS, 0); }
		public TerminalNode BUFFER_SIZE() { return getToken(OBParser.BUFFER_SIZE, 0); }
		public TerminalNode CACHE() { return getToken(OBParser.CACHE, 0); }
		public TerminalNode CALIBRATION() { return getToken(OBParser.CALIBRATION, 0); }
		public TerminalNode CALIBRATION_INFO() { return getToken(OBParser.CALIBRATION_INFO, 0); }
		public TerminalNode KVCACHE() { return getToken(OBParser.KVCACHE, 0); }
		public TerminalNode ILOGCACHE() { return getToken(OBParser.ILOGCACHE, 0); }
		public TerminalNode CALC_PARTITION_ID() { return getToken(OBParser.CALC_PARTITION_ID, 0); }
		public TerminalNode CANCEL() { return getToken(OBParser.CANCEL, 0); }
		public TerminalNode CASCADED() { return getToken(OBParser.CASCADED, 0); }
		public TerminalNode CAST() { return getToken(OBParser.CAST, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(OBParser.CATALOG_NAME, 0); }
		public TerminalNode CHAIN() { return getToken(OBParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(OBParser.CHANGED, 0); }
		public TerminalNode CHARSET() { return getToken(OBParser.CHARSET, 0); }
		public TerminalNode CHECKSUM() { return getToken(OBParser.CHECKSUM, 0); }
		public TerminalNode CHECKPOINT() { return getToken(OBParser.CHECKPOINT, 0); }
		public TerminalNode CHUNK() { return getToken(OBParser.CHUNK, 0); }
		public TerminalNode CIPHER() { return getToken(OBParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(OBParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLEAN() { return getToken(OBParser.CLEAN, 0); }
		public TerminalNode CLEAR() { return getToken(OBParser.CLEAR, 0); }
		public TerminalNode CLIENT() { return getToken(OBParser.CLIENT, 0); }
		public TerminalNode CLONE() { return getToken(OBParser.CLONE, 0); }
		public TerminalNode CLOSE() { return getToken(OBParser.CLOSE, 0); }
		public TerminalNode CLOG() { return getToken(OBParser.CLOG, 0); }
		public TerminalNode CLUSTER() { return getToken(OBParser.CLUSTER, 0); }
		public TerminalNode CLUSTER_ID() { return getToken(OBParser.CLUSTER_ID, 0); }
		public TerminalNode CLUSTER_NAME() { return getToken(OBParser.CLUSTER_NAME, 0); }
		public TerminalNode COALESCE() { return getToken(OBParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(OBParser.CODE, 0); }
		public TerminalNode COLLATION() { return getToken(OBParser.COLLATION, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(OBParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(OBParser.COLUMN_NAME, 0); }
		public TerminalNode COLUMN_STAT() { return getToken(OBParser.COLUMN_STAT, 0); }
		public TerminalNode COLUMNS() { return getToken(OBParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(OBParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(OBParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(OBParser.COMMITTED, 0); }
		public TerminalNode COMPACT() { return getToken(OBParser.COMPACT, 0); }
		public TerminalNode COMPLETE() { return getToken(OBParser.COMPLETE, 0); }
		public TerminalNode COMPLETION() { return getToken(OBParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(OBParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(OBParser.COMPRESSION, 0); }
		public TerminalNode COMPRESSION_CODE() { return getToken(OBParser.COMPRESSION_CODE, 0); }
		public TerminalNode COMPUTATION() { return getToken(OBParser.COMPUTATION, 0); }
		public TerminalNode COMPUTE() { return getToken(OBParser.COMPUTE, 0); }
		public TerminalNode CONCURRENT() { return getToken(OBParser.CONCURRENT, 0); }
		public TerminalNode CONDENSED() { return getToken(OBParser.CONDENSED, 0); }
		public TerminalNode CONDITIONAL() { return getToken(OBParser.CONDITIONAL, 0); }
		public TerminalNode CONNECTION() { return getToken(OBParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(OBParser.CONSISTENT, 0); }
		public TerminalNode CONSISTENT_MODE() { return getToken(OBParser.CONSISTENT_MODE, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(OBParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(OBParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(OBParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(OBParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(OBParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(OBParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(OBParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(OBParser.COUNT, 0); }
		public TerminalNode COSINE() { return getToken(OBParser.COSINE, 0); }
		public TerminalNode CPU() { return getToken(OBParser.CPU, 0); }
		public TerminalNode CREATE_TIMESTAMP() { return getToken(OBParser.CREATE_TIMESTAMP, 0); }
		public TerminalNode CTXCAT() { return getToken(OBParser.CTXCAT, 0); }
		public TerminalNode CTX_ID() { return getToken(OBParser.CTX_ID, 0); }
		public TerminalNode CUBE() { return getToken(OBParser.CUBE, 0); }
		public TerminalNode CUME_DIST() { return getToken(OBParser.CUME_DIST, 0); }
		public TerminalNode CURDATE() { return getToken(OBParser.CURDATE, 0); }
		public TerminalNode CURRENT() { return getToken(OBParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(OBParser.CURSOR_NAME, 0); }
		public TerminalNode CURTIME() { return getToken(OBParser.CURTIME, 0); }
		public TerminalNode CYCLE() { return getToken(OBParser.CYCLE, 0); }
		public TerminalNode DAG() { return getToken(OBParser.DAG, 0); }
		public TerminalNode DATA() { return getToken(OBParser.DATA, 0); }
		public TerminalNode DATABASE_ID() { return getToken(OBParser.DATABASE_ID, 0); }
		public TerminalNode DATAFILE() { return getToken(OBParser.DATAFILE, 0); }
		public TerminalNode DATA_DISK_SIZE() { return getToken(OBParser.DATA_DISK_SIZE, 0); }
		public TerminalNode DATA_TABLE_ID() { return getToken(OBParser.DATA_TABLE_ID, 0); }
		public TerminalNode DATA_SOURCE() { return getToken(OBParser.DATA_SOURCE, 0); }
		public TerminalNode DATE() { return getToken(OBParser.DATE, 0); }
		public TerminalNode DATE_ADD() { return getToken(OBParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(OBParser.DATE_SUB, 0); }
		public TerminalNode DATETIME() { return getToken(OBParser.DATETIME, 0); }
		public TerminalNode DAY() { return getToken(OBParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(OBParser.DEALLOCATE, 0); }
		public TerminalNode DECRYPTION() { return getToken(OBParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(OBParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(OBParser.DEFINER, 0); }
		public TerminalNode DELAY() { return getToken(OBParser.DELAY, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(OBParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DENSE_RANK() { return getToken(OBParser.DENSE_RANK, 0); }
		public TerminalNode DEPTH() { return getToken(OBParser.DEPTH, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(OBParser.DES_KEY_FILE, 0); }
		public TerminalNode DESCRIPTION() { return getToken(OBParser.DESCRIPTION, 0); }
		public TerminalNode DESTINATION() { return getToken(OBParser.DESTINATION, 0); }
		public TerminalNode DEMAND() { return getToken(OBParser.DEMAND, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(OBParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(OBParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(OBParser.DISABLE, 0); }
		public TerminalNode DISALLOW() { return getToken(OBParser.DISALLOW, 0); }
		public TerminalNode DISCARD() { return getToken(OBParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(OBParser.DISK, 0); }
		public TerminalNode DISKGROUP() { return getToken(OBParser.DISKGROUP, 0); }
		public TerminalNode DISCONNECT() { return getToken(OBParser.DISCONNECT, 0); }
		public TerminalNode DO() { return getToken(OBParser.DO, 0); }
		public TerminalNode DOT() { return getToken(OBParser.DOT, 0); }
		public TerminalNode DUMP() { return getToken(OBParser.DUMP, 0); }
		public TerminalNode DUMPFILE() { return getToken(OBParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(OBParser.DUPLICATE, 0); }
		public TerminalNode DUPLICATE_SCOPE() { return getToken(OBParser.DUPLICATE_SCOPE, 0); }
		public TerminalNode DYNAMIC() { return getToken(OBParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT_TABLEGROUP() { return getToken(OBParser.DEFAULT_TABLEGROUP, 0); }
		public TerminalNode DEFAULT_LOB_INROW_THRESHOLD() { return getToken(OBParser.DEFAULT_LOB_INROW_THRESHOLD, 0); }
		public TerminalNode EFFECTIVE() { return getToken(OBParser.EFFECTIVE, 0); }
		public TerminalNode EMPTY() { return getToken(OBParser.EMPTY, 0); }
		public TerminalNode EMPTY_FIELD_AS_NULL() { return getToken(OBParser.EMPTY_FIELD_AS_NULL, 0); }
		public TerminalNode ENABLE() { return getToken(OBParser.ENABLE, 0); }
		public TerminalNode ENABLE_ARBITRATION_SERVICE() { return getToken(OBParser.ENABLE_ARBITRATION_SERVICE, 0); }
		public TerminalNode ENABLE_EXTENDED_ROWID() { return getToken(OBParser.ENABLE_EXTENDED_ROWID, 0); }
		public TerminalNode ENCODING() { return getToken(OBParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(OBParser.ENCRYPTED, 0); }
		public TerminalNode ENCRYPTION() { return getToken(OBParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(OBParser.END, 0); }
		public TerminalNode ENDPOINT() { return getToken(OBParser.ENDPOINT, 0); }
		public TerminalNode ENDS() { return getToken(OBParser.ENDS, 0); }
		public TerminalNode ENFORCED() { return getToken(OBParser.ENFORCED, 0); }
		public TerminalNode ENGINE_() { return getToken(OBParser.ENGINE_, 0); }
		public TerminalNode ENGINES() { return getToken(OBParser.ENGINES, 0); }
		public TerminalNode ENUM() { return getToken(OBParser.ENUM, 0); }
		public TerminalNode ENTITY() { return getToken(OBParser.ENTITY, 0); }
		public TerminalNode ERROR_CODE() { return getToken(OBParser.ERROR_CODE, 0); }
		public TerminalNode ERROR_P() { return getToken(OBParser.ERROR_P, 0); }
		public TerminalNode ERRORS() { return getToken(OBParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(OBParser.ESCAPE, 0); }
		public TerminalNode ESTIMATE() { return getToken(OBParser.ESTIMATE, 0); }
		public TerminalNode EUCLIDEAN() { return getToken(OBParser.EUCLIDEAN, 0); }
		public TerminalNode EVENTS() { return getToken(OBParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(OBParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(OBParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(OBParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDING() { return getToken(OBParser.EXCLUDING, 0); }
		public TerminalNode EXPANSION() { return getToken(OBParser.EXPANSION, 0); }
		public TerminalNode EXPIRE() { return getToken(OBParser.EXPIRE, 0); }
		public TerminalNode EXPIRED() { return getToken(OBParser.EXPIRED, 0); }
		public TerminalNode EXPIRE_INFO() { return getToken(OBParser.EXPIRE_INFO, 0); }
		public TerminalNode EXPORT() { return getToken(OBParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(OBParser.EXTENDED, 0); }
		public TerminalNode EXTENDED_NOADDR() { return getToken(OBParser.EXTENDED_NOADDR, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(OBParser.EXTENT_SIZE, 0); }
		public TerminalNode EXTERNAL() { return getToken(OBParser.EXTERNAL, 0); }
		public TerminalNode EXTERNAL_STORAGE_DEST() { return getToken(OBParser.EXTERNAL_STORAGE_DEST, 0); }
		public TerminalNode FAILOVER() { return getToken(OBParser.FAILOVER, 0); }
		public TerminalNode EXTRACT() { return getToken(OBParser.EXTRACT, 0); }
		public TerminalNode FAST() { return getToken(OBParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(OBParser.FAULTS, 0); }
		public TerminalNode FLASHBACK() { return getToken(OBParser.FLASHBACK, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(OBParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FIELDS() { return getToken(OBParser.FIELDS, 0); }
		public TerminalNode FIELD_DELIMITER() { return getToken(OBParser.FIELD_DELIMITER, 0); }
		public TerminalNode FIELD_OPTIONALLY_ENCLOSED_BY() { return getToken(OBParser.FIELD_OPTIONALLY_ENCLOSED_BY, 0); }
		public TerminalNode FILE_ID() { return getToken(OBParser.FILE_ID, 0); }
		public TerminalNode FINAL_COUNT() { return getToken(OBParser.FINAL_COUNT, 0); }
		public TerminalNode FIRST() { return getToken(OBParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(OBParser.FIRST_VALUE, 0); }
		public TerminalNode FIXED() { return getToken(OBParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(OBParser.FLUSH, 0); }
		public TerminalNode FOLLOWER() { return getToken(OBParser.FOLLOWER, 0); }
		public TerminalNode FOLLOWING() { return getToken(OBParser.FOLLOWING, 0); }
		public TerminalNode FORMAT() { return getToken(OBParser.FORMAT, 0); }
		public TerminalNode FROZEN() { return getToken(OBParser.FROZEN, 0); }
		public TerminalNode FOUND() { return getToken(OBParser.FOUND, 0); }
		public TerminalNode FRAGMENTATION() { return getToken(OBParser.FRAGMENTATION, 0); }
		public TerminalNode FREEZE() { return getToken(OBParser.FREEZE, 0); }
		public TerminalNode FREQUENCY() { return getToken(OBParser.FREQUENCY, 0); }
		public TerminalNode FUNCTION() { return getToken(OBParser.FUNCTION, 0); }
		public TerminalNode FULL() { return getToken(OBParser.FULL, 0); }
		public TerminalNode GENERAL() { return getToken(OBParser.GENERAL, 0); }
		public TerminalNode GEOMETRY() { return getToken(OBParser.GEOMETRY, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(OBParser.GEOMCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(OBParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GET_FORMAT() { return getToken(OBParser.GET_FORMAT, 0); }
		public TerminalNode GLOBAL() { return getToken(OBParser.GLOBAL, 0); }
		public TerminalNode GLOBAL_NAME() { return getToken(OBParser.GLOBAL_NAME, 0); }
		public TerminalNode GRANTS() { return getToken(OBParser.GRANTS, 0); }
		public TerminalNode GROUPING() { return getToken(OBParser.GROUPING, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(OBParser.GROUP_CONCAT, 0); }
		public TerminalNode GTS() { return getToken(OBParser.GTS, 0); }
		public TerminalNode HANDLER() { return getToken(OBParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(OBParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(OBParser.HELP, 0); }
		public TerminalNode HISTOGRAM() { return getToken(OBParser.HISTOGRAM, 0); }
		public TerminalNode HOST() { return getToken(OBParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(OBParser.HOSTS, 0); }
		public TerminalNode HOUR() { return getToken(OBParser.HOUR, 0); }
		public TerminalNode HYBRID_HIST() { return getToken(OBParser.HYBRID_HIST, 0); }
		public TerminalNode ID() { return getToken(OBParser.ID, 0); }
		public TerminalNode IDC() { return getToken(OBParser.IDC, 0); }
		public TerminalNode IDENTIFIED() { return getToken(OBParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(OBParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode ILOG() { return getToken(OBParser.ILOG, 0); }
		public TerminalNode IMMEDIATE() { return getToken(OBParser.IMMEDIATE, 0); }
		public TerminalNode IMPORT() { return getToken(OBParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(OBParser.INDEXES, 0); }
		public TerminalNode INDEX_TABLE_ID() { return getToken(OBParser.INDEX_TABLE_ID, 0); }
		public TerminalNode INCLUDING() { return getToken(OBParser.INCLUDING, 0); }
		public TerminalNode INCR() { return getToken(OBParser.INCR, 0); }
		public TerminalNode INFO() { return getToken(OBParser.INFO, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(OBParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB() { return getToken(OBParser.INNODB, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(OBParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(OBParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(OBParser.INSTANCE, 0); }
		public TerminalNode INTERSECT() { return getToken(OBParser.INTERSECT, 0); }
		public TerminalNode INVOKER() { return getToken(OBParser.INVOKER, 0); }
		public TerminalNode INCREMENT() { return getToken(OBParser.INCREMENT, 0); }
		public TerminalNode INCREMENTAL() { return getToken(OBParser.INCREMENTAL, 0); }
		public TerminalNode IO() { return getToken(OBParser.IO, 0); }
		public TerminalNode IOPS_WEIGHT() { return getToken(OBParser.IOPS_WEIGHT, 0); }
		public TerminalNode IO_THREAD() { return getToken(OBParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(OBParser.IPC, 0); }
		public TerminalNode ISNULL() { return getToken(OBParser.ISNULL, 0); }
		public TerminalNode ISOLATION() { return getToken(OBParser.ISOLATION, 0); }
		public TerminalNode ISOLATE() { return getToken(OBParser.ISOLATE, 0); }
		public TerminalNode ISSUER() { return getToken(OBParser.ISSUER, 0); }
		public TerminalNode JOB() { return getToken(OBParser.JOB, 0); }
		public TerminalNode JSON() { return getToken(OBParser.JSON, 0); }
		public TerminalNode JSON_VALUE() { return getToken(OBParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(OBParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(OBParser.JSON_OBJECTAGG, 0); }
		public TerminalNode JSON_QUERY() { return getToken(OBParser.JSON_QUERY, 0); }
		public TerminalNode JSON_TABLE() { return getToken(OBParser.JSON_TABLE, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(OBParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode KEY_VERSION() { return getToken(OBParser.KEY_VERSION, 0); }
		public TerminalNode LAG() { return getToken(OBParser.LAG, 0); }
		public TerminalNode LATERAL() { return getToken(OBParser.LATERAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(OBParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(OBParser.LAST, 0); }
		public TerminalNode LAST_REFRESH_SCN() { return getToken(OBParser.LAST_REFRESH_SCN, 0); }
		public TerminalNode LAST_VALUE() { return getToken(OBParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(OBParser.LEAD, 0); }
		public TerminalNode LEADER() { return getToken(OBParser.LEADER, 0); }
		public TerminalNode LEAK() { return getToken(OBParser.LEAK, 0); }
		public TerminalNode LEAK_MOD() { return getToken(OBParser.LEAK_MOD, 0); }
		public TerminalNode LEAK_RATE() { return getToken(OBParser.LEAK_RATE, 0); }
		public TerminalNode LEAVES() { return getToken(OBParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(OBParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(OBParser.LEVEL, 0); }
		public TerminalNode LINE_DELIMITER() { return getToken(OBParser.LINE_DELIMITER, 0); }
		public TerminalNode LINESTRING() { return getToken(OBParser.LINESTRING, 0); }
		public TerminalNode LIST_() { return getToken(OBParser.LIST_, 0); }
		public TerminalNode LISTAGG() { return getToken(OBParser.LISTAGG, 0); }
		public TerminalNode LN() { return getToken(OBParser.LN, 0); }
		public TerminalNode LOB_INROW_THRESHOLD() { return getToken(OBParser.LOB_INROW_THRESHOLD, 0); }
		public TerminalNode LOCAL() { return getToken(OBParser.LOCAL, 0); }
		public TerminalNode LOCALITY() { return getToken(OBParser.LOCALITY, 0); }
		public TerminalNode LOCKED() { return getToken(OBParser.LOCKED, 0); }
		public TerminalNode LOCKS() { return getToken(OBParser.LOCKS, 0); }
		public TerminalNode LOG() { return getToken(OBParser.LOG, 0); }
		public TerminalNode LOGFILE() { return getToken(OBParser.LOGFILE, 0); }
		public TerminalNode LOGONLY_REPLICA_NUM() { return getToken(OBParser.LOGONLY_REPLICA_NUM, 0); }
		public TerminalNode LOGS() { return getToken(OBParser.LOGS, 0); }
		public TerminalNode LOG_RESTORE_SOURCE() { return getToken(OBParser.LOG_RESTORE_SOURCE, 0); }
		public TerminalNode MAJOR() { return getToken(OBParser.MAJOR, 0); }
		public TerminalNode MANHATTAN() { return getToken(OBParser.MANHATTAN, 0); }
		public TerminalNode MANUAL() { return getToken(OBParser.MANUAL, 0); }
		public TerminalNode MASTER() { return getToken(OBParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(OBParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(OBParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(OBParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(OBParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(OBParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(OBParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(OBParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(OBParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(OBParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(OBParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SERVER_ID() { return getToken(OBParser.MASTER_SERVER_ID, 0); }
		public TerminalNode MASTER_SSL() { return getToken(OBParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(OBParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(OBParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(OBParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(OBParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(OBParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(OBParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(OBParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_USER() { return getToken(OBParser.MASTER_USER, 0); }
		public TerminalNode MAX() { return getToken(OBParser.MAX, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(OBParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_CPU() { return getToken(OBParser.MAX_CPU, 0); }
		public TerminalNode MAX_FILE_SIZE() { return getToken(OBParser.MAX_FILE_SIZE, 0); }
		public TerminalNode LOG_DISK_SIZE() { return getToken(OBParser.LOG_DISK_SIZE, 0); }
		public TerminalNode MAX_IOPS() { return getToken(OBParser.MAX_IOPS, 0); }
		public TerminalNode MEMORY_SIZE() { return getToken(OBParser.MEMORY_SIZE, 0); }
		public TerminalNode MAX_NET_BANDWIDTH() { return getToken(OBParser.MAX_NET_BANDWIDTH, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(OBParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(OBParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(OBParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(OBParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(OBParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(OBParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(OBParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(OBParser.MEMORY, 0); }
		public TerminalNode MEMTABLE() { return getToken(OBParser.MEMTABLE, 0); }
		public TerminalNode MERGE() { return getToken(OBParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(OBParser.MESSAGE_TEXT, 0); }
		public TerminalNode MEMSTORE_PERCENT() { return getToken(OBParser.MEMSTORE_PERCENT, 0); }
		public TerminalNode META() { return getToken(OBParser.META, 0); }
		public TerminalNode MICROSECOND() { return getToken(OBParser.MICROSECOND, 0); }
		public TerminalNode MIGRATE() { return getToken(OBParser.MIGRATE, 0); }
		public TerminalNode MIGRATION() { return getToken(OBParser.MIGRATION, 0); }
		public TerminalNode MIN() { return getToken(OBParser.MIN, 0); }
		public TerminalNode MINVALUE() { return getToken(OBParser.MINVALUE, 0); }
		public TerminalNode MIN_CPU() { return getToken(OBParser.MIN_CPU, 0); }
		public TerminalNode MIN_IOPS() { return getToken(OBParser.MIN_IOPS, 0); }
		public TerminalNode MIN_MAX() { return getToken(OBParser.MIN_MAX, 0); }
		public TerminalNode MINOR() { return getToken(OBParser.MINOR, 0); }
		public TerminalNode MIN_ROWS() { return getToken(OBParser.MIN_ROWS, 0); }
		public TerminalNode MINUTE() { return getToken(OBParser.MINUTE, 0); }
		public TerminalNode MINUS() { return getToken(OBParser.MINUS, 0); }
		public TerminalNode MISMATCH() { return getToken(OBParser.MISMATCH, 0); }
		public TerminalNode MODE() { return getToken(OBParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(OBParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(OBParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(OBParser.MOVE, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(OBParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(OBParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(OBParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIVALUE() { return getToken(OBParser.MULTIVALUE, 0); }
		public TerminalNode MUTEX() { return getToken(OBParser.MUTEX, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(OBParser.MYSQL_ERRNO, 0); }
		public TerminalNode MAX_USED_PART_ID() { return getToken(OBParser.MAX_USED_PART_ID, 0); }
		public TerminalNode NAME() { return getToken(OBParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(OBParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(OBParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(OBParser.NCHAR, 0); }
		public TerminalNode NDB() { return getToken(OBParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(OBParser.NDBCLUSTER, 0); }
		public TerminalNode NESTED() { return getToken(OBParser.NESTED, 0); }
		public TerminalNode NET_BANDWIDTH_WEIGHT() { return getToken(OBParser.NET_BANDWIDTH_WEIGHT, 0); }
		public TerminalNode NEW() { return getToken(OBParser.NEW, 0); }
		public TerminalNode NEVER() { return getToken(OBParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(OBParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(OBParser.NO, 0); }
		public TerminalNode NOARCHIVELOG() { return getToken(OBParser.NOARCHIVELOG, 0); }
		public TerminalNode NOAUDIT() { return getToken(OBParser.NOAUDIT, 0); }
		public TerminalNode NOCACHE() { return getToken(OBParser.NOCACHE, 0); }
		public TerminalNode NOCYCLE() { return getToken(OBParser.NOCYCLE, 0); }
		public TerminalNode NODEGROUP() { return getToken(OBParser.NODEGROUP, 0); }
		public TerminalNode NOMINVALUE() { return getToken(OBParser.NOMINVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(OBParser.NOMAXVALUE, 0); }
		public TerminalNode NOORDER() { return getToken(OBParser.NOORDER, 0); }
		public TerminalNode NOPARALLEL() { return getToken(OBParser.NOPARALLEL, 0); }
		public TerminalNode NORMAL() { return getToken(OBParser.NORMAL, 0); }
		public TerminalNode NOW() { return getToken(OBParser.NOW, 0); }
		public TerminalNode NOWAIT() { return getToken(OBParser.NOWAIT, 0); }
		public TerminalNode NO_WAIT() { return getToken(OBParser.NO_WAIT, 0); }
		public TerminalNode NTILE() { return getToken(OBParser.NTILE, 0); }
		public TerminalNode NTH_VALUE() { return getToken(OBParser.NTH_VALUE, 0); }
		public TerminalNode NUMBER() { return getToken(OBParser.NUMBER, 0); }
		public TerminalNode NULL_IF_EXETERNAL() { return getToken(OBParser.NULL_IF_EXETERNAL, 0); }
		public TerminalNode NULLS() { return getToken(OBParser.NULLS, 0); }
		public TerminalNode NVARCHAR() { return getToken(OBParser.NVARCHAR, 0); }
		public TerminalNode OBJECT() { return getToken(OBParser.OBJECT, 0); }
		public TerminalNode OCCUR() { return getToken(OBParser.OCCUR, 0); }
		public TerminalNode QUOTA_NAME() { return getToken(OBParser.QUOTA_NAME, 0); }
		public TerminalNode OF() { return getToken(OBParser.OF, 0); }
		public TerminalNode OFF() { return getToken(OBParser.OFF, 0); }
		public TerminalNode OFFSET() { return getToken(OBParser.OFFSET, 0); }
		public TerminalNode OLD() { return getToken(OBParser.OLD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(OBParser.OLD_PASSWORD, 0); }
		public TerminalNode OLD_KEY() { return getToken(OBParser.OLD_KEY, 0); }
		public TerminalNode OJ() { return getToken(OBParser.OJ, 0); }
		public TerminalNode OVER() { return getToken(OBParser.OVER, 0); }
		public TerminalNode OBCONFIG_URL() { return getToken(OBParser.OBCONFIG_URL, 0); }
		public TerminalNode ONE() { return getToken(OBParser.ONE, 0); }
		public TerminalNode ONE_SHOT() { return getToken(OBParser.ONE_SHOT, 0); }
		public TerminalNode ONLY() { return getToken(OBParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(OBParser.OPEN, 0); }
		public TerminalNode OPTIONS() { return getToken(OBParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(OBParser.ORDINALITY, 0); }
		public TerminalNode ORIG_DEFAULT() { return getToken(OBParser.ORIG_DEFAULT, 0); }
		public TerminalNode REMOTE_OSS() { return getToken(OBParser.REMOTE_OSS, 0); }
		public TerminalNode OUTLINE() { return getToken(OBParser.OUTLINE, 0); }
		public TerminalNode OWNER() { return getToken(OBParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(OBParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(OBParser.PAGE, 0); }
		public TerminalNode PARALLEL() { return getToken(OBParser.PARALLEL, 0); }
		public TerminalNode PARAMETERS() { return getToken(OBParser.PARAMETERS, 0); }
		public TerminalNode PARSER() { return getToken(OBParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(OBParser.PARTIAL, 0); }
		public TerminalNode PARTITION_ID() { return getToken(OBParser.PARTITION_ID, 0); }
		public TerminalNode PATH() { return getToken(OBParser.PATH, 0); }
		public TerminalNode LS() { return getToken(OBParser.LS, 0); }
		public TerminalNode PARTITIONING() { return getToken(OBParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(OBParser.PARTITIONS, 0); }
		public TerminalNode PARTITION_TYPE() { return getToken(OBParser.PARTITION_TYPE, 0); }
		public TerminalNode PATTERN() { return getToken(OBParser.PATTERN, 0); }
		public TerminalNode PAXOS_REPLICA_NUM() { return getToken(OBParser.PAXOS_REPLICA_NUM, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(OBParser.PERCENT_RANK, 0); }
		public TerminalNode PAUSE() { return getToken(OBParser.PAUSE, 0); }
		public TerminalNode PERCENTAGE() { return getToken(OBParser.PERCENTAGE, 0); }
		public TerminalNode PHASE() { return getToken(OBParser.PHASE, 0); }
		public TerminalNode PHYSICAL() { return getToken(OBParser.PHYSICAL, 0); }
		public TerminalNode PL() { return getToken(OBParser.PL, 0); }
		public TerminalNode PLANREGRESS() { return getToken(OBParser.PLANREGRESS, 0); }
		public TerminalNode PLUGIN() { return getToken(OBParser.PLUGIN, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(OBParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGINS() { return getToken(OBParser.PLUGINS, 0); }
		public TerminalNode PLUS() { return getToken(OBParser.PLUS, 0); }
		public TerminalNode POINT() { return getToken(OBParser.POINT, 0); }
		public TerminalNode POLICY() { return getToken(OBParser.POLICY, 0); }
		public TerminalNode POLYGON() { return getToken(OBParser.POLYGON, 0); }
		public TerminalNode POOL() { return getToken(OBParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(OBParser.PORT, 0); }
		public TerminalNode POSITION() { return getToken(OBParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(OBParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(OBParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(OBParser.PRESERVE, 0); }
		public TerminalNode PRETTY() { return getToken(OBParser.PRETTY, 0); }
		public TerminalNode PRETTY_COLOR() { return getToken(OBParser.PRETTY_COLOR, 0); }
		public TerminalNode PREV() { return getToken(OBParser.PREV, 0); }
		public TerminalNode PRIMARY_ZONE() { return getToken(OBParser.PRIMARY_ZONE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OBParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(OBParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(OBParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(OBParser.PROFILES, 0); }
		public TerminalNode PROGRESSIVE_MERGE_NUM() { return getToken(OBParser.PROGRESSIVE_MERGE_NUM, 0); }
		public TerminalNode PROJECT_NAME() { return getToken(OBParser.PROJECT_NAME, 0); }
		public TerminalNode PROPERTIES() { return getToken(OBParser.PROPERTIES, 0); }
		public TerminalNode PS() { return getToken(OBParser.PS, 0); }
		public TerminalNode PUBLIC() { return getToken(OBParser.PUBLIC, 0); }
		public TerminalNode PCTFREE() { return getToken(OBParser.PCTFREE, 0); }
		public TerminalNode P_ENTITY() { return getToken(OBParser.P_ENTITY, 0); }
		public TerminalNode P_CHUNK() { return getToken(OBParser.P_CHUNK, 0); }
		public TerminalNode QUARTER() { return getToken(OBParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(OBParser.QUERY, 0); }
		public TerminalNode QUERY_RESPONSE_TIME() { return getToken(OBParser.QUERY_RESPONSE_TIME, 0); }
		public TerminalNode QUEUE_TIME() { return getToken(OBParser.QUEUE_TIME, 0); }
		public TerminalNode QUICK() { return getToken(OBParser.QUICK, 0); }
		public TerminalNode RANK() { return getToken(OBParser.RANK, 0); }
		public TerminalNode READ_ONLY() { return getToken(OBParser.READ_ONLY, 0); }
		public TerminalNode REBUILD() { return getToken(OBParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(OBParser.RECOVER, 0); }
		public TerminalNode RECOVERY() { return getToken(OBParser.RECOVERY, 0); }
		public TerminalNode RECOVERY_WINDOW() { return getToken(OBParser.RECOVERY_WINDOW, 0); }
		public TerminalNode RECURSIVE() { return getToken(OBParser.RECURSIVE, 0); }
		public TerminalNode RECYCLE() { return getToken(OBParser.RECYCLE, 0); }
		public TerminalNode RECYCLEBIN() { return getToken(OBParser.RECYCLEBIN, 0); }
		public TerminalNode ROTATE() { return getToken(OBParser.ROTATE, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(OBParser.ROW_NUMBER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(OBParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDOFILE() { return getToken(OBParser.REDOFILE, 0); }
		public TerminalNode REDUNDANCY() { return getToken(OBParser.REDUNDANCY, 0); }
		public TerminalNode REDUNDANT() { return getToken(OBParser.REDUNDANT, 0); }
		public TerminalNode REFRESH() { return getToken(OBParser.REFRESH, 0); }
		public TerminalNode REGION() { return getToken(OBParser.REGION, 0); }
		public TerminalNode REJECT() { return getToken(OBParser.REJECT, 0); }
		public TerminalNode RELAY() { return getToken(OBParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(OBParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(OBParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(OBParser.RELAY_LOG_POS, 0); }
		public TerminalNode RELAY_THREAD() { return getToken(OBParser.RELAY_THREAD, 0); }
		public TerminalNode REMAP() { return getToken(OBParser.REMAP, 0); }
		public TerminalNode REMOVE() { return getToken(OBParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(OBParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(OBParser.REPAIR, 0); }
		public TerminalNode REPEATABLE() { return getToken(OBParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(OBParser.REPLICA, 0); }
		public TerminalNode REPLICA_NUM() { return getToken(OBParser.REPLICA_NUM, 0); }
		public TerminalNode REPLICA_TYPE() { return getToken(OBParser.REPLICA_TYPE, 0); }
		public TerminalNode REPORT() { return getToken(OBParser.REPORT, 0); }
		public TerminalNode RESET() { return getToken(OBParser.RESET, 0); }
		public TerminalNode RESOURCE_POOL() { return getToken(OBParser.RESOURCE_POOL, 0); }
		public TerminalNode RESOURCE_POOL_LIST() { return getToken(OBParser.RESOURCE_POOL_LIST, 0); }
		public TerminalNode RESPECT() { return getToken(OBParser.RESPECT, 0); }
		public TerminalNode RESTART() { return getToken(OBParser.RESTART, 0); }
		public TerminalNode RESTORE() { return getToken(OBParser.RESTORE, 0); }
		public TerminalNode RESUME() { return getToken(OBParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(OBParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNING() { return getToken(OBParser.RETURNING, 0); }
		public TerminalNode RETURNS() { return getToken(OBParser.RETURNS, 0); }
		public TerminalNode REVERSE() { return getToken(OBParser.REVERSE, 0); }
		public TerminalNode REWRITE() { return getToken(OBParser.REWRITE, 0); }
		public TerminalNode ROARINGBITMAP() { return getToken(OBParser.ROARINGBITMAP, 0); }
		public TerminalNode ROLE() { return getToken(OBParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(OBParser.ROLLBACK, 0); }
		public TerminalNode ROLLING() { return getToken(OBParser.ROLLING, 0); }
		public TerminalNode ROLLUP() { return getToken(OBParser.ROLLUP, 0); }
		public TerminalNode ROOT() { return getToken(OBParser.ROOT, 0); }
		public TerminalNode ROOTSERVICE() { return getToken(OBParser.ROOTSERVICE, 0); }
		public TerminalNode ROOTSERVICE_LIST() { return getToken(OBParser.ROOTSERVICE_LIST, 0); }
		public TerminalNode ROOTTABLE() { return getToken(OBParser.ROOTTABLE, 0); }
		public TerminalNode ROUTINE() { return getToken(OBParser.ROUTINE, 0); }
		public TerminalNode ROW() { return getToken(OBParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(OBParser.ROWID, 0); }
		public TerminalNode ROW_COUNT() { return getToken(OBParser.ROW_COUNT, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(OBParser.ROW_FORMAT, 0); }
		public TerminalNode ROWS() { return getToken(OBParser.ROWS, 0); }
		public TerminalNode RTREE() { return getToken(OBParser.RTREE, 0); }
		public TerminalNode RUN() { return getToken(OBParser.RUN, 0); }
		public TerminalNode SAMPLE() { return getToken(OBParser.SAMPLE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OBParser.SAVEPOINT, 0); }
		public TerminalNode SCALARS() { return getToken(OBParser.SCALARS, 0); }
		public TerminalNode SCHEDULE() { return getToken(OBParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(OBParser.SCHEMA_NAME, 0); }
		public TerminalNode SCN() { return getToken(OBParser.SCN, 0); }
		public TerminalNode SCOPE() { return getToken(OBParser.SCOPE, 0); }
		public TerminalNode SECOND() { return getToken(OBParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(OBParser.SECURITY, 0); }
		public TerminalNode SEED() { return getToken(OBParser.SEED, 0); }
		public TerminalNode SEQUENCE() { return getToken(OBParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(OBParser.SEQUENCES, 0); }
		public TerminalNode SERIAL() { return getToken(OBParser.SERIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(OBParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(OBParser.SERVER, 0); }
		public TerminalNode SERVER_IP() { return getToken(OBParser.SERVER_IP, 0); }
		public TerminalNode SERVER_PORT() { return getToken(OBParser.SERVER_PORT, 0); }
		public TerminalNode SERVER_TYPE() { return getToken(OBParser.SERVER_TYPE, 0); }
		public TerminalNode SERVICE() { return getToken(OBParser.SERVICE, 0); }
		public TerminalNode SESSION() { return getToken(OBParser.SESSION, 0); }
		public TerminalNode SESSION_USER() { return getToken(OBParser.SESSION_USER, 0); }
		public TerminalNode SET_MASTER_CLUSTER() { return getToken(OBParser.SET_MASTER_CLUSTER, 0); }
		public TerminalNode SET_SLAVE_CLUSTER() { return getToken(OBParser.SET_SLAVE_CLUSTER, 0); }
		public TerminalNode SET_TP() { return getToken(OBParser.SET_TP, 0); }
		public TerminalNode SHARDING() { return getToken(OBParser.SHARDING, 0); }
		public TerminalNode SHARE() { return getToken(OBParser.SHARE, 0); }
		public TerminalNode SHARED_STORAGE_DEST() { return getToken(OBParser.SHARED_STORAGE_DEST, 0); }
		public TerminalNode SHARED_STORAGE_INFO() { return getToken(OBParser.SHARED_STORAGE_INFO, 0); }
		public TerminalNode SIGNED() { return getToken(OBParser.SIGNED, 0); }
		public TerminalNode SIZE() { return getToken(OBParser.SIZE, 0); }
		public TerminalNode SIMPLE() { return getToken(OBParser.SIMPLE, 0); }
		public TerminalNode SINGLE() { return getToken(OBParser.SINGLE, 0); }
		public TerminalNode SKIP_BLANK_LINES() { return getToken(OBParser.SKIP_BLANK_LINES, 0); }
		public TerminalNode STATEMENT() { return getToken(OBParser.STATEMENT, 0); }
		public TerminalNode SKIP_HEADER() { return getToken(OBParser.SKIP_HEADER, 0); }
		public TerminalNode SKIP_INDEX() { return getToken(OBParser.SKIP_INDEX, 0); }
		public TerminalNode SLAVE() { return getToken(OBParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(OBParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OBParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(OBParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(OBParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(OBParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(OBParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(OBParser.SOURCE, 0); }
		public TerminalNode SPFILE() { return getToken(OBParser.SPFILE, 0); }
		public TerminalNode SPLIT() { return getToken(OBParser.SPLIT, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(OBParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(OBParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(OBParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(OBParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(OBParser.SQL_CACHE, 0); }
		public TerminalNode SQL_ID() { return getToken(OBParser.SQL_ID, 0); }
		public TerminalNode SCHEMA_ID() { return getToken(OBParser.SCHEMA_ID, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(OBParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(OBParser.SQL_THREAD, 0); }
		public TerminalNode SQL_TSI_DAY() { return getToken(OBParser.SQL_TSI_DAY, 0); }
		public TerminalNode SQL_TSI_HOUR() { return getToken(OBParser.SQL_TSI_HOUR, 0); }
		public TerminalNode SQL_TSI_MINUTE() { return getToken(OBParser.SQL_TSI_MINUTE, 0); }
		public TerminalNode SQL_TSI_MONTH() { return getToken(OBParser.SQL_TSI_MONTH, 0); }
		public TerminalNode SQL_TSI_QUARTER() { return getToken(OBParser.SQL_TSI_QUARTER, 0); }
		public TerminalNode SQL_TSI_SECOND() { return getToken(OBParser.SQL_TSI_SECOND, 0); }
		public TerminalNode SQL_TSI_WEEK() { return getToken(OBParser.SQL_TSI_WEEK, 0); }
		public TerminalNode SQL_TSI_YEAR() { return getToken(OBParser.SQL_TSI_YEAR, 0); }
		public TerminalNode SRID() { return getToken(OBParser.SRID, 0); }
		public TerminalNode SS_MICRO_CACHE() { return getToken(OBParser.SS_MICRO_CACHE, 0); }
		public TerminalNode UnderlineST_ASMVT() { return getToken(OBParser.UnderlineST_ASMVT, 0); }
		public TerminalNode STACKED() { return getToken(OBParser.STACKED, 0); }
		public TerminalNode STANDBY() { return getToken(OBParser.STANDBY, 0); }
		public TerminalNode START() { return getToken(OBParser.START, 0); }
		public TerminalNode STARTS() { return getToken(OBParser.STARTS, 0); }
		public TerminalNode STAT() { return getToken(OBParser.STAT, 0); }
		public TerminalNode STATISTICS() { return getToken(OBParser.STATISTICS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(OBParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(OBParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(OBParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(OBParser.STATUS, 0); }
		public TerminalNode STATEMENTS() { return getToken(OBParser.STATEMENTS, 0); }
		public TerminalNode STD() { return getToken(OBParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(OBParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(OBParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(OBParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(OBParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(OBParser.STORAGE, 0); }
		public TerminalNode STORAGE_FORMAT_VERSION() { return getToken(OBParser.STORAGE_FORMAT_VERSION, 0); }
		public TerminalNode STORE() { return getToken(OBParser.STORE, 0); }
		public TerminalNode STORING() { return getToken(OBParser.STORING, 0); }
		public TerminalNode STRONG() { return getToken(OBParser.STRONG, 0); }
		public TerminalNode STRING() { return getToken(OBParser.STRING, 0); }
		public TerminalNode STSTOKEN() { return getToken(OBParser.STSTOKEN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(OBParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBDATE() { return getToken(OBParser.SUBDATE, 0); }
		public TerminalNode SUBJECT() { return getToken(OBParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(OBParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(OBParser.SUBPARTITIONS, 0); }
		public TerminalNode SUBSTR() { return getToken(OBParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(OBParser.SUBSTRING, 0); }
		public TerminalNode SUCCESSFUL() { return getToken(OBParser.SUCCESSFUL, 0); }
		public TerminalNode SUM() { return getToken(OBParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(OBParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(OBParser.SWAPS, 0); }
		public TerminalNode SWITCH() { return getToken(OBParser.SWITCH, 0); }
		public TerminalNode SWITCHES() { return getToken(OBParser.SWITCHES, 0); }
		public TerminalNode SWITCHOVER() { return getToken(OBParser.SWITCHOVER, 0); }
		public TerminalNode SYNCHRONOUS() { return getToken(OBParser.SYNCHRONOUS, 0); }
		public TerminalNode SYSTEM() { return getToken(OBParser.SYSTEM, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(OBParser.SYSTEM_USER, 0); }
		public TerminalNode SYSDATE() { return getToken(OBParser.SYSDATE, 0); }
		public TerminalNode SLOG() { return getToken(OBParser.SLOG, 0); }
		public TerminalNode TABLE_CHECKSUM() { return getToken(OBParser.TABLE_CHECKSUM, 0); }
		public TerminalNode TABLE_MODE() { return getToken(OBParser.TABLE_MODE, 0); }
		public TerminalNode TABLEGROUPS() { return getToken(OBParser.TABLEGROUPS, 0); }
		public TerminalNode TABLE_ID() { return getToken(OBParser.TABLE_ID, 0); }
		public TerminalNode TABLE_NAME() { return getToken(OBParser.TABLE_NAME, 0); }
		public TerminalNode TABLES() { return getToken(OBParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(OBParser.TABLESPACE, 0); }
		public TerminalNode TABLET() { return getToken(OBParser.TABLET, 0); }
		public TerminalNode TABLET_ID() { return getToken(OBParser.TABLET_ID, 0); }
		public TerminalNode TABLET_SIZE() { return getToken(OBParser.TABLET_SIZE, 0); }
		public TerminalNode TABLET_MAX_SIZE() { return getToken(OBParser.TABLET_MAX_SIZE, 0); }
		public TerminalNode TASK() { return getToken(OBParser.TASK, 0); }
		public TerminalNode TASK_ID() { return getToken(OBParser.TASK_ID, 0); }
		public TerminalNode TEMPLATE() { return getToken(OBParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(OBParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(OBParser.TEMPTABLE, 0); }
		public TerminalNode TENANT() { return getToken(OBParser.TENANT, 0); }
		public TerminalNode TENANT_ID() { return getToken(OBParser.TENANT_ID, 0); }
		public TerminalNode SLOT_IDX() { return getToken(OBParser.SLOT_IDX, 0); }
		public TerminalNode TEXT() { return getToken(OBParser.TEXT, 0); }
		public TerminalNode THAN() { return getToken(OBParser.THAN, 0); }
		public TerminalNode TIME() { return getToken(OBParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OBParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(OBParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(OBParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_ZONE_INFO() { return getToken(OBParser.TIME_ZONE_INFO, 0); }
		public TerminalNode TP_NAME() { return getToken(OBParser.TP_NAME, 0); }
		public TerminalNode TP_NO() { return getToken(OBParser.TP_NO, 0); }
		public TerminalNode TRACE() { return getToken(OBParser.TRACE, 0); }
		public TerminalNode TRANSACTION() { return getToken(OBParser.TRANSACTION, 0); }
		public TerminalNode TRADITIONAL() { return getToken(OBParser.TRADITIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(OBParser.TRIGGERS, 0); }
		public TerminalNode TRIM() { return getToken(OBParser.TRIM, 0); }
		public TerminalNode TRIM_SPACE() { return getToken(OBParser.TRIM_SPACE, 0); }
		public TerminalNode TRUNCATE() { return getToken(OBParser.TRUNCATE, 0); }
		public TerminalNode TTL() { return getToken(OBParser.TTL, 0); }
		public TerminalNode TYPE() { return getToken(OBParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(OBParser.TYPES, 0); }
		public TerminalNode TABLEGROUP_ID() { return getToken(OBParser.TABLEGROUP_ID, 0); }
		public TerminalNode TOP_K_FRE_HIST() { return getToken(OBParser.TOP_K_FRE_HIST, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(OBParser.UNCOMMITTED, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(OBParser.UNCONDITIONAL, 0); }
		public TerminalNode UNDEFINED() { return getToken(OBParser.UNDEFINED, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(OBParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNDOFILE() { return getToken(OBParser.UNDOFILE, 0); }
		public TerminalNode UNICODE() { return getToken(OBParser.UNICODE, 0); }
		public TerminalNode UNKNOWN() { return getToken(OBParser.UNKNOWN, 0); }
		public TerminalNode UNINSTALL() { return getToken(OBParser.UNINSTALL, 0); }
		public TerminalNode UNIT() { return getToken(OBParser.UNIT, 0); }
		public TerminalNode UNIT_GROUP() { return getToken(OBParser.UNIT_GROUP, 0); }
		public TerminalNode UNIT_NUM() { return getToken(OBParser.UNIT_NUM, 0); }
		public TerminalNode UNLOCKED() { return getToken(OBParser.UNLOCKED, 0); }
		public TerminalNode UNTIL() { return getToken(OBParser.UNTIL, 0); }
		public TerminalNode UNUSUAL() { return getToken(OBParser.UNUSUAL, 0); }
		public TerminalNode UPGRADE() { return getToken(OBParser.UPGRADE, 0); }
		public TerminalNode USE_BLOOM_FILTER() { return getToken(OBParser.USE_BLOOM_FILTER, 0); }
		public TerminalNode USE_FRM() { return getToken(OBParser.USE_FRM, 0); }
		public TerminalNode USER() { return getToken(OBParser.USER, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(OBParser.USER_RESOURCES, 0); }
		public TerminalNode USER_SPECIFIED() { return getToken(OBParser.USER_SPECIFIED, 0); }
		public TerminalNode UNBOUNDED() { return getToken(OBParser.UNBOUNDED, 0); }
		public TerminalNode UNLIMITED() { return getToken(OBParser.UNLIMITED, 0); }
		public TerminalNode VALID() { return getToken(OBParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(OBParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(OBParser.VALUE, 0); }
		public TerminalNode VARIANCE() { return getToken(OBParser.VARIANCE, 0); }
		public TerminalNode VARIABLES() { return getToken(OBParser.VARIABLES, 0); }
		public TerminalNode VAR_POP() { return getToken(OBParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(OBParser.VAR_SAMP, 0); }
		public TerminalNode VERBOSE() { return getToken(OBParser.VERBOSE, 0); }
		public TerminalNode VECTOR() { return getToken(OBParser.VECTOR, 0); }
		public TerminalNode VECTOR_DISTANCE() { return getToken(OBParser.VECTOR_DISTANCE, 0); }
		public TerminalNode VIRTUAL_COLUMN_ID() { return getToken(OBParser.VIRTUAL_COLUMN_ID, 0); }
		public TerminalNode MATERIALIZED() { return getToken(OBParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(OBParser.VIEW, 0); }
		public TerminalNode VERIFY() { return getToken(OBParser.VERIFY, 0); }
		public TerminalNode WAIT() { return getToken(OBParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(OBParser.WARNINGS, 0); }
		public TerminalNode WASH() { return getToken(OBParser.WASH, 0); }
		public TerminalNode WEAK() { return getToken(OBParser.WEAK, 0); }
		public TerminalNode WEEK() { return getToken(OBParser.WEEK, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(OBParser.WEIGHT_STRING, 0); }
		public TerminalNode WHENEVER() { return getToken(OBParser.WHENEVER, 0); }
		public TerminalNode WINDOW() { return getToken(OBParser.WINDOW, 0); }
		public TerminalNode WITHOUT() { return getToken(OBParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(OBParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(OBParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(OBParser.X509, 0); }
		public TerminalNode XA() { return getToken(OBParser.XA, 0); }
		public TerminalNode XML() { return getToken(OBParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(OBParser.YEAR, 0); }
		public TerminalNode ZONE() { return getToken(OBParser.ZONE, 0); }
		public TerminalNode ZONE_LIST() { return getToken(OBParser.ZONE_LIST, 0); }
		public TerminalNode ZONE_TYPE() { return getToken(OBParser.ZONE_TYPE, 0); }
		public TerminalNode LOCATION() { return getToken(OBParser.LOCATION, 0); }
		public TerminalNode PLAN() { return getToken(OBParser.PLAN, 0); }
		public TerminalNode VISIBLE() { return getToken(OBParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(OBParser.INVISIBLE, 0); }
		public TerminalNode ACTIVATE() { return getToken(OBParser.ACTIVATE, 0); }
		public TerminalNode SYNCHRONIZATION() { return getToken(OBParser.SYNCHRONIZATION, 0); }
		public TerminalNode THROTTLE() { return getToken(OBParser.THROTTLE, 0); }
		public TerminalNode PRIORITY() { return getToken(OBParser.PRIORITY, 0); }
		public TerminalNode RT() { return getToken(OBParser.RT, 0); }
		public TerminalNode NETWORK() { return getToken(OBParser.NETWORK, 0); }
		public TerminalNode LOGICAL_READS() { return getToken(OBParser.LOGICAL_READS, 0); }
		public TerminalNode REDO_TRANSPORT_OPTIONS() { return getToken(OBParser.REDO_TRANSPORT_OPTIONS, 0); }
		public TerminalNode MAXIMIZE() { return getToken(OBParser.MAXIMIZE, 0); }
		public TerminalNode AVAILABILITY() { return getToken(OBParser.AVAILABILITY, 0); }
		public TerminalNode PERFORMANCE() { return getToken(OBParser.PERFORMANCE, 0); }
		public TerminalNode PROTECTION() { return getToken(OBParser.PROTECTION, 0); }
		public TerminalNode OBSOLETE() { return getToken(OBParser.OBSOLETE, 0); }
		public TerminalNode HIDDEN() { return getToken(OBParser.HIDDEN, 0); }
		public TerminalNode INDEXED() { return getToken(OBParser.INDEXED, 0); }
		public TerminalNode SKEWONLY() { return getToken(OBParser.SKEWONLY, 0); }
		public TerminalNode BACKUPPIECE() { return getToken(OBParser.BACKUPPIECE, 0); }
		public TerminalNode PREVIEW() { return getToken(OBParser.PREVIEW, 0); }
		public TerminalNode BACKUP_BACKUP_DEST() { return getToken(OBParser.BACKUP_BACKUP_DEST, 0); }
		public TerminalNode BACKUPROUND() { return getToken(OBParser.BACKUPROUND, 0); }
		public TerminalNode UP() { return getToken(OBParser.UP, 0); }
		public TerminalNode TIMES() { return getToken(OBParser.TIMES, 0); }
		public TerminalNode BACKED() { return getToken(OBParser.BACKED, 0); }
		public TerminalNode NAMESPACE() { return getToken(OBParser.NAMESPACE, 0); }
		public TerminalNode LIB() { return getToken(OBParser.LIB, 0); }
		public TerminalNode LINK() { return getToken(OBParser.LINK, 0); }
		public TerminalNode MY_NAME() { return getToken(OBParser.MY_NAME, 0); }
		public TerminalNode CONNECT() { return getToken(OBParser.CONNECT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(OBParser.STATEMENT_ID, 0); }
		public TerminalNode KV_ATTRIBUTES() { return getToken(OBParser.KV_ATTRIBUTES, 0); }
		public TerminalNode OBJECT_ID() { return getToken(OBParser.OBJECT_ID, 0); }
		public TerminalNode TRANSFER() { return getToken(OBParser.TRANSFER, 0); }
		public TerminalNode SUM_OPNSIZE() { return getToken(OBParser.SUM_OPNSIZE, 0); }
		public TerminalNode VALIDATION() { return getToken(OBParser.VALIDATION, 0); }
		public TerminalNode RB_BUILD_AGG() { return getToken(OBParser.RB_BUILD_AGG, 0); }
		public TerminalNode RB_OR_AGG() { return getToken(OBParser.RB_OR_AGG, 0); }
		public TerminalNode RB_AND_AGG() { return getToken(OBParser.RB_AND_AGG, 0); }
		public TerminalNode OVERWRITE() { return getToken(OBParser.OVERWRITE, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(OBParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode MICRO_INDEX_CLUSTERED() { return getToken(OBParser.MICRO_INDEX_CLUSTERED, 0); }
		public Unreserved_keyword_normalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword_normal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnreserved_keyword_normal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnreserved_keyword_normal(this);
		}
	}

	public final Unreserved_keyword_normalContext unreserved_keyword_normal() throws RecognitionException {
		Unreserved_keyword_normalContext _localctx = new Unreserved_keyword_normalContext(_ctx, getState());
		enterRule(_localctx, 1590, RULE_unreserved_keyword_normal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11866);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROLE) | (1L << JSON_QUERY) | (1L << QUOTA_NAME) | (1L << ADMIN) | (1L << ALLOW) | (1L << EUCLIDEAN) | (1L << STSTOKEN) | (1L << REWRITE) | (1L << VECTOR_DISTANCE) | (1L << PARTITION_TYPE) | (1L << DOT) | (1L << TASK_ID) | (1L << COMPUTATION) | (1L << MANHATTAN) | (1L << AUTO_REFRESH) | (1L << ARRAY) | (1L << SINGLE) | (1L << SHARED_STORAGE_DEST) | (1L << DISALLOW) | (1L << UnderlineST_ASMVT) | (1L << CONDITIONAL) | (1L << RB_AND_AGG) | (1L << COMPRESSION_CODE) | (1L << FILE_BLOCK_SIZE) | (1L << APPROXIMATE) | (1L << MAX_NET_BANDWIDTH) | (1L << MULTIVALUE) | (1L << SHARED_STORAGE_INFO) | (1L << RB_OR_AGG) | (1L << DATA_SOURCE) | (1L << PROJECT_NAME) | (1L << VECTOR) | (1L << ENDPOINT) | (1L << DATA_DISK_SIZE) | (1L << BUFFER_SIZE) | (1L << PROPERTIES) | (1L << ATTRIBUTE) | (1L << ASIS) | (1L << SCALARS) | (1L << USER_SPECIFIED) | (1L << ACCESS_INFO) | (1L << ROARINGBITMAP) | (1L << VALIDATION) | (1L << COSINE) | (1L << SUM_OPNSIZE) | (1L << ACCESSKEY) | (1L << MICRO_INDEX_CLUSTERED) | (1L << AUTO_INCREMENT_CACHE_SIZE) | (1L << ACCESSTYPE) | (1L << EXTERNAL_STORAGE_DEST) | (1L << OVERWRITE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (LAST_REFRESH_SCN - 64)) | (1L << (WITHOUT - 64)) | (1L << (MAX_FILE_SIZE - 64)) | (1L << (APPROX - 64)) | (1L << (MISMATCH - 64)) | (1L << (SS_MICRO_CACHE - 64)) | (1L << (OPTIMIZER_COSTS - 64)) | (1L << (PAXOS_REPLICA_NUM - 64)) | (1L << (ACCESSID - 64)) | (1L << (UNCONDITIONAL - 64)) | (1L << (NET_BANDWIDTH_WEIGHT - 64)) | (1L << (RB_BUILD_AGG - 64)) | (1L << (OBJECT_ID - 64)) | (1L << (AGAINST - 64)) | (1L << (ALWAYS - 64)) | (1L << (NAMESPACE - 64)) | (1L << (CIPHER - 64)) | (1L << (COLUMNS - 64)) | (1L << (LS - 64)) | (1L << (CYCLE - 64)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (NUMBER - 133)) | (1L << (ROWID - 133)) | (1L << (SYNCHRONOUS - 133)) | (1L << (IMMEDIATE - 133)) | (1L << (FIELDS - 133)) | (1L << (FULL - 133)) | (1L << (ID - 133)) | (1L << (INCLUDING - 133)) | (1L << (LIB - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (ORDINALITY - 197)) | (1L << (ISSUER - 197)) | (1L << (LANGUAGE - 197)) | (1L << (BISON_LIST - 197)) | (1L << (LOCAL - 197)) | (1L << (UNLIMITED - 197)) | (1L << (MERGE - 197)) | (1L << (MODE - 197)) | (1L << (IOPS_WEIGHT - 197)) | (1L << (PARSER - 197)) | (1L << (MIN_MAX - 197)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (PUBLIC - 263)) | (1L << (ROWS - 263)) | (1L << (REJECT - 263)) | (1L << (PLUS - 263)) | (1L << (SUBJECT - 263)) | (1L << (SYSDATE - 263)) | (1L << (TEXT - 263)) | (1L << (CALIBRATION - 263)) | (1L << (LINE_DELIMITER - 263)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (GEOMCOLLECTION - 330)) | (1L << (QUERY_RESPONSE_TIME - 330)) | (1L << (REDUNDANCY - 330)) | (1L << (CALIBRATION_INFO - 330)) | (1L << (SCN - 330)) | (1L << (WINDOW - 330)) | (1L << (X509 - 330)) | (1L << (STRONG - 330)) | (1L << (WEAK - 330)) | (1L << (CONNECT - 330)) | (1L << (FROZEN - 330)) | (1L << (EXCEPT - 330)) | (1L << (MINUS - 330)) | (1L << (INTERSECT - 330)) | (1L << (ISNULL - 330)) | (1L << (AUDIT - 330)) | (1L << (WARNINGS - 330)) | (1L << (FORMAT - 330)) | (1L << (MINVALUE - 330)) | (1L << (EMPTY_FIELD_AS_NULL - 330)) | (1L << (UNINSTALL - 330)) | (1L << (UNDOFILE - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (YEAR - 330)) | (1L << (DISCONNECT - 330)) | (1L << (STOP - 330)) | (1L << (SIZE - 330)) | (1L << (AT - 330)) | (1L << (RELAY_LOG_POS - 330)) | (1L << (POOL - 330)) | (1L << (CURDATE - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (JSON_VALUE - 394)) | (1L << (ZONE_TYPE - 394)) | (1L << (LOCATION - 394)) | (1L << (WEIGHT_STRING - 394)) | (1L << (CHANGED - 394)) | (1L << (MASTER_SSL_CAPATH - 394)) | (1L << (NTH_VALUE - 394)) | (1L << (SERIAL - 394)) | (1L << (PROGRESSIVE_MERGE_NUM - 394)) | (1L << (QUEUE_TIME - 394)) | (1L << (TABLET_MAX_SIZE - 394)) | (1L << (ILOGCACHE - 394)) | (1L << (AUTHORS - 394)) | (1L << (MIGRATE - 394)) | (1L << (CONSISTENT - 394)) | (1L << (SUSPEND - 394)) | (1L << (REMOTE_OSS - 394)) | (1L << (SECURITY - 394)) | (1L << (SET_SLAVE_CLUSTER - 394)) | (1L << (FAST - 394)) | (1L << (PREVIEW - 394)) | (1L << (BANDWIDTH - 394)) | (1L << (TRUNCATE - 394)) | (1L << (BACKUP_BACKUP_DEST - 394)) | (1L << (CONSTRAINT_SCHEMA - 394)) | (1L << (STATEMENT - 394)) | (1L << (MASTER_SSL_CERT - 394)) | (1L << (TABLE_NAME - 394)) | (1L << (PRIORITY - 394)) | (1L << (DO - 394)) | (1L << (MASTER_RETRY_COUNT - 394)) | (1L << (REPLICA - 394)) | (1L << (RECOVERY - 394)) | (1L << (OLD_KEY - 394)) | (1L << (DISABLE - 394)) | (1L << (PORT - 394)) | (1L << (REBUILD - 394)) | (1L << (FOLLOWER - 394)) | (1L << (ROOT - 394)) | (1L << (REDOFILE - 394)) | (1L << (MASTER_SERVER_ID - 394)) | (1L << (NCHAR - 394)) | (1L << (KEY_BLOCK_SIZE - 394)) | (1L << (SEQUENCE - 394)) | (1L << (MIGRATION - 394)) | (1L << (SUBPARTITION - 394)) | (1L << (ROW_NUMBER - 394)) | (1L << (COMPRESSION - 394)) | (1L << (BIT - 394)) | (1L << (SAMPLE - 394)) | (1L << (UNLOCKED - 394)) | (1L << (CLASS_ORIGIN - 394)) | (1L << (STATEMENTS - 394)) | (1L << (ACTION - 394)) | (1L << (REDUNDANT - 394)) | (1L << (UPGRADE - 394)) | (1L << (VALIDATE - 394)) | (1L << (START - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (TEMPTABLE - 458)) | (1L << (RECYCLEBIN - 458)) | (1L << (PROFILES - 458)) | (1L << (ERRORS - 458)) | (1L << (LEAVES - 458)) | (1L << (UNDEFINED - 458)) | (1L << (EVERY - 458)) | (1L << (SHARDING - 458)) | (1L << (BYTE - 458)) | (1L << (FLUSH - 458)) | (1L << (MIN_ROWS - 458)) | (1L << (ERROR_P - 458)) | (1L << (MAX_USER_CONNECTIONS - 458)) | (1L << (MAX_CPU - 458)) | (1L << (LOCKED - 458)) | (1L << (IO - 458)) | (1L << (BTREE - 458)) | (1L << (SLOT_IDX - 458)) | (1L << (HASH - 458)) | (1L << (ROTATE - 458)) | (1L << (COLLATION - 458)) | (1L << (MASTER - 458)) | (1L << (ENCRYPTION - 458)) | (1L << (MAX - 458)) | (1L << (TRANSACTION - 458)) | (1L << (SQL_TSI_MONTH - 458)) | (1L << (ARBITRATION - 458)) | (1L << (MAX_QUERIES_PER_HOUR - 458)) | (1L << (COMMENT - 458)) | (1L << (CTX_ID - 458)) | (1L << (MIN_IOPS - 458)) | (1L << (NVARCHAR - 458)) | (1L << (OFF - 458)) | (1L << (BIT_XOR - 458)) | (1L << (PAUSE - 458)) | (1L << (QUICK - 458)) | (1L << (PRETTY - 458)) | (1L << (DUPLICATE - 458)) | (1L << (WAIT - 458)) | (1L << (FIELD_OPTIONALLY_ENCLOSED_BY - 458)) | (1L << (DES_KEY_FILE - 458)) | (1L << (ENGINES - 458)) | (1L << (RETURNS - 458)) | (1L << (MASTER_USER - 458)) | (1L << (SOCKET - 458)) | (1L << (MASTER_DELAY - 458)) | (1L << (FILE_ID - 458)) | (1L << (FIRST - 458)) | (1L << (TABLET - 458)) | (1L << (CLIENT - 458)) | (1L << (ENGINE_ - 458)) | (1L << (EXCLUDING - 458)) | (1L << (TABLES - 458)) | (1L << (TRADITIONAL - 458)) | (1L << (BOOTSTRAP - 458)) | (1L << (STDDEV - 458)) | (1L << (DATAFILE - 458)) | (1L << (INVOKER - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (DEPTH - 522)) | (1L << (NORMAL - 522)) | (1L << (LN - 522)) | (1L << (COLUMN_NAME - 522)) | (1L << (TRIGGERS - 522)) | (1L << (RESET - 522)) | (1L << (COALESCE - 522)) | (1L << (RESPECT - 522)) | (1L << (STATUS - 522)) | (1L << (AUTO_INCREMENT_MODE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (WRAPPER - 522)) | (1L << (TIMESTAMP - 522)) | (1L << (PARTITIONS - 522)) | (1L << (SUBSTR - 522)) | (1L << (CHUNK - 522)) | (1L << (BACKUPSET - 522)) | (1L << (UNIT - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (DEMAND - 522)) | (1L << (BACKUPPIECE - 522)) | (1L << (LESS - 522)) | (1L << (SWITCH - 522)) | (1L << (DIAGNOSTICS - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (NO - 522)) | (1L << (MAJOR - 522)) | (1L << (ACTIVE - 522)) | (1L << (ROUTINE - 522)) | (1L << (FOLLOWING - 522)) | (1L << (DEFAULT_LOB_INROW_THRESHOLD - 522)) | (1L << (LOB_INROW_THRESHOLD - 522)) | (1L << (SCHEMA_ID - 522)) | (1L << (LATERAL - 522)) | (1L << (ROLLBACK - 522)) | (1L << (READ_ONLY - 522)) | (1L << (MEMBER - 522)) | (1L << (PARTITION_ID - 522)) | (1L << (DUMP - 522)) | (1L << (EXTERNAL - 522)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS - 522)) | (1L << (GROUPING - 522)) | (1L << (OF - 522)) | (1L << (SLOG - 522)) | (1L << (OJ - 522)) | (1L << (ARCHIVELOG - 522)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 522)) | (1L << (ASYNCHRONOUS - 522)) | (1L << (ENCODING - 522)) | (1L << (SECOND - 522)) | (1L << (UNKNOWN - 522)) | (1L << (POINT - 522)) | (1L << (PL - 522)) | (1L << (MEMSTORE_PERCENT - 522)) | (1L << (STD - 522)) | (1L << (POLYGON - 522)) | (1L << (PS - 522)) | (1L << (OLD - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (TABLE_ID - 586)) | (1L << (CONTEXT - 586)) | (1L << (FINAL_COUNT - 586)) | (1L << (MASTER_CONNECT_RETRY - 586)) | (1L << (POSITION - 586)) | (1L << (DISCARD - 586)) | (1L << (PREV - 586)) | (1L << (RECOVER - 586)) | (1L << (DEALLOCATE - 586)) | (1L << (OLD_PASSWORD - 586)) | (1L << (FAILOVER - 586)) | (1L << (LISTAGG - 586)) | (1L << (SLOW - 586)) | (1L << (NOAUDIT - 586)) | (1L << (SUM - 586)) | (1L << (OPTIONS - 586)) | (1L << (MIN - 586)) | (1L << (RT - 586)) | (1L << (ONE - 586)) | (1L << (DELAY_KEY_WRITE - 586)) | (1L << (ORIG_DEFAULT - 586)) | (1L << (INDEXED - 586)) | (1L << (RETURNING - 586)) | (1L << (SQL_TSI_HOUR - 586)) | (1L << (TIMESTAMPDIFF - 586)) | (1L << (RESTORE - 586)) | (1L << (OFFSET - 586)) | (1L << (TEMPORARY - 586)) | (1L << (VARIANCE - 586)) | (1L << (SNAPSHOT - 586)) | (1L << (STATISTICS - 586)) | (1L << (SERVER_TYPE - 586)) | (1L << (COMMITTED - 586)) | (1L << (INDEXES - 586)) | (1L << (FREEZE - 586)) | (1L << (SCOPE - 586)) | (1L << (IDC - 586)) | (1L << (VIEW - 586)) | (1L << (ONE_SHOT - 586)) | (1L << (ACCOUNT - 586)) | (1L << (LOCALITY - 586)) | (1L << (REVERSE - 586)) | (1L << (UP - 586)) | (1L << (CLUSTER_ID - 586)) | (1L << (NOARCHIVELOG - 586)) | (1L << (MAX_SIZE - 586)) | (1L << (PAGE - 586)) | (1L << (NAME - 586)) | (1L << (ROW_COUNT - 586)) | (1L << (LAST - 586)) | (1L << (WASH - 586)) | (1L << (LOGONLY_REPLICA_NUM - 586)) | (1L << (DELAY - 586)) | (1L << (SUBDATE - 586)) | (1L << (INCREMENTAL - 586)) | (1L << (ROLLING - 586)) | (1L << (VERIFY - 586)) | (1L << (CONTAINS - 586)) | (1L << (GENERAL - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VISIBLE - 650)) | (1L << (SIGNED - 650)) | (1L << (SERVER - 650)) | (1L << (NEXT - 650)) | (1L << (ENDS - 650)) | (1L << (GLOBAL - 650)) | (1L << (ROOTSERVICE_LIST - 650)) | (1L << (VERBOSE - 650)) | (1L << (CLUSTER_NAME - 650)) | (1L << (MASTER_PORT - 650)) | (1L << (MYSQL_ERRNO - 650)) | (1L << (XA - 650)) | (1L << (TIME - 650)) | (1L << (DATETIME - 650)) | (1L << (NOMINVALUE - 650)) | (1L << (BOOL - 650)) | (1L << (DIRECTORY - 650)) | (1L << (DATA_TABLE_ID - 650)) | (1L << (SEQUENCES - 650)) | (1L << (PRETTY_COLOR - 650)) | (1L << (VALID - 650)) | (1L << (MASTER_SSL_KEY - 650)) | (1L << (MASTER_PASSWORD - 650)) | (1L << (PLAN - 650)) | (1L << (SHARE - 650)) | (1L << (MULTIPOLYGON - 650)) | (1L << (STDDEV_SAMP - 650)) | (1L << (USE_BLOOM_FILTER - 650)) | (1L << (CONSTRAINT_CATALOG - 650)) | (1L << (CLUSTER - 650)) | (1L << (EXCHANGE - 650)) | (1L << (GRANTS - 650)) | (1L << (CAST - 650)) | (1L << (SERVER_PORT - 650)) | (1L << (SQL_CACHE - 650)) | (1L << (MAX_USED_PART_ID - 650)) | (1L << (HYBRID_HIST - 650)) | (1L << (INSTANCE - 650)) | (1L << (FUNCTION - 650)) | (1L << (NOWAIT - 650)) | (1L << (INVISIBLE - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (COUNT - 650)) | (1L << (NAMES - 650)) | (1L << (MY_NAME - 650)) | (1L << (P_ENTITY - 650)) | (1L << (ISOLATE - 650)) | (1L << (MAX_ROWS - 650)) | (1L << (CTXCAT - 650)) | (1L << (ISOLATION - 650)) | (1L << (DECRYPTION - 650)) | (1L << (REMOVE - 650)) | (1L << (STATS_AUTO_RECALC - 650)) | (1L << (CONSISTENT_MODE - 650)) | (1L << (MODIFY - 650)) | (1L << (UNCOMMITTED - 650)) | (1L << (PHYSICAL - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NO_WAIT - 714)) | (1L << (BACKUP_COPIES - 714)) | (1L << (UNIT_NUM - 714)) | (1L << (PERCENTAGE - 714)) | (1L << (MAX_IOPS - 714)) | (1L << (SPFILE - 714)) | (1L << (REPEATABLE - 714)) | (1L << (COMPLETION - 714)) | (1L << (CONDENSED - 714)) | (1L << (ROOTTABLE - 714)) | (1L << (SUBSTRING - 714)) | (1L << (ZONE - 714)) | (1L << (BACKED - 714)) | (1L << (SERVICE - 714)) | (1L << (TEMPLATE - 714)) | (1L << (DATE_SUB - 714)) | (1L << (EXPIRE_INFO - 714)) | (1L << (EXPIRE - 714)) | (1L << (ENABLE - 714)) | (1L << (HOSTS - 714)) | (1L << (SCHEMA_NAME - 714)) | (1L << (EXPANSION - 714)) | (1L << (REORGANIZE - 714)) | (1L << (BLOCK_SIZE - 714)) | (1L << (TRIM_SPACE - 714)) | (1L << (MINOR - 714)) | (1L << (RESUME - 714)) | (1L << (COMPLETE - 714)) | (1L << (STATS_PERSISTENT - 714)) | (1L << (NODEGROUP - 714)) | (1L << (PARTITIONING - 714)) | (1L << (BIT_AND - 714)) | (1L << (TIMES - 714)) | (1L << (COMMIT - 714)) | (1L << (SAVEPOINT - 714)) | (1L << (UNTIL - 714)) | (1L << (USER - 714)) | (1L << (LEAK_RATE - 714)) | (1L << (MEMTABLE - 714)) | (1L << (CHARSET - 714)) | (1L << (MOVE - 714)) | (1L << (XML - 714)) | (1L << (PATH - 714)) | (1L << (IPC - 714)) | (1L << (TRIM - 714)) | (1L << (PERFORMANCE - 714)) | (1L << (RANK - 714)) | (1L << (VAR_POP - 714)) | (1L << (DEFAULT_AUTH - 714)) | (1L << (EXTENT_SIZE - 714)) | (1L << (BINLOG - 714)) | (1L << (LEAK_MOD - 714)) | (1L << (CLOG - 714)) | (1L << (GEOMETRYCOLLECTION - 714)) | (1L << (STORAGE - 714)) | (1L << (MEDIUM - 714)) | (1L << (USE_FRM - 714)) | (1L << (MASTER_HEARTBEAT_PERIOD - 714)) | (1L << (SUBPARTITIONS - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (CUBE - 778)) | (1L << (FRAGMENTATION - 778)) | (1L << (BALANCE - 778)) | (1L << (QUERY - 778)) | (1L << (POLICY - 778)) | (1L << (THROTTLE - 778)) | (1L << (SQL_TSI_QUARTER - 778)) | (1L << (REPAIR - 778)) | (1L << (MASTER_SSL_CIPHER - 778)) | (1L << (KEY_VERSION - 778)) | (1L << (CATALOG_NAME - 778)) | (1L << (NDBCLUSTER - 778)) | (1L << (CONNECTION - 778)) | (1L << (COMPACT - 778)) | (1L << (SYNCHRONIZATION - 778)) | (1L << (AVAILABILITY - 778)) | (1L << (INCR - 778)) | (1L << (CANCEL - 778)) | (1L << (SIMPLE - 778)) | (1L << (VARIABLES - 778)) | (1L << (SQL_TSI_WEEK - 778)) | (1L << (P_CHUNK - 778)) | (1L << (SYSTEM - 778)) | (1L << (ROOTSERVICE - 778)) | (1L << (PLUGIN_DIR - 778)) | (1L << (ASCII - 778)) | (1L << (INFO - 778)) | (1L << (SKIP_HEADER - 778)) | (1L << (SQL_THREAD - 778)) | (1L << (TYPES - 778)) | (1L << (LEADER - 778)) | (1L << (FOUND - 778)) | (1L << (EXTRACT - 778)) | (1L << (FIXED - 778)) | (1L << (CACHE - 778)) | (1L << (KV_ATTRIBUTES - 778)) | (1L << (CURRENT - 778)) | (1L << (STACKED - 778)) | (1L << (RETURNED_SQLSTATE - 778)) | (1L << (SKIP_INDEX - 778)) | (1L << (END - 778)) | (1L << (PRESERVE - 778)) | (1L << (BADFILE - 778)) | (1L << (LOG_DISK_SIZE - 778)) | (1L << (SQL_BUFFER_RESULT - 778)) | (1L << (JSON - 778)) | (1L << (SOME - 778)) | (1L << (INDEX_TABLE_ID - 778)) | (1L << (PATTERN - 778)) | (1L << (RECOVERY_WINDOW - 778)) | (1L << (FREQUENCY - 778)) | (1L << (LOCKS - 778)) | (1L << (MANUAL - 778)) | (1L << (GEOMETRY - 778)) | (1L << (IDENTIFIED - 778)) | (1L << (STORAGE_FORMAT_VERSION - 778)) | (1L << (OVER - 778)) | (1L << (USER_RESOURCES - 778)) | (1L << (BACKUPROUND - 778)))) != 0) || ((((_la - 842)) & ~0x3f) == 0 && ((1L << (_la - 842)) & ((1L << (DESTINATION - 842)) | (1L << (SONAME - 842)) | (1L << (OUTLINE - 842)) | (1L << (MASTER_LOG_FILE - 842)) | (1L << (NOMAXVALUE - 842)) | (1L << (ESTIMATE - 842)) | (1L << (SLAVE - 842)) | (1L << (SKIP_BLANK_LINES - 842)) | (1L << (GTS - 842)) | (1L << (EXPORT - 842)) | (1L << (AVG_ROW_LENGTH - 842)) | (1L << (ENFORCED - 842)) | (1L << (FLASHBACK - 842)) | (1L << (SESSION_USER - 842)) | (1L << (TABLEGROUPS - 842)) | (1L << (CURTIME - 842)) | (1L << (REPLICA_TYPE - 842)) | (1L << (AGGREGATE - 842)) | (1L << (TRANSFER - 842)) | (1L << (JSON_ARRAYAGG - 842)) | (1L << (PERCENT_RANK - 842)) | (1L << (ENUM - 842)) | (1L << (NATIONAL - 842)) | (1L << (RECYCLE - 842)) | (1L << (REGION - 842)) | (1L << (MUTEX - 842)) | (1L << (PARALLEL - 842)) | (1L << (NOPARALLEL - 842)) | (1L << (NDB - 842)) | (1L << (SYSTEM_USER - 842)) | (1L << (MAXIMIZE - 842)) | (1L << (MAX_UPDATES_PER_HOUR - 842)) | (1L << (CURSOR_NAME - 842)) | (1L << (CONCURRENT - 842)) | (1L << (DUMPFILE - 842)) | (1L << (COMPRESSED - 842)) | (1L << (LINESTRING - 842)) | (1L << (DYNAMIC - 842)) | (1L << (CHAIN - 842)) | (1L << (INCREMENT - 842)) | (1L << (LAG - 842)) | (1L << (BASELINE_ID - 842)) | (1L << (NEW - 842)) | (1L << (SQL_TSI_YEAR - 842)) | (1L << (THAN - 842)) | (1L << (CPU - 842)) | (1L << (HOST - 842)) | (1L << (VALUE - 842)) | (1L << (LOGS - 842)) | (1L << (SERIALIZABLE - 842)) | (1L << (AUTO_INCREMENT - 842)) | (1L << (BACKUP - 842)) | (1L << (LOGFILE - 842)) | (1L << (ROW_FORMAT - 842)) | (1L << (SET_MASTER_CLUSTER - 842)) | (1L << (MINUTE - 842)) | (1L << (SWAPS - 842)) | (1L << (TASK - 842)) | (1L << (INNODB - 842)) | (1L << (IO_THREAD - 842)))) != 0) || ((((_la - 906)) & ~0x3f) == 0 && ((1L << (_la - 906)) & ((1L << (HISTOGRAM - 906)) | (1L << (PCTFREE - 906)) | (1L << (PARAMETERS - 906)) | (1L << (OBJECT - 906)) | (1L << (TABLESPACE - 906)) | (1L << (OBCONFIG_URL - 906)) | (1L << (AUTO - 906)) | (1L << (ROW - 906)) | (1L << (MESSAGE_TEXT - 906)) | (1L << (DISK - 906)) | (1L << (FAULTS - 906)) | (1L << (HOUR - 906)) | (1L << (REFRESH - 906)) | (1L << (COLUMN_STAT - 906)) | (1L << (ANY - 906)) | (1L << (UNIT_GROUP - 906)) | (1L << (TTL - 906)) | (1L << (ERROR_CODE - 906)) | (1L << (PHASE - 906)) | (1L << (ENTITY - 906)) | (1L << (PROFILE - 906)) | (1L << (LAST_VALUE - 906)) | (1L << (RESTART - 906)) | (1L << (TRACE - 906)) | (1L << (LOGICAL_READS - 906)) | (1L << (DATE_ADD - 906)) | (1L << (BLOCK_INDEX - 906)) | (1L << (SERVER_IP - 906)) | (1L << (CODE - 906)) | (1L << (PLUGINS - 906)) | (1L << (ADDDATE - 906)) | (1L << (VIRTUAL_COLUMN_ID - 906)) | (1L << (COLUMN_FORMAT - 906)) | (1L << (NESTED - 906)) | (1L << (CLEAN - 906)) | (1L << (MASTER_SSL - 906)) | (1L << (CLEAR - 906)) | (1L << (CHECKSUM - 906)) | (1L << (INSTALL - 906)) | (1L << (MONTH - 906)) | (1L << (NEVER - 906)) | (1L << (AFTER - 906)) | (1L << (CLOSE - 906)) | (1L << (JSON_OBJECTAGG - 906)) | (1L << (SET_TP - 906)) | (1L << (OWNER - 906)) | (1L << (BLOOM_FILTER - 906)) | (1L << (ILOG - 906)) | (1L << (META - 906)) | (1L << (STARTS - 906)) | (1L << (PLANREGRESS - 906)) | (1L << (AUTOEXTEND_SIZE - 906)) | (1L << (TABLET_ID - 906)) | (1L << (SOURCE - 906)) | (1L << (IGNORE_SERVER_IDS - 906)) | (1L << (REPLICA_NUM - 906)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (BINDING - 971)) | (1L << (MICROSECOND - 971)) | (1L << (UNDO_BUFFER_SIZE - 971)) | (1L << (SWITCHOVER - 971)) | (1L << (EXTENDED_NOADDR - 971)) | (1L << (GLOBAL_NAME - 971)) | (1L << (SPLIT - 971)) | (1L << (BASELINE - 971)) | (1L << (MEMORY - 971)) | (1L << (DESCRIPTION - 971)) | (1L << (SEED - 971)) | (1L << (RTREE - 971)) | (1L << (STDDEV_POP - 971)) | (1L << (RUN - 971)) | (1L << (OBSOLETE - 971)) | (1L << (SQL_AFTER_GTIDS - 971)) | (1L << (OPEN - 971)) | (1L << (SQL_TSI_DAY - 971)) | (1L << (STRING - 971)) | (1L << (RELAY_THREAD - 971)) | (1L << (BREADTH - 971)) | (1L << (NOCACHE - 971)) | (1L << (UNUSUAL - 971)) | (1L << (RELAYLOG - 971)) | (1L << (SQL_BEFORE_GTIDS - 971)) | (1L << (PRIMARY_ZONE - 971)) | (1L << (TABLE_CHECKSUM - 971)) | (1L << (ZONE_LIST - 971)) | (1L << (DATABASE_ID - 971)) | (1L << (TP_NO - 971)) | (1L << (NETWORK - 971)) | (1L << (PROTECTION - 971)) | (1L << (BOOLEAN - 971)) | (1L << (AVG - 971)) | (1L << (MULTILINESTRING - 971)) | (1L << (APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE - 971)) | (1L << (NOW - 971)) | (1L << (BIT_OR - 971)) | (1L << (DUPLICATE_SCOPE - 971)) | (1L << (STATS_SAMPLE_PAGES - 971)) | (1L << (TABLET_SIZE - 971)) | (1L << (BASE - 971)) | (1L << (KVCACHE - 971)) | (1L << (RELAY - 971)) | (1L << (MEMORY_SIZE - 971)) | (1L << (CONTRIBUTORS - 971)) | (1L << (EMPTY - 971)) | (1L << (PARTIAL - 971)) | (1L << (REPORT - 971)) | (1L << (ESCAPE - 971)) | (1L << (CLONE - 971)) | (1L << (MASTER_AUTO_POSITION - 971)) | (1L << (DISKGROUP - 971)) | (1L << (CALC_PARTITION_ID - 971)) | (1L << (TP_NAME - 971)) | (1L << (ACTIVATE - 971)) | (1L << (SQL_AFTER_MTS_GAPS - 971)) | (1L << (EFFECTIVE - 971)) | (1L << (FIRST_VALUE - 971)) | (1L << (SQL_TSI_MINUTE - 971)))) != 0) || ((((_la - 1035)) & ~0x3f) == 0 && ((1L << (_la - 1035)) & ((1L << (UNICODE - 1035)) | (1L << (QUARTER - 1035)) | (1L << (ANALYSE - 1035)) | (1L << (DEFINER - 1035)) | (1L << (PROCESSLIST - 1035)) | (1L << (TYPE - 1035)) | (1L << (INSERT_METHOD - 1035)) | (1L << (EXTENDED - 1035)) | (1L << (LOG - 1035)) | (1L << (WHENEVER - 1035)) | (1L << (LEVEL - 1035)) | (1L << (TIME_ZONE_INFO - 1035)) | (1L << (TIMESTAMPADD - 1035)) | (1L << (GET_FORMAT - 1035)) | (1L << (PREPARE - 1035)) | (1L << (MATERIALIZED - 1035)) | (1L << (STANDBY - 1035)) | (1L << (WORK - 1035)) | (1L << (HANDLER - 1035)) | (1L << (CUME_DIST - 1035)) | (1L << (LEAK - 1035)) | (1L << (INITIAL_SIZE - 1035)) | (1L << (RELAY_LOG_FILE - 1035)) | (1L << (STORING - 1035)) | (1L << (IMPORT - 1035)) | (1L << (HELP - 1035)) | (1L << (CREATE_TIMESTAMP - 1035)) | (1L << (COMPUTE - 1035)) | (1L << (SOUNDS - 1035)) | (1L << (TABLE_MODE - 1035)) | (1L << (COPY - 1035)) | (1L << (SESSION - 1035)) | (1L << (DAG - 1035)) | (1L << (NOCYCLE - 1035)) | (1L << (SQL_NO_CACHE - 1035)) | (1L << (PRECEDING - 1035)) | (1L << (SWITCHES - 1035)) | (1L << (PACK_KEYS - 1035)) | (1L << (ENABLE_EXTENDED_ROWID - 1035)) | (1L << (SQL_ID - 1035)) | (1L << (NOORDER - 1035)) | (1L << (TENANT_ID - 1035)) | (1L << (CHECKPOINT - 1035)) | (1L << (DAY - 1035)) | (1L << (GROUP_CONCAT - 1035)) | (1L << (JSON_TABLE - 1035)) | (1L << (LEAD - 1035)) | (1L << (EVENTS - 1035)) | (1L << (RECURSIVE - 1035)) | (1L << (ONLY - 1035)) | (1L << (TABLEGROUP_ID - 1035)) | (1L << (TOP_K_FRE_HIST - 1035)) | (1L << (MASTER_SSL_CRL - 1035)) | (1L << (RESOURCE_POOL - 1035)) | (1L << (RESOURCE_POOL_LIST - 1035)) | (1L << (NTILE - 1035)) | (1L << (NULL_IF_EXETERNAL - 1035)) | (1L << (BUCKETS - 1035)))) != 0) || ((((_la - 1099)) & ~0x3f) == 0 && ((1L << (_la - 1099)) & ((1L << (SKEWONLY - 1099)) | (1L << (SCHEDULE - 1099)) | (1L << (JOB - 1099)) | (1L << (SRID - 1099)) | (1L << (MASTER_LOG_POS - 1099)) | (1L << (SUBCLASS_ORIGIN - 1099)) | (1L << (MULTIPOINT - 1099)) | (1L << (BLOCK - 1099)) | (1L << (SQL_TSI_SECOND - 1099)) | (1L << (DATE - 1099)) | (1L << (ROLLUP - 1099)) | (1L << (MIN_CPU - 1099)) | (1L << (OCCUR - 1099)) | (1L << (DATA - 1099)) | (1L << (SUCCESSFUL - 1099)) | (1L << (REDO_TRANSPORT_OPTIONS - 1099)) | (1L << (FIELD_DELIMITER - 1099)) | (1L << (MASTER_HOST - 1099)) | (1L << (VAR_SAMP - 1099)) | (1L << (ALGORITHM - 1099)) | (1L << (EXPIRED - 1099)) | (1L << (CONSTRAINT_NAME - 1099)) | (1L << (APPROX_COUNT_DISTINCT - 1099)) | (1L << (BASIC - 1099)) | (1L << (DEFAULT_TABLEGROUP - 1099)) | (1L << (LIST_ - 1099)) | (1L << (WEEK - 1099)) | (1L << (LINK - 1099)) | (1L << (STATEMENT_ID - 1099)) | (1L << (NULLS - 1099)) | (1L << (MASTER_SSL_CRLPATH - 1099)) | (1L << (CASCADED - 1099)) | (1L << (PLUGIN - 1099)) | (1L << (ENCRYPTED - 1099)) | (1L << (TENANT - 1099)) | (1L << (STORE - 1099)) | (1L << (LOG_RESTORE_SOURCE - 1099)) | (1L << (ENABLE_ARBITRATION_SERVICE - 1099)))) != 0) || ((((_la - 1237)) & ~0x3f) == 0 && ((1L << (_la - 1237)) & ((1L << (STAT - 1237)) | (1L << (ALL_META - 1237)) | (1L << (ALL_USER - 1237)) | (1L << (BEGI - 1237)) | (1L << (REMAP - 1237)) | (1L << (HIDDEN - 1237)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keyword_specialContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(OBParser.PASSWORD, 0); }
		public Unreserved_keyword_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnreserved_keyword_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnreserved_keyword_special(this);
		}
	}

	public final Unreserved_keyword_specialContext unreserved_keyword_special() throws RecognitionException {
		Unreserved_keyword_specialContext _localctx = new Unreserved_keyword_specialContext(_ctx, getState());
		enterRule(_localctx, 1592, RULE_unreserved_keyword_special);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11868);
			match(PASSWORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keyword_extraContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(OBParser.ACCESS, 0); }
		public Unreserved_keyword_extraContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword_extra; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnreserved_keyword_extra(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnreserved_keyword_extra(this);
		}
	}

	public final Unreserved_keyword_extraContext unreserved_keyword_extra() throws RecognitionException {
		Unreserved_keyword_extraContext _localctx = new Unreserved_keyword_extraContext(_ctx, getState());
		enterRule(_localctx, 1594, RULE_unreserved_keyword_extra);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11870);
			match(ACCESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unreserved_keyword_ambiguous_rolesContext extends ParserRuleContext {
		public TerminalNode SUPER() { return getToken(OBParser.SUPER, 0); }
		public TerminalNode FILEX() { return getToken(OBParser.FILEX, 0); }
		public TerminalNode PROCESS() { return getToken(OBParser.PROCESS, 0); }
		public TerminalNode NONE() { return getToken(OBParser.NONE, 0); }
		public TerminalNode EVENT() { return getToken(OBParser.EVENT, 0); }
		public TerminalNode PROXY() { return getToken(OBParser.PROXY, 0); }
		public TerminalNode RELOAD() { return getToken(OBParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(OBParser.REPLICATION, 0); }
		public TerminalNode RESOURCE() { return getToken(OBParser.RESOURCE, 0); }
		public TerminalNode EXECUTE() { return getToken(OBParser.EXECUTE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OBParser.SHUTDOWN, 0); }
		public Unreserved_keyword_ambiguous_rolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreserved_keyword_ambiguous_roles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterUnreserved_keyword_ambiguous_roles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitUnreserved_keyword_ambiguous_roles(this);
		}
	}

	public final Unreserved_keyword_ambiguous_rolesContext unreserved_keyword_ambiguous_roles() throws RecognitionException {
		Unreserved_keyword_ambiguous_rolesContext _localctx = new Unreserved_keyword_ambiguous_rolesContext(_ctx, getState());
		enterRule(_localctx, 1596, RULE_unreserved_keyword_ambiguous_roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11872);
			_la = _input.LA(1);
			if ( !(_la==EVENT || _la==FILEX || ((((_la - 594)) & ~0x3f) == 0 && ((1L << (_la - 594)) & ((1L << (PROCESS - 594)) | (1L << (RELOAD - 594)) | (1L << (SHUTDOWN - 594)))) != 0) || _la==REPLICATION || _la==SUPER || ((((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & ((1L << (RESOURCE - 983)) | (1L << (PROXY - 983)) | (1L << (NONE - 983)))) != 0) || _la==EXECUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mysql_reserved_keywordContext extends ParserRuleContext {
		public TerminalNode ACCESSIBLE() { return getToken(OBParser.ACCESSIBLE, 0); }
		public TerminalNode ADD() { return getToken(OBParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(OBParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(OBParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(OBParser.AND, 0); }
		public TerminalNode AS() { return getToken(OBParser.AS, 0); }
		public TerminalNode ASC() { return getToken(OBParser.ASC, 0); }
		public TerminalNode ASENSITIVE() { return getToken(OBParser.ASENSITIVE, 0); }
		public TerminalNode BEFORE() { return getToken(OBParser.BEFORE, 0); }
		public TerminalNode BETWEEN() { return getToken(OBParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(OBParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(OBParser.BINARY, 0); }
		public TerminalNode BLOB() { return getToken(OBParser.BLOB, 0); }
		public TerminalNode BY() { return getToken(OBParser.BY, 0); }
		public TerminalNode CALL() { return getToken(OBParser.CALL, 0); }
		public TerminalNode CASCADE() { return getToken(OBParser.CASCADE, 0); }
		public TerminalNode CASE() { return getToken(OBParser.CASE, 0); }
		public TerminalNode CHANGE() { return getToken(OBParser.CHANGE, 0); }
		public TerminalNode CHAR() { return getToken(OBParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(OBParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(OBParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(OBParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(OBParser.COLUMN, 0); }
		public TerminalNode CONDITION() { return getToken(OBParser.CONDITION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(OBParser.CONSTRAINT, 0); }
		public TerminalNode CONTINUE() { return getToken(OBParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(OBParser.CONVERT, 0); }
		public TerminalNode CREATE() { return getToken(OBParser.CREATE, 0); }
		public TerminalNode CROSS() { return getToken(OBParser.CROSS, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(OBParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(OBParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OBParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OBParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(OBParser.CURSOR, 0); }
		public TerminalNode DATABASE() { return getToken(OBParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(OBParser.DATABASES, 0); }
		public TerminalNode DAY_HOUR() { return getToken(OBParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(OBParser.DAY_MICROSECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(OBParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(OBParser.DAY_SECOND, 0); }
		public TerminalNode DECLARE() { return getToken(OBParser.DECLARE, 0); }
		public TerminalNode DECIMAL() { return getToken(OBParser.DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(OBParser.DEFAULT, 0); }
		public TerminalNode DELAYED() { return getToken(OBParser.DELAYED, 0); }
		public TerminalNode DELETE() { return getToken(OBParser.DELETE, 0); }
		public TerminalNode DESC() { return getToken(OBParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(OBParser.DESCRIBE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(OBParser.DETERMINISTIC, 0); }
		public TerminalNode DISTINCTROW() { return getToken(OBParser.DISTINCTROW, 0); }
		public TerminalNode DIV() { return getToken(OBParser.DIV, 0); }
		public TerminalNode DOUBLE() { return getToken(OBParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(OBParser.DROP, 0); }
		public TerminalNode DUAL() { return getToken(OBParser.DUAL, 0); }
		public TerminalNode EACH() { return getToken(OBParser.EACH, 0); }
		public TerminalNode ELSE() { return getToken(OBParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(OBParser.ELSEIF, 0); }
		public TerminalNode ENCLOSED() { return getToken(OBParser.ENCLOSED, 0); }
		public TerminalNode ESCAPED() { return getToken(OBParser.ESCAPED, 0); }
		public TerminalNode EXISTS() { return getToken(OBParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(OBParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(OBParser.EXPLAIN, 0); }
		public TerminalNode FETCH() { return getToken(OBParser.FETCH, 0); }
		public TerminalNode FLOAT() { return getToken(OBParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(OBParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(OBParser.FLOAT8, 0); }
		public TerminalNode FOR() { return getToken(OBParser.FOR, 0); }
		public TerminalNode FORCE() { return getToken(OBParser.FORCE, 0); }
		public TerminalNode FOREIGN() { return getToken(OBParser.FOREIGN, 0); }
		public TerminalNode FULLTEXT() { return getToken(OBParser.FULLTEXT, 0); }
		public TerminalNode GENERATED() { return getToken(OBParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(OBParser.GET, 0); }
		public TerminalNode GRANT() { return getToken(OBParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(OBParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(OBParser.HAVING, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(OBParser.HIGH_PRIORITY, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(OBParser.HOUR_MICROSECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(OBParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(OBParser.HOUR_SECOND, 0); }
		public TerminalNode IF() { return getToken(OBParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(OBParser.IGNORE, 0); }
		public TerminalNode IN() { return getToken(OBParser.IN, 0); }
		public TerminalNode INDEX() { return getToken(OBParser.INDEX, 0); }
		public TerminalNode INFILE() { return getToken(OBParser.INFILE, 0); }
		public TerminalNode INNER() { return getToken(OBParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(OBParser.INOUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(OBParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(OBParser.INSERT, 0); }
		public TerminalNode INT() { return getToken(OBParser.INT, 0); }
		public TerminalNode INT1() { return getToken(OBParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(OBParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(OBParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(OBParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(OBParser.INT8, 0); }
		public TerminalNode INTEGER() { return getToken(OBParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(OBParser.INTERVAL, 0); }
		public TerminalNode INTO() { return getToken(OBParser.INTO, 0); }
		public TerminalNode IO_AFTER_GTIDS() { return getToken(OBParser.IO_AFTER_GTIDS, 0); }
		public TerminalNode IO_BEFORE_GTIDS() { return getToken(OBParser.IO_BEFORE_GTIDS, 0); }
		public TerminalNode IS() { return getToken(OBParser.IS, 0); }
		public TerminalNode ITERATE() { return getToken(OBParser.ITERATE, 0); }
		public TerminalNode JOIN() { return getToken(OBParser.JOIN, 0); }
		public TerminalNode KEY() { return getToken(OBParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(OBParser.KEYS, 0); }
		public TerminalNode KILL() { return getToken(OBParser.KILL, 0); }
		public TerminalNode LEAVE() { return getToken(OBParser.LEAVE, 0); }
		public TerminalNode LEFT() { return getToken(OBParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(OBParser.LIKE, 0); }
		public TerminalNode LIMIT() { return getToken(OBParser.LIMIT, 0); }
		public TerminalNode LINEAR() { return getToken(OBParser.LINEAR, 0); }
		public TerminalNode LINES() { return getToken(OBParser.LINES, 0); }
		public TerminalNode LOAD() { return getToken(OBParser.LOAD, 0); }
		public TerminalNode LOCALTIME() { return getToken(OBParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(OBParser.LOCALTIMESTAMP, 0); }
		public TerminalNode LONG() { return getToken(OBParser.LONG, 0); }
		public TerminalNode LONGBLOB() { return getToken(OBParser.LONGBLOB, 0); }
		public TerminalNode LONGTEXT() { return getToken(OBParser.LONGTEXT, 0); }
		public TerminalNode LOOP() { return getToken(OBParser.LOOP, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(OBParser.LOW_PRIORITY, 0); }
		public TerminalNode MASTER_BIND() { return getToken(OBParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(OBParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public TerminalNode MATCH() { return getToken(OBParser.MATCH, 0); }
		public TerminalNode MAXVALUE() { return getToken(OBParser.MAXVALUE, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(OBParser.MEDIUMBLOB, 0); }
		public TerminalNode MEDIUMINT() { return getToken(OBParser.MEDIUMINT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(OBParser.MEDIUMTEXT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(OBParser.MIDDLEINT, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(OBParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(OBParser.MINUTE_SECOND, 0); }
		public TerminalNode MOD() { return getToken(OBParser.MOD, 0); }
		public TerminalNode MODIFIES() { return getToken(OBParser.MODIFIES, 0); }
		public TerminalNode NATURAL() { return getToken(OBParser.NATURAL, 0); }
		public TerminalNode NOT() { return getToken(OBParser.NOT, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(OBParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode NUMERIC() { return getToken(OBParser.NUMERIC, 0); }
		public TerminalNode ON() { return getToken(OBParser.ON, 0); }
		public TerminalNode OPTIMIZE() { return getToken(OBParser.OPTIMIZE, 0); }
		public TerminalNode OPTION() { return getToken(OBParser.OPTION, 0); }
		public TerminalNode OPTIONALLY() { return getToken(OBParser.OPTIONALLY, 0); }
		public TerminalNode OR() { return getToken(OBParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(OBParser.ORDER, 0); }
		public TerminalNode OUT() { return getToken(OBParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(OBParser.OUTER, 0); }
		public TerminalNode OUTFILE() { return getToken(OBParser.OUTFILE, 0); }
		public TerminalNode PARTITION() { return getToken(OBParser.PARTITION, 0); }
		public TerminalNode PRECISION() { return getToken(OBParser.PRECISION, 0); }
		public TerminalNode PRIMARY() { return getToken(OBParser.PRIMARY, 0); }
		public TerminalNode PROCEDURE() { return getToken(OBParser.PROCEDURE, 0); }
		public TerminalNode PURGE() { return getToken(OBParser.PURGE, 0); }
		public TerminalNode RANGE() { return getToken(OBParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(OBParser.READ, 0); }
		public TerminalNode READS() { return getToken(OBParser.READS, 0); }
		public TerminalNode READ_WRITE() { return getToken(OBParser.READ_WRITE, 0); }
		public TerminalNode REAL() { return getToken(OBParser.REAL, 0); }
		public TerminalNode REFERENCES() { return getToken(OBParser.REFERENCES, 0); }
		public TerminalNode REGEXP() { return getToken(OBParser.REGEXP, 0); }
		public TerminalNode RELEASE() { return getToken(OBParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(OBParser.RENAME, 0); }
		public TerminalNode REPEAT() { return getToken(OBParser.REPEAT, 0); }
		public TerminalNode REPLACE() { return getToken(OBParser.REPLACE, 0); }
		public TerminalNode REQUIRE() { return getToken(OBParser.REQUIRE, 0); }
		public TerminalNode RESIGNAL() { return getToken(OBParser.RESIGNAL, 0); }
		public TerminalNode RESTRICT() { return getToken(OBParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(OBParser.RETURN, 0); }
		public TerminalNode REVOKE() { return getToken(OBParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(OBParser.RIGHT, 0); }
		public TerminalNode RLIKE() { return getToken(OBParser.RLIKE, 0); }
		public TerminalNode SCHEMA() { return getToken(OBParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(OBParser.SCHEMAS, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(OBParser.SECOND_MICROSECOND, 0); }
		public TerminalNode SENSITIVE() { return getToken(OBParser.SENSITIVE, 0); }
		public TerminalNode SEPARATOR() { return getToken(OBParser.SEPARATOR, 0); }
		public TerminalNode SET() { return getToken(OBParser.SET, 0); }
		public TerminalNode SHOW() { return getToken(OBParser.SHOW, 0); }
		public TerminalNode SIGNAL() { return getToken(OBParser.SIGNAL, 0); }
		public TerminalNode SMALLINT() { return getToken(OBParser.SMALLINT, 0); }
		public TerminalNode SPATIAL() { return getToken(OBParser.SPATIAL, 0); }
		public TerminalNode SPECIFIC() { return getToken(OBParser.SPECIFIC, 0); }
		public TerminalNode SQL() { return getToken(OBParser.SQL, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(OBParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(OBParser.SQLSTATE, 0); }
		public TerminalNode SQLWARNING() { return getToken(OBParser.SQLWARNING, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(OBParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(OBParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SSL() { return getToken(OBParser.SSL, 0); }
		public TerminalNode STARTING() { return getToken(OBParser.STARTING, 0); }
		public TerminalNode STORED() { return getToken(OBParser.STORED, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(OBParser.STRAIGHT_JOIN, 0); }
		public TerminalNode TABLE() { return getToken(OBParser.TABLE, 0); }
		public TerminalNode TERMINATED() { return getToken(OBParser.TERMINATED, 0); }
		public TerminalNode THEN() { return getToken(OBParser.THEN, 0); }
		public TerminalNode TINYBLOB() { return getToken(OBParser.TINYBLOB, 0); }
		public TerminalNode TINYINT() { return getToken(OBParser.TINYINT, 0); }
		public TerminalNode TINYTEXT() { return getToken(OBParser.TINYTEXT, 0); }
		public TerminalNode TO() { return getToken(OBParser.TO, 0); }
		public TerminalNode TRIGGER() { return getToken(OBParser.TRIGGER, 0); }
		public TerminalNode UNDO() { return getToken(OBParser.UNDO, 0); }
		public TerminalNode UNION() { return getToken(OBParser.UNION, 0); }
		public TerminalNode UNLOCK() { return getToken(OBParser.UNLOCK, 0); }
		public TerminalNode UNSIGNED() { return getToken(OBParser.UNSIGNED, 0); }
		public TerminalNode UPDATE() { return getToken(OBParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(OBParser.USAGE, 0); }
		public TerminalNode USE() { return getToken(OBParser.USE, 0); }
		public TerminalNode USING() { return getToken(OBParser.USING, 0); }
		public TerminalNode UTC_DATE() { return getToken(OBParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(OBParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(OBParser.UTC_TIMESTAMP, 0); }
		public TerminalNode VALUES() { return getToken(OBParser.VALUES, 0); }
		public TerminalNode VARBINARY() { return getToken(OBParser.VARBINARY, 0); }
		public TerminalNode VARCHAR() { return getToken(OBParser.VARCHAR, 0); }
		public TerminalNode VARCHARACTER() { return getToken(OBParser.VARCHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(OBParser.VARYING, 0); }
		public TerminalNode VIRTUAL() { return getToken(OBParser.VIRTUAL, 0); }
		public TerminalNode WHERE() { return getToken(OBParser.WHERE, 0); }
		public TerminalNode WHILE() { return getToken(OBParser.WHILE, 0); }
		public TerminalNode WITH() { return getToken(OBParser.WITH, 0); }
		public TerminalNode WRITE() { return getToken(OBParser.WRITE, 0); }
		public TerminalNode XOR() { return getToken(OBParser.XOR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(OBParser.YEAR_MONTH, 0); }
		public TerminalNode ZEROFILL() { return getToken(OBParser.ZEROFILL, 0); }
		public Mysql_reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysql_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterMysql_reserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitMysql_reserved_keyword(this);
		}
	}

	public final Mysql_reserved_keywordContext mysql_reserved_keyword() throws RecognitionException {
		Mysql_reserved_keywordContext _localctx = new Mysql_reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 1598, RULE_mysql_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11874);
			_la = _input.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (ACCESSIBLE - 82)) | (1L << (ADD - 82)) | (1L << (ALTER - 82)) | (1L << (AND - 82)) | (1L << (ANALYZE - 82)) | (1L << (AS - 82)) | (1L << (ASENSITIVE - 82)) | (1L << (ASC - 82)) | (1L << (BETWEEN - 82)) | (1L << (BEFORE - 82)) | (1L << (BIGINT - 82)) | (1L << (BINARY - 82)) | (1L << (BLOB - 82)) | (1L << (BY - 82)) | (1L << (CALL - 82)) | (1L << (CASCADE - 82)) | (1L << (CASE - 82)) | (1L << (CHANGE - 82)) | (1L << (CHARACTER - 82)) | (1L << (CHECK - 82)) | (1L << (CONDITION - 82)) | (1L << (CONSTRAINT - 82)) | (1L << (CONTINUE - 82)) | (1L << (CONVERT - 82)) | (1L << (COLLATE - 82)) | (1L << (COLUMN - 82)) | (1L << (CREATE - 82)) | (1L << (CROSS - 82)) | (1L << (CURRENT_DATE - 82)) | (1L << (CURRENT_TIME - 82)) | (1L << (CURRENT_TIMESTAMP - 82)) | (1L << (CURRENT_USER - 82)) | (1L << (CURSOR - 82)) | (1L << (DAY_HOUR - 82)) | (1L << (DAY_MICROSECOND - 82)) | (1L << (DAY_MINUTE - 82)) | (1L << (DAY_SECOND - 82)) | (1L << (DATABASE - 82)) | (1L << (DATABASES - 82)) | (1L << (DECIMAL - 82)) | (1L << (DECLARE - 82)) | (1L << (DEFAULT - 82)) | (1L << (DELAYED - 82)) | (1L << (DELETE - 82)) | (1L << (DESC - 82)) | (1L << (DESCRIBE - 82)) | (1L << (DETERMINISTIC - 82)) | (1L << (DIV - 82)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DISTINCTROW - 147)) | (1L << (DOUBLE - 147)) | (1L << (DROP - 147)) | (1L << (DUAL - 147)) | (1L << (EACH - 147)) | (1L << (ENCLOSED - 147)) | (1L << (ELSE - 147)) | (1L << (ELSEIF - 147)) | (1L << (ESCAPED - 147)) | (1L << (EXISTS - 147)) | (1L << (EXIT - 147)) | (1L << (EXPLAIN - 147)) | (1L << (FETCH - 147)) | (1L << (FOREIGN - 147)) | (1L << (FLOAT - 147)) | (1L << (FLOAT4 - 147)) | (1L << (FLOAT8 - 147)) | (1L << (FOR - 147)) | (1L << (FORCE - 147)) | (1L << (FULLTEXT - 147)) | (1L << (GET - 147)) | (1L << (GENERATED - 147)) | (1L << (GRANT - 147)) | (1L << (GROUP - 147)) | (1L << (HAVING - 147)) | (1L << (HIGH_PRIORITY - 147)) | (1L << (HOUR_MICROSECOND - 147)) | (1L << (HOUR_MINUTE - 147)) | (1L << (HOUR_SECOND - 147)) | (1L << (IF - 147)) | (1L << (IN - 147)) | (1L << (INDEX - 147)) | (1L << (INNER - 147)) | (1L << (INFILE - 147)) | (1L << (INOUT - 147)) | (1L << (INSENSITIVE - 147)) | (1L << (INTEGER - 147)) | (1L << (INT1 - 147)) | (1L << (INT2 - 147)) | (1L << (INT3 - 147)) | (1L << (INT4 - 147)) | (1L << (INT8 - 147)) | (1L << (INTERVAL - 147)) | (1L << (INSERT - 147)) | (1L << (INTO - 147)) | (1L << (IO_AFTER_GTIDS - 147)) | (1L << (IO_BEFORE_GTIDS - 147)) | (1L << (IS - 147)) | (1L << (ITERATE - 147)) | (1L << (JOIN - 147)) | (1L << (KEY - 147)) | (1L << (KEYS - 147)) | (1L << (KILL - 147)) | (1L << (LEAVE - 147)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (LEFT - 211)) | (1L << (LIMIT - 211)) | (1L << (LIKE - 211)) | (1L << (LINEAR - 211)) | (1L << (LINES - 211)) | (1L << (LOAD - 211)) | (1L << (LOCALTIME - 211)) | (1L << (LOCALTIMESTAMP - 211)) | (1L << (LONG - 211)) | (1L << (LONGBLOB - 211)) | (1L << (LONGTEXT - 211)) | (1L << (LOOP - 211)) | (1L << (LOW_PRIORITY - 211)) | (1L << (MASTER_BIND - 211)) | (1L << (MASTER_SSL_VERIFY_SERVER_CERT - 211)) | (1L << (MATCH - 211)) | (1L << (MAXVALUE - 211)) | (1L << (MEDIUMBLOB - 211)) | (1L << (MEDIUMINT - 211)) | (1L << (MEDIUMTEXT - 211)) | (1L << (MIDDLEINT - 211)) | (1L << (MINUTE_MICROSECOND - 211)) | (1L << (MINUTE_SECOND - 211)) | (1L << (MOD - 211)) | (1L << (MODIFIES - 211)) | (1L << (NATURAL - 211)) | (1L << (NO_WRITE_TO_BINLOG - 211)) | (1L << (ON - 211)) | (1L << (OPTION - 211)) | (1L << (OPTIMIZE - 211)) | (1L << (OPTIONALLY - 211)) | (1L << (OR - 211)) | (1L << (ORDER - 211)) | (1L << (OUT - 211)) | (1L << (OUTER - 211)) | (1L << (OUTFILE - 211)) | (1L << (PROCEDURE - 211)) | (1L << (PURGE - 211)) | (1L << (PARTITION - 211)) | (1L << (PRECISION - 211)) | (1L << (PRIMARY - 211)) | (1L << (RANGE - 211)) | (1L << (READ - 211)) | (1L << (READ_WRITE - 211)) | (1L << (READS - 211)) | (1L << (REAL - 211)) | (1L << (RELEASE - 211)) | (1L << (REFERENCES - 211)) | (1L << (REGEXP - 211)) | (1L << (RENAME - 211)) | (1L << (REPLACE - 211)) | (1L << (REPEAT - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (REQUIRE - 275)) | (1L << (RESIGNAL - 275)) | (1L << (RESTRICT - 275)) | (1L << (RETURN - 275)) | (1L << (REVOKE - 275)) | (1L << (RIGHT - 275)) | (1L << (SECOND_MICROSECOND - 275)) | (1L << (SCHEMA - 275)) | (1L << (SCHEMAS - 275)) | (1L << (SEPARATOR - 275)) | (1L << (SET - 275)) | (1L << (SENSITIVE - 275)) | (1L << (SHOW - 275)) | (1L << (SIGNAL - 275)) | (1L << (SMALLINT - 275)) | (1L << (SPATIAL - 275)) | (1L << (SPECIFIC - 275)) | (1L << (SQL - 275)) | (1L << (SQLEXCEPTION - 275)) | (1L << (SQLSTATE - 275)) | (1L << (SQLWARNING - 275)) | (1L << (SQL_BIG_RESULT - 275)) | (1L << (SQL_SMALL_RESULT - 275)) | (1L << (SSL - 275)) | (1L << (STARTING - 275)) | (1L << (NUMERIC - 275)) | (1L << (STORED - 275)) | (1L << (STRAIGHT_JOIN - 275)) | (1L << (TERMINATED - 275)) | (1L << (TINYBLOB - 275)) | (1L << (TINYINT - 275)) | (1L << (TINYTEXT - 275)) | (1L << (TABLE - 275)) | (1L << (THEN - 275)) | (1L << (TO - 275)) | (1L << (TRIGGER - 275)) | (1L << (UNDO - 275)) | (1L << (UNION - 275)) | (1L << (UNLOCK - 275)) | (1L << (UNSIGNED - 275)) | (1L << (UPDATE - 275)) | (1L << (USAGE - 275)) | (1L << (USE - 275)) | (1L << (USING - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (VALUES - 275)) | (1L << (VARBINARY - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (VARCHAR - 339)) | (1L << (VARYING - 339)) | (1L << (VIRTUAL - 339)) | (1L << (WHERE - 339)) | (1L << (WHILE - 339)) | (1L << (WITH - 339)) | (1L << (WRITE - 339)) | (1L << (XOR - 339)) | (1L << (YEAR_MONTH - 339)) | (1L << (ZEROFILL - 339)) | (1L << (NOT - 339)))) != 0) || _la==IGNORE || _la==VARCHARACTER || _la==RLIKE || _la==CHAR || _la==INT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyContext extends ParserRuleContext {
		public EmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitEmpty(this);
		}
	}

	public final EmptyContext empty() throws RecognitionException {
		EmptyContext _localctx = new EmptyContext(_ctx, getState());
		enterRule(_localctx, 1600, RULE_empty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forward_exprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EOF() { return getToken(OBParser.EOF, 0); }
		public Forward_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forward_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterForward_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitForward_expr(this);
		}
	}

	public final Forward_exprContext forward_expr() throws RecognitionException {
		Forward_exprContext _localctx = new Forward_exprContext(_ctx, getState());
		enterRule(_localctx, 1602, RULE_forward_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11878);
			expr(0);
			setState(11879);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forward_sql_stmtContext extends ParserRuleContext {
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public TerminalNode EOF() { return getToken(OBParser.EOF, 0); }
		public Forward_sql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forward_sql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).enterForward_sql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OBParserListener ) ((OBParserListener)listener).exitForward_sql_stmt(this);
		}
	}

	public final Forward_sql_stmtContext forward_sql_stmt() throws RecognitionException {
		Forward_sql_stmtContext _localctx = new Forward_sql_stmtContext(_ctx, getState());
		enterRule(_localctx, 1604, RULE_forward_sql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11881);
			stmt();
			setState(11882);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23:
			return bool_pri_sempred((Bool_priContext)_localctx, predIndex);
		case 26:
			return bit_expr_sempred((Bit_exprContext)_localctx, predIndex);
		case 27:
			return simple_expr_sempred((Simple_exprContext)_localctx, predIndex);
		case 28:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 86:
			return opt_resource_unit_option_list_sempred((Opt_resource_unit_option_listContext)_localctx, predIndex);
		case 99:
			return opt_tenant_option_list_sempred((Opt_tenant_option_listContext)_localctx, predIndex);
		case 151:
			return opt_reference_option_list_sempred((Opt_reference_option_listContext)_localctx, predIndex);
		case 157:
			return opt_generated_column_attribute_list_sempred((Opt_generated_column_attribute_listContext)_localctx, predIndex);
		case 163:
			return precision_int_num_sempred((Precision_int_numContext)_localctx, predIndex);
		case 166:
			return data_type_sempred((Data_typeContext)_localctx, predIndex);
		case 175:
			return float_type_i_sempred((Float_type_iContext)_localctx, predIndex);
		case 176:
			return number_type_i_sempred((Number_type_iContext)_localctx, predIndex);
		case 178:
			return character_type_i_sempred((Character_type_iContext)_localctx, predIndex);
		case 181:
			return datetime_type_i_sempred((Datetime_type_iContext)_localctx, predIndex);
		case 184:
			return binary_type_i_sempred((Binary_type_iContext)_localctx, predIndex);
		case 192:
			return opt_column_attribute_list_sempred((Opt_column_attribute_listContext)_localctx, predIndex);
		case 335:
			return insert_vals_list_sempred((Insert_vals_listContext)_localctx, predIndex);
		case 336:
			return insert_vals_sempred((Insert_valsContext)_localctx, predIndex);
		case 344:
			return select_clause_set_sempred((Select_clause_setContext)_localctx, predIndex);
		case 377:
			return opt_hint_list_sempred((Opt_hint_listContext)_localctx, predIndex);
		case 379:
			return name_list_sempred((Name_listContext)_localctx, predIndex);
		case 434:
			return relation_factor_in_leading_hint_list_sempred((Relation_factor_in_leading_hint_listContext)_localctx, predIndex);
		case 436:
			return relation_factor_in_use_join_hint_list_sempred((Relation_factor_in_use_join_hint_listContext)_localctx, predIndex);
		case 439:
			return joined_table_sempred((Joined_tableContext)_localctx, predIndex);
		case 460:
			return for_columns_list_sempred((For_columns_listContext)_localctx, predIndex);
		case 490:
			return calibration_info_list_sempred((Calibration_info_listContext)_localctx, predIndex);
		case 516:
			return tls_option_list_sempred((Tls_option_listContext)_localctx, predIndex);
		case 607:
			return add_external_table_partition_actions_sempred((Add_external_table_partition_actionsContext)_localctx, predIndex);
		case 609:
			return alter_table_actions_sempred((Alter_table_actionsContext)_localctx, predIndex);
		case 650:
			return add_or_alter_zone_options_sempred((Add_or_alter_zone_optionsContext)_localctx, predIndex);
		case 675:
			return alter_system_settp_actions_sempred((Alter_system_settp_actionsContext)_localctx, predIndex);
		case 706:
			return logfile_group_options_sempred((Logfile_group_optionsContext)_localctx, predIndex);
		case 716:
			return alter_logfile_group_options_sempred((Alter_logfile_group_optionsContext)_localctx, predIndex);
		case 720:
			return drop_ts_options_sempred((Drop_ts_optionsContext)_localctx, predIndex);
		case 787:
			return opt_skip_index_type_list_sempred((Opt_skip_index_type_listContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean bool_pri_sempred(Bool_priContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		case 4:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean bit_expr_sempred(Bit_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5:
			return precpred(_ctx, 2);
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean simple_expr_sempred(Simple_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 14);
		case 8:
			return precpred(_ctx, 17);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_resource_unit_option_list_sempred(Opt_resource_unit_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_tenant_option_list_sempred(Opt_tenant_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_reference_option_list_sempred(Opt_reference_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_generated_column_attribute_list_sempred(Opt_generated_column_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean precision_int_num_sempred(Precision_int_numContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return _localctx.max_precision_count>_localctx.precision_count;
		}
		return true;
	}
	private boolean data_type_sempred(Data_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean float_type_i_sempred(Float_type_iContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return !_localctx.in_cast_data_type;
		case 17:
			return _localctx.in_cast_data_type;
		case 18:
			return _localctx.in_cast_data_type;
		}
		return true;
	}
	private boolean number_type_i_sempred(Number_type_iContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return _localctx.in_cast_data_type;
		case 20:
			return !_localctx.in_cast_data_type;
		}
		return true;
	}
	private boolean character_type_i_sempred(Character_type_iContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return !_localctx.in_cast_data_type;
		case 22:
			return _localctx.in_cast_data_type;
		case 23:
			return _localctx.in_cast_data_type;
		case 24:
			return !_localctx.in_cast_data_type;
		case 25:
			return !_localctx.in_cast_data_type;
		case 26:
			return !_localctx.in_cast_data_type;
		case 27:
			return !_localctx.in_cast_data_type;
		case 28:
			return !_localctx.in_cast_data_type;
		case 29:
			return !_localctx.in_cast_data_type;
		case 30:
			return !_localctx.in_cast_data_type;
		case 31:
			return !_localctx.in_cast_data_type;
		}
		return true;
	}
	private boolean datetime_type_i_sempred(Datetime_type_iContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return !_localctx.in_cast_data_type;
		}
		return true;
	}
	private boolean binary_type_i_sempred(Binary_type_iContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return !_localctx.in_cast_data_type;
		}
		return true;
	}
	private boolean opt_column_attribute_list_sempred(Opt_column_attribute_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean insert_vals_list_sempred(Insert_vals_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean insert_vals_sempred(Insert_valsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean select_clause_set_sempred(Select_clause_setContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean opt_hint_list_sempred(Opt_hint_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean name_list_sempred(Name_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relation_factor_in_leading_hint_list_sempred(Relation_factor_in_leading_hint_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return precpred(_ctx, 2);
		case 41:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relation_factor_in_use_join_hint_list_sempred(Relation_factor_in_use_join_hint_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42:
			return precpred(_ctx, 2);
		case 43:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean joined_table_sempred(Joined_tableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return precpred(_ctx, 4);
		case 45:
			return precpred(_ctx, 3);
		case 46:
			return precpred(_ctx, 2);
		case 47:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean for_columns_list_sempred(For_columns_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48:
			return precpred(_ctx, 2);
		case 49:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean calibration_info_list_sempred(Calibration_info_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tls_option_list_sempred(Tls_option_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return precpred(_ctx, 2);
		case 52:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean add_external_table_partition_actions_sempred(Add_external_table_partition_actionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_table_actions_sempred(Alter_table_actionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean add_or_alter_zone_options_sempred(Add_or_alter_zone_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_system_settp_actions_sempred(Alter_system_settp_actionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean logfile_group_options_sempred(Logfile_group_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return precpred(_ctx, 2);
		case 58:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean alter_logfile_group_options_sempred(Alter_logfile_group_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59:
			return precpred(_ctx, 2);
		case 60:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean drop_ts_options_sempred(Drop_ts_optionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return precpred(_ctx, 2);
		case 62:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean opt_skip_index_type_list_sempred(Opt_skip_index_type_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 6;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u04e6\u2e6f\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\4\u029e\t\u029e\4\u029f\t\u029f\4\u02a0\t\u02a0\4\u02a1"+
		"\t\u02a1\4\u02a2\t\u02a2\4\u02a3\t\u02a3\4\u02a4\t\u02a4\4\u02a5\t\u02a5"+
		"\4\u02a6\t\u02a6\4\u02a7\t\u02a7\4\u02a8\t\u02a8\4\u02a9\t\u02a9\4\u02aa"+
		"\t\u02aa\4\u02ab\t\u02ab\4\u02ac\t\u02ac\4\u02ad\t\u02ad\4\u02ae\t\u02ae"+
		"\4\u02af\t\u02af\4\u02b0\t\u02b0\4\u02b1\t\u02b1\4\u02b2\t\u02b2\4\u02b3"+
		"\t\u02b3\4\u02b4\t\u02b4\4\u02b5\t\u02b5\4\u02b6\t\u02b6\4\u02b7\t\u02b7"+
		"\4\u02b8\t\u02b8\4\u02b9\t\u02b9\4\u02ba\t\u02ba\4\u02bb\t\u02bb\4\u02bc"+
		"\t\u02bc\4\u02bd\t\u02bd\4\u02be\t\u02be\4\u02bf\t\u02bf\4\u02c0\t\u02c0"+
		"\4\u02c1\t\u02c1\4\u02c2\t\u02c2\4\u02c3\t\u02c3\4\u02c4\t\u02c4\4\u02c5"+
		"\t\u02c5\4\u02c6\t\u02c6\4\u02c7\t\u02c7\4\u02c8\t\u02c8\4\u02c9\t\u02c9"+
		"\4\u02ca\t\u02ca\4\u02cb\t\u02cb\4\u02cc\t\u02cc\4\u02cd\t\u02cd\4\u02ce"+
		"\t\u02ce\4\u02cf\t\u02cf\4\u02d0\t\u02d0\4\u02d1\t\u02d1\4\u02d2\t\u02d2"+
		"\4\u02d3\t\u02d3\4\u02d4\t\u02d4\4\u02d5\t\u02d5\4\u02d6\t\u02d6\4\u02d7"+
		"\t\u02d7\4\u02d8\t\u02d8\4\u02d9\t\u02d9\4\u02da\t\u02da\4\u02db\t\u02db"+
		"\4\u02dc\t\u02dc\4\u02dd\t\u02dd\4\u02de\t\u02de\4\u02df\t\u02df\4\u02e0"+
		"\t\u02e0\4\u02e1\t\u02e1\4\u02e2\t\u02e2\4\u02e3\t\u02e3\4\u02e4\t\u02e4"+
		"\4\u02e5\t\u02e5\4\u02e6\t\u02e6\4\u02e7\t\u02e7\4\u02e8\t\u02e8\4\u02e9"+
		"\t\u02e9\4\u02ea\t\u02ea\4\u02eb\t\u02eb\4\u02ec\t\u02ec\4\u02ed\t\u02ed"+
		"\4\u02ee\t\u02ee\4\u02ef\t\u02ef\4\u02f0\t\u02f0\4\u02f1\t\u02f1\4\u02f2"+
		"\t\u02f2\4\u02f3\t\u02f3\4\u02f4\t\u02f4\4\u02f5\t\u02f5\4\u02f6\t\u02f6"+
		"\4\u02f7\t\u02f7\4\u02f8\t\u02f8\4\u02f9\t\u02f9\4\u02fa\t\u02fa\4\u02fb"+
		"\t\u02fb\4\u02fc\t\u02fc\4\u02fd\t\u02fd\4\u02fe\t\u02fe\4\u02ff\t\u02ff"+
		"\4\u0300\t\u0300\4\u0301\t\u0301\4\u0302\t\u0302\4\u0303\t\u0303\4\u0304"+
		"\t\u0304\4\u0305\t\u0305\4\u0306\t\u0306\4\u0307\t\u0307\4\u0308\t\u0308"+
		"\4\u0309\t\u0309\4\u030a\t\u030a\4\u030b\t\u030b\4\u030c\t\u030c\4\u030d"+
		"\t\u030d\4\u030e\t\u030e\4\u030f\t\u030f\4\u0310\t\u0310\4\u0311\t\u0311"+
		"\4\u0312\t\u0312\4\u0313\t\u0313\4\u0314\t\u0314\4\u0315\t\u0315\4\u0316"+
		"\t\u0316\4\u0317\t\u0317\4\u0318\t\u0318\4\u0319\t\u0319\4\u031a\t\u031a"+
		"\4\u031b\t\u031b\4\u031c\t\u031c\4\u031d\t\u031d\4\u031e\t\u031e\4\u031f"+
		"\t\u031f\4\u0320\t\u0320\4\u0321\t\u0321\4\u0322\t\u0322\4\u0323\t\u0323"+
		"\4\u0324\t\u0324\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0653\n\3"+
		"\5\3\u0655\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\5\4\u06c1\n\4\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3"+
		"\7\5\7\u06cd\n\7\3\7\3\7\3\7\3\7\5\7\u06d3\n\7\3\7\3\7\3\7\3\7\5\7\u06d9"+
		"\n\7\5\7\u06db\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u06e2\n\b\3\b\5\b\u06e5\n\b"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u06f2\n\t\3\n\3\n\3\n"+
		"\3\n\5\n\u06f8\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0701\n\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\5\n\u0709\n\n\5\n\u070b\n\n\3\13\3\13\3\13\3\13\3\13\3"+
		"\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\5\r\u071e\n\r\3\16\3"+
		"\16\3\16\7\16\u0723\n\16\f\16\16\16\u0726\13\16\3\17\3\17\3\17\7\17\u072b"+
		"\n\17\f\17\16\17\u072e\13\17\3\20\3\20\3\20\5\20\u0733\n\20\3\20\3\20"+
		"\5\20\u0737\n\20\5\20\u0739\n\20\3\21\3\21\5\21\u073d\n\21\3\21\3\21\3"+
		"\21\5\21\u0742\n\21\3\21\3\21\5\21\u0746\n\21\3\21\3\21\3\21\3\21\5\21"+
		"\u074c\n\21\5\21\u074e\n\21\3\22\5\22\u0751\n\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\5\22\u075a\n\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\5\24\u0768\n\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\5\26\u0773\n\26\3\27\3\27\3\27\3\27\5\27\u0779\n\27\3\27\3"+
		"\27\3\27\5\27\u077e\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27"+
		"\u0788\n\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31"+
		"\u0795\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\3\31\3\31\7\31\u07a7\n\31\f\31\16\31\u07aa\13\31\3\32\3\32"+
		"\5\32\u07ae\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u07b5\n\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\5\32\u07be\n\32\3\32\3\32\3\32\5\32\u07c3\n\32"+
		"\3\32\3\32\5\32\u07c7\n\32\3\32\3\32\5\32\u07cb\n\32\3\32\3\32\5\32\u07cf"+
		"\n\32\3\32\3\32\3\32\5\32\u07d4\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\5\32\u07de\n\32\3\33\6\33\u07e1\n\33\r\33\16\33\u07e2\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u07ed\n\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\7\34\u07f8\n\34\f\34\16\34\u07fb\13\34\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\5\35\u0803\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u080a"+
		"\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\5\35\u081b\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0823\n"+
		"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3"+
		"\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0839\n\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0846\n\35\3\35\3\35\3\35\3\35"+
		"\3\35\7\35\u084d\n\35\f\35\16\35\u0850\13\35\3\36\3\36\3\36\3\36\5\36"+
		"\u0856\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0860\n\36\3"+
		"\36\5\36\u0863\n\36\5\36\u0865\n\36\3\36\3\36\3\36\7\36\u086a\n\36\f\36"+
		"\16\36\u086d\13\36\3\37\3\37\3 \3 \3 \3 \3 \5 \u0876\n \3!\3!\3!\3!\3"+
		"!\5!\u087d\n!\3\"\3\"\5\"\u0881\n\"\3\"\3\"\5\"\u0885\n\"\3\"\3\"\3#\3"+
		"#\3#\5#\u088c\n#\3#\3#\5#\u0890\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u08a7\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\5#\u08ba\n#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u08c4\n"+
		"#\3#\3#\5#\u08c8\n#\3#\3#\5#\u08cc\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u08e4\n#\3#\3#\3#\5#\u08e9\n#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5"+
		"#\u0902\n#\3$\3$\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0914\n"+
		"&\5&\u0916\n&\3\'\3\'\5\'\u091a\n\'\3(\3(\5(\u091e\n(\3(\3(\3(\3)\3)\3"+
		")\7)\u0926\n)\f)\16)\u0929\13)\3*\3*\3*\3*\3+\3+\3+\5+\u0932\n+\3+\5+"+
		"\u0935\n+\3+\5+\u0938\n+\3,\3,\3-\3-\3.\3.\3.\3.\3.\5.\u0943\n.\3/\3/"+
		"\3/\3/\3/\5/\u094a\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60"+
		"\u0955\n\60\3\61\6\61\u0958\n\61\r\61\16\61\u0959\3\62\3\62\3\62\3\62"+
		"\3\62\3\63\3\63\3\63\3\64\3\64\3\64\5\64\u0967\n\64\3\64\3\64\5\64\u096b"+
		"\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\5\64\u097c\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0984\n"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0991"+
		"\n\64\3\64\3\64\5\64\u0995\n\64\3\64\3\64\5\64\u0999\n\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u09c3\n\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\5\64\u0a2b\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64"+
		"\u0a34\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64"+
		"\u0a4f\n\64\3\64\3\64\5\64\u0a53\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0a92"+
		"\n\64\3\64\3\64\3\64\3\64\5\64\u0a98\n\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0b0d\n\64"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0b16\n\65\3\65\3\65\3\66\3\66"+
		"\3\67\3\67\5\67\u0b1e\n\67\3\67\3\67\3\67\3\67\5\67\u0b24\n\67\38\38\3"+
		"8\38\38\68\u0b2b\n8\r8\168\u0b2c\38\38\38\38\38\38\38\58\u0b36\n8\39\3"+
		"9\39\59\u0b3b\n9\39\59\u0b3e\n9\3:\3:\3:\5:\u0b43\n:\3:\5:\u0b46\n:\3"+
		";\3;\3;\5;\u0b4b\n;\3<\3<\3<\5<\u0b50\n<\3<\3<\3=\3=\5=\u0b56\n=\3=\3"+
		"=\5=\u0b5a\n=\3=\5=\u0b5d\n=\3>\3>\3?\3?\3?\5?\u0b64\n?\3?\3?\3@\3@\3"+
		"@\3@\5@\u0b6c\n@\3A\3A\3B\3B\3B\3B\3B\5B\u0b75\nB\3B\3B\3B\3B\3B\5B\u0b7c"+
		"\nB\5B\u0b7e\nB\3C\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3E\3E\5E\u0b8e\nE"+
		"\3F\3F\3F\7F\u0b93\nF\fF\16F\u0b96\13F\3G\3G\3G\3H\3H\3H\3H\3I\3I\3J\3"+
		"J\3J\5J\u0ba4\nJ\3J\5J\u0ba7\nJ\3K\3K\3K\3K\3L\3L\3M\3M\3N\5N\u0bb2\n"+
		"N\3N\3N\3O\3O\5O\u0bb8\nO\3O\3O\3O\3O\3O\3O\5O\u0bc0\nO\3O\5O\u0bc3\n"+
		"O\3O\5O\u0bc6\nO\3O\3O\5O\u0bca\nO\3O\3O\3O\3O\3O\5O\u0bd1\nO\5O\u0bd3"+
		"\nO\3P\6P\u0bd6\nP\rP\16P\u0bd7\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0be5"+
		"\nR\3S\5S\u0be8\nS\3S\3S\3T\3T\5T\u0bee\nT\3T\5T\u0bf1\nT\3T\3T\3T\3T"+
		"\3T\3T\3T\5T\u0bfa\nT\3T\5T\u0bfd\nT\3T\5T\u0c00\nT\3U\3U\3U\7U\u0c05"+
		"\nU\fU\16U\u0c08\13U\3V\3V\3V\3V\3W\3W\3W\3W\3W\3W\3W\5W\u0c15\nW\3W\3"+
		"W\3W\3W\3W\3W\5W\u0c1d\nW\3W\3W\3W\3W\3W\3W\3W\5W\u0c26\nW\3W\3W\3W\3"+
		"W\3W\3W\5W\u0c2e\nW\5W\u0c30\nW\3X\3X\3X\5X\u0c35\nX\3X\3X\3X\7X\u0c3a"+
		"\nX\fX\16X\u0c3d\13X\3Y\3Y\5Y\u0c41\nY\3Y\3Y\3Z\3Z\3Z\3Z\3Z\7Z\u0c4a\n"+
		"Z\fZ\16Z\u0c4d\13Z\5Z\u0c4f\nZ\3[\3[\5[\u0c53\n[\3[\3[\3[\5[\u0c58\n["+
		"\3[\3[\3[\5[\u0c5d\n[\3[\3[\3[\3[\3[\3[\5[\u0c65\n[\3[\5[\u0c68\n[\3\\"+
		"\3\\\3\\\7\\\u0c6d\n\\\f\\\16\\\u0c70\13\\\3]\3]\3]\7]\u0c75\n]\f]\16"+
		"]\u0c78\13]\3^\3^\3^\7^\u0c7d\n^\f^\16^\u0c80\13^\3_\3_\5_\u0c84\n_\3"+
		"_\3_\3_\5_\u0c89\n_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0c93\n_\3_\3_\5_\u0c97"+
		"\n_\3_\3_\3_\3_\5_\u0c9d\n_\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0ca8\n`\3`"+
		"\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`"+
		"\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`"+
		"\u0cd8\n`\5`\u0cda\n`\3a\3a\3a\3a\3a\5a\u0ce1\na\3a\3a\3b\3b\3b\3b\3b"+
		"\3b\5b\u0ceb\nb\3b\3b\3b\3b\3b\3b\5b\u0cf3\nb\3b\3b\3b\3b\3b\3b\3b\5b"+
		"\u0cfc\nb\3c\3c\3c\3c\3c\3c\3c\5c\u0d05\nc\3c\3c\5c\u0d09\nc\3c\3c\3c"+
		"\3c\3c\5c\u0d10\nc\3d\3d\5d\u0d14\nd\3d\3d\3e\3e\3e\5e\u0d1b\ne\3e\3e"+
		"\3e\7e\u0d20\ne\fe\16e\u0d23\13e\3f\3f\5f\u0d27\nf\3f\3f\3f\5f\u0d2c\n"+
		"f\3f\3f\5f\u0d30\nf\3f\3f\5f\u0d34\nf\3f\3f\3f\5f\u0d39\nf\3f\3f\3f\3"+
		"f\3f\3f\5f\u0d41\nf\3f\3f\3f\5f\u0d46\nf\3f\3f\3f\3f\3f\3f\5f\u0d4e\n"+
		"f\3f\3f\3f\3f\5f\u0d54\nf\3f\3f\3f\3f\5f\u0d5a\nf\3f\3f\3f\3f\5f\u0d60"+
		"\nf\3f\5f\u0d63\nf\3g\3g\5g\u0d67\ng\3g\7g\u0d6a\ng\fg\16g\u0d6d\13g\3"+
		"h\3h\3h\7h\u0d72\nh\fh\16h\u0d75\13h\3i\3i\3i\3i\5i\u0d7b\ni\3i\3i\3i"+
		"\3i\3i\5i\u0d82\ni\3i\3i\5i\u0d86\ni\3i\3i\3i\3i\5i\u0d8c\ni\3i\3i\3i"+
		"\3i\3i\5i\u0d93\ni\3i\3i\5i\u0d97\ni\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i"+
		"\3i\3i\5i\u0da6\ni\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0db2\nj\3k\5k\u0db5"+
		"\nk\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0dc1\nl\3m\3m\3m\3m\3m\3m\5m\u0dc9"+
		"\nm\3m\3m\3m\3m\3m\3m\3m\3n\3n\3n\3n\5n\u0dd6\nn\3o\3o\3o\3o\3o\3o\3o"+
		"\3o\5o\u0de0\no\3p\3p\3p\3p\3q\3q\3q\3q\5q\u0dea\nq\3q\3q\5q\u0dee\nq"+
		"\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3t\5t\u0e00\nt\3t\3t\5t"+
		"\u0e04\nt\3u\3u\3v\3v\3w\6w\u0e0b\nw\rw\16w\u0e0c\3x\3x\5x\u0e11\nx\3"+
		"x\3x\3y\3y\3y\5y\u0e18\ny\3z\5z\u0e1b\nz\3z\3z\5z\u0e1f\nz\3z\3z\3z\5"+
		"z\u0e24\nz\3z\3z\5z\u0e28\nz\3z\3z\3z\5z\u0e2d\nz\3z\3z\3z\5z\u0e32\n"+
		"z\3z\3z\3z\3z\3z\5z\u0e39\nz\3z\5z\u0e3c\nz\3{\3{\3{\3{\5{\u0e42\n{\3"+
		"|\3|\3|\3|\5|\u0e48\n|\3|\3|\3}\3}\3}\5}\u0e4f\n}\3}\5}\u0e52\n}\3}\3"+
		"}\3~\3~\5~\u0e58\n~\3~\3~\3~\5~\u0e5d\n~\3~\3~\3~\3~\5~\u0e63\n~\3~\3"+
		"~\3~\3~\5~\u0e69\n~\3~\3~\3~\5~\u0e6e\n~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0e78"+
		"\n~\3~\3~\3~\3~\3~\3~\5~\u0e80\n~\3~\3~\5~\u0e84\n~\3~\5~\u0e87\n~\3\177"+
		"\3\177\3\177\3\177\5\177\u0e8d\n\177\3\u0080\3\u0080\5\u0080\u0e91\n\u0080"+
		"\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\7\u0082\u0e98\n\u0082\f\u0082"+
		"\16\u0082\u0e9b\13\u0082\3\u0083\3\u0083\5\u0083\u0e9f\n\u0083\3\u0084"+
		"\3\u0084\3\u0084\7\u0084\u0ea4\n\u0084\f\u0084\16\u0084\u0ea7\13\u0084"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086\u0eaf\n\u0086"+
		"\3\u0087\3\u0087\5\u0087\u0eb3\n\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\5\u0087\u0eb9\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0ebe\n\u0087\3"+
		"\u0087\5\u0087\u0ec1\n\u0087\3\u0088\3\u0088\3\u0088\3\u0089\5\u0089\u0ec7"+
		"\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0ed0\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0edd\n\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0ee5\n\u008a\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0eee\n\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0ef5\n\u008b\3\u008b\3\u008b"+
		"\5\u008b\u0ef9\n\u008b\3\u008b\5\u008b\u0efc\n\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f05\n\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f0c\n\u008b\3\u008b\3\u008b\5"+
		"\u008b\u0f10\n\u008b\3\u008b\5\u008b\u0f13\n\u008b\3\u008b\5\u008b\u0f16"+
		"\n\u008b\3\u008b\5\u008b\u0f19\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f24\n\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\5\u008b\u0f2a\n\u008b\3\u008b\5\u008b\u0f2d\n"+
		"\u008b\3\u008b\5\u008b\u0f30\n\u008b\3\u008b\5\u008b\u0f33\n\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b"+
		"\u0f3e\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f43\n\u008b\3\u008b\5"+
		"\u008b\u0f46\n\u008b\3\u008b\5\u008b\u0f49\n\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f54\n\u008b"+
		"\3\u008b\3\u008b\5\u008b\u0f58\n\u008b\3\u008b\5\u008b\u0f5b\n\u008b\3"+
		"\u008b\5\u008b\u0f5e\n\u008b\3\u008b\3\u008b\5\u008b\u0f62\n\u008b\3\u008c"+
		"\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\5\u008e\u0f6a\n\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0f77\n\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\5\u0090\u0f7f\n\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u0f87\n\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092"+
		"\7\u0092\u0f8e\n\u0092\f\u0092\16\u0092\u0f91\13\u0092\3\u0093\3\u0093"+
		"\3\u0093\5\u0093\u0f96\n\u0093\3\u0094\3\u0094\5\u0094\u0f9a\n\u0094\3"+
		"\u0094\3\u0094\3\u0094\5\u0094\u0f9f\n\u0094\3\u0094\3\u0094\3\u0094\5"+
		"\u0094\u0fa4\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0fab"+
		"\n\u0094\3\u0094\3\u0094\5\u0094\u0faf\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0fb4\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0fbb\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\5\u0095\u0fc4\n\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0fc9\n\u0095\3"+
		"\u0096\3\u0096\5\u0096\u0fcd\n\u0096\3\u0096\5\u0096\u0fd0\n\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\5\u0096\u0fd6\n\u0096\3\u0096\3\u0096\5\u0096"+
		"\u0fda\n\u0096\3\u0096\5\u0096\u0fdd\n\u0096\3\u0096\3\u0096\5\u0096\u0fe1"+
		"\n\u0096\3\u0096\5\u0096\u0fe4\n\u0096\3\u0096\5\u0096\u0fe7\n\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0fed\n\u0096\3\u0096\3\u0096\5"+
		"\u0096\u0ff1\n\u0096\3\u0096\5\u0096\u0ff4\n\u0096\3\u0096\3\u0096\3\u0096"+
		"\5\u0096\u0ff9\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0fff\n"+
		"\u0096\5\u0096\u1001\n\u0096\3\u0097\3\u0097\3\u0097\5\u0097\u1006\n\u0097"+
		"\3\u0097\5\u0097\u1009\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u100f\n\u0097\3\u0098\3\u0098\5\u0098\u1013\n\u0098\3\u0098\5\u0098\u1016"+
		"\n\u0098\3\u0098\5\u0098\u1019\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u101f\n\u0098\3\u0098\3\u0098\5\u0098\u1023\n\u0098\3\u0098\5"+
		"\u0098\u1026\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\7\u0099\u102d"+
		"\n\u0099\f\u0099\16\u0099\u1030\13\u0099\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u103e\n\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u1045\n"+
		"\u009d\3\u009d\5\u009d\u1048\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3"+
		"\u009d\5\u009d\u104f\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u1055"+
		"\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u105c\n\u009d"+
		"\3\u009d\5\u009d\u105f\n\u009d\3\u009d\5\u009d\u1062\n\u009d\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u1069\n\u009d\3\u009d\3\u009d\3"+
		"\u009d\5\u009d\u106e\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5"+
		"\u009d\u1075\n\u009d\5\u009d\u1077\n\u009d\3\u009e\3\u009e\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\7\u009f\u1080\n\u009f\f\u009f\16\u009f\u1083"+
		"\13\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u108b"+
		"\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\5\u00a0\u1095\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0"+
		"\u109c\n\u00a0\3\u00a0\3\u00a0\5\u00a0\u10a0\n\u00a0\3\u00a1\3\u00a1\3"+
		"\u00a1\5\u00a1\u10a5\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u10aa\n\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u10b1\n\u00a2\f\u00a2"+
		"\16\u00a2\u10b4\13\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u10c0\n\u00a3\3\u00a3\5\u00a3"+
		"\u10c3\n\u00a3\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\7\u00a5\u10cd\n\u00a5\f\u00a5\16\u00a5\u10d0\13\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u10da"+
		"\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u10f3\n\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u10f8\n\u00a8\f\u00a8\16\u00a8\u10fb"+
		"\13\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u1100\n\u00a9\f\u00a9\16\u00a9"+
		"\u1103\13\u00a9\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\5\u00ab\u110c\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u1111\n\u00ab\3"+
		"\u00ab\5\u00ab\u1114\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5"+
		"\u00ab\u111b\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u1120\n\u00ab\3\u00ab"+
		"\5\u00ab\u1123\n\u00ab\5\u00ab\u1125\n\u00ab\3\u00ac\3\u00ac\3\u00ad\3"+
		"\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\5\u00af"+
		"\u1132\n\u00af\3\u00b0\3\u00b0\5\u00b0\u1136\n\u00b0\3\u00b0\5\u00b0\u1139"+
		"\n\u00b0\3\u00b0\5\u00b0\u113c\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u1142\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u1146\n\u00b1\5\u00b1\u1148"+
		"\n\u00b1\3\u00b1\5\u00b1\u114b\n\u00b1\3\u00b1\5\u00b1\u114e\n\u00b1\3"+
		"\u00b1\5\u00b1\u1151\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1156\n\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u115a\n\u00b1\3\u00b2\3\u00b2\3\u00b2\5\u00b2"+
		"\u115f\n\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1164\n\u00b2\3\u00b2\5"+
		"\u00b2\u1167\n\u00b2\3\u00b2\5\u00b2\u116a\n\u00b2\5\u00b2\u116c\n\u00b2"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u1172\n\u00b3\3\u00b3\5\u00b3"+
		"\u1175\n\u00b3\3\u00b3\5\u00b3\u1178\n\u00b3\3\u00b3\5\u00b3\u117b\n\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u1180\n\u00b3\3\u00b3\5\u00b3\u1183\n"+
		"\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1188\n\u00b4\3\u00b4\5\u00b4\u118b"+
		"\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1190\n\u00b4\3\u00b4\5\u00b4"+
		"\u1193\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1198\n\u00b4\3\u00b4\5"+
		"\u00b4\u119b\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11a0\n\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11a8\n\u00b4\3\u00b4"+
		"\5\u00b4\u11ab\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11b1\n"+
		"\u00b4\3\u00b4\5\u00b4\u11b4\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5"+
		"\u00b4\u11ba\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11bf\n\u00b4\3\u00b4"+
		"\5\u00b4\u11c2\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u11c9\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11cf\n\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11d6\n\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u11dd\n\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\5\u00b4\u11e2\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\5\u00b4\u11ea\n\u00b4\5\u00b4\u11ec\n\u00b4\3\u00b5\3\u00b5\3\u00b6"+
		"\3\u00b6\3\u00b7\3\u00b7\5\u00b7\u11f4\n\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\5\u00b7\u11f9\n\u00b7\5\u00b7\u11fb\n\u00b7\3\u00b8\3\u00b8\3\u00b8\5"+
		"\u00b8\u1200\n\u00b8\5\u00b8\u1202\n\u00b8\3\u00b9\3\u00b9\5\u00b9\u1206"+
		"\n\u00b9\3\u00ba\3\u00ba\5\u00ba\u120a\n\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u120f\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be"+
		"\u121f\n\u00be\3\u00bf\3\u00bf\3\u00c0\3\u00c0\5\u00c0\u1225\n\u00c0\3"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2"+
		"\u122f\n\u00c2\f\u00c2\16\u00c2\u1232\13\u00c2\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u1245\n\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\5\u00c3\u1252\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\5\u00c3\u1259\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u1266\n\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u126e\n\u00c3\3\u00c4"+
		"\3\u00c4\5\u00c4\u1272\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\5\u00c5\u1279\n\u00c5\3\u00c6\5\u00c6\u127c\n\u00c6\3\u00c7\6\u00c7\u127f"+
		"\n\u00c7\r\u00c7\16\u00c7\u1280\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u1288\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u128e\n"+
		"\u00c9\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u129b\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u12a0\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u12a4\n\u00cc\3\u00cc\3"+
		"\u00cc\5\u00cc\u12a8\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\5\u00cc\u12b0\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12b5\n\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12ba\n\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u12be\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u12c2\n\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\5\u00cc\u12c7\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u12cb\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\5\u00cc\u12d0\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u12d5\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12da\n\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12e3\n\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\5\u00cc\u12e8\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u12ed\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12f2\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\5\u00cc\u12f7\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u12fc\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1301\n\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1309\n\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1313\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1318\n\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\5\u00cc\u131d\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1322\n\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1327\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u132c\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u1335\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u133a\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u133f\n\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\5\u00cc\u1344\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1349\n\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u134e\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u1353\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1359\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u135f\n\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\5\u00cc\u1364\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1369"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u136e\n\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u1373\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1378\n"+
		"\u00cc\3\u00cc\3\u00cc\5\u00cc\u137c\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u1381\n\u00cc\3\u00cc\5\u00cc\u1384\n\u00cc\3\u00cd\3\u00cd\3\u00ce"+
		"\3\u00ce\5\u00ce\u138a\n\u00ce\3\u00ce\3\u00ce\5\u00ce\u138e\n\u00ce\3"+
		"\u00cf\3\u00cf\3\u00cf\7\u00cf\u1393\n\u00cf\f\u00cf\16\u00cf\u1396\13"+
		"\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u13a3\n\u00d2\3\u00d3\5\u00d3\u13a6\n"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u13ac\n\u00d4\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u13be\n\u00d6"+
		"\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u13c3\n\u00d7\f\u00d7\16\u00d7\u13c6"+
		"\13\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\5\u00d9"+
		"\u13cf\n\u00d9\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\5\u00db\u13d8\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\5\u00db\u13e3\n\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u13ec\n\u00dc\3\u00dc\5\u00dc"+
		"\u13ef\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\5\u00dd\u13f8\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1404\n\u00dd\3\u00dd\3\u00dd"+
		"\5\u00dd\u1408\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u140f\n\u00de\3\u00de\3\u00de\5\u00de\u1413\n\u00de\3\u00de\5\u00de\u1416"+
		"\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u141f\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\5\u00df\u142b\n\u00df\3\u00df\3\u00df\5\u00df"+
		"\u142f\n\u00df\3\u00e0\5\u00e0\u1432\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u1436"+
		"\n\u00e0\3\u00e0\5\u00e0\u1439\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e2"+
		"\3\u00e2\3\u00e2\7\u00e2\u1441\n\u00e2\f\u00e2\16\u00e2\u1444\13\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u144b\n\u00e3\3\u00e4"+
		"\3\u00e4\3\u00e4\7\u00e4\u1450\n\u00e4\f\u00e4\16\u00e4\u1453\13\u00e4"+
		"\3\u00e5\3\u00e5\5\u00e5\u1457\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1497\n\u00e6\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u14b0\n\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u14ba\n\u00e7\5\u00e7"+
		"\u14bc\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\7\u00e9\u14c5\n\u00e9\f\u00e9\16\u00e9\u14c8\13\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\5\u00ea\u14cd\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb"+
		"\u14d3\n\u00eb\3\u00eb\5\u00eb\u14d6\n\u00eb\3\u00eb\5\u00eb\u14d9\n\u00eb"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u14e2"+
		"\n\u00ed\f\u00ed\16\u00ed\u14e5\13\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u14ef\n\u00ee\3\u00ee\5\u00ee"+
		"\u14f2\n\u00ee\3\u00ee\5\u00ee\u14f5\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u14fe\n\u00f0\f\u00f0\16\u00f0"+
		"\u1501\13\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\5\u00f1\u150a\n\u00f1\3\u00f1\5\u00f1\u150d\n\u00f1\3\u00f1\5\u00f1\u1510"+
		"\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\7\u00f3"+
		"\u1519\n\u00f3\f\u00f3\16\u00f3\u151c\13\u00f3\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1525\n\u00f5\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u152e\n\u00f7\f\u00f7"+
		"\16\u00f7\u1531\13\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\5\u00f8\u153a\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00fa"+
		"\3\u00fa\3\u00fa\7\u00fa\u1543\n\u00fa\f\u00fa\16\u00fa\u1546\13\u00fa"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u154e\n\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1553\n\u00fc\3\u00fc\3\u00fc\3\u00fd"+
		"\3\u00fd\3\u00fd\7\u00fd\u155a\n\u00fd\f\u00fd\16\u00fd\u155d\13\u00fd"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u1564\n\u00fe\3\u00ff"+
		"\3\u00ff\3\u00ff\7\u00ff\u1569\n\u00ff\f\u00ff\16\u00ff\u156c\13\u00ff"+
		"\3\u0100\3\u0100\5\u0100\u1570\n\u0100\3\u0101\3\u0101\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u157a\n\u0102\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1583\n\u0103\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u158a\n\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u158f\n\u0104\3\u0104\3\u0104\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\5\u0105\u1598\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105"+
		"\u159d\n\u0105\3\u0105\3\u0105\3\u0106\3\u0106\5\u0106\u15a3\n\u0106\3"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u15aa\n\u0107\3\u0107\3"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u15b4\n"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u15ba\n\u0107\3\u0108\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u15c1\n\u0108\3\u0108\3\u0108\5"+
		"\u0108\u15c5\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u15cc"+
		"\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u15d3\n\u0108"+
		"\5\u0108\u15d5\n\u0108\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\7\u010a\u15dd\n\u010a\f\u010a\16\u010a\u15e0\13\u010a\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010c\3\u010c\5\u010c\u15e8\n\u010c\3\u010c\3\u010c"+
		"\5\u010c\u15ec\n\u010c\5\u010c\u15ee\n\u010c\3\u010c\3\u010c\5\u010c\u15f2"+
		"\n\u010c\5\u010c\u15f4\n\u010c\3\u010d\3\u010d\5\u010d\u15f8\n\u010d\3"+
		"\u010d\7\u010d\u15fb\n\u010d\f\u010d\16\u010d\u15fe\13\u010d\3\u010e\3"+
		"\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\5\u010e\u1615\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\5\u010f\u161d\n\u010f\3\u010f\3\u010f\5\u010f\u1621\n"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1627\n\u010f\3\u0110\3"+
		"\u0110\3\u0110\3\u0110\5\u0110\u162d\n\u0110\3\u0110\3\u0110\3\u0111\3"+
		"\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1636\n\u0111\3\u0111\3\u0111\3"+
		"\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\5\u0111\u1644\n\u0111\3\u0112\6\u0112\u1647\n\u0112\r\u0112\16"+
		"\u0112\u1648\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1650\n\u0113"+
		"\3\u0114\3\u0114\5\u0114\u1654\n\u0114\3\u0114\3\u0114\5\u0114\u1658\n"+
		"\u0114\3\u0114\3\u0114\5\u0114\u165c\n\u0114\3\u0114\3\u0114\3\u0114\5"+
		"\u0114\u1661\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1666\n\u0114\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u166b\n\u0114\3\u0114\5\u0114\u166e\n\u0114\3"+
		"\u0115\3\u0115\3\u0115\7\u0115\u1673\n\u0115\f\u0115\16\u0115\u1676\13"+
		"\u0115\3\u0116\5\u0116\u1679\n\u0116\3\u0116\3\u0116\3\u0117\5\u0117\u167e"+
		"\n\u0117\3\u0117\3\u0117\5\u0117\u1682\n\u0117\3\u0117\3\u0117\5\u0117"+
		"\u1686\n\u0117\3\u0118\3\u0118\3\u0118\5\u0118\u168b\n\u0118\3\u0118\3"+
		"\u0118\5\u0118\u168f\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3"+
		"\u0118\5\u0118\u1697\n\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u169c\n\u0118"+
		"\3\u0118\3\u0118\3\u0118\5\u0118\u16a1\n\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u16ab\n\u0118\3\u0118"+
		"\3\u0118\3\u0118\5\u0118\u16b0\n\u0118\3\u0118\3\u0118\3\u0118\5\u0118"+
		"\u16b5\n\u0118\5\u0118\u16b7\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3"+
		"\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u16c1\n\u0119\3\u0119\5\u0119\u16c4"+
		"\n\u0119\3\u0119\3\u0119\5\u0119\u16c8\n\u0119\3\u0119\5\u0119\u16cb\n"+
		"\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u16db\n\u0119"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\5\u011a\u16fb\n\u011a\3\u011b\3\u011b\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1707"+
		"\n\u011c\3\u011d\3\u011d\3\u011d\5\u011d\u170c\n\u011d\3\u011e\3\u011e"+
		"\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\5\u0121\u1719\n\u0121\3\u0122\3\u0122\3\u0122\5\u0122\u171e\n\u0122\3"+
		"\u0123\3\u0123\3\u0123\5\u0123\u1723\n\u0123\3\u0123\3\u0123\3\u0123\5"+
		"\u0123\u1728\n\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u172d\n\u0123\3\u0123"+
		"\5\u0123\u1730\n\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u173d\n\u0124\3\u0125"+
		"\3\u0125\3\u0126\3\u0126\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u1749\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u174e\n\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1754\n\u0128\3\u0128\3\u0128\5"+
		"\u0128\u1758\n\u0128\5\u0128\u175a\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012b\3\u012b\5\u012b\u1766\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u176d\n\u012b\3\u012b"+
		"\3\u012b\5\u012b\u1771\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u1779\n\u012b\3\u012b\3\u012b\5\u012b\u177d\n\u012b\3"+
		"\u012b\5\u012b\u1780\n\u012b\3\u012c\3\u012c\3\u012d\5\u012d\u1785\n\u012d"+
		"\3\u012d\3\u012d\3\u012e\5\u012e\u178a\n\u012e\3\u012f\3\u012f\3\u0130"+
		"\3\u0130\3\u0130\7\u0130\u1791\n\u0130\f\u0130\16\u0130\u1794\13\u0130"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u179a\n\u0131\3\u0131\5\u0131"+
		"\u179d\n\u0131\3\u0131\3\u0131\5\u0131\u17a1\n\u0131\3\u0131\3\u0131\3"+
		"\u0131\3\u0131\5\u0131\u17a7\n\u0131\3\u0131\3\u0131\5\u0131\u17ab\n\u0131"+
		"\5\u0131\u17ad\n\u0131\3\u0132\6\u0132\u17b0\n\u0132\r\u0132\16\u0132"+
		"\u17b1\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u17b8\n\u0133\3\u0133\3"+
		"\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\5\u0133\u17cf\n\u0133\3\u0134\3\u0134\3\u0134\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u17db\n\u0135"+
		"\3\u0135\3\u0135\5\u0135\u17df\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u17e5\n\u0135\3\u0135\3\u0135\5\u0135\u17e9\n\u0135\3\u0136\6"+
		"\u0136\u17ec\n\u0136\r\u0136\16\u0136\u17ed\3\u0137\3\u0137\3\u0138\3"+
		"\u0138\3\u0138\3\u0139\5\u0139\u17f6\n\u0139\3\u013a\3\u013a\3\u013a\5"+
		"\u013a\u17fb\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1801\n\u013b"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u1806\n\u013c\3\u013c\5\u013c\u1809\n"+
		"\u013c\3\u013d\3\u013d\3\u013d\5\u013d\u180e\n\u013d\3\u013e\3\u013e\3"+
		"\u013f\3\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1819\n"+
		"\u0140\3\u0141\5\u0141\u181c\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\5"+
		"\u0142\u1822\n\u0142\3\u0143\3\u0143\3\u0143\5\u0143\u1827\n\u0143\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0145\3\u0145\5\u0145"+
		"\u1832\n\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1837\n\u0145\3\u0145\3"+
		"\u0145\5\u0145\u183b\n\u0145\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\3"+
		"\u0147\5\u0147\u1843\n\u0147\3\u0147\3\u0147\5\u0147\u1847\n\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u184e\n\u0147\3\u0147\3\u0147"+
		"\5\u0147\u1852\n\u0147\5\u0147\u1854\n\u0147\3\u0148\3\u0148\3\u0148\7"+
		"\u0148\u1859\n\u0148\f\u0148\16\u0148\u185c\13\u0148\3\u0149\3\u0149\3"+
		"\u0149\3\u0149\3\u0149\3\u0149\3\u014a\3\u014a\5\u014a\u1866\n\u014a\3"+
		"\u014a\5\u014a\u1869\n\u014a\3\u014a\5\u014a\u186c\n\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1874\n\u014a\3\u014a\3\u014a"+
		"\5\u014a\u1878\n\u014a\3\u014a\5\u014a\u187b\n\u014a\3\u014a\3\u014a\3"+
		"\u014a\3\u014a\3\u014a\5\u014a\u1882\n\u014a\3\u014a\5\u014a\u1885\n\u014a"+
		"\3\u014a\5\u014a\u1888\n\u014a\3\u014a\3\u014a\5\u014a\u188c\n\u014a\3"+
		"\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1893\n\u014b\3\u014b\5"+
		"\u014b\u1896\n\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u189b\n\u014b\3\u014b"+
		"\3\u014b\3\u014b\5\u014b\u18a0\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u18a6\n\u014c\3\u014c\5\u014c\u18a9\n\u014c\3\u014d\3\u014d\3"+
		"\u014e\3\u014e\3\u014e\5\u014e\u18b0\n\u014e\3\u014f\3\u014f\3\u014f\5"+
		"\u014f\u18b5\n\u014f\3\u0150\3\u0150\3\u0150\7\u0150\u18ba\n\u0150\f\u0150"+
		"\16\u0150\u18bd\13\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\7\u0151\u18ca\n\u0151\f\u0151"+
		"\16\u0151\u18cd\13\u0151\3\u0152\3\u0152\3\u0152\5\u0152\u18d2\n\u0152"+
		"\3\u0152\3\u0152\3\u0152\7\u0152\u18d7\n\u0152\f\u0152\16\u0152\u18da"+
		"\13\u0152\3\u0153\3\u0153\5\u0153\u18de\n\u0153\3\u0154\5\u0154\u18e1"+
		"\n\u0154\3\u0154\3\u0154\5\u0154\u18e5\n\u0154\3\u0154\5\u0154\u18e8\n"+
		"\u0154\3\u0155\3\u0155\5\u0155\u18ec\n\u0155\3\u0155\3\u0155\5\u0155\u18f0"+
		"\n\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\5\u0156\u18f7\n\u0156"+
		"\3\u0156\3\u0156\3\u0156\5\u0156\u18fc\n\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u1901\n\u0156\5\u0156\u1903\n\u0156\3\u0157\3\u0157\5\u0157\u1907"+
		"\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\5\u0157\u1911\n\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1916\n\u0157\3"+
		"\u0157\3\u0157\5\u0157\u191a\n\u0157\3\u0157\3\u0157\5\u0157\u191e\n\u0157"+
		"\5\u0157\u1920\n\u0157\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u1927\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u192e\n"+
		"\u0159\3\u0159\3\u0159\5\u0159\u1932\n\u0159\3\u015a\3\u015a\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u193b\n\u015a\3\u015a\5\u015a\u193e"+
		"\n\u015a\3\u015a\3\u015a\3\u015a\7\u015a\u1943\n\u015a\f\u015a\16\u015a"+
		"\u1946\13\u015a\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u194c\n\u015b"+
		"\3\u015c\3\u015c\3\u015c\5\u015c\u1951\n\u015c\3\u015d\3\u015d\5\u015d"+
		"\u1955\n\u015d\3\u015d\5\u015d\u1958\n\u015d\3\u015e\3\u015e\3\u015f\3"+
		"\u015f\5\u015f\u195e\n\u015f\3\u015f\5\u015f\u1961\n\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\5\u015f\u1968\n\u015f\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\5\u0160\u196f\n\u0160\3\u0160\3\u0160\5\u0160\u1973\n"+
		"\u0160\3\u0161\3\u0161\3\u0161\5\u0161\u1978\n\u0161\3\u0162\3\u0162\3"+
		"\u0162\5\u0162\u197d\n\u0162\3\u0163\3\u0163\3\u0163\5\u0163\u1982\n\u0163"+
		"\3\u0164\3\u0164\5\u0164\u1986\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u1990\n\u0164\3\u0164\3\u0164"+
		"\3\u0164\5\u0164\u1995\n\u0164\3\u0164\3\u0164\5\u0164\u1999\n\u0164\3"+
		"\u0164\3\u0164\5\u0164\u199d\n\u0164\3\u0165\3\u0165\3\u0166\3\u0166\3"+
		"\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u19a7\n\u0167\3\u0168\5\u0168\u19aa"+
		"\n\u0168\3\u0169\5\u0169\u19ad\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\5\u016a\u19b3\n\u016a\3\u016a\3\u016a\5\u016a\u19b7\n\u016a\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u19c0\n\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\5\u016b\u19cb\n\u016b\3\u016c\5\u016c\u19ce\n\u016c\3\u016d\3\u016d\3"+
		"\u016d\7\u016d\u19d3\n\u016d\f\u016d\16\u016d\u19d6\13\u016d\3\u016e\3"+
		"\u016e\3\u016e\5\u016e\u19db\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\5"+
		"\u016f\u19e1\n\u016f\3\u0170\6\u0170\u19e4\n\u0170\r\u0170\16\u0170\u19e5"+
		"\3\u0171\5\u0171\u19e9\n\u0171\3\u0171\3\u0171\5\u0171\u19ed\n\u0171\3"+
		"\u0171\5\u0171\u19f0\n\u0171\3\u0171\3\u0171\3\u0171\3\u0172\5\u0172\u19f6"+
		"\n\u0172\3\u0173\6\u0173\u19f9\n\u0173\r\u0173\16\u0173\u19fa\3\u0174"+
		"\3\u0174\5\u0174\u19ff\n\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u1a04\n"+
		"\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u1a09\n\u0174\3\u0174\5\u0174\u1a0c"+
		"\n\u0174\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u1a12\n\u0175\3\u0176"+
		"\3\u0176\3\u0177\3\u0177\3\u0177\5\u0177\u1a19\n\u0177\3\u0178\6\u0178"+
		"\u1a1c\n\u0178\r\u0178\16\u0178\u1a1d\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u1a29\n\u017a\3\u017a"+
		"\3\u017a\3\u017b\3\u017b\3\u017b\5\u017b\u1a30\n\u017b\3\u017b\3\u017b"+
		"\3\u017b\7\u017b\u1a35\n\u017b\f\u017b\16\u017b\u1a38\13\u017b\3\u017c"+
		"\6\u017c\u1a3b\n\u017c\r\u017c\16\u017c\u1a3c\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\5\u017d\u1a44\n\u017d\3\u017d\7\u017d\u1a47\n\u017d\f"+
		"\u017d\16\u017d\u1a4a\13\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1a8e"+
		"\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u1aa4\n\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1ab7\n\u017e\3\u017e"+
		"\3\u017e\5\u017e\u1abb\n\u017e\3\u017e\5\u017e\u1abe\n\u017e\3\u017e\3"+
		"\u017e\5\u017e\u1ac2\n\u017e\3\u017f\3\u017f\3\u0180\3\u0180\3\u0181\3"+
		"\u0181\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183\5\u0183\u1acf\n\u0183\3"+
		"\u0184\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u1ae1"+
		"\n\u0186\3\u0187\3\u0187\5\u0187\u1ae5\n\u0187\3\u0187\3\u0187\5\u0187"+
		"\u1ae9\n\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187"+
		"\u1af1\n\u0187\3\u0187\3\u0187\5\u0187\u1af5\n\u0187\3\u0188\3\u0188\3"+
		"\u0188\5\u0188\u1afa\n\u0188\3\u0189\3\u0189\3\u0189\7\u0189\u1aff\n\u0189"+
		"\f\u0189\16\u0189\u1b02\13\u0189\3\u018a\3\u018a\5\u018a\u1b06\n\u018a"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\7\u018c\u1b0f"+
		"\n\u018c\f\u018c\16\u018c\u1b12\13\u018c\3\u018d\3\u018d\5\u018d\u1b16"+
		"\n\u018d\3\u018e\6\u018e\u1b19\n\u018e\r\u018e\16\u018e\u1b1a\3\u018f"+
		"\3\u018f\3\u0190\3\u0190\5\u0190\u1b21\n\u0190\3\u0190\3\u0190\5\u0190"+
		"\u1b25\n\u0190\3\u0190\5\u0190\u1b28\n\u0190\3\u0191\3\u0191\3\u0191\7"+
		"\u0191\u1b2d\n\u0191\f\u0191\16\u0191\u1b30\13\u0191\3\u0192\3\u0192\3"+
		"\u0193\3\u0193\3\u0193\7\u0193\u1b37\n\u0193\f\u0193\16\u0193\u1b3a\13"+
		"\u0193\3\u0193\3\u0193\3\u0193\7\u0193\u1b3f\n\u0193\f\u0193\16\u0193"+
		"\u1b42\13\u0193\5\u0193\u1b44\n\u0193\3\u0194\3\u0194\3\u0194\7\u0194"+
		"\u1b49\n\u0194\f\u0194\16\u0194\u1b4c\13\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\7\u0194\u1b52\n\u0194\f\u0194\16\u0194\u1b55\13\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\7\u0194\u1b5d\n\u0194\f\u0194"+
		"\16\u0194\u1b60\13\u0194\3\u0194\3\u0194\5\u0194\u1b64\n\u0194\3\u0195"+
		"\3\u0195\5\u0195\u1b68\n\u0195\3\u0196\3\u0196\5\u0196\u1b6c\n\u0196\3"+
		"\u0196\3\u0196\5\u0196\u1b70\n\u0196\3\u0196\3\u0196\5\u0196\u1b74\n\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1b7d"+
		"\n\u0196\5\u0196\u1b7f\n\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196"+
		"\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1b8c\n\u0196"+
		"\3\u0196\5\u0196\u1b8f\n\u0196\5\u0196\u1b91\n\u0196\3\u0197\3\u0197\5"+
		"\u0197\u1b95\n\u0197\3\u0197\3\u0197\5\u0197\u1b99\n\u0197\3\u0197\5\u0197"+
		"\u1b9c\n\u0197\5\u0197\u1b9e\n\u0197\3\u0197\5\u0197\u1ba1\n\u0197\3\u0197"+
		"\3\u0197\5\u0197\u1ba5\n\u0197\3\u0197\5\u0197\u1ba8\n\u0197\3\u0197\3"+
		"\u0197\5\u0197\u1bac\n\u0197\5\u0197\u1bae\n\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\5\u0197\u1bb4\n\u0197\5\u0197\u1bb6\n\u0197\5\u0197\u1bb8\n\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1bbe\n\u0197\3\u0197\5\u0197"+
		"\u1bc1\n\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1bc8\n"+
		"\u0197\3\u0197\3\u0197\5\u0197\u1bcc\n\u0197\3\u0197\3\u0197\3\u0197\5"+
		"\u0197\u1bd1\n\u0197\5\u0197\u1bd3\n\u0197\3\u0198\3\u0198\5\u0198\u1bd7"+
		"\n\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u019a\3\u019a\3\u019b"+
		"\3\u019b\5\u019b\u1be2\n\u019b\3\u019b\5\u019b\u1be5\n\u019b\3\u019b\3"+
		"\u019b\3\u019b\3\u019b\3\u019c\3\u019c\5\u019c\u1bed\n\u019c\3\u019c\5"+
		"\u019c\u1bf0\n\u019c\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3"+
		"\u019d\3\u019d\5\u019d\u1bfa\n\u019d\3\u019e\3\u019e\3\u019e\3\u019e\5"+
		"\u019e\u1c00\n\u019e\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\7\u019f\u1c07"+
		"\n\u019f\f\u019f\16\u019f\u1c0a\13\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a3\3\u01a3"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1c1e\n\u01a4\3\u01a4"+
		"\3\u01a4\5\u01a4\u1c22\n\u01a4\5\u01a4\u1c24\n\u01a4\3\u01a5\3\u01a5\3"+
		"\u01a6\3\u01a6\3\u01a6\7\u01a6\u1c2b\n\u01a6\f\u01a6\16\u01a6\u1c2e\13"+
		"\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u1c35\n\u01a7\3"+
		"\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\5\u01a7\u1c40\n\u01a7\3\u01a8\6\u01a8\u1c43\n\u01a8\r\u01a8\16\u01a8"+
		"\u1c44\3\u01a9\3\u01a9\5\u01a9\u1c49\n\u01a9\3\u01aa\3\u01aa\3\u01aa\7"+
		"\u01aa\u1c4e\n\u01aa\f\u01aa\16\u01aa\u1c51\13\u01aa\3\u01ab\3\u01ab\3"+
		"\u01ab\5\u01ab\u1c56\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u1c5a\n\u01ab\3\u01ac"+
		"\3\u01ac\5\u01ac\u1c5e\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac"+
		"\u1c64\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1c6a\n\u01ac\3"+
		"\u01ad\3\u01ad\3\u01ad\5\u01ad\u1c6f\n\u01ad\3\u01ae\3\u01ae\3\u01ae\3"+
		"\u01af\3\u01af\3\u01af\5\u01af\u1c77\n\u01af\3\u01b0\3\u01b0\3\u01b0\3"+
		"\u01b0\7\u01b0\u1c7d\n\u01b0\f\u01b0\16\u01b0\u1c80\13\u01b0\3\u01b1\5"+
		"\u01b1\u1c83\n\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u1c8a"+
		"\n\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\5\u01b4\u1c96\n\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4"+
		"\u1c9b\n\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1ca1\n\u01b4\3"+
		"\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\7\u01b4"+
		"\u1cab\n\u01b4\f\u01b4\16\u01b4\u1cae\13\u01b4\3\u01b5\3\u01b5\3\u01b5"+
		"\5\u01b5\u1cb3\n\u01b5\3\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\5\u01b6\u1cbd\n\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\7\u01b6\u1cc9\n\u01b6"+
		"\f\u01b6\16\u01b6\u1ccc\13\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7"+
		"\u1cd2\n\u01b7\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\5\u01b8\u1cdb\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\5\u01b9\u1ce3\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1cf1\n\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1cf7\n\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1cfe\n\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\5\u01b9\u1d0c\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\7\u01b9\u1d12\n"+
		"\u01b9\f\u01b9\16\u01b9\u1d15\13\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\5\u01ba\u1d1b\n\u01ba\3\u01ba\5\u01ba\u1d1e\n\u01ba\3\u01bb\5\u01bb\u1d21"+
		"\n\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1d27\n\u01bb\3\u01bc"+
		"\3\u01bc\5\u01bc\u1d2b\n\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd\5\u01bd"+
		"\u1d31\n\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be\7\u01be\u1d38\n"+
		"\u01be\f\u01be\16\u01be\u1d3b\13\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\5\u01bf\u1d42\n\u01bf\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u1d47\n"+
		"\u01bf\3\u01bf\3\u01bf\5\u01bf\u1d4b\n\u01bf\3\u01bf\3\u01bf\3\u01c0\3"+
		"\u01c0\3\u01c0\7\u01c0\u1d52\n\u01c0\f\u01c0\16\u01c0\u1d55\13\u01c0\3"+
		"\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3"+
		"\3\u01c3\5\u01c3\u1d61\n\u01c3\3\u01c3\3\u01c3\5\u01c3\u1d65\n\u01c3\3"+
		"\u01c4\3\u01c4\3\u01c4\7\u01c4\u1d6a\n\u01c4\f\u01c4\16\u01c4\u1d6d\13"+
		"\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\5\u01c6\u1d8b\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\5\u01c6\u1d92\n\u01c6\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1d97\n"+
		"\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1d9c\n\u01c7\3\u01c7\3\u01c7\3"+
		"\u01c7\5\u01c7\u1da1\n\u01c7\5\u01c7\u1da3\n\u01c7\3\u01c8\3\u01c8\3\u01c9"+
		"\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1dab\n\u01c9\3\u01ca\3\u01ca\3\u01cb"+
		"\3\u01cb\3\u01cb\5\u01cb\u1db2\n\u01cb\3\u01cb\3\u01cb\5\u01cb\u1db6\n"+
		"\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1dbc\n\u01cc\3\u01cd\3"+
		"\u01cd\3\u01cd\5\u01cd\u1dc1\n\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3"+
		"\u01ce\3\u01ce\3\u01ce\3\u01ce\7\u01ce\u1dcb\n\u01ce\f\u01ce\16\u01ce"+
		"\u1dce\13\u01ce\3\u01cf\3\u01cf\5\u01cf\u1dd2\n\u01cf\3\u01cf\5\u01cf"+
		"\u1dd5\n\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1ddc\n"+
		"\u01d0\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1de1\n\u01d1\3\u01d1\3\u01d1\3"+
		"\u01d1\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1de9\n\u01d1\3\u01d1\3\u01d1\3"+
		"\u01d1\5\u01d1\u1dee\n\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3"+
		"\u01d1\3\u01d1\3\u01d1\5\u01d1\u1df8\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3"+
		"\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1e01\n\u01d2\3\u01d3\3\u01d3\3"+
		"\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1e0b\n\u01d4\3"+
		"\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1e87\n\u01d4\3\u01d5"+
		"\3\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1e8f\n\u01d6\3\u01d7"+
		"\3\u01d7\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1e98\n\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1e9e\n\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ea8\n\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ead\n\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1eb7\n\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ebe\n\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ec6\n\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ed0\n\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ed8\n\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8"+
		"\u1ee2\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1eef\n\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1ef3\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1efe\n\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u1f0d\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1f1d\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f2a\n\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1f36\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f42\n\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\5\u01d8\u1f51\n\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f55\n"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f5d\n"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f63\n\u01d8\3\u01d8\3"+
		"\u01d8\5\u01d8\u1f67\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f6c\n\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1f77\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f7c\n\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1f84\n\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u1fa2\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1fa7\n"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1fb8"+
		"\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1fc2\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1fd6\n\u01d8\3\u01d9\6\u01d9\u1fd9\n"+
		"\u01d9\r\u01d9\16\u01d9\u1fda\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\5\u01da\u1fe4\n\u01da\3\u01db\3\u01db\5\u01db\u1fe8\n"+
		"\u01db\3\u01dc\3\u01dc\5\u01dc\u1fec\n\u01dc\3\u01dc\3\u01dc\3\u01dc\3"+
		"\u01dc\3\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd"+
		"\u1ff9\n\u01dd\3\u01de\3\u01de\3\u01de\7\u01de\u1ffe\n\u01de\f\u01de\16"+
		"\u01de\u2001\13\u01de\3\u01df\3\u01df\3\u01df\5\u01df\u2006\n\u01df\3"+
		"\u01df\3\u01df\3\u01df\3\u01e0\3\u01e0\3\u01e1\3\u01e1\5\u01e1\u200f\n"+
		"\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e2\3\u01e2\3\u01e2\7\u01e2\u2017\n"+
		"\u01e2\f\u01e2\16\u01e2\u201a\13\u01e2\3\u01e3\3\u01e3\3\u01e3\5\u01e3"+
		"\u201f\n\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e5\3\u01e5"+
		"\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u202d\n\u01e6\5\u01e6"+
		"\u202f\n\u01e6\3\u01e7\5\u01e7\u2032\n\u01e7\3\u01e8\3\u01e8\3\u01e9\3"+
		"\u01e9\3\u01ea\3\u01ea\3\u01eb\3\u01eb\3\u01ec\3\u01ec\3\u01ec\5\u01ec"+
		"\u203f\n\u01ec\3\u01ec\3\u01ec\3\u01ec\7\u01ec\u2044\n\u01ec\f\u01ec\16"+
		"\u01ec\u2047\13\u01ec\3\u01ed\3\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee"+
		"\5\u01ee\u204f\n\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01f0"+
		"\3\u01f0\5\u01f0\u2058\n\u01f0\3\u01f1\3\u01f1\5\u01f1\u205c\n\u01f1\3"+
		"\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2\u206d\n\u01f2"+
		"\3\u01f2\5\u01f2\u2070\n\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2\u207b\n\u01f2\3\u01f3\3\u01f3"+
		"\3\u01f3\3\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4\u2085\n\u01f4"+
		"\3\u01f5\3\u01f5\5\u01f5\u2089\n\u01f5\3\u01f6\5\u01f6\u208c\n\u01f6\3"+
		"\u01f6\3\u01f6\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u2093\n\u01f7\3\u01f8\6"+
		"\u01f8\u2096\n\u01f8\r\u01f8\16\u01f8\u2097\3\u01f9\3\u01f9\3\u01f9\3"+
		"\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u20a3\n\u01f9\3"+
		"\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fb"+
		"\3\u01fb\3\u01fb\3\u01fb\3\u01fc\3\u01fc\3\u01fc\7\u01fc\u20b4\n\u01fc"+
		"\f\u01fc\16\u01fc\u20b7\13\u01fc\3\u01fd\6\u01fd\u20ba\n\u01fd\r\u01fd"+
		"\16\u01fd\u20bb\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\5\u01fe"+
		"\u20c4\n\u01fe\3\u01fe\3\u01fe\5\u01fe\u20c8\n\u01fe\3\u01fe\3\u01fe\5"+
		"\u01fe\u20cc\n\u01fe\3\u01ff\3\u01ff\3\u01ff\7\u01ff\u20d1\n\u01ff\f\u01ff"+
		"\16\u01ff\u20d4\13\u01ff\3\u0200\3\u0200\5\u0200\u20d8\n\u0200\3\u0201"+
		"\3\u0201\5\u0201\u20dc\n\u0201\3\u0201\3\u0201\3\u0201\3\u0201\5\u0201"+
		"\u20e2\n\u0201\3\u0202\3\u0202\5\u0202\u20e6\n\u0202\3\u0202\3\u0202\3"+
		"\u0202\3\u0202\3\u0202\5\u0202\u20ed\n\u0202\3\u0202\3\u0202\3\u0202\3"+
		"\u0202\3\u0202\5\u0202\u20f4\n\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3"+
		"\u0202\5\u0202\u20fb\n\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3"+
		"\u0202\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202\u2107\n\u0202\3\u0202\3"+
		"\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\5\u0202\u2113\n\u0202\3\u0202\3\u0202\3\u0202\5\u0202\u2118\n\u0202\3"+
		"\u0203\3\u0203\3\u0203\3\u0203\5\u0203\u211e\n\u0203\3\u0204\6\u0204\u2121"+
		"\n\u0204\r\u0204\16\u0204\u2122\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205"+
		"\u2129\n\u0205\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\7\u0206\u2133\n\u0206\f\u0206\16\u0206\u2136\13\u0206\3\u0207"+
		"\3\u0207\3\u0207\3\u0208\3\u0208\3\u0208\5\u0208\u213e\n\u0208\3\u0209"+
		"\5\u0209\u2141\n\u0209\3\u020a\3\u020a\5\u020a\u2145\n\u020a\3\u020a\3"+
		"\u020a\3\u020a\3\u020a\5\u020a\u214b\n\u020a\3\u020b\3\u020b\5\u020b\u214f"+
		"\n\u020b\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u2155\n\u020b\3\u020c"+
		"\3\u020c\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u215d\n\u020d\3\u020d"+
		"\3\u020d\3\u020e\3\u020e\3\u020e\7\u020e\u2164\n\u020e\f\u020e\16\u020e"+
		"\u2167\13\u020e\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\5\u020f"+
		"\u216f\n\u020f\3\u020f\3\u020f\3\u0210\3\u0210\3\u0210\7\u0210\u2176\n"+
		"\u0210\f\u0210\16\u0210\u2179\13\u0210\3\u0211\3\u0211\3\u0211\7\u0211"+
		"\u217e\n\u0211\f\u0211\16\u0211\u2181\13\u0211\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\5\u0212\u2189\n\u0212\3\u0212\3\u0212\3\u0213"+
		"\3\u0213\5\u0213\u218f\n\u0213\3\u0214\3\u0214\3\u0214\5\u0214\u2194\n"+
		"\u0214\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u219c\n"+
		"\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\5\u0215\u21a6\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215"+
		"\u21b6\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u21c6"+
		"\n\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216\u21cd\n\u0216"+
		"\3\u0217\3\u0217\3\u0217\3\u0217\3\u0218\3\u0218\5\u0218\u21d5\n\u0218"+
		"\3\u0218\3\u0218\3\u0218\5\u0218\u21da\n\u0218\3\u0219\3\u0219\3\u0219"+
		"\7\u0219\u21df\n\u0219\f\u0219\16\u0219\u21e2\13\u0219\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021a\3\u021b\3\u021b\3\u021c\3\u021c\3\u021c"+
		"\3\u021c\3\u021d\3\u021d\3\u021d\3\u021e\3\u021e\3\u021e\7\u021e\u21f6"+
		"\n\u021e\f\u021e\16\u021e\u21f9\13\u021e\3\u021f\3\u021f\3\u021f\3\u021f"+
		"\3\u021f\5\u021f\u2200\n\u021f\3\u021f\3\u021f\3\u021f\5\u021f\u2205\n"+
		"\u021f\3\u0220\3\u0220\5\u0220\u2209\n\u0220\3\u0220\3\u0220\3\u0220\5"+
		"\u0220\u220e\n\u0220\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\5"+
		"\u0221\u2216\n\u0221\3\u0221\3\u0221\5\u0221\u221a\n\u0221\3\u0222\6\u0222"+
		"\u221d\n\u0222\r\u0222\16\u0222\u221e\3\u0223\3\u0223\3\u0223\5\u0223"+
		"\u2224\n\u0223\3\u0223\3\u0223\3\u0223\3\u0223\5\u0223\u222a\n\u0223\3"+
		"\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223"+
		"\3\u0223\3\u0223\5\u0223\u2237\n\u0223\3\u0224\3\u0224\3\u0224\5\u0224"+
		"\u223c\n\u0224\3\u0225\3\u0225\3\u0225\3\u0225\5\u0225\u2242\n\u0225\3"+
		"\u0225\3\u0225\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u224a\n\u0226\3"+
		"\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\5\u0227\u2253\n"+
		"\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227"+
		"\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\5\u0227\u2262\n\u0227\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u2269\n\u0228\3\u0228\3\u0228"+
		"\3\u0229\3\u0229\5\u0229\u226f\n\u0229\3\u0229\5\u0229\u2272\n\u0229\3"+
		"\u0229\3\u0229\5\u0229\u2276\n\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3"+
		"\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\5\u0229\u2288\n\u0229\5\u0229\u228a\n\u0229\3"+
		"\u022a\3\u022a\3\u022a\3\u022a\3\u022b\3\u022b\3\u022b\3\u022b\3\u022c"+
		"\3\u022c\3\u022c\3\u022c\3\u022d\3\u022d\3\u022d\3\u022d\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022f\3\u022f\5\u022f\u22a2\n\u022f\3\u022f\5\u022f"+
		"\u22a5\n\u022f\3\u0230\3\u0230\5\u0230\u22a9\n\u0230\3\u0230\3\u0230\3"+
		"\u0230\5\u0230\u22ae\n\u0230\5\u0230\u22b0\n\u0230\3\u0231\3\u0231\5\u0231"+
		"\u22b4\n\u0231\3\u0231\5\u0231\u22b7\n\u0231\3\u0231\3\u0231\3\u0232\3"+
		"\u0232\3\u0232\3\u0232\5\u0232\u22bf\n\u0232\3\u0232\3\u0232\3\u0232\3"+
		"\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232"+
		"\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232\3\u0232"+
		"\5\u0232\u22d6\n\u0232\5\u0232\u22d8\n\u0232\3\u0233\3\u0233\3\u0233\5"+
		"\u0233\u22dd\n\u0233\5\u0233\u22df\n\u0233\3\u0234\3\u0234\3\u0234\7\u0234"+
		"\u22e4\n\u0234\f\u0234\16\u0234\u22e7\13\u0234\3\u0235\3\u0235\3\u0235"+
		"\5\u0235\u22ec\n\u0235\3\u0235\3\u0235\3\u0235\3\u0235\5\u0235\u22f2\n"+
		"\u0235\5\u0235\u22f4\n\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\5"+
		"\u0235\u22fb\n\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3"+
		"\u0235\5\u0235\u2304\n\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3"+
		"\u0235\3\u0235\3\u0235\3\u0235\5\u0235\u230f\n\u0235\3\u0235\3\u0235\3"+
		"\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235"+
		"\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\5\u0235\u2323"+
		"\n\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235\3\u0235"+
		"\3\u0235\3\u0235\3\u0235\5\u0235\u2330\n\u0235\3\u0236\3\u0236\3\u0237"+
		"\3\u0237\3\u0237\5\u0237\u2337\n\u0237\3\u0237\3\u0237\3\u0237\5\u0237"+
		"\u233c\n\u0237\3\u0237\3\u0237\5\u0237\u2340\n\u0237\5\u0237\u2342\n\u0237"+
		"\3\u0238\3\u0238\3\u0238\3\u0238\5\u0238\u2348\n\u0238\3\u0239\3\u0239"+
		"\3\u0239\5\u0239\u234d\n\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239"+
		"\3\u0239\3\u0239\3\u0239\5\u0239\u2357\n\u0239\3\u0239\3\u0239\3\u0239"+
		"\5\u0239\u235c\n\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239"+
		"\3\u0239\3\u0239\3\u0239\5\u0239\u2367\n\u0239\3\u0239\3\u0239\3\u0239"+
		"\5\u0239\u236c\n\u0239\3\u0239\3\u0239\5\u0239\u2370\n\u0239\3\u0239\3"+
		"\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\5\u0239\u237a\n"+
		"\u0239\3\u0239\3\u0239\3\u0239\5\u0239\u237f\n\u0239\3\u0239\3\u0239\3"+
		"\u0239\3\u0239\3\u0239\3\u0239\5\u0239\u2387\n\u0239\5\u0239\u2389\n\u0239"+
		"\3\u023a\3\u023a\3\u023a\3\u023a\3\u023a\3\u023b\3\u023b\3\u023c\3\u023c"+
		"\5\u023c\u2394\n\u023c\3\u023d\3\u023d\3\u023d\3\u023e\3\u023e\3\u023e"+
		"\7\u023e\u239c\n\u023e\f\u023e\16\u023e\u239f\13\u023e\3\u023f\3\u023f"+
		"\3\u023f\7\u023f\u23a4\n\u023f\f\u023f\16\u023f\u23a7\13\u023f\3\u0240"+
		"\3\u0240\3\u0240\3\u0240\5\u0240\u23ad\n\u0240\3\u0241\3\u0241\3\u0241"+
		"\5\u0241\u23b2\n\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\5\u0241\u23ba\n\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\3\u0241\3\u0241\3\u0241\3\u0241\5\u0241\u23c6\n\u0241\3\u0241\3\u0241"+
		"\3\u0241\5\u0241\u23cb\n\u0241\3\u0242\3\u0242\3\u0242\5\u0242\u23d0\n"+
		"\u0242\3\u0242\3\u0242\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243\3\u0243"+
		"\5\u0243\u23da\n\u0243\3\u0244\3\u0244\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245\3\u0245"+
		"\3\u0245\3\u0245\3\u0245\3\u0245\5\u0245\u23ef\n\u0245\3\u0246\3\u0246"+
		"\3\u0246\5\u0246\u23f4\n\u0246\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247"+
		"\5\u0247\u23fb\n\u0247\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248\u2401\n"+
		"\u0248\3\u0249\3\u0249\3\u0249\7\u0249\u2406\n\u0249\f\u0249\16\u0249"+
		"\u2409\13\u0249\3\u024a\3\u024a\3\u024b\3\u024b\3\u024b\3\u024b\3\u024c"+
		"\3\u024c\3\u024d\3\u024d\5\u024d\u2415\n\u024d\3\u024d\3\u024d\3\u024e"+
		"\3\u024e\3\u024e\3\u024f\3\u024f\3\u0250\3\u0250\3\u0250\5\u0250\u2421"+
		"\n\u0250\5\u0250\u2423\n\u0250\3\u0250\3\u0250\3\u0251\3\u0251\3\u0251"+
		"\5\u0251\u242a\n\u0251\5\u0251\u242c\n\u0251\3\u0252\3\u0252\3\u0252\7"+
		"\u0252\u2431\n\u0252\f\u0252\16\u0252\u2434\13\u0252\3\u0253\3\u0253\3"+
		"\u0253\3\u0253\5\u0253\u243a\n\u0253\3\u0254\3\u0254\3\u0254\7\u0254\u243f"+
		"\n\u0254\f\u0254\16\u0254\u2442\13\u0254\3\u0255\3\u0255\5\u0255\u2446"+
		"\n\u0255\3\u0256\3\u0256\3\u0256\5\u0256\u244b\n\u0256\3\u0257\3\u0257"+
		"\3\u0257\3\u0258\3\u0258\3\u0258\5\u0258\u2453\n\u0258\3\u0258\5\u0258"+
		"\u2456\n\u0258\3\u0259\3\u0259\3\u0259\3\u025a\3\u025a\5\u025a\u245d\n"+
		"\u025a\3\u025a\3\u025a\3\u025b\3\u025b\5\u025b\u2463\n\u025b\3\u025b\3"+
		"\u025b\3\u025b\5\u025b\u2468\n\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3"+
		"\u025b\5\u025b\u246f\n\u025b\3\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u2475"+
		"\n\u025b\3\u025b\3\u025b\5\u025b\u2479\n\u025b\3\u025b\3\u025b\5\u025b"+
		"\u247d\n\u025b\3\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u2483\n\u025b\3"+
		"\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u2489\n\u025b\3\u025b\3\u025b\5"+
		"\u025b\u248d\n\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\3\u025b\5"+
		"\u025b\u2495\n\u025b\3\u025b\3\u025b\5\u025b\u2499\n\u025b\3\u025b\3\u025b"+
		"\5\u025b\u249d\n\u025b\3\u025b\3\u025b\3\u025b\3\u025b\5\u025b\u24a3\n"+
		"\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025d\3\u025d\3\u025d\7\u025d"+
		"\u24ac\n\u025d\f\u025d\16\u025d\u24af\13\u025d\3\u025e\3\u025e\3\u025e"+
		"\3\u025e\3\u025f\3\u025f\5\u025f\u24b7\n\u025f\3\u025f\3\u025f\3\u025f"+
		"\5\u025f\u24bc\n\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f"+
		"\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u24c9\n\u025f\3\u0260"+
		"\3\u0260\3\u0260\3\u0260\5\u0260\u24cf\n\u0260\3\u0260\3\u0260\3\u0260"+
		"\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260\u24d8\n\u0260\3\u0261\3\u0261"+
		"\3\u0261\3\u0261\3\u0261\3\u0261\7\u0261\u24e0\n\u0261\f\u0261\16\u0261"+
		"\u24e3\13\u0261\3\u0262\3\u0262\3\u0262\3\u0262\3\u0263\3\u0263\3\u0263"+
		"\3\u0263\3\u0263\3\u0263\7\u0263\u24ef\n\u0263\f\u0263\16\u0263\u24f2"+
		"\13\u0263\3\u0264\5\u0264\u24f5\n\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\3\u0264\3\u0264\5\u0264\u24fe\n\u0264\3\u0264\3\u0264\3\u0264"+
		"\3\u0264\5\u0264\u2504\n\u0264\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264"+
		"\5\u0264\u250b\n\u0264\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265"+
		"\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265"+
		"\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265\3\u0265"+
		"\3\u0265\3\u0265\3\u0265\3\u0265\5\u0265\u2529\n\u0265\3\u0266\3\u0266"+
		"\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266"+
		"\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266"+
		"\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\3\u0266\5\u0266\u2546"+
		"\n\u0266\3\u0267\3\u0267\5\u0267\u254a\n\u0267\3\u0268\3\u0268\3\u0268"+
		"\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268\3\u0268"+
		"\3\u0268\3\u0268\3\u0268\3\u0268\5\u0268\u255c\n\u0268\3\u0269\3\u0269"+
		"\3\u0269\3\u0269\3\u0269\5\u0269\u2563\n\u0269\3\u026a\3\u026a\3\u026a"+
		"\3\u026a\5\u026a\u2569\n\u026a\3\u026b\3\u026b\3\u026b\3\u026b\5\u026b"+
		"\u256f\n\u026b\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\5\u026c\u2581\n\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\5\u026c\u2589\n\u026c\3\u026d\3\u026d\3\u026e\3\u026e\3\u026e\3\u026e"+
		"\3\u026e\3\u026e\3\u026e\3\u026f\3\u026f\5\u026f\u2596\n\u026f\3\u026f"+
		"\3\u026f\3\u026f\5\u026f\u259b\n\u026f\3\u026f\3\u026f\3\u026f\3\u026f"+
		"\5\u026f\u25a1\n\u026f\3\u026f\3\u026f\3\u026f\5\u026f\u25a6\n\u026f\3"+
		"\u026f\3\u026f\3\u026f\3\u026f\5\u026f\u25ac\n\u026f\3\u026f\3\u026f\5"+
		"\u026f\u25b0\n\u026f\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\5\u026f\u25b7"+
		"\n\u026f\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\5\u026f\u25be\n\u026f"+
		"\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\3\u026f\5\u026f\u25c7"+
		"\n\u026f\3\u0270\3\u0270\3\u0270\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271"+
		"\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\3\u0271\5\u0271\u25d7\n\u0271"+
		"\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272"+
		"\5\u0272\u25e2\n\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272"+
		"\3\u0272\3\u0272\3\u0272\5\u0272\u25ed\n\u0272\3\u0272\3\u0272\3\u0272"+
		"\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\3\u0272\5\u0272\u25f8\n\u0272"+
		"\5\u0272\u25fa\n\u0272\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273"+
		"\3\u0273\5\u0273\u2603\n\u0273\5\u0273\u2605\n\u0273\3\u0273\3\u0273\5"+
		"\u0273\u2609\n\u0273\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3"+
		"\u0274\5\u0274\u2612\n\u0274\5\u0274\u2614\n\u0274\3\u0275\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275\3\u0275"+
		"\5\u0275\u263d\n\u0275\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u2644\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u264c\n\u0276\3\u0276\5\u0276\u264f\n\u0276\3\u0276\5\u0276\u2652\n\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u2658\n\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u2665\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\5\u0276\u266e\n\u0276\3\u0276\5\u0276\u2671\n\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u2678\n\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u2684\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u2699\n\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\5\u0276\u26a0\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u26ac\n\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u26b3\n\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u26bb\n\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\5\u0276\u26e4\n\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u26e9\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u26fa\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u2702\n\u0276\3\u0276\5\u0276\u2705\n\u0276\3\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u2713\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u271b\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u2723\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u2738\n\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\5\u0276\u273e\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u2744\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u274c\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u2759\n\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u275f\n\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u2772\n\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u2778\n\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\5\u0276\u277e\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u2785\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u278d\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\5\u0276\u2795\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u27a0\n\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u27a8\n\u0276\3\u0276\5\u0276\u27ab\n"+
		"\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u27b0\n\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u27b8\n\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u27c0\n\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u27cb\n"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u27d1\n\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\5\u0276\u27d7\n\u0276\3\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u2808\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u280e\n\u0276\3"+
		"\u0276\5\u0276\u2811\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u281f\n"+
		"\u0276\3\u0276\5\u0276\u2822\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\5\u0276\u2833\n\u0276\3";
	private static final String _serializedATNSegment1 =
		"\u0276\5\u0276\u2836\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\5\u0276\u2847\n\u0276\3\u0276\5\u0276\u284a\n\u0276\3\u0276\3"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u2854\n"+
		"\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\5\u0276\u285f\n\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276\u286c\n\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u287a\n\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\5\u0276\u2894\n\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276"+
		"\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\3\u0276\5\u0276"+
		"\u28bc\n\u0276\3\u0277\3\u0277\3\u0277\3\u0278\3\u0278\5\u0278\u28c3\n"+
		"\u0278\3\u0279\3\u0279\5\u0279\u28c7\n\u0279\3\u0279\3\u0279\3\u0279\3"+
		"\u0279\3\u0279\5\u0279\u28ce\n\u0279\3\u027a\3\u027a\3\u027a\5\u027a\u28d3"+
		"\n\u027a\3\u027a\5\u027a\u28d6\n\u027a\3\u027b\3\u027b\3\u027c\3\u027c"+
		"\3\u027d\3\u027d\5\u027d\u28de\n\u027d\3\u027d\3\u027d\3\u027d\3\u027d"+
		"\3\u027d\3\u027d\5\u027d\u28e6\n\u027d\3\u027d\5\u027d\u28e9\n\u027d\3"+
		"\u027e\3\u027e\3\u027e\7\u027e\u28ee\n\u027e\f\u027e\16\u027e\u28f1\13"+
		"\u027e\3\u027f\5\u027f\u28f4\n\u027f\3\u027f\3\u027f\3\u0280\5\u0280\u28f9"+
		"\n\u0280\3\u0281\3\u0281\3\u0281\7\u0281\u28fe\n\u0281\f\u0281\16\u0281"+
		"\u2901\13\u0281\3\u0282\3\u0282\5\u0282\u2905\n\u0282\3\u0282\3\u0282"+
		"\3\u0282\5\u0282\u290a\n\u0282\3\u0282\3\u0282\3\u0282\5\u0282\u290f\n"+
		"\u0282\3\u0282\3\u0282\3\u0282\3\u0282\5\u0282\u2915\n\u0282\3\u0282\3"+
		"\u0282\3\u0282\5\u0282\u291a\n\u0282\3\u0282\3\u0282\5\u0282\u291e\n\u0282"+
		"\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0284\3\u0284\5\u0284\u2927"+
		"\n\u0284\3\u0284\3\u0284\3\u0284\5\u0284\u292c\n\u0284\3\u0284\3\u0284"+
		"\5\u0284\u2930\n\u0284\3\u0285\3\u0285\3\u0285\7\u0285\u2935\n\u0285\f"+
		"\u0285\16\u0285\u2938\13\u0285\3\u0286\3\u0286\3\u0286\5\u0286\u293d\n"+
		"\u0286\3\u0286\3\u0286\5\u0286\u2941\n\u0286\3\u0287\3\u0287\5\u0287\u2945"+
		"\n\u0287\3\u0287\3\u0287\3\u0287\5\u0287\u294a\n\u0287\3\u0288\3\u0288"+
		"\5\u0288\u294e\n\u0288\3\u0288\3\u0288\3\u0289\3\u0289\5\u0289\u2954\n"+
		"\u0289\3\u0289\3\u0289\3\u028a\3\u028a\5\u028a\u295a\n\u028a\3\u028b\3"+
		"\u028b\5\u028b\u295e\n\u028b\3\u028b\3\u028b\3\u028b\5\u028b\u2963\n\u028b"+
		"\3\u028b\3\u028b\3\u028b\5\u028b\u2968\n\u028b\3\u028b\5\u028b\u296b\n"+
		"\u028b\3\u028c\3\u028c\3\u028c\5\u028c\u2970\n\u028c\3\u028c\3\u028c\3"+
		"\u028c\7\u028c\u2975\n\u028c\f\u028c\16\u028c\u2978\13\u028c\3\u028d\3"+
		"\u028d\3\u028e\3\u028e\3\u028e\3\u028e\3\u028f\3\u028f\3\u028f\3\u0290"+
		"\3\u0290\3\u0290\3\u0290\3\u0291\3\u0291\5\u0291\u2989\n\u0291\3\u0291"+
		"\3\u0291\3\u0292\3\u0292\5\u0292\u298f\n\u0292\3\u0292\3\u0292\3\u0293"+
		"\3\u0293\3\u0293\3\u0293\3\u0293\3\u0293\5\u0293\u2999\n\u0293\3\u0293"+
		"\3\u0293\5\u0293\u299d\n\u0293\5\u0293\u299f\n\u0293\3\u0294\3\u0294\3"+
		"\u0295\3\u0295\5\u0295\u29a5\n\u0295\3\u0296\3\u0296\5\u0296\u29a9\n\u0296"+
		"\3\u0297\3\u0297\5\u0297\u29ad\n\u0297\3\u0297\3\u0297\3\u0298\3\u0298"+
		"\5\u0298\u29b3\n\u0298\3\u0298\3\u0298\3\u0299\3\u0299\3\u029a\3\u029a"+
		"\5\u029a\u29bb\n\u029a\3\u029a\3\u029a\3\u029b\3\u029b\5\u029b\u29c1\n"+
		"\u029b\3\u029b\3\u029b\3\u029c\3\u029c\3\u029c\5\u029c\u29c8\n\u029c\3"+
		"\u029c\5\u029c\u29cb\n\u029c\3\u029d\3\u029d\5\u029d\u29cf\n\u029d\3\u029d"+
		"\3\u029d\3\u029e\3\u029e\3\u029e\3\u029e\3\u029f\3\u029f\5\u029f\u29d9"+
		"\n\u029f\3\u029f\3\u029f\3\u02a0\3\u02a0\5\u02a0\u29df\n\u02a0\3\u02a0"+
		"\3\u02a0\3\u02a1\3\u02a1\5\u02a1\u29e5\n\u02a1\3\u02a1\3\u02a1\3\u02a2"+
		"\3\u02a2\3\u02a2\5\u02a2\u29ec\n\u02a2\3\u02a3\3\u02a3\3\u02a3\7\u02a3"+
		"\u29f1\n\u02a3\f\u02a3\16\u02a3\u29f4\13\u02a3\3\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\5\u02a4\u29fb\n\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a06\n\u02a4\3\u02a4"+
		"\5\u02a4\u2a09\n\u02a4\3\u02a4\5\u02a4\u2a0c\n\u02a4\3\u02a4\3\u02a4\3"+
		"\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a13\n\u02a4\3\u02a4\3\u02a4\3\u02a4\3"+
		"\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a1e\n\u02a4\3"+
		"\u02a4\5\u02a4\u2a21\n\u02a4\3\u02a4\5\u02a4\u2a24\n\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a2b\n\u02a4\3\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a36\n\u02a4"+
		"\3\u02a4\5\u02a4\u2a39\n\u02a4\3\u02a4\5\u02a4\u2a3c\n\u02a4\3\u02a4\3"+
		"\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a43\n\u02a4\3\u02a4\3\u02a4\3"+
		"\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a4e\n"+
		"\u02a4\3\u02a4\5\u02a4\u2a51\n\u02a4\3\u02a4\5\u02a4\u2a54\n\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a5b\n\u02a4\3\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a66"+
		"\n\u02a4\3\u02a4\5\u02a4\u2a69\n\u02a4\3\u02a4\5\u02a4\u2a6c\n\u02a4\3"+
		"\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a73\n\u02a4\3\u02a4\3"+
		"\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4"+
		"\u2a7e\n\u02a4\3\u02a4\5\u02a4\u2a81\n\u02a4\3\u02a4\5\u02a4\u2a84\n\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2a8b\n\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4"+
		"\u2a96\n\u02a4\3\u02a4\5\u02a4\u2a99\n\u02a4\3\u02a4\5\u02a4\u2a9c\n\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4\u2aa3\n\u02a4\3\u02a4"+
		"\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\3\u02a4\5\u02a4"+
		"\u2aae\n\u02a4\3\u02a4\5\u02a4\u2ab1\n\u02a4\3\u02a4\5\u02a4\u2ab4\n\u02a4"+
		"\5\u02a4\u2ab6\n\u02a4\3\u02a5\3\u02a5\3\u02a5\5\u02a5\u2abb\n\u02a5\3"+
		"\u02a5\3\u02a5\3\u02a5\7\u02a5\u2ac0\n\u02a5\f\u02a5\16\u02a5\u2ac3\13"+
		"\u02a5\3\u02a6\3\u02a6\5\u02a6\u2ac7\n\u02a6\3\u02a6\3\u02a6\3\u02a6\5"+
		"\u02a6\u2acc\n\u02a6\3\u02a6\3\u02a6\3\u02a6\5\u02a6\u2ad1\n\u02a6\3\u02a6"+
		"\3\u02a6\3\u02a6\5\u02a6\u2ad6\n\u02a6\3\u02a6\3\u02a6\3\u02a6\5\u02a6"+
		"\u2adb\n\u02a6\3\u02a6\3\u02a6\3\u02a6\5\u02a6\u2ae0\n\u02a6\3\u02a6\5"+
		"\u02a6\u2ae3\n\u02a6\3\u02a7\3\u02a7\3\u02a8\3\u02a8\3\u02a9\3\u02a9\3"+
		"\u02aa\3\u02aa\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab\3\u02ab"+
		"\3\u02ab\3\u02ab\3\u02ab\3\u02ab\5\u02ab\u2af8\n\u02ab\3\u02ac\3\u02ac"+
		"\3\u02ad\3\u02ad\3\u02ad\3\u02ad\3\u02ad\3\u02ad\3\u02ae\3\u02ae\3\u02ae"+
		"\3\u02ae\3\u02af\3\u02af\5\u02af\u2b08\n\u02af\3\u02af\3\u02af\3\u02b0"+
		"\3\u02b0\3\u02b1\3\u02b1\3\u02b1\7\u02b1\u2b11\n\u02b1\f\u02b1\16\u02b1"+
		"\u2b14\13\u02b1\3\u02b2\5\u02b2\u2b17\n\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\5\u02b2\u2b26\n\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2\3\u02b2"+
		"\3\u02b2\3\u02b2\3\u02b2\5\u02b2\u2b30\n\u02b2\3\u02b3\3\u02b3\3\u02b3"+
		"\3\u02b3\5\u02b3\u2b36\n\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3"+
		"\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3"+
		"\3\u02b3\3\u02b3\5\u02b3\u2b48\n\u02b3\3\u02b3\3\u02b3\3\u02b3\3\u02b3"+
		"\3\u02b3\3\u02b3\5\u02b3\u2b50\n\u02b3\5\u02b3\u2b52\n\u02b3\3\u02b4\3"+
		"\u02b4\3\u02b4\5\u02b4\u2b57\n\u02b4\3\u02b5\3\u02b5\3\u02b6\3\u02b6\3"+
		"\u02b6\3\u02b6\3\u02b6\3\u02b6\3\u02b6\3\u02b6\3\u02b6\5\u02b6\u2b64\n"+
		"\u02b6\3\u02b7\3\u02b7\3\u02b8\3\u02b8\3\u02b8\3\u02b9\3\u02b9\3\u02b9"+
		"\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9\3\u02b9"+
		"\3\u02ba\3\u02ba\3\u02ba\7\u02ba\u2b7a\n\u02ba\f\u02ba\16\u02ba\u2b7d"+
		"\13\u02ba\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb"+
		"\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\3\u02bb\5\u02bb\u2b8d\n\u02bb"+
		"\3\u02bc\3\u02bc\3\u02bc\3\u02bc\3\u02bc\3\u02bc\3\u02bc\3\u02bc\3\u02bd"+
		"\3\u02bd\3\u02bd\3\u02bd\5\u02bd\u2b9b\n\u02bd\3\u02bd\3\u02bd\3\u02be"+
		"\3\u02be\3\u02be\3\u02be\3\u02be\3\u02bf\3\u02bf\3\u02bf\3\u02bf\3\u02c0"+
		"\3\u02c0\3\u02c0\3\u02c0\5\u02c0\u2bac\n\u02c0\3\u02c1\3\u02c1\3\u02c1"+
		"\3\u02c2\3\u02c2\3\u02c2\3\u02c3\5\u02c3\u2bb5\n\u02c3\3\u02c4\3\u02c4"+
		"\3\u02c4\3\u02c4\3\u02c4\3\u02c4\3\u02c4\3\u02c4\7\u02c4\u2bbf\n\u02c4"+
		"\f\u02c4\16\u02c4\u2bc2\13\u02c4\3\u02c5\3\u02c5\3\u02c5\3\u02c5\3\u02c5"+
		"\3\u02c5\3\u02c5\5\u02c5\u2bcb\n\u02c5\3\u02c6\3\u02c6\3\u02c6\3\u02c6"+
		"\3\u02c7\3\u02c7\3\u02c7\3\u02c7\3\u02c8\3\u02c8\3\u02c8\3\u02c8\3\u02c9"+
		"\3\u02c9\3\u02c9\3\u02c9\3\u02ca\3\u02ca\3\u02ca\3\u02ca\3\u02cb\3\u02cb"+
		"\3\u02cb\3\u02cb\3\u02cb\3\u02cc\3\u02cc\3\u02cc\3\u02cc\3\u02cd\5\u02cd"+
		"\u2beb\n\u02cd\3\u02ce\3\u02ce\3\u02ce\3\u02ce\3\u02ce\3\u02ce\3\u02ce"+
		"\3\u02ce\7\u02ce\u2bf5\n\u02ce\f\u02ce\16\u02ce\u2bf8\13\u02ce\3\u02cf"+
		"\3\u02cf\3\u02cf\5\u02cf\u2bfd\n\u02cf\3\u02d0\3\u02d0\3\u02d0\3\u02d0"+
		"\3\u02d0\3\u02d0\3\u02d1\5\u02d1\u2c06\n\u02d1\3\u02d2\3\u02d2\3\u02d2"+
		"\3\u02d2\5\u02d2\u2c0c\n\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d2\3\u02d2"+
		"\3\u02d2\3\u02d2\7\u02d2\u2c15\n\u02d2\f\u02d2\16\u02d2\u2c18\13\u02d2"+
		"\3\u02d3\3\u02d3\5\u02d3\u2c1c\n\u02d3\3\u02d4\3\u02d4\3\u02d5\3\u02d5"+
		"\3\u02d5\3\u02d5\3\u02d5\3\u02d6\3\u02d6\3\u02d7\6\u02d7\u2c28\n\u02d7"+
		"\r\u02d7\16\u02d7\u2c29\3\u02d8\3\u02d8\5\u02d8\u2c2e\n\u02d8\3\u02d9"+
		"\3\u02d9\3\u02d9\3\u02d9\5\u02d9\u2c34\n\u02d9\3\u02da\3\u02da\3\u02da"+
		"\3\u02da\3\u02db\3\u02db\5\u02db\u2c3c\n\u02db\3\u02db\5\u02db\u2c3f\n"+
		"\u02db\3\u02db\5\u02db\u2c42\n\u02db\3\u02db\3\u02db\3\u02db\3\u02dc\3"+
		"\u02dc\3\u02dc\3\u02dc\5\u02dc\u2c4b\n\u02dc\3\u02dc\3\u02dc\3\u02dc\3"+
		"\u02dc\3\u02dc\3\u02dc\3\u02dc\3\u02dc\3\u02dc\5\u02dc\u2c56\n\u02dc\3"+
		"\u02dd\3\u02dd\3\u02dd\3\u02dd\5\u02dd\u2c5c\n\u02dd\3\u02de\3\u02de\3"+
		"\u02de\3\u02de\3\u02de\3\u02de\3\u02de\5\u02de\u2c65\n\u02de\3\u02df\3"+
		"\u02df\3\u02df\3\u02df\5\u02df\u2c6b\n\u02df\3\u02e0\3\u02e0\3\u02e0\3"+
		"\u02e1\3\u02e1\5\u02e1\u2c72\n\u02e1\3\u02e1\3\u02e1\3\u02e1\3\u02e1\3"+
		"\u02e1\3\u02e1\5\u02e1\u2c7a\n\u02e1\3\u02e2\3\u02e2\3\u02e2\3\u02e2\3"+
		"\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3"+
		"\3\u02e3\5\u02e3\u2c8a\n\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3\3\u02e3"+
		"\3\u02e3\5\u02e3\u2c92\n\u02e3\3\u02e3\3\u02e3\5\u02e3\u2c96\n\u02e3\3"+
		"\u02e4\3\u02e4\3\u02e4\5\u02e4\u2c9b\n\u02e4\3\u02e4\3\u02e4\3\u02e5\3"+
		"\u02e5\3\u02e5\5\u02e5\u2ca2\n\u02e5\3\u02e6\3\u02e6\5\u02e6\u2ca6\n\u02e6"+
		"\3\u02e6\3\u02e6\3\u02e6\5\u02e6\u2cab\n\u02e6\3\u02e6\5\u02e6\u2cae\n"+
		"\u02e6\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\3\u02e7\5\u02e7"+
		"\u2cb7\n\u02e7\3\u02e8\3\u02e8\3\u02e8\3\u02e8\5\u02e8\u2cbd\n\u02e8\3"+
		"\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\5\u02e9"+
		"\u2cc7\n\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9"+
		"\3\u02e9\3\u02e9\5\u02e9\u2cd2\n\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9"+
		"\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\3\u02e9\5\u02e9\u2cdf"+
		"\n\u02e9\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea\3\u02ea"+
		"\3\u02ea\3\u02eb\3\u02eb\3\u02ec\3\u02ec\5\u02ec\u2cee\n\u02ec\3\u02ed"+
		"\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ed\3\u02ed"+
		"\3\u02ed\5\u02ed\u2cfb\n\u02ed\3\u02ed\5\u02ed\u2cfe\n\u02ed\3\u02ed\5"+
		"\u02ed\u2d01\n\u02ed\3\u02ee\3\u02ee\3\u02ee\5\u02ee\u2d06\n\u02ee\3\u02ef"+
		"\3\u02ef\3\u02f0\3\u02f0\3\u02f0\3\u02f0\3\u02f1\3\u02f1\5\u02f1\u2d10"+
		"\n\u02f1\3\u02f2\3\u02f2\5\u02f2\u2d14\n\u02f2\3\u02f3\3\u02f3\3\u02f4"+
		"\3\u02f4\5\u02f4\u2d1a\n\u02f4\3\u02f5\3\u02f5\3\u02f6\3\u02f6\3\u02f6"+
		"\3\u02f6\3\u02f6\3\u02f6\5\u02f6\u2d24\n\u02f6\3\u02f7\3\u02f7\3\u02f8"+
		"\3\u02f8\3\u02f8\3\u02f8\3\u02f8\3\u02f8\3\u02f8\3\u02f8\3\u02f8\3\u02f8"+
		"\3\u02f8\3\u02f8\3\u02f9\3\u02f9\3\u02fa\3\u02fa\3\u02fa\7\u02fa\u2d39"+
		"\n\u02fa\f\u02fa\16\u02fa\u2d3c\13\u02fa\3\u02fb\3\u02fb\3\u02fb\3\u02fb"+
		"\5\u02fb\u2d42\n\u02fb\3\u02fc\3\u02fc\3\u02fc\3\u02fc\3\u02fd\3\u02fd"+
		"\3\u02fd\5\u02fd\u2d4b\n\u02fd\3\u02fd\3\u02fd\3\u02fd\3\u02fd\3\u02fd"+
		"\3\u02fe\3\u02fe\3\u02fe\5\u02fe\u2d55\n\u02fe\3\u02fe\3\u02fe\3\u02fe"+
		"\3\u02fe\3\u02ff\3\u02ff\5\u02ff\u2d5d\n\u02ff\3\u02ff\3\u02ff\3\u02ff"+
		"\3\u02ff\3\u02ff\3\u02ff\3\u0300\3\u0300\3\u0300\3\u0301\3\u0301\3\u0302"+
		"\3\u0302\3\u0302\7\u0302\u2d6d\n\u0302\f\u0302\16\u0302\u2d70\13\u0302"+
		"\3\u0303\3\u0303\3\u0303\3\u0303\3\u0304\3\u0304\5\u0304\u2d78\n\u0304"+
		"\3\u0305\3\u0305\3\u0305\3\u0305\3\u0305\3\u0305\3\u0305\5\u0305\u2d81"+
		"\n\u0305\3\u0305\3\u0305\3\u0305\3\u0306\5\u0306\u2d87\n\u0306\3\u0306"+
		"\5\u0306\u2d8a\n\u0306\3\u0306\5\u0306\u2d8d\n\u0306\3\u0306\5\u0306\u2d90"+
		"\n\u0306\3\u0306\5\u0306\u2d93\n\u0306\3\u0306\5\u0306\u2d96\n\u0306\3"+
		"\u0306\5\u0306\u2d99\n\u0306\3\u0306\5\u0306\u2d9c\n\u0306\3\u0307\3\u0307"+
		"\3\u0307\3\u0307\5\u0307\u2da2\n\u0307\3\u0308\3\u0308\3\u0308\3\u0308"+
		"\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308"+
		"\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308\3\u0308"+
		"\3\u0308\3\u0308\5\u0308\u2dbc\n\u0308\3\u0309\3\u0309\3\u0309\3\u0309"+
		"\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309"+
		"\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309\3\u0309"+
		"\3\u0309\5\u0309\u2dd5\n\u0309\3\u030a\3\u030a\3\u030b\3\u030b\5\u030b"+
		"\u2ddb\n\u030b\3\u030b\3\u030b\3\u030b\3\u030c\3\u030c\5\u030c\u2de2\n"+
		"\u030c\3\u030c\5\u030c\u2de5\n\u030c\3\u030c\3\u030c\5\u030c\u2de9\n\u030c"+
		"\3\u030c\3\u030c\3\u030c\3\u030d\3\u030d\5\u030d\u2df0\n\u030d\3\u030d"+
		"\5\u030d\u2df3\n\u030d\3\u030d\3\u030d\5\u030d\u2df7\n\u030d\3\u030d\3"+
		"\u030d\3\u030d\3\u030e\3\u030e\3\u030e\3\u030e\3\u030e\3\u030e\3\u030e"+
		"\5\u030e\u2e03\n\u030e\3\u030e\3\u030e\3\u030e\3\u030f\5\u030f\u2e09\n"+
		"\u030f\3\u030f\5\u030f\u2e0c\n\u030f\3\u030f\5\u030f\u2e0f\n\u030f\3\u0310"+
		"\3\u0310\3\u0310\3\u0310\3\u0310\5\u0310\u2e16\n\u0310\3\u0311\3\u0311"+
		"\3\u0311\5\u0311\u2e1b\n\u0311\3\u0311\5\u0311\u2e1e\n\u0311\3\u0312\3"+
		"\u0312\3\u0312\3\u0312\3\u0313\3\u0313\3\u0313\3\u0313\3\u0314\3\u0314"+
		"\3\u0314\3\u0314\5\u0314\u2e2c\n\u0314\3\u0315\3\u0315\3\u0315\5\u0315"+
		"\u2e31\n\u0315\3\u0315\3\u0315\3\u0315\7\u0315\u2e36\n\u0315\f\u0315\16"+
		"\u0315\u2e39\13\u0315\3\u0316\3\u0316\3\u0317\3\u0317\3\u0317\3\u0317"+
		"\5\u0317\u2e41\n\u0317\3\u0318\3\u0318\3\u0319\6\u0319\u2e46\n\u0319\r"+
		"\u0319\16\u0319\u2e47\3\u031a\3\u031a\3\u031a\3\u031a\3\u031a\3\u031a"+
		"\3\u031a\3\u031a\3\u031a\3\u031a\3\u031b\3\u031b\5\u031b\u2e56\n\u031b"+
		"\3\u031c\3\u031c\3\u031c\5\u031c\u2e5b\n\u031c\3\u031d\3\u031d\3\u031e"+
		"\3\u031e\3\u031f\3\u031f\3\u0320\3\u0320\3\u0321\3\u0321\3\u0322\3\u0322"+
		"\3\u0323\3\u0323\3\u0323\3\u0324\3\u0324\3\u0324\3\u0324\2\37\60\668:"+
		"\u00ae\u00c8\u0130\u013c\u014e\u0182\u02a0\u02a2\u02b2\u02f4\u02f8\u0366"+
		"\u036a\u0370\u039a\u03d6\u040a\u04c0\u04c4\u0516\u0548\u0586\u059a\u05a2"+
		"\u0628\u0325\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64"+
		"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310"+
		"\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328"+
		"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340"+
		"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358"+
		"\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370"+
		"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388"+
		"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0"+
		"\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8"+
		"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0"+
		"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8"+
		"\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400"+
		"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418"+
		"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430"+
		"\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448"+
		"\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460"+
		"\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478"+
		"\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490"+
		"\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8"+
		"\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0"+
		"\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2\u04d4\u04d6\u04d8"+
		"\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea\u04ec\u04ee\u04f0"+
		"\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500\u0502\u0504\u0506\u0508"+
		"\u050a\u050c\u050e\u0510\u0512\u0514\u0516\u0518\u051a\u051c\u051e\u0520"+
		"\u0522\u0524\u0526\u0528\u052a\u052c\u052e\u0530\u0532\u0534\u0536\u0538"+
		"\u053a\u053c\u053e\u0540\u0542\u0544\u0546\u0548\u054a\u054c\u054e\u0550"+
		"\u0552\u0554\u0556\u0558\u055a\u055c\u055e\u0560\u0562\u0564\u0566\u0568"+
		"\u056a\u056c\u056e\u0570\u0572\u0574\u0576\u0578\u057a\u057c\u057e\u0580"+
		"\u0582\u0584\u0586\u0588\u058a\u058c\u058e\u0590\u0592\u0594\u0596\u0598"+
		"\u059a\u059c\u059e\u05a0\u05a2\u05a4\u05a6\u05a8\u05aa\u05ac\u05ae\u05b0"+
		"\u05b2\u05b4\u05b6\u05b8\u05ba\u05bc\u05be\u05c0\u05c2\u05c4\u05c6\u05c8"+
		"\u05ca\u05cc\u05ce\u05d0\u05d2\u05d4\u05d6\u05d8\u05da\u05dc\u05de\u05e0"+
		"\u05e2\u05e4\u05e6\u05e8\u05ea\u05ec\u05ee\u05f0\u05f2\u05f4\u05f6\u05f8"+
		"\u05fa\u05fc\u05fe\u0600\u0602\u0604\u0606\u0608\u060a\u060c\u060e\u0610"+
		"\u0612\u0614\u0616\u0618\u061a\u061c\u061e\u0620\u0622\u0624\u0626\u0628"+
		"\u062a\u062c\u062e\u0630\u0632\u0634\u0636\u0638\u063a\u063c\u063e\u0640"+
		"\u0642\u0644\u0646\2\u00c0\4\2\3\5\u0167\u016e\4\2\u0179\u0179\u0473\u0473"+
		"\3\2\u0165\u0166\4\2\u0493\u0493\u0495\u049a\3\2\u0496\u049a\5\2[[\u033c"+
		"\u033c\u039d\u039d\4\2\u0493\u0493\u0496\u049a\b\2\u0093\u0093\u00f2\u00f2"+
		"\u0482\u0485\u0488\u048a\u048d\u048d\u049b\u049c\4\2\u0482\u0482\u0488"+
		"\u0488\b\2dd\u0177\u0177\u0482\u0482\u0486\u0486\u0488\u0488\u048f\u048f"+
		"\3\2\u049d\u049e\4\2\u0244\u0244\u0476\u0476\6\2YY\u00fb\u00fb\u0161\u0161"+
		"\u0491\u0492\5\2\u023a\u023a\u044a\u044a\u0465\u0465\b\2\u01e7\u01e7\u025c"+
		"\u025c\u025e\u025e\u035f\u035f\u03f1\u03f1\u03f3\u03f3\5\2[[\u0094\u0094"+
		"\u0146\u0146\f\2\u01f2\u01f2\u0208\u0208\u0248\u0248\u026c\u026c\u02a8"+
		"\u02a8\u02ee\u02ee\u02ff\u02ff\u03da\u03da\u03f5\u03f5\u0461\u0461\4\2"+
		"\u0259\u0259\u043e\u043e\4\2\u0094\u0094\u0146\u0146\7\2\u01be\u01be\u02b7"+
		"\u02b7\u02fe\u02fe\u0360\u0360\u0422\u0422\6\2\u0378\u0378\u03a5\u03a5"+
		"\u040b\u040b\u0440\u0440\4\2\u0200\u0200\u0282\u0282\4\2\u01eb\u01eb\u0215"+
		"\u0215\4\2\u010a\u010a\u011b\u011b\4\2\u022f\u022f\u0435\u0435\5\2ll\u023a"+
		"\u023a\u0465\u0465\7\2\u01e7\u01e7\u025c\u025c\u025e\u025e\u035f\u035f"+
		"\u03f1\u03f1\r\2\u01f2\u01f2\u0208\u0208\u0248\u0248\u026c\u026c\u02a8"+
		"\u02a8\u02b8\u02b8\u02ee\u02ee\u02ff\u02ff\u03da\u03da\u03f5\u03f5\u0461"+
		"\u0461\13\2\u0176\u0176\u0182\u0182\u021a\u021a\u023b\u023b\u029a\u029a"+
		"\u03ba\u03ba\u043d\u043d\u0458\u0458\u046a\u046a\n\2\u00d5\u00d5\u00f2"+
		"\u00f2\u021a\u021a\u0286\u0286\u03ae\u03ae\u03be\u03be\u0416\u0416\u046a"+
		"\u046a\13\2\u020e\u020e\u0243\u0243\u0326\u0326\u0387\u0387\u039a\u039a"+
		"\u03ce\u03ce\u03f3\u03f3\u040e\u040e\u0416\u0416\6\2\u0286\u0286\u02dc"+
		"\u02dc\u03a9\u03a9\u03ae\u03ae\4\2\u0268\u0268\u041a\u041a\4\2\u008b\u008b"+
		"\u0152\u0152\6\2\r\r\23\23\26\26\67\67\4\2}}\u00de\u00df\4\2||\u035b\u035b"+
		"\4\2{{\u018b\u018b\4\2\u021c\u021c\u02d7\u02d7\4\2``\u0090\u0090\4\2\u00e6"+
		"\u00e6\u01f4\u01f4\20\2%%--NN\u00fe\u00fe\u01c1\u01c1\u01db\u01db\u01ef"+
		"\u01ef\u02d0\u02d0\u0339\u0339\u0349\u0349\u03b1\u03b1\u03fd\u03fd\u0428"+
		"\u0428\u045a\u045a\4\2\u018a\u018a\u0221\u0221\b\2\u0185\u0185\u0192\u0192"+
		"\u0195\u0195\u0284\u0284\u0347\u0347\u03cb\u03cb\4\2\u00a8\u00a8\u0105"+
		"\u0105\4\2\u0085\u0085\u011e\u011e\4\2\u00dc\u00dc\u019d\u019d\4\2\u0113"+
		"\u0113\u01eb\u01eb\4\2\u00d9\u00d9\u011b\u011b\4\2\u0239\u0239\u026b\u026b"+
		"\b\2\u0088\u0088\u00be\u00be\u010e\u010e\u0132\u0132\u032f\u032f\u03e0"+
		"\u03e0\4\2\u00ab\u00ab\u0127\u0127\4\2\u008d\u008d\u014a\u014a\5\2\u00aa"+
		"\u00aa\u031e\u031e\u0400\u0400\4\2\u0133\u0133\u0157\u0157\4\2\u0149\u0149"+
		"\u028d\u028d\5\2\u021a\u021a\u029a\u029b\u0458\u0458\4\2\u047d\u047d\u04a3"+
		"\u04a3\7\2cc\u00be\u00be\u00ec\u00ec\u0126\u0126\u013b\u013b\4\2\u0087"+
		"\u0088\u032f\u032f\4\2\u029d\u029d\u03f0\u03f0\13\2\u014c\u014c\u0245"+
		"\u0245\u0249\u0249\u02a7\u02a7\u0305\u0305\u0344\u0344\u0373\u0373\u03f2"+
		"\u03f2\u0455\u0455\3\2\u029a\u029b\6\2ee\u00e3\u00e3\u00eb\u00eb\u013a"+
		"\u013a\3\2\u04a2\u04a3\5\2dd\u0326\u0326\u04a2\u04a3\5\2\u008b\u008b\u032f"+
		"\u032f\u0374\u0374\5\2\u008b\u008b\u0398\u0398\u03d5\u03d5\4\2\u008b\u008b"+
		"\u04a3\u04a3\6\2\u01bf\u01bf\u01ed\u01ed\u03f7\u03f7\u042e\u042e\13\2"+
		"\u0195\u0195\u01b9\u01b9\u024c\u024c\u02b1\u02b1\u02e4\u02e4\u0347\u0347"+
		"\u038d\u038d\u03cb\u03cb\u03f9\u03f9\4\2\u013e\u013e\u0203\u0203\5\2\u008f"+
		"\u008f\u00c5\u00c5\u01f1\u01f1\4\2\u008b\u008b\u0179\u0179\5\2\u0200\u0200"+
		"\u022b\u022b\u0282\u0282\b\2\u0182\u0182\u0243\u0243\u0387\u0387\u039a"+
		"\u039a\u03ba\u03ba\u043d\u043d\4\2\u00da\u00da\u010a\u010a\b\2\u008b\u008b"+
		"\u01c8\u01c8\u02d4\u02d4\u0319\u0319\u0372\u0372\u0374\u0374\4\2::LL\4"+
		"\2==\u0413\u0413\4\2\16\16,,\4\2**\u02e1\u02e1\4\2\b\b\"\"\4\2\u0242\u0242"+
		"\u0413\u0413\6\2\u0148\u0148\u01f8\u01f8\u0402\u0402\u045f\u045f\5\2\u017e"+
		"\u017e\u02e5\u02e5\u0353\u0353\4\2\u02b1\u02b1\u0444\u0444\4\2\u01b0\u01b0"+
		"\u02df\u02df\5\2\u00a8\u00a8\u01a0\u01a0\u02ea\u02ea\5\2\u01a6\u01a6\u0224"+
		"\u0224\u02f1\u02f1\4\2\u020b\u020b\u0410\u0410\5\2\u00ed\u00ed\u01cc\u01cc"+
		"\u01d2\u01d2\6\2++\u00ab\u00ab\u0127\u0127\u0146\u0146\b\2\u01b9\u01b9"+
		"\u029f\u029f\u02b1\u02b1\u02e4\u02e4\u033d\u033d\u03af\u03af\4\2\u02c1"+
		"\u02c1\u0426\u0426\4\2\u01df\u01df\u01e2\u01e2\4\2\u00bc\u00bc\u0204\u0204"+
		"\4\2\u008e\u008e\u0241\u0241\4\2\u026b\u026b\u041e\u041e\4\2ii\u0117\u0117"+
		"\4\2\u013d\u013d\u0205\u0205\4\2\u00b1\u00b1\u00e6\u00e6\4\2\u0152\u0152"+
		"\u037f\u037f\4\2$$GG\3\2\u0173\u0175\4\2\u0179\u0179\u04a3\u04a3\4\2\u0131"+
		"\u0131\u0138\u0138\t\3\u0187\u0187\u0211\u0211\u0346\u0346\u036a\u036a"+
		"\u047d\u047d\u04a2\u04a2\u04ae\u04b8\3\2\u04bb\u04bc\4\2\u0341\u0341\u04c0"+
		"\u04c0\4\2\u0469\u0469\u04c2\u04cc\5\2\u0365\u0365\u044f\u044f\u04cd\u04d5"+
		"\4\2\u0449\u0449\u04d7\u04d7\4\2\u0367\u0367\u04db\u04dc\4\2\u016f\u0170"+
		"\u0172\u0172\4\2\u008b\u008b\u0411\u0411\4\2\u00a8\u00a8\u0393\u0393\f"+
		"\2[[\u00dc\u00dc\u0106\u0106\u010a\u010a\u01e2\u01e2\u038e\u038e\u0411"+
		"\u0411\u042c\u042c\u0466\u0466\u04de\u04e0\4\2\u00d3\u00d3\u0141\u0141"+
		"\13\2[[\u0094\u0094\u00b1\u00b1\u012d\u012f\u0135\u0135\u0146\u0146\u02b0"+
		"\u02b0\u033a\u033a\u0433\u0433\5\2[[\u031c\u031c\u03fa\u03fa\4\2\u00a8"+
		"\u00a8\u01eb\u01eb\4\2\u00b8\u00b8\u00cf\u00cf\4\2\u0108\u0108\u04a2\u04a2"+
		"\5\2\u00aa\u00aa\u00d5\u00d5\u011a\u011a\4\2\u0097\u0097\u014a\u014a\4"+
		"\2\u011b\u011b\u02cf\u02cf\4\2\u0265\u0265\u03ef\u03ef\5\2\u0114\u0114"+
		"\u0393\u0393\u044d\u044d\4\2\u0090\u0091\u00a0\u00a0\4\2\u0206\u0206\u033b"+
		"\u033b\6\2\u0102\u0102\u013d\u013d\u0210\u0210\u02b4\u02b4\5\2\u00dc\u00dc"+
		"\u0291\u0291\u0430\u0430\4\2\u0102\u0102\u02b4\u02b4\7\2\u0102\u0102\u013d"+
		"\u013d\u0142\u0142\u0275\u0275\u02b4\u02b4\4\2\u017b\u017b\u01d0\u01d0"+
		"\6\2\u01e4\u01e4\u035a\u035a\u038f\u038f\u03a7\u03a7\3\2\u0332\u0333\17"+
		"\2\u01a5\u01a5\u01a8\u01a8\u01c4\u01c4\u020f\u020f\u0297\u0297\u02aa\u02aa"+
		"\u02e1\u02e1\u0316\u0316\u0334\u0334\u036f\u036f\u0397\u0397\u0454\u0454"+
		"\u0464\u0464\4\2\u0087\u0087\u0281\u0281\4\2\u0086\u0086\u011f\u011f\4"+
		"\2vv\u00a2\u00a2\5\2\u00b8\u00b8\u00d0\u00d0\u0271\u0271\4\2\u00a9\u00a9"+
		"\u00b7\u00b7\4\2\u0216\u0216\u0366\u0366\4\2\u027e\u027e\u03c6\u03c6\4"+
		"\2\u0301\u0301\u0424\u0424\4\2UU\u0097\u0097\5\2\u0130\u0130\u0162\u0162"+
		"\u0411\u0411\5\2nn\u00cc\u00cc\u0136\u0136\4\2\u00e0\u00e0\u0147\u0147"+
		"\4\2\u01cb\u01cb\u031f\u031f\4\2\u00c6\u00c6\u014a\u014a\4\2\u0110\u0110"+
		"\u011d\u011d\5\2\u0102\u0102\u013d\u013d\u02b4\u02b4\4\2\u0140\u0140\u0493"+
		"\u0494\4\2\u0097\u0097\u0255\u0255\4\2\u017a\u017a\u025b\u025b\4\2mmq"+
		"q\4\2\u0106\u0106\u01bc\u01bc\4\2\u028c\u028c\u02b6\u02b6\4\2\u00b8\u00b8"+
		"\u013d\u013d\4\2\u021d\u021d\u03a3\u03a3\4\2\u025f\u025f\u037d\u037d\4"+
		"\2\u0196\u0196\u03ed\u03ed\4\2\u01de\u01de\u03a8\u03a8\20\2[[\u00c2\u00c2"+
		"\u011e\u011e\u017a\u017a\u018e\u018e\u0246\u0246\u024a\u024a\u02a5\u02a5"+
		"\u0304\u0304\u0396\u0396\u039c\u039c\u03aa\u03aa\u03c1\u03c2\u0456\u0456"+
		"\5\2[[\u0343\u0343\u0393\u0393\5\2WWkk\u02c8\u02c8\4\2\u02d8\u02d8\u0364"+
		"\u0364\4\2\u02f8\u02f8\u042f\u042f\4\2\u019c\u019c\u02e8\u02e8\4\2\u0108"+
		"\u0108\u041f\u041f\4\2\u01b3\u01b3\u032b\u032b\5\2\u008b\u008b\u01b3\u01b3"+
		"\u032b\u032b\4\2\u031f\u031f\u0336\u0336\4\2\u00dc\u00dc\u00f6\u00f6\4"+
		"\2\u0200\u0200\u028f\u028f\4\2\u0493\u0493\u0496\u0499\4\2\u01f7\u01f7"+
		"\u02cc\u02cc\5\2\u02fd\u02fd\u031b\u031b\u03ee\u03ee\4\2\u024b\u024b\u037a"+
		"\u037a\27\2~~\u0085\u0085\u0113\u0114\u011a\u011a\u011e\u011e\u017c\u017c"+
		"\u01a3\u01a3\u01e4\u01e4\u020d\u020d\u0214\u0214\u0238\u0238\u0279\u0279"+
		"\u0281\u0281\u02f4\u02f4\u02f7\u02f7\u0315\u0315\u0359\u0359\u036c\u036c"+
		"\u0394\u0394\u042c\u042c\u04a2\u04a2\20\2\u0081\u0084\u00b2\u00b4\u00f0"+
		"\u00f1\u011c\u011c\u0163\u0163\u0182\u0182\u0243\u0243\u0387\u0387\u039a"+
		"\u039a\u03ba\u03ba\u03ce\u03ce\u040e\u040e\u043d\u043d\u046a\u046a\6\2"+
		"xx\u008d\u008d\u0184\u0184\u01cb\u01cb\4\2\u0178\u0178\u01d8\u01d8\4\2"+
		"\u0103\u0103\u025c\u025cx\2\6\b\n\13\r\17\21\34\37\37!\679=?@BBEOSSVV"+
		"XX]]nnvwzz\u0087\u0087\u008a\u008a\u008e\u008f\u00a2\u00a2\u00aa\u00aa"+
		"\u00b5\u00b5\u00bc\u00bc\u00c2\u00c2\u00c7\u00c7\u00cc\u00cc\u00d2\u00d2"+
		"\u00da\u00da\u00dc\u00dc\u00e2\u00e2\u00ed\u00ed\u00f3\u00f3\u00fe\u00fe"+
		"\u0101\u0101\u0103\u0103\u0109\u0109\u011b\u011b\u0122\u0122\u0134\u0134"+
		"\u0136\u0137\u0139\u0139\u0144\u0144\u0148\u0148\u014c\u014c\u0153\u0153"+
		"\u0159\u0159\u015c\u015e\u0162\u0162\u016f\u0176\u017a\u0184\u0186\u0186"+
		"\u0188\u0191\u0193\u01ac\u01ae\u01b3\u01b5\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01ce\u01d0\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01ea\u01ec\u0209"+
		"\u020b\u0210\u0212\u0212\u0214\u021d\u021f\u021f\u0221\u0221\u0223\u0224"+
		"\u0226\u0253\u0255\u0257\u0259\u025f\u0261\u0263\u0265\u027c\u027e\u0292"+
		"\u0294\u0297\u0299\u02b8\u02ba\u02bb\u02be\u02c2\u02c4\u02c8\u02ca\u02d4"+
		"\u02d6\u02e5\u02e7\u02e8\u02ea\u02ee\u02f0\u0308\u030a\u031e\u0320\u032b"+
		"\u032d\u0340\u0342\u0345\u0347\u0348\u034a\u0364\u0366\u0368\u036b\u0375"+
		"\u0377\u038d\u038f\u0393\u0396\u039f\u03a1\u03b0\u03b2\u03b5\u03b8\u03c8"+
		"\u03ca\u03cb\u03cd\u03d8\u03da\u03e3\u03e5\u03ee\u03f0\u03f5\u03f7\u0410"+
		"\u0412\u041a\u041c\u0427\u0429\u042b\u042d\u0433\u0435\u0448\u044a\u044d"+
		"\u0450\u0468\u046a\u0472\u0475\u0475\u0477\u0478\u04d7\u04d7\u04e2\u04e6"+
		"\r\2\u0213\u0213\u021e\u021e\u0254\u0254\u0260\u0260\u0293\u0293\u02c3"+
		"\u02c3\u02ef\u02ef\u03d9\u03d9\u03f6\u03f6\u0411\u0411\u0434\u04348\2"+
		"TUWWYZ^egmpuxy{~\u0080\u0086\u0088\u0089\u008b\u008d\u0090\u0093\u0095"+
		"\u00a1\u00a3\u00a8\u00ab\u00b4\u00b6\u00bb\u00bd\u00c1\u00c3\u00c6\u00c8"+
		"\u00cb\u00cd\u00d1\u00d4\u00d9\u00db\u00db\u00de\u00df\u00e1\u00e1\u00e3"+
		"\u00ec\u00ee\u00f2\u00f4\u00fd\u00ff\u0100\u0102\u0102\u0105\u0108\u010a"+
		"\u011a\u011c\u011c\u011e\u0121\u0123\u012d\u012f\u0133\u0135\u0135\u0138"+
		"\u0138\u013a\u013d\u013f\u0140\u0142\u0143\u0145\u0145\u0147\u0147\u0149"+
		"\u014b\u014d\u0152\u0154\u0158\u015b\u015b\u015f\u0161\u0163\u0164\u0177"+
		"\u0177\u01eb\u01eb\u020a\u020a\u0264\u0264\u02bc\u02bc\u02e9\u02e9\2\u342e"+
		"\2\u0648\3\2\2\2\4\u0654\3\2\2\2\6\u06c0\3\2\2\2\b\u06c2\3\2\2\2\n\u06c5"+
		"\3\2\2\2\f\u06da\3\2\2\2\16\u06dc\3\2\2\2\20\u06f1\3\2\2\2\22\u070a\3"+
		"\2\2\2\24\u070c\3\2\2\2\26\u0713\3\2\2\2\30\u071d\3\2\2\2\32\u071f\3\2"+
		"\2\2\34\u0727\3\2\2\2\36\u0738\3\2\2\2 \u074d\3\2\2\2\"\u0759\3\2\2\2"+
		"$\u075b\3\2\2\2&\u0767\3\2\2\2(\u0769\3\2\2\2*\u0772\3\2\2\2,\u0787\3"+
		"\2\2\2.\u0789\3\2\2\2\60\u078b\3\2\2\2\62\u07dd\3\2\2\2\64\u07e0\3\2\2"+
		"\2\66\u07ec\3\2\2\28\u0845\3\2\2\2:\u0864\3\2\2\2<\u086e\3\2\2\2>\u0875"+
		"\3\2\2\2@\u087c\3\2\2\2B\u087e\3\2\2\2D\u0901\3\2\2\2F\u0903\3\2\2\2H"+
		"\u0905\3\2\2\2J\u0915\3\2\2\2L\u0919\3\2\2\2N\u091b\3\2\2\2P\u0922\3\2"+
		"\2\2R\u092a\3\2\2\2T\u0931\3\2\2\2V\u0939\3\2\2\2X\u093b\3\2\2\2Z\u0942"+
		"\3\2\2\2\\\u0949\3\2\2\2^\u0954\3\2\2\2`\u0957\3\2\2\2b\u095b\3\2\2\2"+
		"d\u0960\3\2\2\2f\u0b0c\3\2\2\2h\u0b0e\3\2\2\2j\u0b19\3\2\2\2l\u0b23\3"+
		"\2\2\2n\u0b35\3\2\2\2p\u0b37\3\2\2\2r\u0b3f\3\2\2\2t\u0b47\3\2\2\2v\u0b4c"+
		"\3\2\2\2x\u0b55\3\2\2\2z\u0b5e\3\2\2\2|\u0b60\3\2\2\2~\u0b6b\3\2\2\2\u0080"+
		"\u0b6d\3\2\2\2\u0082\u0b7d\3\2\2\2\u0084\u0b7f\3\2\2\2\u0086\u0b85\3\2"+
		"\2\2\u0088\u0b8d\3\2\2\2\u008a\u0b8f\3\2\2\2\u008c\u0b97\3\2\2\2\u008e"+
		"\u0b9a\3\2\2\2\u0090\u0b9e\3\2\2\2\u0092\u0ba6\3\2\2\2\u0094\u0ba8\3\2"+
		"\2\2\u0096\u0bac\3\2\2\2\u0098\u0bae\3\2\2\2\u009a\u0bb1\3\2\2\2\u009c"+
		"\u0bd2\3\2\2\2\u009e\u0bd5\3\2\2\2\u00a0\u0bd9\3\2\2\2\u00a2\u0be4\3\2"+
		"\2\2\u00a4\u0be7\3\2\2\2\u00a6\u0beb\3\2\2\2\u00a8\u0c01\3\2\2\2\u00aa"+
		"\u0c09\3\2\2\2\u00ac\u0c2f\3\2\2\2\u00ae\u0c34\3\2\2\2\u00b0\u0c3e\3\2"+
		"\2\2\u00b2\u0c4e\3\2\2\2\u00b4\u0c67\3\2\2\2\u00b6\u0c69\3\2\2\2\u00b8"+
		"\u0c71\3\2\2\2\u00ba\u0c79\3\2\2\2\u00bc\u0c9c\3\2\2\2\u00be\u0cd9\3\2"+
		"\2\2\u00c0\u0cdb\3\2\2\2\u00c2\u0ce4\3\2\2\2\u00c4\u0cfd\3\2\2\2\u00c6"+
		"\u0d11\3\2\2\2\u00c8\u0d1a\3\2\2\2\u00ca\u0d62\3\2\2\2\u00cc\u0d64\3\2"+
		"\2\2\u00ce\u0d6e\3\2\2\2\u00d0\u0da5\3\2\2\2\u00d2\u0db1\3\2\2\2\u00d4"+
		"\u0db4\3\2\2\2\u00d6\u0dc0\3\2\2\2\u00d8\u0dc2\3\2\2\2\u00da\u0dd5\3\2"+
		"\2\2\u00dc\u0ddf\3\2\2\2\u00de\u0de1\3\2\2\2\u00e0\u0de5\3\2\2\2\u00e2"+
		"\u0def\3\2\2\2\u00e4\u0df4\3\2\2\2\u00e6\u0df9\3\2\2\2\u00e8\u0e05\3\2"+
		"\2\2\u00ea\u0e07\3\2\2\2\u00ec\u0e0a\3\2\2\2\u00ee\u0e0e\3\2\2\2\u00f0"+
		"\u0e17\3\2\2\2\u00f2\u0e3b\3\2\2\2\u00f4\u0e41\3\2\2\2\u00f6\u0e43\3\2"+
		"\2\2\u00f8\u0e4b\3\2\2\2\u00fa\u0e55\3\2\2\2\u00fc\u0e8c\3\2\2\2\u00fe"+
		"\u0e90\3\2\2\2\u0100\u0e92\3\2\2\2\u0102\u0e94\3\2\2\2\u0104\u0e9e\3\2"+
		"\2\2\u0106\u0ea0\3\2\2\2\u0108\u0ea8\3\2\2\2\u010a\u0eac\3\2\2\2\u010c"+
		"\u0ec0\3\2\2\2\u010e\u0ec2\3\2\2\2\u0110\u0ec6\3\2\2\2\u0112\u0ee4\3\2"+
		"\2\2\u0114\u0f61\3\2\2\2\u0116\u0f63\3\2\2\2\u0118\u0f65\3\2\2\2\u011a"+
		"\u0f67\3\2\2\2\u011c\u0f72\3\2\2\2\u011e\u0f7a\3\2\2\2\u0120\u0f82\3\2"+
		"\2\2\u0122\u0f8a\3\2\2\2\u0124\u0f95\3\2\2\2\u0126\u0fba\3\2\2\2\u0128"+
		"\u0fbc\3\2\2\2\u012a\u1000\3\2\2\2\u012c\u1002\3\2\2\2\u012e\u1010\3\2"+
		"\2\2\u0130\u1027\3\2\2\2\u0132\u1031\3\2\2\2\u0134\u103d\3\2\2\2\u0136"+
		"\u103f\3\2\2\2\u0138\u1076\3\2\2\2\u013a\u1078\3\2\2\2\u013c\u107a\3\2"+
		"\2\2\u013e\u109f\3\2\2\2\u0140\u10a9\3\2\2\2\u0142\u10ad\3\2\2\2\u0144"+
		"\u10c2\3\2\2\2\u0146\u10c4\3\2\2\2\u0148\u10c6\3\2\2\2\u014a\u10d3\3\2"+
		"\2\2\u014c\u10d9\3\2\2\2\u014e\u10f2\3\2\2\2\u0150\u10fc\3\2\2\2\u0152"+
		"\u1104\3\2\2\2\u0154\u1124\3\2\2\2\u0156\u1126\3\2\2\2\u0158\u1128\3\2"+
		"\2\2\u015a\u112a\3\2\2\2\u015c\u112f\3\2\2\2\u015e\u1133\3\2\2\2\u0160"+
		"\u1159\3\2\2\2\u0162\u116b\3\2\2\2\u0164\u1174\3\2\2\2\u0166\u11eb\3\2"+
		"\2\2\u0168\u11ed\3\2\2\2\u016a\u11ef\3\2\2\2\u016c\u11fa\3\2\2\2\u016e"+
		"\u1201\3\2\2\2\u0170\u1203\3\2\2\2\u0172\u120e\3\2\2\2\u0174\u1210\3\2"+
		"\2\2\u0176\u1214\3\2\2\2\u0178\u1216\3\2\2\2\u017a\u121e\3\2\2\2\u017c"+
		"\u1220\3\2\2\2\u017e\u1224\3\2\2\2\u0180\u1226\3\2\2\2\u0182\u1229\3\2"+
		"\2\2\u0184\u126d\3\2\2\2\u0186\u1271\3\2\2\2\u0188\u1278\3\2\2\2\u018a"+
		"\u127b\3\2\2\2\u018c\u127e\3\2\2\2\u018e\u1287\3\2\2\2\u0190\u128d\3\2"+
		"\2\2\u0192\u128f\3\2\2\2\u0194\u1291\3\2\2\2\u0196\u1383\3\2\2\2\u0198"+
		"\u1385\3\2\2\2\u019a\u138d\3\2\2\2\u019c\u138f\3\2\2\2\u019e\u1397\3\2"+
		"\2\2\u01a0\u139d\3\2\2\2\u01a2\u13a2\3\2\2\2\u01a4\u13a5\3\2\2\2\u01a6"+
		"\u13ab\3\2\2\2\u01a8\u13ad\3\2\2\2\u01aa\u13bd\3\2\2\2\u01ac\u13bf\3\2"+
		"\2\2\u01ae\u13c7\3\2\2\2\u01b0\u13ce\3\2\2\2\u01b2\u13d0\3\2\2\2\u01b4"+
		"\u13e2\3\2\2\2\u01b6\u13e4\3\2\2\2\u01b8\u1407\3\2\2\2\u01ba\u1409\3\2"+
		"\2\2\u01bc\u142e\3\2\2\2\u01be\u1438\3\2\2\2\u01c0\u143a\3\2\2\2\u01c2"+
		"\u143d\3\2\2\2\u01c4\u144a\3\2\2\2\u01c6\u144c\3\2\2\2\u01c8\u1456\3\2"+
		"\2\2\u01ca\u1496\3\2\2\2\u01cc\u14bb\3\2\2\2\u01ce\u14bd\3\2\2\2\u01d0"+
		"\u14c1\3\2\2\2\u01d2\u14cc\3\2\2\2\u01d4\u14ce\3\2\2\2\u01d6\u14da\3\2"+
		"\2\2\u01d8\u14de\3\2\2\2\u01da\u14e6\3\2\2\2\u01dc\u14f6\3\2\2\2\u01de"+
		"\u14fa\3\2\2\2\u01e0\u1502\3\2\2\2\u01e2\u1511\3\2\2\2\u01e4\u1515\3\2"+
		"\2\2\u01e6\u151d\3\2\2\2\u01e8\u1521\3\2\2\2\u01ea\u1526\3\2\2\2\u01ec"+
		"\u152a\3\2\2\2\u01ee\u1532\3\2\2\2\u01f0\u153b\3\2\2\2\u01f2\u153f\3\2"+
		"\2\2\u01f4\u1547\3\2\2\2\u01f6\u154f\3\2\2\2\u01f8\u1556\3\2\2\2\u01fa"+
		"\u1563\3\2\2\2\u01fc\u1565\3\2\2\2\u01fe\u156f\3\2\2\2\u0200\u1571\3\2"+
		"\2\2\u0202\u1573\3\2\2\2\u0204\u157b\3\2\2\2\u0206\u1584\3\2\2\2\u0208"+
		"\u1592\3\2\2\2\u020a\u15a2\3\2\2\2\u020c\u15b9\3\2\2\2\u020e\u15d4\3\2"+
		"\2\2\u0210\u15d6\3\2\2\2\u0212\u15d8\3\2\2\2\u0214\u15e1\3\2\2\2\u0216"+
		"\u15f3\3\2\2\2\u0218\u15f5\3\2\2\2\u021a\u1614\3\2\2\2\u021c\u1616\3\2"+
		"\2\2\u021e\u1628\3\2\2\2\u0220\u1643\3\2\2\2\u0222\u1646\3\2\2\2\u0224"+
		"\u164f\3\2\2\2\u0226\u166d\3\2\2\2\u0228\u166f\3\2\2\2\u022a\u1678\3\2"+
		"\2\2\u022c\u167d\3\2\2\2\u022e\u16b6\3\2\2\2\u0230\u16b8\3\2\2\2\u0232"+
		"\u16fa\3\2\2\2\u0234\u16fc\3\2\2\2\u0236\u1706\3\2\2\2\u0238\u170b\3\2"+
		"\2\2\u023a\u170d\3\2\2\2\u023c\u170f\3\2\2\2\u023e\u1711\3\2\2\2\u0240"+
		"\u1718\3\2\2\2\u0242\u171d\3\2\2\2\u0244\u172f\3\2\2\2\u0246\u173c\3\2"+
		"\2\2\u0248\u173e\3\2\2\2\u024a\u1740\3\2\2\2\u024c\u1742\3\2\2\2\u024e"+
		"\u1759\3\2\2\2\u0250\u175b\3\2\2\2\u0252\u175f\3\2\2\2\u0254\u1763\3\2"+
		"\2\2\u0256\u1781\3\2\2\2\u0258\u1784\3\2\2\2\u025a\u1789\3\2\2\2\u025c"+
		"\u178b\3\2\2\2\u025e\u178d\3\2\2\2\u0260\u17ac\3\2\2\2\u0262\u17af\3\2"+
		"\2\2\u0264\u17ce\3\2\2\2\u0266\u17d0\3\2\2\2\u0268\u17d3\3\2\2\2\u026a"+
		"\u17eb\3\2\2\2\u026c\u17ef\3\2\2\2\u026e\u17f1\3\2\2\2\u0270\u17f5\3\2"+
		"\2\2\u0272\u17f7\3\2\2\2\u0274\u1800\3\2\2\2\u0276\u1808\3\2\2\2\u0278"+
		"\u180a\3\2\2\2\u027a\u180f\3\2\2\2\u027c\u1811\3\2\2\2\u027e\u1818\3\2"+
		"\2\2\u0280\u181b\3\2\2\2\u0282\u1821\3\2\2\2\u0284\u1826\3\2\2\2\u0286"+
		"\u1828\3\2\2\2\u0288\u182f\3\2\2\2\u028a\u183c\3\2\2\2\u028c\u1853\3\2"+
		"\2\2\u028e\u1855\3\2\2\2\u0290\u185d\3\2\2\2\u0292\u188b\3\2\2\2\u0294"+
		"\u189f\3\2\2\2\u0296\u18a8\3\2\2\2\u0298\u18aa\3\2\2\2\u029a\u18af\3\2"+
		"\2\2\u029c\u18b4\3\2\2\2\u029e\u18b6\3\2\2\2\u02a0\u18be\3\2\2\2\u02a2"+
		"\u18d1\3\2\2\2\u02a4\u18dd\3\2\2\2\u02a6\u18e0\3\2\2\2\u02a8\u18e9\3\2"+
		"\2\2\u02aa\u1902\3\2\2\2\u02ac\u1904\3\2\2\2\u02ae\u1926\3\2\2\2\u02b0"+
		"\u1931\3\2\2\2\u02b2\u1933\3\2\2\2\u02b4\u194b\3\2\2\2\u02b6\u1950\3\2"+
		"\2\2\u02b8\u1952\3\2\2\2\u02ba\u1959\3\2\2\2\u02bc\u1967\3\2\2\2\u02be"+
		"\u1972\3\2\2\2\u02c0\u1977\3\2\2\2\u02c2\u197c\3\2\2\2\u02c4\u1981\3\2"+
		"\2\2\u02c6\u1983\3\2\2\2\u02c8\u199e\3\2\2\2\u02ca\u19a0\3\2\2\2\u02cc"+
		"\u19a6\3\2\2\2\u02ce\u19a9\3\2\2\2\u02d0\u19ac\3\2\2\2\u02d2\u19ae\3\2"+
		"\2\2\u02d4\u19ca\3\2\2\2\u02d6\u19cd\3\2\2\2\u02d8\u19cf\3\2\2\2\u02da"+
		"\u19da\3\2\2\2\u02dc\u19e0\3\2\2\2\u02de\u19e3\3\2\2\2\u02e0\u19ef\3\2"+
		"\2\2\u02e2\u19f5\3\2\2\2\u02e4\u19f8\3\2\2\2\u02e6\u1a0b\3\2\2\2\u02e8"+
		"\u1a11\3\2\2\2\u02ea\u1a13\3\2\2\2\u02ec\u1a18\3\2\2\2\u02ee\u1a1b\3\2"+
		"\2\2\u02f0\u1a1f\3\2\2\2\u02f2\u1a28\3\2\2\2\u02f4\u1a2f\3\2\2\2\u02f6"+
		"\u1a3a\3\2\2\2\u02f8\u1a3e\3\2\2\2\u02fa\u1ac1\3\2\2\2\u02fc\u1ac3\3\2"+
		"\2\2\u02fe\u1ac5\3\2\2\2\u0300\u1ac7\3\2\2\2\u0302\u1ac9\3\2\2\2\u0304"+
		"\u1ace\3\2\2\2\u0306\u1ad0\3\2\2\2\u0308\u1ad4\3\2\2\2\u030a\u1ae0\3\2"+
		"\2\2\u030c\u1af4\3\2\2\2\u030e\u1af6\3\2\2\2\u0310\u1afb\3\2\2\2\u0312"+
		"\u1b03\3\2\2\2\u0314\u1b07\3\2\2\2\u0316\u1b0b\3\2\2\2\u0318\u1b13\3\2"+
		"\2\2\u031a\u1b18\3\2\2\2\u031c\u1b1c\3\2\2\2\u031e\u1b27\3\2\2\2\u0320"+
		"\u1b29\3\2\2\2\u0322\u1b31\3\2\2\2\u0324\u1b43\3\2\2\2\u0326\u1b63\3\2"+
		"\2\2\u0328\u1b67\3\2\2\2\u032a\u1b90\3\2\2\2\u032c\u1bd2\3\2\2\2\u032e"+
		"\u1bd4\3\2\2\2\u0330\u1bd8\3\2\2\2\u0332\u1bdd\3\2\2\2\u0334\u1bdf\3\2"+
		"\2\2\u0336\u1bea\3\2\2\2\u0338\u1bf9\3\2\2\2\u033a\u1bfb\3\2\2\2\u033c"+
		"\u1c03\3\2\2\2\u033e\u1c0b\3\2\2\2\u0340\u1c0f\3\2\2\2\u0342\u1c14\3\2"+
		"\2\2\u0344\u1c16\3\2\2\2\u0346\u1c23\3\2\2\2\u0348\u1c25\3\2\2\2\u034a"+
		"\u1c27\3\2\2\2\u034c\u1c3f\3\2\2\2\u034e\u1c42\3\2\2\2\u0350\u1c48\3\2"+
		"\2\2\u0352\u1c4a\3\2\2\2\u0354\u1c52\3\2\2\2\u0356\u1c69\3\2\2\2\u0358"+
		"\u1c6b\3\2\2\2\u035a\u1c70\3\2\2\2\u035c\u1c76\3\2\2\2\u035e\u1c78\3\2"+
		"\2\2\u0360\u1c82\3\2\2\2\u0362\u1c89\3\2\2\2\u0364\u1c8b\3\2\2\2\u0366"+
		"\u1c9a\3\2\2\2\u0368\u1cb2\3\2\2\2\u036a\u1cbc\3\2\2\2\u036c\u1ccd\3\2"+
		"\2\2\u036e\u1cda\3\2\2\2\u0370\u1cf6\3\2\2\2\u0372\u1d1d\3\2\2\2\u0374"+
		"\u1d26\3\2\2\2\u0376\u1d28\3\2\2\2\u0378\u1d2e\3\2\2\2\u037a\u1d34\3\2"+
		"\2\2\u037c\u1d3c\3\2\2\2\u037e\u1d4e\3\2\2\2\u0380\u1d56\3\2\2\2\u0382"+
		"\u1d58\3\2\2\2\u0384\u1d64\3\2\2\2\u0386\u1d66\3\2\2\2\u0388\u1d6e\3\2"+
		"\2\2\u038a\u1d91\3\2\2\2\u038c\u1da2\3\2\2\2\u038e\u1da4\3\2\2\2\u0390"+
		"\u1daa\3\2\2\2\u0392\u1dac\3\2\2\2\u0394\u1dae\3\2\2\2\u0396\u1dbb\3\2"+
		"\2\2\u0398\u1dbd\3\2\2\2\u039a\u1dc2\3\2\2\2\u039c\u1dd4\3\2\2\2\u039e"+
		"\u1ddb\3\2\2\2\u03a0\u1df7\3\2\2\2\u03a2\u1df9\3\2\2\2\u03a4\u1e02\3\2"+
		"\2\2\u03a6\u1e86\3\2\2\2\u03a8\u1e88\3\2\2\2\u03aa\u1e8e\3\2\2\2\u03ac"+
		"\u1e90\3\2\2\2\u03ae\u1fd5\3\2\2\2\u03b0\u1fd8\3\2\2\2\u03b2\u1fe3\3\2"+
		"\2\2\u03b4\u1fe7\3\2\2\2\u03b6\u1fe9\3\2\2\2\u03b8\u1ff8\3\2\2\2\u03ba"+
		"\u1ffa\3\2\2\2\u03bc\u2005\3\2\2\2\u03be\u200a\3\2\2\2\u03c0\u200c\3\2"+
		"\2\2\u03c2\u2013\3\2\2\2\u03c4\u201e\3\2\2\2\u03c6\u2023\3\2\2\2\u03c8"+
		"\u2025\3\2\2\2\u03ca\u202e\3\2\2\2\u03cc\u2031\3\2\2\2\u03ce\u2033\3\2"+
		"\2\2\u03d0\u2035\3\2\2\2\u03d2\u2037\3\2\2\2\u03d4\u2039\3\2\2\2\u03d6"+
		"\u203e\3\2\2\2\u03d8\u2048\3\2\2\2\u03da\u204e\3\2\2\2\u03dc\u2050\3\2"+
		"\2\2\u03de\u2057\3\2\2\2\u03e0\u2059\3\2\2\2\u03e2\u207a\3\2\2\2\u03e4"+
		"\u207c\3\2\2\2\u03e6\u2080\3\2\2\2\u03e8\u2088\3\2\2\2\u03ea\u208b\3\2"+
		"\2\2\u03ec\u208f\3\2\2\2\u03ee\u2095\3\2\2\2\u03f0\u20a2\3\2\2\2\u03f2"+
		"\u20a4\3\2\2\2\u03f4\u20a9\3\2\2\2\u03f6\u20b0\3\2\2\2\u03f8\u20b9\3\2"+
		"\2\2\u03fa\u20bd\3\2\2\2\u03fc\u20cd\3\2\2\2\u03fe\u20d7\3\2\2\2\u0400"+
		"\u20e1\3\2\2\2\u0402\u2117\3\2\2\2\u0404\u211d\3\2\2\2\u0406\u2120\3\2"+
		"\2\2\u0408\u2128\3\2\2\2\u040a\u212a\3\2\2\2\u040c\u2137\3\2\2\2\u040e"+
		"\u213d\3\2\2\2\u0410\u2140\3\2\2\2\u0412\u214a\3\2\2\2\u0414\u2154\3\2"+
		"\2\2\u0416\u2156\3\2\2\2\u0418\u2158\3\2\2\2\u041a\u2160\3\2\2\2\u041c"+
		"\u2168\3\2\2\2\u041e\u2172\3\2\2\2\u0420\u217a\3\2\2\2\u0422\u2182\3\2"+
		"\2\2\u0424\u218c\3\2\2\2\u0426\u2193\3\2\2\2\u0428\u21c5\3\2\2\2\u042a"+
		"\u21cc\3\2\2\2\u042c\u21ce\3\2\2\2\u042e\u21d2\3\2\2\2\u0430\u21db\3\2"+
		"\2\2\u0432\u21e3\3\2\2\2\u0434\u21e9\3\2\2\2\u0436\u21eb\3\2\2\2\u0438"+
		"\u21ef\3\2\2\2\u043a\u21f2\3\2\2\2\u043c\u2204\3\2\2\2\u043e\u220d\3\2"+
		"\2\2\u0440\u220f\3\2\2\2\u0442\u221c\3\2\2\2\u0444\u2236\3\2\2\2\u0446"+
		"\u223b\3\2\2\2\u0448\u223d\3\2\2\2\u044a\u2245\3\2\2\2\u044c\u224b\3\2"+
		"\2\2\u044e\u2263\3\2\2\2\u0450\u2289\3\2\2\2\u0452\u228b\3\2\2\2\u0454"+
		"\u228f\3\2\2\2\u0456\u2293\3\2\2\2\u0458\u2297\3\2\2\2\u045a\u229b\3\2"+
		"\2\2\u045c\u229f\3\2\2\2\u045e\u22af\3\2\2\2\u0460\u22b1\3\2\2\2\u0462"+
		"\u22d7\3\2\2\2\u0464\u22de\3\2\2\2\u0466\u22e0\3\2\2\2\u0468\u232f\3\2"+
		"\2\2\u046a\u2331\3\2\2\2\u046c\u2341\3\2\2\2\u046e\u2347\3\2\2\2\u0470"+
		"\u2388\3\2\2\2\u0472\u238a\3\2\2\2\u0474\u238f\3\2\2\2\u0476\u2393\3\2"+
		"\2\2\u0478\u2395\3\2\2\2\u047a\u2398\3\2\2\2\u047c\u23a0\3\2\2\2\u047e"+
		"\u23ac\3\2\2\2\u0480\u23ca\3\2\2\2\u0482\u23cc\3\2\2\2\u0484\u23d9\3\2"+
		"\2\2\u0486\u23db\3\2\2\2\u0488\u23ee\3\2\2\2\u048a\u23f3\3\2\2\2\u048c"+
		"\u23fa\3\2\2\2\u048e\u23fc\3\2\2\2\u0490\u2402\3\2\2\2\u0492\u240a\3\2"+
		"\2\2\u0494\u240c\3\2\2\2\u0496\u2410\3\2\2\2\u0498\u2412\3\2\2\2\u049a"+
		"\u2418\3\2\2\2\u049c\u241b\3\2\2\2\u049e\u241d\3\2\2\2\u04a0\u242b\3\2"+
		"\2\2\u04a2\u242d\3\2\2\2\u04a4\u2439\3\2\2\2\u04a6\u243b\3\2\2\2\u04a8"+
		"\u2443\3\2\2\2\u04aa\u244a\3\2\2\2\u04ac\u244c\3\2\2\2\u04ae\u2455\3\2"+
		"\2\2\u04b0\u2457\3\2\2\2\u04b2\u245a\3\2\2\2\u04b4\u24a2\3\2\2\2\u04b6"+
		"\u24a4\3\2\2\2\u04b8\u24a8\3\2\2\2\u04ba\u24b0\3\2\2\2\u04bc\u24c8\3\2"+
		"\2\2\u04be\u24d7\3\2\2\2\u04c0\u24d9\3\2\2\2\u04c2\u24e4\3\2\2\2\u04c4"+
		"\u24e8\3\2\2\2\u04c6\u250a\3\2\2\2\u04c8\u2528\3\2\2\2\u04ca\u2545\3\2"+
		"\2\2\u04cc\u2549\3\2\2\2\u04ce\u255b\3\2\2\2\u04d0\u2562\3\2\2\2\u04d2"+
		"\u2568\3\2\2\2\u04d4\u256e\3\2\2\2\u04d6\u2588\3\2\2\2\u04d8\u258a\3\2"+
		"\2\2\u04da\u258c\3\2\2\2\u04dc\u25c6\3\2\2\2\u04de\u25c8\3\2\2\2\u04e0"+
		"\u25d6\3\2\2\2\u04e2\u25f9\3\2\2\2\u04e4\u25fb\3\2\2\2\u04e6\u2613\3\2"+
		"\2\2\u04e8\u263c\3\2\2\2\u04ea\u28bb\3\2\2\2\u04ec\u28bd\3\2\2\2\u04ee"+
		"\u28c0\3\2\2\2\u04f0\u28cd\3\2\2\2\u04f2\u28d5\3\2\2\2\u04f4\u28d7\3\2"+
		"\2\2\u04f6\u28d9\3\2\2\2\u04f8\u28e8\3\2\2\2\u04fa\u28ea\3\2\2\2\u04fc"+
		"\u28f3\3\2\2\2\u04fe\u28f8\3\2\2\2\u0500\u28fa\3\2\2\2\u0502\u291d\3\2"+
		"\2\2\u0504\u291f\3\2\2\2\u0506\u292f\3\2\2\2\u0508\u2931\3\2\2\2\u050a"+
		"\u2940\3\2\2\2\u050c\u2949\3\2\2\2\u050e\u294b\3\2\2\2\u0510\u2951\3\2"+
		"\2\2\u0512\u2959\3\2\2\2\u0514\u296a\3\2\2\2\u0516\u296f\3\2\2\2\u0518"+
		"\u2979\3\2\2\2\u051a\u297b\3\2\2\2\u051c\u297f\3\2\2\2\u051e\u2982\3\2"+
		"\2\2\u0520\u2986\3\2\2\2\u0522\u298c\3\2\2\2\u0524\u299e\3\2\2\2\u0526"+
		"\u29a0\3\2\2\2\u0528\u29a2\3\2\2\2\u052a\u29a8\3\2\2\2\u052c\u29aa\3\2"+
		"\2\2\u052e\u29b0\3\2\2\2\u0530\u29b6\3\2\2\2\u0532\u29b8\3\2\2\2\u0534"+
		"\u29be\3\2\2\2\u0536\u29ca\3\2\2\2\u0538\u29cc\3\2\2\2\u053a\u29d2\3\2"+
		"\2\2\u053c\u29d6\3\2\2\2\u053e\u29dc\3\2\2\2\u0540\u29e2\3\2\2\2\u0542"+
		"\u29eb\3\2\2\2\u0544\u29ed\3\2\2\2\u0546\u2ab5\3\2\2\2\u0548\u2aba\3\2"+
		"\2\2\u054a\u2ae2\3\2\2\2\u054c\u2ae4\3\2\2\2\u054e\u2ae6\3\2\2\2\u0550"+
		"\u2ae8\3\2\2\2\u0552\u2aea\3\2\2\2\u0554\u2af7\3\2\2\2\u0556\u2af9\3\2"+
		"\2\2\u0558\u2afb\3\2\2\2\u055a\u2b01\3\2\2\2\u055c\u2b05\3\2\2\2\u055e"+
		"\u2b0b\3\2\2\2\u0560\u2b0d\3\2\2\2\u0562\u2b2f\3\2\2\2\u0564\u2b51\3\2"+
		"\2\2\u0566\u2b56\3\2\2\2\u0568\u2b58\3\2\2\2\u056a\u2b63\3\2\2\2\u056c"+
		"\u2b65\3\2\2\2\u056e\u2b67\3\2\2\2\u0570\u2b6a\3\2\2\2\u0572\u2b76\3\2"+
		"\2\2\u0574\u2b8c\3\2\2\2\u0576\u2b8e\3\2\2\2\u0578\u2b96\3\2\2\2\u057a"+
		"\u2b9e\3\2\2\2\u057c\u2ba3\3\2\2\2\u057e\u2bab\3\2\2\2\u0580\u2bad\3\2"+
		"\2\2\u0582\u2bb0\3\2\2\2\u0584\u2bb4\3\2\2\2\u0586\u2bb6\3\2\2\2\u0588"+
		"\u2bca\3\2\2\2\u058a\u2bcc\3\2\2\2\u058c\u2bd0\3\2\2\2\u058e\u2bd4\3\2"+
		"\2\2\u0590\u2bd8\3\2\2\2\u0592\u2bdc\3\2\2\2\u0594\u2be0\3\2\2\2\u0596"+
		"\u2be5\3\2\2\2\u0598\u2bea\3\2\2\2\u059a\u2bec\3\2\2\2\u059c\u2bfc\3\2"+
		"\2\2\u059e\u2bfe\3\2\2\2\u05a0\u2c05\3\2\2\2\u05a2\u2c07\3\2\2\2\u05a4"+
		"\u2c1b\3\2\2\2\u05a6\u2c1d\3\2\2\2\u05a8\u2c1f\3\2\2\2\u05aa\u2c24\3\2"+
		"\2\2\u05ac\u2c27\3\2\2\2\u05ae\u2c2d\3\2\2\2\u05b0\u2c2f\3\2\2\2\u05b2"+
		"\u2c35\3\2\2\2\u05b4\u2c39\3\2\2\2\u05b6\u2c55\3\2\2\2\u05b8\u2c5b\3\2"+
		"\2\2\u05ba\u2c64\3\2\2\2\u05bc\u2c6a\3\2\2\2\u05be\u2c6c\3\2\2\2\u05c0"+
		"\u2c79\3\2\2\2\u05c2\u2c7b\3\2\2\2\u05c4\u2c95\3\2\2\2\u05c6\u2c97\3\2"+
		"\2\2\u05c8\u2c9e\3\2\2\2\u05ca\u2cad\3\2\2\2\u05cc\u2cb6\3\2\2\2\u05ce"+
		"\u2cb8\3\2\2\2\u05d0\u2cde\3\2\2\2\u05d2\u2ce0\3\2\2\2\u05d4\u2ce9\3\2"+
		"\2\2\u05d6\u2ced\3\2\2\2\u05d8\u2cef\3\2\2\2\u05da\u2d05\3\2\2\2\u05dc"+
		"\u2d07\3\2\2\2\u05de\u2d09\3\2\2\2\u05e0\u2d0f\3\2\2\2\u05e2\u2d13\3\2"+
		"\2\2\u05e4\u2d15\3\2\2\2\u05e6\u2d19\3\2\2\2\u05e8\u2d1b\3\2\2\2\u05ea"+
		"\u2d1d\3\2\2\2\u05ec\u2d25\3\2\2\2\u05ee\u2d27\3\2\2\2\u05f0\u2d33\3\2"+
		"\2\2\u05f2\u2d35\3\2\2\2\u05f4\u2d41\3\2\2\2\u05f6\u2d43\3\2\2\2\u05f8"+
		"\u2d47\3\2\2\2\u05fa\u2d51\3\2\2\2\u05fc\u2d5a\3\2\2\2\u05fe\u2d64\3\2"+
		"\2\2\u0600\u2d67\3\2\2\2\u0602\u2d69\3\2\2\2\u0604\u2d71\3\2\2\2\u0606"+
		"\u2d77\3\2\2\2\u0608\u2d79\3\2\2\2\u060a\u2d86\3\2\2\2\u060c\u2da1\3\2"+
		"\2\2\u060e\u2dbb\3\2\2\2\u0610\u2dd4\3\2\2\2\u0612\u2dd6\3\2\2\2\u0614"+
		"\u2dda\3\2\2\2\u0616\u2de8\3\2\2\2\u0618\u2df6\3\2\2\2\u061a\u2dfb\3\2"+
		"\2\2\u061c\u2e08\3\2\2\2\u061e\u2e15\3\2\2\2\u0620\u2e1d\3\2\2\2\u0622"+
		"\u2e1f\3\2\2\2\u0624\u2e23\3\2\2\2\u0626\u2e2b\3\2\2\2\u0628\u2e30\3\2"+
		"\2\2\u062a\u2e3a\3\2\2\2\u062c\u2e40\3\2\2\2\u062e\u2e42\3\2\2\2\u0630"+
		"\u2e45\3\2\2\2\u0632\u2e49\3\2\2\2\u0634\u2e55\3\2\2\2\u0636\u2e5a\3\2"+
		"\2\2\u0638\u2e5c\3\2\2\2\u063a\u2e5e\3\2\2\2\u063c\u2e60\3\2\2\2\u063e"+
		"\u2e62\3\2\2\2\u0640\u2e64\3\2\2\2\u0642\u2e66\3\2\2\2\u0644\u2e68\3\2"+
		"\2\2\u0646\u2e6b\3\2\2\2\u0648\u0649\5\4\3\2\u0649\3\3\2\2\2\u064a\u0655"+
		"\7\2\2\3\u064b\u0655\7\u0490\2\2\u064c\u064d\5\6\4\2\u064d\u064e\7\2\2"+
		"\3\u064e\u0655\3\2\2\2\u064f\u0650\5\6\4\2\u0650\u0652\7\u0490\2\2\u0651"+
		"\u0653\7\2\2\3\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0655\3\2"+
		"\2\2\u0654\u064a\3\2\2\2\u0654\u064b\3\2\2\2\u0654\u064c\3\2\2\2\u0654"+
		"\u064f\3\2\2\2\u0655\5\3\2\2\2\u0656\u06c1\5\u02a6\u0154\2\u0657\u06c1"+
		"\5\u0292\u014a\2\u0658\u06c1\5\u0114\u008b\2\u0659\u06c1\5\u011a\u008e"+
		"\2\u065a\u06c1\5\u011c\u008f\2\u065b\u06c1\5\u011e\u0090\2\u065c\u06c1"+
		"\5\u0120\u0091\2\u065d\u06c1\5\u0112\u008a\2\u065e\u06c1\5\u00e6t\2\u065f"+
		"\u06c1\5\u00f6|\2\u0660\u06c1\5\u00f8}\2\u0661\u06c1\5\u010e\u0088\2\u0662"+
		"\u06c1\5\u00a4S\2\u0663\u06c1\5\u009aN\2\u0664\u06c1\5\u0288\u0145\2\u0665"+
		"\u06c1\5\u028c\u0147\2\u0666\u06c1\5\u03a6\u01d4\2\u0667\u06c1\5\u03a0"+
		"\u01d1\2\u0668\u06c1\5\u03a2\u01d2\2\u0669\u06c1\5\u03a4\u01d3\2\u066a"+
		"\u06c1\5\u03ae\u01d8\2\u066b\u06c1\5\u0472\u023a\2\u066c\u06c1\5\u0478"+
		"\u023d\2\u066d\u06c1\5\u048e\u0248\2\u066e\u06c1\5\u04bc\u025f\2\u066f"+
		"\u06c1\5\u04ea\u0276\2\u0670\u06c1\5\u049a\u024e\2\u0671\u06c1\5\u0494"+
		"\u024b\2\u0672\u06c1\5\u03fa\u01fe\2\u0673\u06c1\5\u0418\u020d\2\u0674"+
		"\u06c1\5\u041c\u020f\2\u0675\u06c1\5\u0422\u0212\2\u0676\u06c1\5\u0488"+
		"\u0245\2\u0677\u06c1\5\u0428\u0215\2\u0678\u06c1\5\u042c\u0217\2\u0679"+
		"\u06c1\5\u0432\u021a\2\u067a\u06c1\5\u0462\u0232\2\u067b\u06c1\5\u0470"+
		"\u0239\2\u067c\u06c1\5\u0450\u0229\2\u067d\u06c1\5\u045c\u022f\2\u067e"+
		"\u06c1\5\u045e\u0230\2\u067f\u06c1\5\u03dc\u01ef\2\u0680\u06c1\5\u03e6"+
		"\u01f4\2\u0681\u06c1\5\u03f2\u01fa\2\u0682\u06c1\5\u03f4\u01fb\2\u0683"+
		"\u06c1\5\u0254\u012b\2\u0684\u06c1\5\u0290\u0149\2\u0685\u06c1\5\u0460"+
		"\u0231\2\u0686\u06c1\5\u0268\u0135\2\u0687\u06c1\5\u0286\u0144\2\u0688"+
		"\u06c1\5\u03da\u01ee\2\u0689\u06c1\5\u022e\u0118\2\u068a\u06c1\5\u0230"+
		"\u0119\2\u068b\u06c1\5\u00c2b\2\u068c\u06c1\5\u00c4c\2\u068d\u06c1\5\u00d0"+
		"i\2\u068e\u06c1\5\u00e0q\2\u068f\u06c1\5\u00e2r\2\u0690\u06c1\5\u00e4"+
		"s\2\u0691\u06c1\5\u00acW\2\u0692\u06c1\5\u00be`\2\u0693\u06c1\5\u00c0"+
		"a\2\u0694\u06c1\5\u05b0\u02d9\2\u0695\u06c1\5\u05b2\u02da\2\u0696\u06c1"+
		"\5\u021c\u010f\2\u0697\u06c1\5\u021e\u0110\2\u0698\u06c1\5\u0220\u0111"+
		"\2\u0699\u06c1\5\u04b6\u025c\2\u069a\u06c1\5\u0498\u024d\2\u069b\u06c1"+
		"\5\u05b4\u02db\2\u069c\u06c1\5\u05be\u02e0\2\u069d\u06c1\5\u05c0\u02e1"+
		"\2\u069e\u06c1\5\u05c2\u02e2\2\u069f\u06c1\5\u0436\u021c\2\u06a0\u06c1"+
		"\5\u0438\u021d\2\u06a1\u06c1\5\u04e2\u0272\2\u06a2\u06c1\5\u04e4\u0273"+
		"\2\u06a3\u06c1\5\u038a\u01c6\2\u06a4\u06c1\5\u00fa~\2\u06a5\u06c1\5\u044c"+
		"\u0227\2\u06a6\u06c1\5\u044e\u0228\2\u06a7\u06c1\5\u0440\u0221\2\u06a8"+
		"\u06c1\5\u044a\u0226\2\u06a9\u06c1\5\u0448\u0225\2\u06aa\u06c1\5\u0452"+
		"\u022a\2\u06ab\u06c1\5\u0454\u022b\2\u06ac\u06c1\5\u0456\u022c\2\u06ad"+
		"\u06c1\5\u0458\u022d\2\u06ae\u06c1\5\u045a\u022e\2\u06af\u06c1\5\u05ce"+
		"\u02e8\2\u06b0\u06c1\5\u05d8\u02ed\2\u06b1\u06c1\5\u05c4\u02e3\2\u06b2"+
		"\u06c1\5\u04e6\u0274\2\u06b3\u06c1\5\u04e8\u0275\2\u06b4\u06c1\5\u05d2"+
		"\u02ea\2\u06b5\u06c1\5\u03b4\u01db\2\u06b6\u06c1\5\b\5\2\u06b7\u06c1\5"+
		"\u05aa\u02d6\2\u06b8\u06c1\5\n\6\2\u06b9\u06c1\5\16\b\2\u06ba\u06c1\5"+
		"\22\n\2\u06bb\u06c1\5\u00d2j\2\u06bc\u06c1\5\u00d6l\2\u06bd\u06c1\5\u00d8"+
		"m\2\u06be\u06c1\5\u0554\u02ab\2\u06bf\u06c1\5\u05ea\u02f6\2\u06c0\u0656"+
		"\3\2\2\2\u06c0\u0657\3\2\2\2\u06c0\u0658\3\2\2\2\u06c0\u0659\3\2\2\2\u06c0"+
		"\u065a\3\2\2\2\u06c0\u065b\3\2\2\2\u06c0\u065c\3\2\2\2\u06c0\u065d\3\2"+
		"\2\2\u06c0\u065e\3\2\2\2\u06c0\u065f\3\2\2\2\u06c0\u0660\3\2\2\2\u06c0"+
		"\u0661\3\2\2\2\u06c0\u0662\3\2\2\2\u06c0\u0663\3\2\2\2\u06c0\u0664\3\2"+
		"\2\2\u06c0\u0665\3\2\2\2\u06c0\u0666\3\2\2\2\u06c0\u0667\3\2\2\2\u06c0"+
		"\u0668\3\2\2\2\u06c0\u0669\3\2\2\2\u06c0\u066a\3\2\2\2\u06c0\u066b\3\2"+
		"\2\2\u06c0\u066c\3\2\2\2\u06c0\u066d\3\2\2\2\u06c0\u066e\3\2\2\2\u06c0"+
		"\u066f\3\2\2\2\u06c0\u0670\3\2\2\2\u06c0\u0671\3\2\2\2\u06c0\u0672\3\2"+
		"\2\2\u06c0\u0673\3\2\2\2\u06c0\u0674\3\2\2\2\u06c0\u0675\3\2\2\2\u06c0"+
		"\u0676\3\2\2\2\u06c0\u0677\3\2\2\2\u06c0\u0678\3\2\2\2\u06c0\u0679\3\2"+
		"\2\2\u06c0\u067a\3\2\2\2\u06c0\u067b\3\2\2\2\u06c0\u067c\3\2\2\2\u06c0"+
		"\u067d\3\2\2\2\u06c0\u067e\3\2\2\2\u06c0\u067f\3\2\2\2\u06c0\u0680\3\2"+
		"\2\2\u06c0\u0681\3\2\2\2\u06c0\u0682\3\2\2\2\u06c0\u0683\3\2\2\2\u06c0"+
		"\u0684\3\2\2\2\u06c0\u0685\3\2\2\2\u06c0\u0686\3\2\2\2\u06c0\u0687\3\2"+
		"\2\2\u06c0\u0688\3\2\2\2\u06c0\u0689\3\2\2\2\u06c0\u068a\3\2\2\2\u06c0"+
		"\u068b\3\2\2\2\u06c0\u068c\3\2\2\2\u06c0\u068d\3\2\2\2\u06c0\u068e\3\2"+
		"\2\2\u06c0\u068f\3\2\2\2\u06c0\u0690\3\2\2\2\u06c0\u0691\3\2\2\2\u06c0"+
		"\u0692\3\2\2\2\u06c0\u0693\3\2\2\2\u06c0\u0694\3\2\2\2\u06c0\u0695\3\2"+
		"\2\2\u06c0\u0696\3\2\2\2\u06c0\u0697\3\2\2\2\u06c0\u0698\3\2\2\2\u06c0"+
		"\u0699\3\2\2\2\u06c0\u069a\3\2\2\2\u06c0\u069b\3\2\2\2\u06c0\u069c\3\2"+
		"\2\2\u06c0\u069d\3\2\2\2\u06c0\u069e\3\2\2\2\u06c0\u069f\3\2\2\2\u06c0"+
		"\u06a0\3\2\2\2\u06c0\u06a1\3\2\2\2\u06c0\u06a2\3\2\2\2\u06c0\u06a3\3\2"+
		"\2\2\u06c0\u06a4\3\2\2\2\u06c0\u06a5\3\2\2\2\u06c0\u06a6\3\2\2\2\u06c0"+
		"\u06a7\3\2\2\2\u06c0\u06a8\3\2\2\2\u06c0\u06a9\3\2\2\2\u06c0\u06aa\3\2"+
		"\2\2\u06c0\u06ab\3\2\2\2\u06c0\u06ac\3\2\2\2\u06c0\u06ad\3\2\2\2\u06c0"+
		"\u06ae\3\2\2\2\u06c0\u06af\3\2\2\2\u06c0\u06b0\3\2\2\2\u06c0\u06b1\3\2"+
		"\2\2\u06c0\u06b2\3\2\2\2\u06c0\u06b3\3\2\2\2\u06c0\u06b4\3\2\2\2\u06c0"+
		"\u06b5\3\2\2\2\u06c0\u06b6\3\2\2\2\u06c0\u06b7\3\2\2\2\u06c0\u06b8\3\2"+
		"\2\2\u06c0\u06b9\3\2\2\2\u06c0\u06ba\3\2\2\2\u06c0\u06bb\3\2\2\2\u06c0"+
		"\u06bc\3\2\2\2\u06c0\u06bd\3\2\2\2\u06c0\u06be\3\2\2\2\u06c0\u06bf\3\2"+
		"\2\2\u06c1\7\3\2\2\2\u06c2\u06c3\7\u01aa\2\2\u06c3\u06c4\5:\36\2\u06c4"+
		"\t\3\2\2\2\u06c5\u06c6\7W\2\2\u06c6\u06c7\7\u0323\2\2\u06c7\u06c8\5\f"+
		"\7\2\u06c8\13\3\2\2\2\u06c9\u06ca\7\u0408\2\2\u06ca\u06cc\7\u041f\2\2"+
		"\u06cb\u06cd\5\u053c\u029f\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd"+
		"\u06db\3\2\2\2\u06ce\u06cf\7\u03d0\2\2\u06cf\u06d0\7\u0140\2\2\u06d0\u06d2"+
		"\7\u0108\2\2\u06d1\u06d3\5\u053c\u029f\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3"+
		"\3\2\2\2\u06d3\u06db\3\2\2\2\u06d4\u06d5\7\u03d0\2\2\u06d5\u06d6\7\u0140"+
		"\2\2\u06d6\u06d8\7\u041f\2\2\u06d7\u06d9\5\u053c\u029f\2\u06d8\u06d7\3"+
		"\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3\2\2\2\u06da\u06c9\3\2\2\2\u06da"+
		"\u06ce\3\2\2\2\u06da\u06d4\3\2\2\2\u06db\r\3\2\2\2\u06dc\u06dd\7W\2\2"+
		"\u06dd\u06de\7\u0323\2\2\u06de\u06df\7\u0253\2\2\u06df\u06e1\7\u041f\2"+
		"\2\u06e0\u06e2\5\u053c\u029f\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2"+
		"\u06e2\u06e4\3\2\2\2\u06e3\u06e5\5\20\t\2\u06e4\u06e3\3\2\2\2\u06e4\u06e5"+
		"\3\2\2\2\u06e5\17\3\2\2\2\u06e6\u06e7\7\u02f3\2\2\u06e7\u06e8\7\u029a"+
		"\2\2\u06e8\u06e9\7\u0493\2\2\u06e9\u06f2\7\u04a3\2\2\u06ea\u06eb\7\u02f3"+
		"\2\2\u06eb\u06ec\7\u015d\2\2\u06ec\u06ed\7\u0493\2\2\u06ed\u06f2\7\u0179"+
		"\2\2\u06ee\u06ef\7\u02f3\2\2\u06ef\u06f2\7\u00e2\2\2\u06f0\u06f2\7\u031d"+
		"\2\2\u06f1\u06e6\3\2\2\2\u06f1\u06ea\3\2\2\2\u06f1\u06ee\3\2\2\2\u06f1"+
		"\u06f0\3\2\2\2\u06f2\21\3\2\2\2\u06f3\u06f4\7W\2\2\u06f4\u06f5\7\u0323"+
		"\2\2\u06f5\u06f7\5\24\13\2\u06f6\u06f8\5\u053c\u029f\2\u06f7\u06f6\3\2"+
		"\2\2\u06f7\u06f8\3\2\2\2\u06f8\u070b\3\2\2\2\u06f9\u06fa\7W\2\2\u06fa"+
		"\u06fb\7\u0323\2\2\u06fb\u06fc\7\u031d\2\2\u06fc\u06fd\7\u035e\2\2\u06fd"+
		"\u06fe\7\u0106\2\2\u06fe\u0700\5\30\r\2\u06ff\u0701\5\u053c\u029f\2\u0700"+
		"\u06ff\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u070b\3\2\2\2\u0702\u0703\7W"+
		"\2\2\u0703\u0704\7\u0323\2\2\u0704\u0705\7\u031d\2\2\u0705\u0706\7\u030e"+
		"\2\2\u0706\u0708\7\u0451\2\2\u0707\u0709\5\u053c\u029f\2\u0708\u0707\3"+
		"\2\2\2\u0708\u0709\3\2\2\2\u0709\u070b\3\2\2\2\u070a\u06f3\3\2\2\2\u070a"+
		"\u06f9\3\2\2\2\u070a\u0702\3\2\2\2\u070b\23\3\2\2\2\u070c\u070d\7\u035e"+
		"\2\2\u070d\u070e\7\u0106\2\2\u070e\u070f\5\26\f\2\u070f\u0710\7\u0140"+
		"\2\2\u0710\u0711\7w\2\2\u0711\u0712\7\u0179\2\2\u0712\25\3\2\2\2\u0713"+
		"\u0714\7\u024c\2\2\u0714\u0715\5\u01a4\u00d3\2\u0715\u0716\7\u0179\2\2"+
		"\u0716\u0717\7\u0481\2\2\u0717\u0718\7S\2\2\u0718\u0719\5\u01a4\u00d3"+
		"\2\u0719\u071a\7\u0179\2\2\u071a\27\3\2\2\2\u071b\u071e\5\26\f\2\u071c"+
		"\u071e\7[\2\2\u071d\u071b\3\2\2\2\u071d\u071c\3\2\2\2\u071e\31\3\2\2\2"+
		"\u071f\u0724\5:\36\2\u0720\u0721\7\u0481\2\2\u0721\u0723\5:\36\2\u0722"+
		"\u0720\3\2\2\2\u0723\u0726\3\2\2\2\u0724\u0722\3\2\2\2\u0724\u0725\3\2"+
		"\2\2\u0725\33\3\2\2\2\u0726\u0724\3\2\2\2\u0727\u072c\5\36\20\2\u0728"+
		"\u0729\7\u0481\2\2\u0729\u072b\5\36\20\2\u072a\u0728\3\2\2\2\u072b\u072e"+
		"\3\2\2\2\u072c\u072a\3\2\2\2\u072c\u072d\3\2\2\2\u072d\35\3\2\2\2\u072e"+
		"\u072c\3\2\2\2\u072f\u0739\5:\36\2\u0730\u0732\5:\36\2\u0731\u0733\7^"+
		"\2\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0736\3\2\2\2\u0734"+
		"\u0737\5\u05e6\u02f4\2\u0735\u0737\7\u04a3\2\2\u0736\u0734\3\2\2\2\u0736"+
		"\u0735\3\2\2\2\u0737\u0739\3\2\2\2\u0738\u072f\3\2\2\2\u0738\u0730\3\2"+
		"\2\2\u0739\37\3\2\2\2\u073a\u074e\5\u05e0\u02f1\2\u073b\u073d\7\u048c"+
		"\2\2\u073c\u073b\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u0742\3\2\2\2\u073e"+
		"\u073f\5\u05e2\u02f2\2\u073f\u0740\7\u048c\2\2\u0740\u0742\3\2\2\2\u0741"+
		"\u073c\3\2\2\2\u0741\u073e\3\2\2\2\u0742\u0745\3\2\2\2\u0743\u0746\5\u05e2"+
		"\u02f2\2\u0744\u0746\5\u0640\u0321\2\u0745\u0743\3\2\2\2\u0745\u0744\3"+
		"\2\2\2\u0746\u0747\3\2\2\2\u0747\u074b\7\u048c\2\2\u0748\u074c\5\u05e0"+
		"\u02f1\2\u0749\u074c\5\u0640\u0321\2\u074a\u074c\7\u0485\2\2\u074b\u0748"+
		"\3\2\2\2\u074b\u0749\3\2\2\2\u074b\u074a\3\2\2\2\u074c\u074e\3\2\2\2\u074d"+
		"\u073a\3\2\2\2\u074d\u0741\3\2\2\2\u074e!\3\2\2\2\u074f\u0751\5$\23\2"+
		"\u0750\u074f\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u075a"+
		"\7\u04a3\2\2\u0753\u0754\5$\23\2\u0754\u0755\7\u047d\2\2\u0755\u075a\3"+
		"\2\2\2\u0756\u0757\7\u04a3\2\2\u0757\u075a\5\64\33\2\u0758\u075a\7\u0222"+
		"\2\2\u0759\u0750\3\2\2\2\u0759\u0753\3\2\2\2\u0759\u0756\3\2\2\2\u0759"+
		"\u0758\3\2\2\2\u075a#\3\2\2\2\u075b\u075c\t\2\2\2\u075c%\3\2\2\2\u075d"+
		"\u0768\5\"\22\2\u075e\u0768\7\u047f\2\2\u075f\u0768\7\u01cf\2\2\u0760"+
		"\u0768\7\u0179\2\2\u0761\u0768\7\u047e\2\2\u0762\u0768\7\u01e1\2\2\u0763"+
		"\u0768\7\u0473\2\2\u0764\u0768\7\u0476\2\2\u0765\u0768\7\u0178\2\2\u0766"+
		"\u0768\7\u047d\2\2\u0767\u075d\3\2\2\2\u0767\u075e\3\2\2\2\u0767\u075f"+
		"\3\2\2\2\u0767\u0760\3\2\2\2\u0767\u0761\3\2\2\2\u0767\u0762\3\2\2\2\u0767"+
		"\u0763\3\2\2\2\u0767\u0764\3\2\2\2\u0767\u0765\3\2\2\2\u0767\u0766\3\2"+
		"\2\2\u0768\'\3\2\2\2\u0769\u076a\t\3\2\2\u076a)\3\2\2\2\u076b\u0773\5"+
		"&\24\2\u076c\u0773\7\u04a0\2\2\u076d\u0773\7\u049f\2\2\u076e\u076f\5."+
		"\30\2\u076f\u0770\7\u048c\2\2\u0770\u0771\5\u05e0\u02f1\2\u0771\u0773"+
		"\3\2\2\2\u0772\u076b\3\2\2\2\u0772\u076c\3\2\2\2\u0772\u076d\3\2\2\2\u0772"+
		"\u076e\3\2\2\2\u0773+\3\2\2\2\u0774\u0788\7\u04a3\2\2\u0775\u0788\7\u047f"+
		"\2\2\u0776\u0788\7\u01cf\2\2\u0777\u0779\7\u0488\2\2\u0778\u0777\3\2\2"+
		"\2\u0778\u0779\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u0788\7\u0179\2\2\u077b"+
		"\u0788\7\u01e1\2\2\u077c\u077e\7\u0488\2\2\u077d\u077c\3\2\2\2\u077d\u077e"+
		"\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0788\7\u0473\2\2\u0780\u0788\7\u0476"+
		"\2\2\u0781\u0788\7\u0178\2\2\u0782\u0788\7\u04a0\2\2\u0783\u0784\5.\30"+
		"\2\u0784\u0785\7\u048c\2\2\u0785\u0786\5\u05e0\u02f1\2\u0786\u0788\3\2"+
		"\2\2\u0787\u0774\3\2\2\2\u0787\u0775\3\2\2\2\u0787\u0776\3\2\2\2\u0787"+
		"\u0778\3\2\2\2\u0787\u077b\3\2\2\2\u0787\u077d\3\2\2\2\u0787\u0780\3\2"+
		"\2\2\u0787\u0781\3\2\2\2\u0787\u0782\3\2\2\2\u0787\u0783\3\2\2\2\u0788"+
		"-\3\2\2\2\u0789\u078a\t\4\2\2\u078a/\3\2\2\2\u078b\u078c\b\31\1\2\u078c"+
		"\u078d\5\62\32\2\u078d\u07a8\3\2\2\2\u078e\u078f\f\7\2\2\u078f\u0790\t"+
		"\5\2\2\u0790\u07a7\5\62\32\2\u0791\u0792\f\6\2\2\u0792\u0794\7\u00cb\2"+
		"\2\u0793\u0795\5<\37\2\u0794\u0793\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0796"+
		"\3\2\2\2\u0796\u07a7\7\u0178\2\2\u0797\u0798\f\5\2\2\u0798\u0799\t\6\2"+
		"\2\u0799\u079a\t\7\2\2\u079a\u07a7\5\u02a8\u0155\2\u079b\u079c\f\4\2\2"+
		"\u079c\u079d\t\b\2\2\u079d\u079e\t\7\2\2\u079e\u079f\7\u0487\2\2\u079f"+
		"\u07a0\5\u02aa\u0156\2\u07a0\u07a1\7\u048e\2\2\u07a1\u07a7\3\2\2\2\u07a2"+
		"\u07a3\f\3\2\2\u07a3\u07a4\t\b\2\2\u07a4\u07a5\t\7\2\2\u07a5\u07a7\5>"+
		" \2\u07a6\u078e\3\2\2\2\u07a6\u0791\3\2\2\2\u07a6\u0797\3\2\2\2\u07a6"+
		"\u079b\3\2\2\2\u07a6\u07a2\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3\2"+
		"\2\2\u07a8\u07a9\3\2\2\2\u07a9\61\3\2\2\2\u07aa\u07a8\3\2\2\2\u07ab\u07ad"+
		"\5\66\34\2\u07ac\u07ae\5<\37\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae\3\2\2\2"+
		"\u07ae\u07af\3\2\2\2\u07af\u07b0\7\u00b7\2\2\u07b0\u07b1\5@!\2\u07b1\u07de"+
		"\3\2\2\2\u07b2\u07b4\5\66\34\2\u07b3\u07b5\5<\37\2\u07b4\u07b3\3\2\2\2"+
		"\u07b4\u07b5\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b7\7a\2\2\u07b7\u07b8"+
		"\5\66\34\2\u07b8\u07b9\7Y\2\2\u07b9\u07ba\5\62\32\2\u07ba\u07de\3\2\2"+
		"\2\u07bb\u07bd\5\66\34\2\u07bc\u07be\5<\37\2\u07bd\u07bc\3\2\2\2\u07bd"+
		"\u07be\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c2\7\u00d7\2\2\u07c0\u07c3"+
		"\58\35\2\u07c1\u07c3\5\64\33\2\u07c2\u07c0\3\2\2\2\u07c2\u07c1\3\2\2\2"+
		"\u07c3\u07ca\3\2\2\2\u07c4\u07c5\7\u0402\2\2\u07c5\u07c7\58\35\2\u07c6"+
		"\u07c4\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07cb\3\2\2\2\u07c8\u07c9\7\u0402"+
		"\2\2\u07c9\u07cb\5\64\33\2\u07ca\u07c6\3\2\2\2\u07ca\u07c8\3\2\2\2\u07cb"+
		"\u07de\3\2\2\2\u07cc\u07ce\5\66\34\2\u07cd\u07cf\5<\37\2\u07ce\u07cd\3"+
		"\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d3\7\u0111\2\2"+
		"\u07d1\u07d4\5\64\33\2\u07d2\u07d4\5\66\34\2\u07d3\u07d1\3\2\2\2\u07d3"+
		"\u07d2\3\2\2\2\u07d4\u07de\3\2\2\2\u07d5\u07d6\5\66\34\2\u07d6\u07d7\7"+
		"\u0236\2\2\u07d7\u07d8\7\u023c\2\2\u07d8\u07d9\7\u0487\2\2\u07d9\u07da"+
		"\58\35\2\u07da\u07db\7\u048e\2\2\u07db\u07de\3\2\2\2\u07dc\u07de\5\66"+
		"\34\2\u07dd\u07ab\3\2\2\2\u07dd\u07b2\3\2\2\2\u07dd\u07bb\3\2\2\2\u07dd"+
		"\u07cc\3\2\2\2\u07dd\u07d5\3\2\2\2\u07dd\u07dc\3\2\2\2\u07de\63\3\2\2"+
		"\2\u07df\u07e1\7\u04a3\2\2\u07e0\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2"+
		"\u07e0\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\65\3\2\2\2\u07e4\u07e5\b\34\1"+
		"\2\u07e5\u07e6\7\u00c5\2\2\u07e6\u07e7\5:\36\2\u07e7\u07e8\5\u05e8\u02f5"+
		"\2\u07e8\u07e9\7\u0482\2\2\u07e9\u07ea\5\66\34\6\u07ea\u07ed\3\2\2\2\u07eb"+
		"\u07ed\58\35\2\u07ec\u07e4\3\2\2\2\u07ec\u07eb\3\2\2\2\u07ed\u07f9\3\2"+
		"\2\2\u07ee\u07ef\f\4\2\2\u07ef\u07f0\t\t\2\2\u07f0\u07f8\5\66\34\5\u07f1"+
		"\u07f2\f\3\2\2\u07f2\u07f3\t\n\2\2\u07f3\u07f4\7\u00c5\2\2\u07f4\u07f5"+
		"\5:\36\2\u07f5\u07f6\5\u05e8\u02f5\2\u07f6\u07f8\3\2\2\2\u07f7\u07ee\3"+
		"\2\2\2\u07f7\u07f1\3\2\2\2\u07f8\u07fb\3\2\2\2\u07f9\u07f7\3\2\2\2\u07f9"+
		"\u07fa\3\2\2\2\u07fa\67\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fc\u07fd\b\35\1"+
		"\2\u07fd\u0846\5 \21\2\u07fe\u0846\5*\26\2\u07ff\u0800\t\13\2\2\u0800"+
		"\u0846\58\35\17\u0801\u0803\7\u0396\2\2\u0802\u0801\3\2\2\2\u0802\u0803"+
		"\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\7\u0487\2\2\u0805\u0806\5\32"+
		"\16\2\u0806\u0807\7\u048e\2\2\u0807\u0846\3\2\2\2\u0808\u080a\7\u009e"+
		"\2\2\u0809\u0808\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080b\3\2\2\2\u080b"+
		"\u0846\5\u02a8\u0155\2\u080c\u080d\7\u00e9\2\2\u080d\u080e\7\u0487\2\2"+
		"\u080e\u080f\5\u029e\u0150\2\u080f\u0810\7\u048e\2\2\u0810\u0811\7V\2"+
		"\2\u0811\u0812\7\u0487\2\2\u0812\u0822\7\u04a3\2\2\u0813\u0814\7\u00b7"+
		"\2\2\u0814\u0815\7\u00f5\2\2\u0815\u0816\7\u00d2\2\2\u0816\u081a\7\u00f3"+
		"\2\2\u0817\u0818\7\u015f\2\2\u0818\u0819\7\u030f\2\2\u0819\u081b\7\u02e2"+
		"\2\2\u081a\u0817\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u0823\3\2\2\2\u081c"+
		"\u081d\7\u00b7\2\2\u081d\u081e\7\u03f0\2\2\u081e\u0823\7\u00f3\2\2\u081f"+
		"\u0820\7\u015f\2\2\u0820\u0821\7\u030f\2\2\u0821\u0823\7\u02e2\2\2\u0822"+
		"\u0813\3\2\2\2\u0822\u081c\3\2\2\2\u0822\u081f\3\2\2\2\u0822\u0823\3\2"+
		"\2\2\u0823\u0824\3\2\2\2\u0824\u0825\7\u048e\2\2\u0825\u0846\3\2\2\2\u0826"+
		"\u0846\5B\"\2\u0827\u0846\5f\64\2\u0828\u0846\5D#\2\u0829\u082a\7\u047a"+
		"\2\2\u082a\u082b\5\u05e2\u02f2\2\u082b\u082c\5:\36\2\u082c\u082d\7\u047b"+
		"\2\2\u082d\u0846\3\2\2\2\u082e\u0846\7\u04a1\2\2\u082f\u0830\5\u0140\u00a1"+
		"\2\u0830\u0831\t\f\2\2\u0831\u0832\5\"\22\2\u0832\u0846\3\2\2\2\u0833"+
		"\u0834\5\u05e2\u02f2\2\u0834\u0835\7\u048c\2\2\u0835\u0838\5\u05e2\u02f2"+
		"\2\u0836\u0837\7\u048c\2\2\u0837\u0839\5\u05e2\u02f2\2\u0838\u0836\3\2"+
		"\2\2\u0838\u0839\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083b\7\u04a1\2\2\u083b"+
		"\u0846\3\2\2\2\u083c\u083d\7\30\2\2\u083d\u083e\7\u0487\2\2\u083e\u083f"+
		"\5\32\16\2\u083f\u0840\7\u048e\2\2\u0840\u0846\3\2\2\2\u0841\u0842\7P"+
		"\2\2\u0842\u0843\5\32\16\2\u0843\u0844\7Q\2\2\u0844\u0846\3\2\2\2\u0845"+
		"\u07fc\3\2\2\2\u0845\u07fe\3\2\2\2\u0845\u07ff\3\2\2\2\u0845\u0802\3\2"+
		"\2\2\u0845\u0809\3\2\2\2\u0845\u080c\3\2\2\2\u0845\u0826\3\2\2\2\u0845"+
		"\u0827\3\2\2\2\u0845\u0828\3\2\2\2\u0845\u0829\3\2\2\2\u0845\u082e\3\2"+
		"\2\2\u0845\u082f\3\2\2\2\u0845\u0833\3\2\2\2\u0845\u083c\3\2\2\2\u0845"+
		"\u0841\3\2\2\2\u0846\u084e\3\2\2\2\u0847\u0848\f\20\2\2\u0848\u0849\7"+
		"\u0491\2\2\u0849\u084d\58\35\21\u084a\u084b\f\23\2\2\u084b\u084d\5\u0180"+
		"\u00c1\2\u084c\u0847\3\2\2\2\u084c\u084a\3\2\2\2\u084d\u0850\3\2\2\2\u084e"+
		"\u084c\3\2\2\2\u084e\u084f\3\2\2\2\u084f9\3\2\2\2\u0850\u084e\3\2\2\2"+
		"\u0851\u0855\b\36\1\2\u0852\u0856\7\u0177\2\2\u0853\u0854\7\u04a1\2\2"+
		"\u0854\u0856\7\u0494\2\2\u0855\u0852\3\2\2\2\u0855\u0853\3\2\2\2\u0856"+
		"\u0857\3\2\2\2\u0857\u0865\5:\36\6\u0858\u0859\7\u0487\2\2\u0859\u085a"+
		"\5:\36\2\u085a\u085b\7\u048e\2\2\u085b\u0865\3\2\2\2\u085c\u0862\5\60"+
		"\31\2\u085d\u085f\7\u00cb\2\2\u085e\u0860\5<\37\2\u085f\u085e\3\2\2\2"+
		"\u085f\u0860\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0863\t\r\2\2\u0862\u085d"+
		"\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0865\3\2\2\2\u0864\u0851\3\2\2\2\u0864"+
		"\u0858\3\2\2\2\u0864\u085c\3\2\2\2\u0865\u086b\3\2\2\2\u0866\u0867\f\3"+
		"\2\2\u0867\u0868\t\16\2\2\u0868\u086a\5:\36\4\u0869\u0866\3\2\2\2\u086a"+
		"\u086d\3\2\2\2\u086b\u0869\3\2\2\2\u086b\u086c\3\2\2\2\u086c;\3\2\2\2"+
		"\u086d\u086b\3\2\2\2\u086e\u086f\7\u0177\2\2\u086f=\3\2\2\2\u0870\u0876"+
		"\5\u02a8\u0155\2\u0871\u0872\7\u0487\2\2\u0872\u0873\5\32\16\2\u0873\u0874"+
		"\7\u048e\2\2\u0874\u0876\3\2\2\2\u0875\u0870\3\2\2\2\u0875\u0871\3\2\2"+
		"\2\u0876?\3\2\2\2\u0877\u087d\5\u02a8\u0155\2\u0878\u0879\7\u0487\2\2"+
		"\u0879\u087a\5\32\16\2\u087a\u087b\7\u048e\2\2\u087b\u087d\3\2\2\2\u087c"+
		"\u0877\3\2\2\2\u087c\u0878\3\2\2\2\u087dA\3\2\2\2\u087e\u0880\7j\2\2\u087f"+
		"\u0881\5:\36\2\u0880\u087f\3\2\2\2\u0880\u0881\3\2\2\2\u0881\u0882\3\2"+
		"\2\2\u0882\u0884\5`\61\2\u0883\u0885\5d\63\2\u0884\u0883\3\2\2\2\u0884"+
		"\u0885\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0887\7\u0336\2\2\u0887C\3\2"+
		"\2\2\u0888\u0889\7\u02b8\2\2\u0889\u088b\7\u0487\2\2\u088a\u088c\7[\2"+
		"\2\u088b\u088a\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088f\3\2\2\2\u088d\u0890"+
		"\7\u0485\2\2\u088e\u0890\5:\36\2\u088f\u088d\3\2\2\2\u088f\u088e\3\2\2"+
		"\2\u0890\u0891\3\2\2\2\u0891\u0892\7\u048e\2\2\u0892\u0893\7\u0348\2\2"+
		"\u0893\u0902\5L\'\2\u0894\u0895\7\u02b8\2\2\u0895\u0896\7\u0487\2\2\u0896"+
		"\u0897\7\u0094\2\2\u0897\u0898\5\32\16\2\u0898\u0899\7\u048e\2\2\u0899"+
		"\u089a\7\u0348\2\2\u089a\u089b\5L\'\2\u089b\u0902\3\2\2\2\u089c\u089d"+
		"\t\17\2\2\u089d\u089e\7\u0487\2\2\u089e\u089f\5\32\16\2\u089f\u08a0\7"+
		"\u048e\2\2\u08a0\u08a1\7\u0348\2\2\u08a1\u08a2\5L\'\2\u08a2\u0902\3\2"+
		"\2\2\u08a3\u08a4\t\20\2\2\u08a4\u08a6\7\u0487\2\2\u08a5\u08a7\t\21\2\2"+
		"\u08a6\u08a5\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9"+
		"\5:\36\2\u08a9\u08aa\7\u048e\2\2\u08aa\u08ab\7\u0348\2\2\u08ab\u08ac\5"+
		"L\'\2\u08ac\u0902\3\2\2\2\u08ad\u08ae\7\u03be\2\2\u08ae\u08af\7\u0487"+
		"\2\2\u08af\u08b0\5:\36\2\u08b0\u08b1\7\u0481\2\2\u08b1\u08b2\5:\36\2\u08b2"+
		"\u08b3\7\u048e\2\2\u08b3\u08b4\7\u0348\2\2\u08b4\u08b5\5L\'\2\u08b5\u0902"+
		"\3\2\2\2\u08b6\u08b7\t\22\2\2\u08b7\u08b9\7\u0487\2\2\u08b8\u08ba\7[\2"+
		"\2\u08b9\u08b8\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bc"+
		"\5:\36\2\u08bc\u08bd\7\u048e\2\2\u08bd\u08be\7\u0348\2\2\u08be\u08bf\5"+
		"L\'\2\u08bf\u0902\3\2\2\2\u08c0\u08c1\t\23\2\2\u08c1\u08c3\7\u0487\2\2"+
		"\u08c2\u08c4\t\24\2\2\u08c3\u08c2\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c5"+
		"\3\2\2\2\u08c5\u08c7\5\32\16\2\u08c6\u08c8\5\u0314\u018b\2\u08c7\u08c6"+
		"\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8\u08cb\3\2\2\2\u08c9\u08ca\7\u0120\2"+
		"\2\u08ca\u08cc\7\u04a3\2\2\u08cb\u08c9\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc"+
		"\u08cd\3\2\2\2\u08cd\u08ce\7\u048e\2\2\u08ce\u08cf\7\u0348\2\2\u08cf\u08d0"+
		"\5L\'\2\u08d0\u0902\3\2\2\2\u08d1\u08d2\t\25\2\2\u08d2\u08d3\7\u0487\2"+
		"\2\u08d3\u08d4\7\u048e\2\2\u08d4\u08d5\7\u0348\2\2\u08d5\u0902\5L\'\2"+
		"\u08d6\u08d7\t\26\2\2\u08d7\u08d8\5J&\2\u08d8\u08d9\7\u0348\2\2\u08d9"+
		"\u08da\5L\'\2\u08da\u0902\3\2\2\2\u08db\u08dc\7\u0193\2\2\u08dc\u08dd"+
		"\7\u0487\2\2\u08dd\u08de\5:\36\2\u08de\u08df\7\u0481\2\2\u08df\u08e0\5"+
		":\36\2\u08e0\u08e3\7\u048e\2\2\u08e1\u08e2\7\u00a9\2\2\u08e2\u08e4\5F"+
		"$\2\u08e3\u08e1\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e8\3\2\2\2\u08e5"+
		"\u08e6\5H%\2\u08e6\u08e7\7\u046d\2\2\u08e7\u08e9\3\2\2\2\u08e8\u08e5\3"+
		"\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08eb\7\u0348\2\2"+
		"\u08eb\u08ec\5L\'\2\u08ec\u0902\3\2\2\2\u08ed\u08ee\7\u0445\2\2\u08ee"+
		"\u08ef\7\u0487\2\2\u08ef\u08f0\5\66\34\2\u08f0\u08f1\7\u0481\2\2\u08f1"+
		"\u08f2\5\66\34\2\u08f2\u08f3\7\u0481\2\2\u08f3\u08f4\5\66\34\2\u08f4\u08f5"+
		"\7\u048e\2\2\u08f5\u08f6\7\u0348\2\2\u08f6\u08f7\5L\'\2\u08f7\u0902\3"+
		"\2\2\2\u08f8\u08f9\7\u02b2\2\2\u08f9\u08fa\7\u0487\2\2\u08fa\u08fb\5\66"+
		"\34\2\u08fb\u08fc\7\u0481\2\2\u08fc\u08fd\5\66\34\2\u08fd\u08fe\7\u048e"+
		"\2\2\u08fe\u08ff\7\u0348\2\2\u08ff\u0900\5L\'\2\u0900\u0902\3\2\2\2\u0901"+
		"\u0888\3\2\2\2\u0901\u0894\3\2\2\2\u0901\u089c\3\2\2\2\u0901\u08a3\3\2"+
		"\2\2\u0901\u08ad\3\2\2\2\u0901\u08b6\3\2\2\2\u0901\u08c0\3\2\2\2\u0901"+
		"\u08d1\3\2\2\2\u0901\u08d6\3\2\2\2\u0901\u08db\3\2\2\2\u0901\u08ed\3\2"+
		"\2\2\u0901\u08f8\3\2\2\2\u0902E\3\2\2\2\u0903\u0904\t\27\2\2\u0904G\3"+
		"\2\2\2\u0905\u0906\t\30\2\2\u0906I\3\2\2\2\u0907\u0908\7\u0487\2\2\u0908"+
		"\u0909\5:\36\2\u0909\u090a\5H%\2\u090a\u090b\7\u046d\2\2\u090b\u090c\7"+
		"\u048e\2\2\u090c\u0916\3\2\2\2\u090d\u090e\7\u0487\2\2\u090e\u090f\5:"+
		"\36\2\u090f\u0913\7\u048e\2\2\u0910\u0911\5H%\2\u0911\u0912\7\u046d\2"+
		"\2\u0912\u0914\3\2\2\2\u0913\u0910\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0916"+
		"\3\2\2\2\u0915\u0907\3\2\2\2\u0915\u090d\3\2\2\2\u0916K\3\2\2\2\u0917"+
		"\u091a\7\u04a2\2\2\u0918\u091a\5N(\2\u0919\u0917\3\2\2\2\u0919\u0918\3"+
		"\2\2\2\u091aM\3\2\2\2\u091b\u091d\7\u0487\2\2\u091c\u091e\7\u04a2\2\2"+
		"\u091d\u091c\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u091f\3\2\2\2\u091f\u0920"+
		"\5T+\2\u0920\u0921\7\u048e\2\2\u0921O\3\2\2\2\u0922\u0927\5R*\2\u0923"+
		"\u0924\7\u0481\2\2\u0924\u0926\5R*\2\u0925\u0923\3\2\2\2\u0926\u0929\3"+
		"\2\2\2\u0927\u0925\3\2\2\2\u0927\u0928\3\2\2\2\u0928Q\3\2\2\2\u0929\u0927"+
		"\3\2\2\2\u092a\u092b\7\u04a2\2\2\u092b\u092c\7^\2\2\u092c\u092d\5N(\2"+
		"\u092dS\3\2\2\2\u092e\u092f\7\u0106\2\2\u092f\u0930\7g\2\2\u0930\u0932"+
		"\5\32\16\2\u0931\u092e\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0934\3\2\2\2"+
		"\u0933\u0935\5\u0314\u018b\2\u0934\u0933\3\2\2\2\u0934\u0935\3\2\2\2\u0935"+
		"\u0937\3\2\2\2\u0936\u0938\5^\60\2\u0937\u0936\3\2\2\2\u0937\u0938\3\2"+
		"\2\2\u0938U\3\2\2\2\u0939\u093a\t\31\2\2\u093aW\3\2\2\2\u093b\u093c\t"+
		"\32\2\2\u093cY\3\2\2\2\u093d\u0943\5:\36\2\u093e\u093f\7\u00c5\2\2\u093f"+
		"\u0940\5:\36\2\u0940\u0941\5\u05e8\u02f5\2\u0941\u0943\3\2\2\2\u0942\u093d"+
		"\3\2\2\2\u0942\u093e\3\2\2\2\u0943[\3\2\2\2\u0944\u0945\7\u0332\2\2\u0945"+
		"\u094a\7\u0396\2\2\u0946\u0947\5Z.\2\u0947\u0948\5X-\2\u0948\u094a\3\2"+
		"\2\2\u0949\u0944\3\2\2\2\u0949\u0946\3\2\2\2\u094a]\3\2\2\2\u094b\u094c"+
		"\5V,\2\u094c\u094d\7a\2\2\u094d\u094e\5\\/\2\u094e\u094f\7Y\2\2\u094f"+
		"\u0950\5\\/\2\u0950\u0955\3\2\2\2\u0951\u0952\5V,\2\u0952\u0953\5\\/\2"+
		"\u0953\u0955\3\2\2\2\u0954\u094b\3\2\2\2\u0954\u0951\3\2\2\2\u0955_\3"+
		"\2\2\2\u0956\u0958\5b\62\2\u0957\u0956\3\2\2\2\u0958\u0959\3\2\2\2\u0959"+
		"\u0957\3\2\2\2\u0959\u095a\3\2\2\2\u095aa\3\2\2\2\u095b\u095c\7\u015a"+
		"\2\2\u095c\u095d\5:\36\2\u095d\u095e\7\u013f\2\2\u095e\u095f\5:\36\2\u095f"+
		"c\3\2\2\2\u0960\u0961\7\u009b\2\2\u0961\u0962\5:\36\2\u0962e\3\2\2\2\u0963"+
		"\u0964\7\u02b8\2\2\u0964\u0966\7\u0487\2\2\u0965\u0967\7[\2\2\u0966\u0965"+
		"\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u096a\3\2\2\2\u0968\u096b\7\u0485\2"+
		"\2\u0969\u096b\5:\36\2\u096a\u0968\3\2\2\2\u096a\u0969\3\2\2\2\u096b\u096c"+
		"\3\2\2\2\u096c\u0b0d\7\u048e\2\2\u096d\u096e\7\u02b8\2\2\u096e\u096f\7"+
		"\u0487\2\2\u096f\u0970\t\24\2\2\u0970\u0971\5\32\16\2\u0971\u0972\7\u048e"+
		"\2\2\u0972\u0b0d\3\2\2\2\u0973\u0974\t\33\2\2\u0974\u0975\7\u0487\2\2"+
		"\u0975\u0976\5\32\16\2\u0976\u0977\7\u048e\2\2\u0977\u0b0d\3\2\2\2\u0978"+
		"\u0979\t\34\2\2\u0979\u097b\7\u0487\2\2\u097a\u097c\t\21\2\2\u097b\u097a"+
		"\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097e\5:\36\2\u097e"+
		"\u097f\7\u048e\2\2\u097f\u0b0d\3\2\2\2\u0980\u0981\t\35\2\2\u0981\u0983"+
		"\7\u0487\2\2\u0982\u0984\7[\2\2\u0983\u0982\3\2\2\2\u0983\u0984\3\2\2"+
		"\2\u0984\u0985\3\2\2\2\u0985\u0986\5:\36\2\u0986\u0987\7\u048e\2\2\u0987"+
		"\u0b0d\3\2\2\2\u0988\u0989\t\36\2\2\u0989\u098a\7\u0487\2\2\u098a\u098b"+
		"\5:\36\2\u098b\u098c\7\u048e\2\2\u098c\u0b0d\3\2\2\2\u098d\u098e\7\u043e"+
		"\2\2\u098e\u0990\7\u0487\2\2\u098f\u0991\t\24\2\2\u0990\u098f\3\2\2\2"+
		"\u0990\u0991\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0994\5\32\16\2\u0993\u0995"+
		"\5\u0314\u018b\2\u0994\u0993\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0998\3"+
		"\2\2\2\u0996\u0997\7\u0120\2\2\u0997\u0999\7\u04a3\2\2\u0998\u0996\3\2"+
		"\2\2\u0998\u0999\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099b\7\u048e\2\2\u099b"+
		"\u0b0d\3\2\2\2\u099c\u099d\7\u0445\2\2\u099d\u099e\7\u0487\2\2\u099e\u099f"+
		"\5\66\34\2\u099f\u09a0\7\u0481\2\2\u09a0\u09a1\5\66\34\2\u09a1\u09a2\7"+
		"\u0481\2\2\u09a2\u09a3\5\66\34\2\u09a3\u09a4\7\u048e\2\2\u09a4\u0b0d\3"+
		"\2\2\2\u09a5\u09a6\7\u02b2\2\2\u09a6\u09a7\7\u0487\2\2\u09a7\u09a8\5\66"+
		"\34\2\u09a8\u09a9\7\u0481\2\2\u09a9\u09aa\5\66\34\2\u09aa\u09ab\7\u048e"+
		"\2\2\u09ab\u0b0d\3\2\2\2\u09ac\u09ad\7\u00b6\2\2\u09ad\u09ae\7\u0487\2"+
		"\2\u09ae\u09af\5:\36\2\u09af\u09b0\7\u0481\2\2\u09b0\u09b1\5:\36\2\u09b1"+
		"\u09b2\7\u0481\2\2\u09b2\u09b3\5:\36\2\u09b3\u09b4\7\u048e\2\2\u09b4\u0b0d"+
		"\3\2\2\2\u09b5\u0b0d\5x=\2\u09b6\u0b0d\5v<\2\u09b7\u0b0d\5|?\2\u09b8\u0b0d"+
		"\5~@\2\u09b9\u0b0d\5p9\2\u09ba\u0b0d\5r:\2\u09bb\u0b0d\5t;\2\u09bc\u09bd"+
		"\7\u02ae\2\2\u09bd\u09be\7\u0487\2\2\u09be\u09bf\5:\36\2\u09bf\u09c0\7"+
		"^\2\2\u09c0\u09c2\5\u0144\u00a3\2\u09c1\u09c3\7\30\2\2\u09c2\u09c1\3\2"+
		"\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\7\u048e\2\2\u09c5"+
		"\u0b0d\3\2\2\2\u09c6\u09c7\7\u00c6\2\2\u09c7\u09c8\7\u0487\2\2\u09c8\u09c9"+
		"\5:\36\2\u09c9\u09ca\7\u0481\2\2\u09ca\u09cb\5:\36\2\u09cb\u09cc\7\u0481"+
		"\2\2\u09cc\u09cd\5:\36\2\u09cd\u09ce\7\u0481\2\2\u09ce\u09cf\5:\36\2\u09cf"+
		"\u09d0\7\u048e\2\2\u09d0\u0b0d\3\2\2\2\u09d1\u09d2\7s\2\2\u09d2\u09d3"+
		"\7\u0487\2\2\u09d3\u09d4\5:\36\2\u09d4\u09d5\7\u0481\2\2\u09d5\u09d6\5"+
		"\u0144\u00a3\2\u09d6\u09d7\7\u048e\2\2\u09d7\u0b0d\3\2\2\2\u09d8\u09d9"+
		"\7s\2\2\u09d9\u09da\7\u0487\2\2\u09da\u09db\5:\36\2\u09db\u09dc\7\u014e"+
		"\2\2\u09dc\u09dd\5\u017c\u00bf\2\u09dd\u09de\7\u048e\2\2\u09de\u0b0d\3"+
		"\2\2\2\u09df\u09e0\7\u0250\2\2\u09e0\u09e1\7\u0487\2\2\u09e1\u09e2\5\66"+
		"\34\2\u09e2\u09e3\7\u00b7\2\2\u09e3\u09e4\5:\36\2\u09e4\u09e5\7\u048e"+
		"\2\2\u09e5\u0b0d\3\2\2\2\u09e6\u09e7\5\u0080A\2\u09e7\u09e8\7\u0487\2"+
		"\2\u09e8\u09e9\5\u0082B\2\u09e9\u09ea\7\u048e\2\2\u09ea\u0b0d\3\2\2\2"+
		"\u09eb\u09ec\7\u02fc\2\2\u09ec\u09ed\7\u0487\2\2\u09ed\u09ee\5\u030c\u0187"+
		"\2\u09ee\u09ef\7\u048e\2\2\u09ef\u0b0d\3\2\2\2\u09f0\u09f1\t\37\2\2\u09f1"+
		"\u09f2\7\u0487\2\2\u09f2\u09f3\5:\36\2\u09f3\u09f4\7\u0481\2\2\u09f4\u09f5"+
		"\5:\36\2\u09f5\u09f6\7\u048e\2\2\u09f6\u0b0d\3\2\2\2\u09f7\u09f8\t \2"+
		"\2\u09f8\u09f9\7\u0487\2\2\u09f9\u09fa\5:\36\2\u09fa\u09fb\7\u048e\2\2"+
		"\u09fb\u0b0d\3\2\2\2\u09fc\u09fd\7\u041c\2\2\u09fd\u09fe\7\u0487\2\2\u09fe"+
		"\u09ff\5\u0146\u00a4\2\u09ff\u0a00\7\u0481\2\2\u0a00\u0a01\5:\36\2\u0a01"+
		"\u0a02\7\u048e\2\2\u0a02\u0b0d\3\2\2\2\u0a03\u0a04\t!\2\2\u0a04\u0a05"+
		"\7\u0487\2\2\u0a05\u0a06\5\u0084C\2\u0a06\u0a07\7\u048e\2\2\u0a07\u0b0d"+
		"\3\2\2\2\u0a08\u0a09\7\u0286\2\2\u0a09\u0a0a\7\u0487\2\2\u0a0a\u0a0b\5"+
		":\36\2\u0a0b\u0a0c\7\u0481\2\2\u0a0c\u0a0d\5:\36\2\u0a0d\u0a0e\7\u048e"+
		"\2\2\u0a0e\u0b0d\3\2\2\2\u0a0f\u0a10\t\"\2\2\u0a10\u0a11\7\u0487\2\2\u0a11"+
		"\u0a12\5\u0086D\2\u0a12\u0a13\7\u048e\2\2\u0a13\u0b0d\3\2\2\2\u0a14\u0a15"+
		"\7\u032e\2\2\u0a15\u0a16\7\u0487\2\2\u0a16\u0a17\5\u05e8\u02f5\2\u0a17"+
		"\u0a18\7\u00a9\2\2\u0a18\u0a19\5:\36\2\u0a19\u0a1a\7\u048e\2\2\u0a1a\u0b0d"+
		"\3\2\2\2\u0a1b\u0a1c\t#\2\2\u0a1c\u0a1d\7\u0487\2\2\u0a1d\u0a1e\5\u0140"+
		"\u00a1\2\u0a1e\u0a1f\7\u048e\2\2\u0a1f\u0b0d\3\2\2\2\u0a20\u0a21\7l\2"+
		"\2\u0a21\u0a22\7\u0487\2\2\u0a22\u0a23\5\32\16\2\u0a23\u0a24\7\u014e\2"+
		"\2\u0a24\u0a25\5\u017c\u00bf\2\u0a25\u0a26\7\u048e\2\2\u0a26\u0b0d\3\2"+
		"\2\2\u0a27\u0a28\5\u05e4\u02f3\2\u0a28\u0a2a\7\u0487\2\2\u0a29\u0a2b\5"+
		"\34\17\2\u0a2a\u0a29\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c"+
		"\u0a2d\7\u048e\2\2\u0a2d\u0b0d\3\2\2\2\u0a2e\u0a2f\5\u05e2\u02f2\2\u0a2f"+
		"\u0a30\7\u048c\2\2\u0a30\u0a31\5\u05e4\u02f3\2\u0a31\u0a33\7\u0487\2\2"+
		"\u0a32\u0a34\5\34\17\2\u0a33\u0a32\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35"+
		"\3\2\2\2\u0a35\u0a36\7\u048e\2\2\u0a36\u0b0d\3\2\2\2\u0a37\u0b0d\5n8\2"+
		"\u0a38\u0a39\7\u0406\2\2\u0a39\u0a3a\7\u0487\2\2\u0a3a\u0a3b\5\66\34\2"+
		"\u0a3b\u0a3c\7\u0481\2\2\u0a3c\u0a3d\5\66\34\2\u0a3d\u0a3e\7\u048e\2\2"+
		"\u0a3e\u0b0d\3\2\2\2\u0a3f\u0a40\7\u0406\2\2\u0a40\u0a41\7\u0487\2\2\u0a41"+
		"\u0a42\5\66\34\2\u0a42\u0a43\7\u0481\2\2\u0a43\u0a44\5\66\34\2\u0a44\u0a45"+
		"\7\u0481\2\2\u0a45\u0a46\5\66\34\2\u0a46\u0a47\7\u048e\2\2\u0a47\u0b0d"+
		"\3\2\2\2\u0a48\u0a49\7\u018f\2\2\u0a49\u0a4a\7\u0487\2\2\u0a4a\u0a4e\5"+
		":\36\2\u0a4b\u0a4c\7^\2\2\u0a4c\u0a4d\7l\2\2\u0a4d\u0a4f\5\u0094K\2\u0a4e"+
		"\u0a4b\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a52\3\2\2\2\u0a50\u0a51\7\u0418"+
		"\2\2\u0a51\u0a53\5\u0088E\2\u0a52\u0a50\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53"+
		"\u0a54\3\2\2\2\u0a54\u0a55\7\u048e\2\2\u0a55\u0b0d\3\2\2\2\u0a56\u0a57"+
		"\7\u018f\2\2\u0a57\u0a58\7\u0487\2\2\u0a58\u0a59\5:\36\2\u0a59\u0a5a\7"+
		"^\2\2\u0a5a\u0a5b\7d\2\2\u0a5b\u0a5c\5\u0094K\2\u0a5c\u0a5d\7\u048e\2"+
		"\2\u0a5d\u0b0d\3\2\2\2\u0a5e\u0a5f\7\u018f\2\2\u0a5f\u0a60\7\u0487\2\2"+
		"\u0a60\u0a61\5:\36\2\u0a61\u0a62\7\u0481\2\2\u0a62\u0a63\7\u0179\2\2\u0a63"+
		"\u0a64\7\u0481\2\2\u0a64\u0a65\7\u0179\2\2\u0a65\u0a66\7\u0481\2\2\u0a66"+
		"\u0a67\7\u0179\2\2\u0a67\u0a68\7\u0481\2\2\u0a68\u0a69\7\u0179\2\2\u0a69"+
		"\u0a6a\7\u048e\2\2\u0a6a\u0b0d\3\2\2\2\u0a6b\u0b0d\5\u061a\u030e\2\u0a6c"+
		"\u0b0d\5\u0608\u0305\2\u0a6d\u0b0d\5h\65\2\u0a6e\u0a6f\7\u0245\2\2\u0a6f"+
		"\u0a70\7\u0487\2\2\u0a70\u0a71\5:\36\2\u0a71\u0a72\7\u0481\2\2\u0a72\u0a73"+
		"\5:\36\2\u0a73\u0a74\7\u048e\2\2\u0a74\u0b0d\3\2\2\2\u0a75\u0a76\7\u0373"+
		"\2\2\u0a76\u0a77\7\u0487\2\2\u0a77\u0a78\5\32\16\2\u0a78\u0a79\7\u048e"+
		"\2\2\u0a79\u0b0d\3\2\2\2\u0a7a\u0a7b\7\u0455\2\2\u0a7b\u0a7c\7\u0487\2"+
		"\2\u0a7c\u0a7d\5\32\16\2\u0a7d\u0a7e\7\u048e\2\2\u0a7e\u0b0d\3\2\2\2\u0a7f"+
		"\u0a80\7\u03f2\2\2\u0a80\u0a81\7\u0487\2\2\u0a81\u0a82\5\32\16\2\u0a82"+
		"\u0a83\7\u048e\2\2\u0a83\u0b0d\3\2\2\2\u0a84\u0a85\7\u0249\2\2\u0a85\u0a86"+
		"\7\u0487\2\2\u0a86\u0a87\5\32\16\2\u0a87\u0a88\7\u048e\2\2\u0a88\u0b0d"+
		"\3\2\2\2\u0a89\u0a8a\7\u02a7\2\2\u0a8a\u0a8b\7\u0487\2\2\u0a8b\u0a8c\5"+
		"\32\16\2\u0a8c\u0a8d\7\u048e\2\2\u0a8d\u0b0d\3\2\2\2\u0a8e\u0a8f\7\u0305"+
		"\2\2\u0a8f\u0a91\7\u0487\2\2\u0a90\u0a92\5\32\16\2\u0a91\u0a90\3\2\2\2"+
		"\u0a91\u0a92\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0b0d\7\u048e\2\2\u0a94"+
		"\u0a95\7\u014c\2\2\u0a95\u0a97\7\u0487\2\2\u0a96\u0a98\5\32\16\2\u0a97"+
		"\u0a96\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0b0d\7\u048e"+
		"\2\2\u0a9a\u0a9b\7\u0474\2\2\u0a9b\u0a9c\7\u0487\2\2\u0a9c\u0a9d\5 \21"+
		"\2\u0a9d\u0a9e\7\u048e\2\2\u0a9e\u0b0d\3\2\2\2\u0a9f\u0aa0\7\u0474\2\2"+
		"\u0aa0\u0aa1\7\u0487\2\2\u0aa1\u0aa2\5 \21\2\u0aa2\u0aa3\7\u0481\2\2\u0aa3"+
		"\u0aa4\5l\67\2\u0aa4\u0aa5\7\u048e\2\2\u0aa5\u0b0d\3\2\2\2\u0aa6\u0aa7"+
		"\7\u0474\2\2\u0aa7\u0aa8\7\u0487\2\2\u0aa8\u0aa9\5 \21\2\u0aa9\u0aaa\7"+
		"\u0481\2\2\u0aaa\u0aab\5l\67\2\u0aab\u0aac\7\u0481\2\2\u0aac\u0aad\5l"+
		"\67\2\u0aad\u0aae\7\u048e\2\2\u0aae\u0b0d\3\2\2\2\u0aaf\u0ab0\7\u0474"+
		"\2\2\u0ab0\u0ab1\7\u0487\2\2\u0ab1\u0ab2\5 \21\2\u0ab2\u0ab3\7\u0481\2"+
		"\2\u0ab3\u0ab4\5l\67\2\u0ab4\u0ab5\7\u0481\2\2\u0ab5\u0ab6\5l\67\2\u0ab6"+
		"\u0ab7\7\u0481\2\2\u0ab7\u0ab8\5l\67\2\u0ab8\u0ab9\7\u048e\2\2\u0ab9\u0b0d"+
		"\3\2\2\2\u0aba\u0abb\7\u0474\2\2\u0abb\u0abc\7\u0487\2\2\u0abc\u0abd\5"+
		" \21\2\u0abd\u0abe\7\u0481\2\2\u0abe\u0abf\5l\67\2\u0abf\u0ac0\7\u0481"+
		"\2\2\u0ac0\u0ac1\5l\67\2\u0ac1\u0ac2\7\u0481\2\2\u0ac2\u0ac3\5l\67\2\u0ac3"+
		"\u0ac4\7\u0481\2\2\u0ac4\u0ac5\5l\67\2\u0ac5\u0ac6\7\u048e\2\2\u0ac6\u0b0d"+
		"\3\2\2\2\u0ac7\u0ac8\7\34\2\2\u0ac8\u0ac9\7\u0487\2\2\u0ac9\u0aca\5 \21"+
		"\2\u0aca\u0acb\7\u048e\2\2\u0acb\u0b0d\3\2\2\2\u0acc\u0acd\7\34\2\2\u0acd"+
		"\u0ace\7\u0487\2\2\u0ace\u0acf\5 \21\2\u0acf\u0ad0\7\u0481\2\2\u0ad0\u0ad1"+
		"\5l\67\2\u0ad1\u0ad2\7\u048e\2\2\u0ad2\u0b0d\3\2\2\2\u0ad3\u0ad4\7\34"+
		"\2\2\u0ad4\u0ad5\7\u0487\2\2\u0ad5\u0ad6\5 \21\2\u0ad6\u0ad7\7\u0481\2"+
		"\2\u0ad7\u0ad8\5l\67\2\u0ad8\u0ad9\7\u0481\2\2\u0ad9\u0ada\5l\67\2\u0ada"+
		"\u0adb\7\u048e\2\2\u0adb\u0b0d\3\2\2\2\u0adc\u0add\7\34\2\2\u0add\u0ade"+
		"\7\u0487\2\2\u0ade\u0adf\5 \21\2\u0adf\u0ae0\7\u0481\2\2\u0ae0\u0ae1\5"+
		"l\67\2\u0ae1\u0ae2\7\u0481\2\2\u0ae2\u0ae3\5l\67\2\u0ae3\u0ae4\7\u0481"+
		"\2\2\u0ae4\u0ae5\5l\67\2\u0ae5\u0ae6\7\u048e\2\2\u0ae6\u0b0d\3\2\2\2\u0ae7"+
		"\u0ae8\7\34\2\2\u0ae8\u0ae9\7\u0487\2\2\u0ae9\u0aea\5 \21\2\u0aea\u0aeb"+
		"\7\u0481\2\2\u0aeb\u0aec\5l\67\2\u0aec\u0aed\7\u0481\2\2\u0aed\u0aee\5"+
		"l\67\2\u0aee\u0aef\7\u0481\2\2\u0aef\u0af0\5l\67\2\u0af0\u0af1\7\u0481"+
		"\2\2\u0af1\u0af2\5l\67\2\u0af2\u0af3\7\u048e\2\2\u0af3\u0b0d\3\2\2\2\u0af4"+
		"\u0af5\7B\2\2\u0af5\u0af6\7\u0487\2\2\u0af6\u0af7\7\u0179\2\2\u0af7\u0b0d"+
		"\7\u048e\2\2\u0af8\u0af9\79\2\2\u0af9\u0afa\7\u0487\2\2\u0afa\u0afb\5"+
		":\36\2\u0afb\u0afc\7\u048e\2\2\u0afc\u0b0d\3\2\2\2\u0afd\u0afe\7O\2\2"+
		"\u0afe\u0aff\7\u0487\2\2\u0aff\u0b00\5:\36\2\u0b00\u0b01\7\u048e\2\2\u0b01"+
		"\u0b0d\3\2\2\2\u0b02\u0b03\7(\2\2\u0b03\u0b04\7\u0487\2\2\u0b04\u0b05"+
		"\5:\36\2\u0b05\u0b06\7\u048e\2\2\u0b06\u0b0d\3\2\2\2\u0b07\u0b08\7!\2"+
		"\2\u0b08\u0b09\7\u0487\2\2\u0b09\u0b0a\5:\36\2\u0b0a\u0b0b\7\u048e\2\2"+
		"\u0b0b\u0b0d\3\2\2\2\u0b0c\u0963\3\2\2\2\u0b0c\u096d\3\2\2\2\u0b0c\u0973"+
		"\3\2\2\2\u0b0c\u0978\3\2\2\2\u0b0c\u0980\3\2\2\2\u0b0c\u0988\3\2\2\2\u0b0c"+
		"\u098d\3\2\2\2\u0b0c\u099c\3\2\2\2\u0b0c\u09a5\3\2\2\2\u0b0c\u09ac\3\2"+
		"\2\2\u0b0c\u09b5\3\2\2\2\u0b0c\u09b6\3\2\2\2\u0b0c\u09b7\3\2\2\2\u0b0c"+
		"\u09b8\3\2\2\2\u0b0c\u09b9\3\2\2\2\u0b0c\u09ba\3\2\2\2\u0b0c\u09bb\3\2"+
		"\2\2\u0b0c\u09bc\3\2\2\2\u0b0c\u09c6\3\2\2\2\u0b0c\u09d1\3\2\2\2\u0b0c"+
		"\u09d8\3\2\2\2\u0b0c\u09df\3\2\2\2\u0b0c\u09e6\3\2\2\2\u0b0c\u09eb\3\2"+
		"\2\2\u0b0c\u09f0\3\2\2\2\u0b0c\u09f7\3\2\2\2\u0b0c\u09fc\3\2\2\2\u0b0c"+
		"\u0a03\3\2\2\2\u0b0c\u0a08\3\2\2\2\u0b0c\u0a0f\3\2\2\2\u0b0c\u0a14\3\2"+
		"\2\2\u0b0c\u0a1b\3\2\2\2\u0b0c\u0a20\3\2\2\2\u0b0c\u0a27\3\2\2\2\u0b0c"+
		"\u0a2e\3\2\2\2\u0b0c\u0a37\3\2\2\2\u0b0c\u0a38\3\2\2\2\u0b0c\u0a3f\3\2"+
		"\2\2\u0b0c\u0a48\3\2\2\2\u0b0c\u0a56\3\2\2\2\u0b0c\u0a5e\3\2\2\2\u0b0c"+
		"\u0a6b\3\2\2\2\u0b0c\u0a6c\3\2\2\2\u0b0c\u0a6d\3\2\2\2\u0b0c\u0a6e\3\2"+
		"\2\2\u0b0c\u0a75\3\2\2\2\u0b0c\u0a7a\3\2\2\2\u0b0c\u0a7f\3\2\2\2\u0b0c"+
		"\u0a84\3\2\2\2\u0b0c\u0a89\3\2\2\2\u0b0c\u0a8e\3\2\2\2\u0b0c\u0a94\3\2"+
		"\2\2\u0b0c\u0a9a\3\2\2\2\u0b0c\u0a9f\3\2\2\2\u0b0c\u0aa6\3\2\2\2\u0b0c"+
		"\u0aaf\3\2\2\2\u0b0c\u0aba\3\2\2\2\u0b0c\u0ac7\3\2\2\2\u0b0c\u0acc\3\2"+
		"\2\2\u0b0c\u0ad3\3\2\2\2\u0b0c\u0adc\3\2\2\2\u0b0c\u0ae7\3\2\2\2\u0b0c"+
		"\u0af4\3\2\2\2\u0b0c\u0af8\3\2\2\2\u0b0c\u0afd\3\2\2\2\u0b0c\u0b02\3\2"+
		"\2\2\u0b0c\u0b07\3\2\2\2\u0b0dg\3\2\2\2\u0b0e\u0b0f\7\21\2\2\u0b0f\u0b10"+
		"\7\u0487\2\2\u0b10\u0b11\5:\36\2\u0b11\u0b12\7\u0481\2\2\u0b12\u0b15\5"+
		":\36\2\u0b13\u0b14\7\u0481\2\2\u0b14\u0b16\5j\66\2\u0b15\u0b13\3\2\2\2"+
		"\u0b15\u0b16\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b18\7\u048e\2\2\u0b18"+
		"i\3\2\2\2\u0b19\u0b1a\t$\2\2\u0b1ak\3\2\2\2\u0b1b\u0b24\7\u04a3\2\2\u0b1c"+
		"\u0b1e\7\u0488\2\2\u0b1d\u0b1c\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f"+
		"\3\2\2\2\u0b1f\u0b24\7\u0179\2\2\u0b20\u0b24\7\u0178\2\2\u0b21\u0b24\7"+
		"\u04a2\2\2\u0b22\u0b24\5\u0634\u031b\2\u0b23\u0b1b\3\2\2\2\u0b23\u0b1d"+
		"\3\2\2\2\u0b23\u0b20\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b23\u0b22\3\2\2\2\u0b24"+
		"m\3\2\2\2\u0b25\u0b26\7\u00c5\2\2\u0b26\u0b27\7\u0487\2\2\u0b27\u0b2a"+
		"\5:\36\2\u0b28\u0b29\7\u0481\2\2\u0b29\u0b2b\5:\36\2\u0b2a\u0b28\3\2\2"+
		"\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2a\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0b2e"+
		"\3\2\2\2\u0b2e\u0b2f\7\u048e\2\2\u0b2f\u0b36\3\2\2\2\u0b30\u0b31\7m\2"+
		"\2\u0b31\u0b32\7\u0487\2\2\u0b32\u0b33\5:\36\2\u0b33\u0b34\7\u048e\2\2"+
		"\u0b34\u0b36\3\2\2\2\u0b35\u0b25\3\2\2\2\u0b35\u0b30\3\2\2\2\u0b36o\3"+
		"\2\2\2\u0b37\u0b3d\7\u0151\2\2\u0b38\u0b3a\7\u0487\2\2\u0b39\u0b3b\7\u0179"+
		"\2\2\u0b3a\u0b39\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c"+
		"\u0b3e\7\u048e\2\2\u0b3d\u0b38\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3eq\3\2"+
		"\2\2\u0b3f\u0b45\7\u0150\2\2\u0b40\u0b42\7\u0487\2\2\u0b41\u0b43\7\u0179"+
		"\2\2\u0b42\u0b41\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44"+
		"\u0b46\7\u048e\2\2\u0b45\u0b40\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46s\3\2"+
		"\2\2\u0b47\u0b4a\7\u014f\2\2\u0b48\u0b49\7\u0487\2\2\u0b49\u0b4b\7\u048e"+
		"\2\2\u0b4a\u0b48\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4bu\3\2\2\2\u0b4c\u0b4d"+
		"\7\u0137\2\2\u0b4d\u0b4f\7\u0487\2\2\u0b4e\u0b50\7\u0179\2\2\u0b4f\u0b4e"+
		"\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b52\7\u048e\2"+
		"\2\u0b52w\3\2\2\2\u0b53\u0b56\5z>\2\u0b54\u0b56\7\u03f4\2\2\u0b55\u0b53"+
		"\3\2\2\2\u0b55\u0b54\3\2\2\2\u0b56\u0b5c\3\2\2\2\u0b57\u0b59\7\u0487\2"+
		"\2\u0b58\u0b5a\7\u0179\2\2\u0b59\u0b58\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a"+
		"\u0b5b\3\2\2\2\u0b5b\u0b5d\7\u048e\2\2\u0b5c\u0b57\3\2\2\2\u0b5c\u0b5d"+
		"\3\2\2\2\u0b5dy\3\2\2\2\u0b5e\u0b5f\t%\2\2\u0b5f{\3\2\2\2\u0b60\u0b61"+
		"\t&\2\2\u0b61\u0b63\7\u0487\2\2\u0b62\u0b64\7\u0179\2\2\u0b63\u0b62\3"+
		"\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b66\7\u048e\2\2"+
		"\u0b66}\3\2\2\2\u0b67\u0b68\t\'\2\2\u0b68\u0b69\7\u0487\2\2\u0b69\u0b6c"+
		"\7\u048e\2\2\u0b6a\u0b6c\7{\2\2\u0b6b\u0b67\3\2\2\2\u0b6b\u0b6a\3\2\2"+
		"\2\u0b6c\177\3\2\2\2\u0b6d\u0b6e\t(\2\2\u0b6e\u0081\3\2\2\2\u0b6f\u0b70"+
		"\5:\36\2\u0b70\u0b71\7\u0481\2\2\u0b71\u0b74\5:\36\2\u0b72\u0b73\7\u0481"+
		"\2\2\u0b73\u0b75\5:\36\2\u0b74\u0b72\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75"+
		"\u0b7e\3\2\2\2\u0b76\u0b77\5:\36\2\u0b77\u0b78\7\u00a9\2\2\u0b78\u0b7b"+
		"\5:\36\2\u0b79\u0b7a\7\u00a7\2\2\u0b7a\u0b7c\5:\36\2\u0b7b\u0b79\3\2\2"+
		"\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7e\3\2\2\2\u0b7d\u0b6f\3\2\2\2\u0b7d\u0b76"+
		"\3\2\2\2\u0b7e\u0083\3\2\2\2\u0b7f\u0b80\5:\36\2\u0b80\u0b81\7\u0481\2"+
		"\2\u0b81\u0b82\7\u00c5\2\2\u0b82\u0b83\5:\36\2\u0b83\u0b84\5\u05e8\u02f5"+
		"\2\u0b84\u0085\3\2\2\2\u0b85\u0b86\5\u05e8\u02f5\2\u0b86\u0b87\7\u0481"+
		"\2\2\u0b87\u0b88\5:\36\2\u0b88\u0b89\7\u0481\2\2\u0b89\u0b8a\5:\36\2\u0b8a"+
		"\u0087\3\2\2\2\u0b8b\u0b8e\5\u008aF\2\u0b8c\u0b8e\5\u008eH\2\u0b8d\u0b8b"+
		"\3\2\2\2\u0b8d\u0b8c\3\2\2\2\u0b8e\u0089\3\2\2\2\u0b8f\u0b94\5\u008cG"+
		"\2\u0b90\u0b91\7\u0481\2\2\u0b91\u0b93\5\u008cG\2\u0b92\u0b90\3\2\2\2"+
		"\u0b93\u0b96\3\2\2\2\u0b94\u0b92\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u008b"+
		"\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b97\u0b98\5\u0090I\2\u0b98\u0b99\5\u0092"+
		"J\2\u0b99\u008d\3\2\2\2\u0b9a\u0b9b\5\u0090I\2\u0b9b\u0b9c\7\u0488\2\2"+
		"\u0b9c\u0b9d\5\u0090I\2\u0b9d\u008f\3\2\2\2\u0b9e\u0b9f\7\u0179\2\2\u0b9f"+
		"\u0091\3\2\2\2\u0ba0\u0ba7\5\u0642\u0322\2\u0ba1\u0ba3\5\u0096L\2\u0ba2"+
		"\u0ba4\5\u0098M\2\u0ba3\u0ba2\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba7"+
		"\3\2\2\2\u0ba5\u0ba7\5\u0098M\2\u0ba6\u0ba0\3\2\2\2\u0ba6\u0ba1\3\2\2"+
		"\2\u0ba6\u0ba5\3\2\2\2\u0ba7\u0093\3\2\2\2\u0ba8\u0ba9\7\u0487\2\2\u0ba9"+
		"\u0baa\7\u0179\2\2\u0baa\u0bab\7\u048e\2\2\u0bab\u0095\3\2\2\2\u0bac\u0bad"+
		"\t)\2\2\u0bad\u0097\3\2\2\2\u0bae\u0baf\7\u0279\2\2\u0baf\u0099\3\2\2"+
		"\2\u0bb0\u0bb2\5\u0378\u01bd\2\u0bb1\u0bb0\3\2\2\2\u0bb1\u0bb2\3\2\2\2"+
		"\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb4\5\u009cO\2\u0bb4\u009b\3\2\2\2\u0bb5"+
		"\u0bb7\5\u02c4\u0163\2\u0bb6\u0bb8\5\u009eP\2\u0bb7\u0bb6\3\2\2\2\u0bb7"+
		"\u0bb8\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba\7\u00a9\2\2\u0bba\u0bbf"+
		"\5\u032c\u0197\2\u0bbb\u0bbc\7\u0158\2\2\u0bbc\u0bbd\5\u02d0\u0169\2\u0bbd"+
		"\u0bbe\5:\36\2\u0bbe\u0bc0\3\2\2\2\u0bbf\u0bbb\3\2\2\2\u0bbf\u0bc0\3\2"+
		"\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bc3\5\u0314\u018b\2\u0bc2\u0bc1\3\2\2"+
		"\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0bc5\3\2\2\2\u0bc4\u0bc6\5\u02d2\u016a\2"+
		"\u0bc5\u0bc4\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bd3\3\2\2\2\u0bc7\u0bc9"+
		"\5\u02c4\u0163\2\u0bc8\u0bca\5\u009eP\2\u0bc9\u0bc8\3\2\2\2\u0bc9\u0bca"+
		"\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bd0\5\u00a2R\2\u0bcc\u0bcd\7\u0158"+
		"\2\2\u0bcd\u0bce\5\u02d0\u0169\2\u0bce\u0bcf\5:\36\2\u0bcf\u0bd1\3\2\2"+
		"\2\u0bd0\u0bcc\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd3\3\2\2\2\u0bd2\u0bb5"+
		"\3\2\2\2\u0bd2\u0bc7\3\2\2\2\u0bd3\u009d\3\2\2\2\u0bd4\u0bd6\5\u00a0Q"+
		"\2\u0bd5\u0bd4\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd5\3\2\2\2\u0bd7\u0bd8"+
		"\3\2\2\2\u0bd8\u009f\3\2\2\2\u0bd9\u0bda\t*\2\2\u0bda\u00a1\3\2\2\2\u0bdb"+
		"\u0bdc\5\u0352\u01aa\2\u0bdc\u0bdd\7\u00a9\2\2\u0bdd\u0bde\5\u0324\u0193"+
		"\2\u0bde\u0be5\3\2\2\2\u0bdf\u0be0\7\u00a9\2\2\u0be0\u0be1\5\u0352\u01aa"+
		"\2\u0be1\u0be2\7\u014e\2\2\u0be2\u0be3\5\u0324\u0193\2\u0be3\u0be5\3\2"+
		"\2\2\u0be4\u0bdb\3\2\2\2\u0be4\u0bdf\3\2\2\2\u0be5\u00a3\3\2\2\2\u0be6";
	private static final String _serializedATNSegment2 =
		"\u0be8\5\u0378\u01bd\2\u0be7\u0be6\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0be9"+
		"\3\2\2\2\u0be9\u0bea\5\u00a6T\2\u0bea\u00a5\3\2\2\2\u0beb\u0bed\5\u02c2"+
		"\u0162\2\u0bec\u0bee\7\u00e6\2\2\u0bed\u0bec\3\2\2\2\u0bed\u0bee\3\2\2"+
		"\2\u0bee\u0bf0\3\2\2\2\u0bef\u0bf1\7\u01eb\2\2\u0bf0\u0bef\3\2\2\2\u0bf0"+
		"\u0bf1\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf3\5\u0324\u0193\2\u0bf3\u0bf4"+
		"\7\u0121\2\2\u0bf4\u0bf9\5\u00a8U\2\u0bf5\u0bf6\7\u0158\2\2\u0bf6\u0bf7"+
		"\5\u02d0\u0169\2\u0bf7\u0bf8\5:\36\2\u0bf8\u0bfa\3\2\2\2\u0bf9\u0bf5\3"+
		"\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0bfc\3\2\2\2\u0bfb\u0bfd\5\u0314\u018b"+
		"\2\u0bfc\u0bfb\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0c00"+
		"\5\u02d2\u016a\2\u0bff\u0bfe\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u00a7\3"+
		"\2\2\2\u0c01\u0c06\5\u00aaV\2\u0c02\u0c03\7\u0481\2\2\u0c03\u0c05\5\u00aa"+
		"V\2\u0c04\u0c02\3\2\2\2\u0c05\u0c08\3\2\2\2\u0c06\u0c04\3\2\2\2\u0c06"+
		"\u0c07\3\2\2\2\u0c07\u00a9\3\2\2\2\u0c08\u0c06\3\2\2\2\u0c09\u0c0a\5\u0140"+
		"\u00a1\2\u0c0a\u0c0b\7\u0493\2\2\u0c0b\u0c0c\5\u02a4\u0153\2\u0c0c\u00ab"+
		"\3\2\2\2\u0c0d\u0c0e\7x\2\2\u0c0e\u0c0f\7\u03d9\2\2\u0c0f\u0c14\7\u0221"+
		"\2\2\u0c10\u0c11\7\u00b6\2\2\u0c11\u0c12\5<\37\2\u0c12\u0c13\7\u009e\2"+
		"\2\u0c13\u0c15\3\2\2\2\u0c14\u0c10\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c16"+
		"\3\2\2\2\u0c16\u0c1c\5\u05e2\u02f2\2\u0c17\u0c1d\5\u00b0Y\2\u0c18\u0c19"+
		"\5\u00aeX\2\u0c19\u0c1a\7\u0481\2\2\u0c1a\u0c1b\5\u00b0Y\2\u0c1b\u0c1d"+
		"\3\2\2\2\u0c1c\u0c17\3\2\2\2\u0c1c\u0c18\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d"+
		"\u0c30\3\2\2\2\u0c1e\u0c1f\7x\2\2\u0c1f\u0c20\7\u03d9\2\2\u0c20\u0c25"+
		"\7\u018a\2\2\u0c21\u0c22\7\u00b6\2\2\u0c22\u0c23\5<\37\2\u0c23\u0c24\7"+
		"\u009e\2\2\u0c24\u0c26\3\2\2\2\u0c25\u0c21\3\2\2\2\u0c25\u0c26\3\2\2\2"+
		"\u0c26\u0c27\3\2\2\2\u0c27\u0c2d\5\u05e2\u02f2\2\u0c28\u0c2e\5\u00b4["+
		"\2\u0c29\u0c2a\5\u00b2Z\2\u0c2a\u0c2b\7\u0481\2\2\u0c2b\u0c2c\5\u00b4"+
		"[\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c28\3\2\2\2\u0c2d\u0c29\3\2\2\2\u0c2d"+
		"\u0c2e\3\2\2\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c0d\3\2\2\2\u0c2f\u0c1e\3\2"+
		"\2\2\u0c30\u00ad\3\2\2\2\u0c31\u0c32\bX\1\2\u0c32\u0c35\5\u00b0Y\2\u0c33"+
		"\u0c35\5\u0642\u0322\2\u0c34\u0c31\3\2\2\2\u0c34\u0c33\3\2\2\2\u0c35\u0c3b"+
		"\3\2\2\2\u0c36\u0c37\f\3\2\2\u0c37\u0c38\7\u0481\2\2\u0c38\u0c3a\5\u00b0"+
		"Y\2\u0c39\u0c36\3\2\2\2\u0c3a\u0c3d\3\2\2\2\u0c3b\u0c39\3\2\2\2\u0c3b"+
		"\u0c3c\3\2\2\2\u0c3c\u00af\3\2\2\2\u0c3d\u0c3b\3\2\2\2\u0c3e\u0c40\t+"+
		"\2\2\u0c3f\u0c41\7\u0493\2\2\u0c40\u0c3f\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41"+
		"\u0c42\3\2\2\2\u0c42\u0c43\5,\27\2\u0c43\u00b1\3\2\2\2\u0c44\u0c4f\5\u00b4"+
		"[\2\u0c45\u0c4f\5\u0642\u0322\2\u0c46\u0c4b\5\u00b4[\2\u0c47\u0c48\7\u0481"+
		"\2\2\u0c48\u0c4a\5\u00b4[\2\u0c49\u0c47\3\2\2\2\u0c4a\u0c4d\3\2\2\2\u0c4b"+
		"\u0c49\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c4f\3\2\2\2\u0c4d\u0c4b\3\2"+
		"\2\2\u0c4e\u0c44\3\2\2\2\u0c4e\u0c45\3\2\2\2\u0c4e\u0c46\3\2\2\2\u0c4f"+
		"\u00b3\3\2\2\2\u0c50\u0c52\7\u0221\2\2\u0c51\u0c53\7\u0493\2\2\u0c52\u0c51"+
		"\3\2\2\2\u0c52\u0c53\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c68\5\u01a2\u00d2"+
		"\2\u0c55\u0c57\7\u02ce\2\2\u0c56\u0c58\7\u0493\2\2\u0c57\u0c56\3\2\2\2"+
		"\u0c57\u0c58\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c68\7\u0179\2\2\u0c5a"+
		"\u0c5c\7\u03ea\2\2\u0c5b\u0c5d\7\u0493\2\2\u0c5c\u0c5b\3\2\2\2\u0c5c\u0c5d"+
		"\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e\u0c5f\7\u0487\2\2\u0c5f\u0c60\5\u00cc"+
		"g\2\u0c60\u0c61\7\u048e\2\2\u0c61\u0c68\3\2\2\2\u0c62\u0c64\7\u035c\2"+
		"\2\u0c63\u0c65\7\u0493\2\2\u0c64\u0c63\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65"+
		"\u0c66\3\2\2\2\u0c66\u0c68\7\u04a3\2\2\u0c67\u0c50\3\2\2\2\u0c67\u0c55"+
		"\3\2\2\2\u0c67\u0c5a\3\2\2\2\u0c67\u0c62\3\2\2\2\u0c68\u00b5\3\2\2\2\u0c69"+
		"\u0c6e\5\u00bc_\2\u0c6a\u0c6b\7\u0481\2\2\u0c6b\u0c6d\5\u00bc_\2\u0c6c"+
		"\u0c6a\3\2\2\2\u0c6d\u0c70\3\2\2\2\u0c6e\u0c6c\3\2\2\2\u0c6e\u0c6f\3\2"+
		"\2\2\u0c6f\u00b7\3\2\2\2\u0c70\u0c6e\3\2\2\2\u0c71\u0c76\7\u0179\2\2\u0c72"+
		"\u0c73\7\u0481\2\2\u0c73\u0c75\7\u0179\2\2\u0c74\u0c72\3\2\2\2\u0c75\u0c78"+
		"\3\2\2\2\u0c76\u0c74\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u00b9\3\2\2\2\u0c78"+
		"\u0c76\3\2\2\2\u0c79\u0c7e\7\u0179\2\2\u0c7a\u0c7b\7\u0481\2\2\u0c7b\u0c7d"+
		"\7\u0179\2\2\u0c7c\u0c7a\3\2\2\2\u0c7d\u0c80\3\2\2\2\u0c7e\u0c7c\3\2\2"+
		"\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u00bb\3\2\2\2\u0c80\u0c7e\3\2\2\2\u0c81\u0c83"+
		"\7\u0221\2\2\u0c82\u0c84\7\u0493\2\2\u0c83\u0c82\3\2\2\2\u0c83\u0c84\3"+
		"\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0c9d\5\u01a2\u00d2\2\u0c86\u0c88\7\u02ce"+
		"\2\2\u0c87\u0c89\7\u0493\2\2\u0c88\u0c87\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89"+
		"\u0c8a\3\2\2\2\u0c8a\u0c92\7\u0179\2\2\u0c8b\u0c8c\7\u008d\2\2\u0c8c\u0c8d"+
		"\7\u0221\2\2\u0c8d\u0c8e\5\u01a4\u00d3\2\u0c8e\u0c8f\7\u0487\2\2\u0c8f"+
		"\u0c90\5\u00b8]\2\u0c90\u0c91\7\u048e\2\2\u0c91\u0c93\3\2\2\2\u0c92\u0c8b"+
		"\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93\u0c9d\3\2\2\2\u0c94\u0c96\7\u03ea\2"+
		"\2\u0c95\u0c97\7\u0493\2\2\u0c96\u0c95\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97"+
		"\u0c98\3\2\2\2\u0c98\u0c99\7\u0487\2\2\u0c99\u0c9a\5\u00ccg\2\u0c9a\u0c9b"+
		"\7\u048e\2\2\u0c9b\u0c9d\3\2\2\2\u0c9c\u0c81\3\2\2\2\u0c9c\u0c86\3\2\2"+
		"\2\u0c9c\u0c94\3\2\2\2\u0c9d\u00bd\3\2\2\2\u0c9e\u0c9f\7W\2\2\u0c9f\u0ca0"+
		"\7\u03d9\2\2\u0ca0\u0ca1\7\u0221\2\2\u0ca1\u0ca7\5\u05e2\u02f2\2\u0ca2"+
		"\u0ca8\5\u00b0Y\2\u0ca3\u0ca4\5\u00aeX\2\u0ca4\u0ca5\7\u0481\2\2\u0ca5"+
		"\u0ca6\5\u00b0Y\2\u0ca6\u0ca8\3\2\2\2\u0ca7\u0ca2\3\2\2\2\u0ca7\u0ca3"+
		"\3\2\2\2\u0ca7\u0ca8\3\2\2\2\u0ca8\u0cda\3\2\2\2\u0ca9\u0caa\7W\2\2\u0caa"+
		"\u0cab\7\u03d9\2\2\u0cab\u0cac\7\u018a\2\2\u0cac\u0cad\5\u05e2\u02f2\2"+
		"\u0cad\u0cae\5\u00b6\\\2\u0cae\u0cda\3\2\2\2\u0caf\u0cb0\7W\2\2\u0cb0"+
		"\u0cb1\7\u03d9\2\2\u0cb1\u0cb2\7\u018a\2\2\u0cb2\u0cb3\5\u05e2\u02f2\2"+
		"\u0cb3\u0cb4\7\u03d3\2\2\u0cb4\u0cb5\7\u00c8\2\2\u0cb5\u0cb6\7\u0487\2"+
		"\2\u0cb6\u0cb7\5\u00ceh\2\u0cb7\u0cb8\7\u048e\2\2\u0cb8\u0cb9\7\u00f7"+
		"\2\2\u0cb9\u0cba\7\u0487\2\2\u0cba\u0cbb\5\u00ccg\2\u0cbb\u0cbc\7\u048e"+
		"\2\2\u0cbc\u0cda\3\2\2\2\u0cbd\u0cbe\7W\2\2\u0cbe\u0cbf\7\u03d9\2\2\u0cbf"+
		"\u0cc0\7\u018a\2\2\u0cc0\u0cc1\7\u00ed\2\2\u0cc1\u0cc2\7\u0487\2\2\u0cc2"+
		"\u0cc3\5\u00ceh\2\u0cc3\u0cc4\7\u048e\2\2\u0cc4\u0cc5\7\u00c8\2\2\u0cc5"+
		"\u0cc6\7\u0487\2\2\u0cc6\u0cc7\5\u00ceh\2\u0cc7\u0cc8\7\u048e\2\2\u0cc8"+
		"\u0cda\3\2\2\2\u0cc9\u0cca\7W\2\2\u0cca\u0ccb\7\u03d9\2\2\u0ccb\u0ccc"+
		"\7\u0472\2\2\u0ccc\u0ccd\5\u05e2\u02f2\2\u0ccd\u0cce\7\u02ce\2\2\u0cce"+
		"\u0ccf\5\u01a4\u00d3\2\u0ccf\u0cd7\7\u0179\2\2\u0cd0\u0cd1\7\u008d\2\2"+
		"\u0cd1\u0cd2\7\u039e\2\2\u0cd2\u0cd3\5\u01a4\u00d3\2\u0cd3\u0cd4\7\u0487"+
		"\2\2\u0cd4\u0cd5\5\u00ba^\2\u0cd5\u0cd6\7\u048e\2\2\u0cd6\u0cd8\3\2\2"+
		"\2\u0cd7\u0cd0\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8\u0cda\3\2\2\2\u0cd9\u0c9e"+
		"\3\2\2\2\u0cd9\u0ca9\3\2\2\2\u0cd9\u0caf\3\2\2\2\u0cd9\u0cbd\3\2\2\2\u0cd9"+
		"\u0cc9\3\2\2\2\u0cda\u00bf\3\2\2\2\u0cdb\u0cdc\7\u0097\2\2\u0cdc\u0cdd"+
		"\7\u03d9\2\2\u0cdd\u0ce0\t,\2\2\u0cde\u0cdf\7\u00b6\2\2\u0cdf\u0ce1\7"+
		"\u009e\2\2\u0ce0\u0cde\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce2\3\2\2\2"+
		"\u0ce2\u0ce3\5\u05e2\u02f2\2\u0ce3\u00c1\3\2\2\2\u0ce4\u0ce5\7x\2\2\u0ce5"+
		"\u0cea\7\u0472\2\2\u0ce6\u0ce7\7\u00b6\2\2\u0ce7\u0ce8\5<\37\2\u0ce8\u0ce9"+
		"\7\u009e\2\2\u0ce9\u0ceb\3\2\2\2\u0cea\u0ce6\3\2\2\2\u0cea\u0ceb\3\2\2"+
		"\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cf2\5\u05e2\u02f2\2\u0ced\u0cf3\5\u00ca"+
		"f\2\u0cee\u0cef\5\u00c8e\2\u0cef\u0cf0\7\u0481\2\2\u0cf0\u0cf1\5\u00ca"+
		"f\2\u0cf1\u0cf3\3\2\2\2\u0cf2\u0ced\3\2\2\2\u0cf2\u0cee\3\2\2\2\u0cf2"+
		"\u0cf3\3\2\2\2\u0cf3\u0cfb\3\2\2\2\u0cf4\u0cf5\7\u0121\2\2\u0cf5\u0cfc"+
		"\5\u047a\u023e\2\u0cf6\u0cf7\7\u0121\2\2\u0cf7\u0cf8\7\u0320\2\2\u0cf8"+
		"\u0cfc\5\u047a\u023e\2\u0cf9\u0cfa\7\u0320\2\2\u0cfa\u0cfc\5\u047a\u023e"+
		"\2\u0cfb\u0cf4\3\2\2\2\u0cfb\u0cf6\3\2\2\2\u0cfb\u0cf9\3\2\2\2\u0cfb\u0cfc"+
		"\3\2\2\2\u0cfc\u00c3\3\2\2\2\u0cfd\u0cfe\7x\2\2\u0cfe\u0cff\7\u041f\2"+
		"\2\u0cff\u0d04\7\u0472\2\2\u0d00\u0d01\7\u00b6\2\2\u0d01\u0d02\5<\37\2"+
		"\u0d02\u0d03\7\u009e\2\2\u0d03\u0d05\3\2\2\2\u0d04\u0d00\3\2\2\2\u0d04"+
		"\u0d05\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d08\5\u05e2\u02f2\2\u0d07\u0d09"+
		"\5\u00c6d\2\u0d08\u0d07\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d0f\3\2\2"+
		"\2\u0d0a\u0d10\5\u00caf\2\u0d0b\u0d0c\5\u00c8e\2\u0d0c\u0d0d\7\u0481\2"+
		"\2\u0d0d\u0d0e\5\u00caf\2\u0d0e\u0d10\3\2\2\2\u0d0f\u0d0a\3\2\2\2\u0d0f"+
		"\u0d0b\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u00c5\3\2\2\2\u0d11\u0d13\7\u0477"+
		"\2\2\u0d12\u0d14\7\u0493\2\2\u0d13\u0d12\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14"+
		"\u0d15\3\2\2\2\u0d15\u0d16\5,\27\2\u0d16\u00c7\3\2\2\2\u0d17\u0d18\be"+
		"\1\2\u0d18\u0d1b\5\u00caf\2\u0d19\u0d1b\5\u0642\u0322\2\u0d1a\u0d17\3"+
		"\2\2\2\u0d1a\u0d19\3\2\2\2\u0d1b\u0d21\3\2\2\2\u0d1c\u0d1d\f\3\2\2\u0d1d"+
		"\u0d1e\7\u0481\2\2\u0d1e\u0d20\5\u00caf\2\u0d1f\u0d1c\3\2\2\2\u0d20\u0d23"+
		"\3\2\2\2\u0d21\u0d1f\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u00c9\3\2\2\2\u0d23"+
		"\u0d21\3\2\2\2\u0d24\u0d26\t-\2\2\u0d25\u0d27\7\u0493\2\2\u0d26\u0d25"+
		"\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d63\7\u0179\2"+
		"\2\u0d29\u0d2b\7\u0278\2\2\u0d2a\u0d2c\7\u0493\2\2\u0d2b\u0d2a\3\2\2\2"+
		"\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2f\7\u04a3\2\2\u0d2e"+
		"\u0d30\7\u00a8\2\2\u0d2f\u0d2e\3\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30\u0d63"+
		"\3\2\2\2\u0d31\u0d33\7\u03e8\2\2\u0d32\u0d34\7\u0493\2\2\u0d33\u0d32\3"+
		"\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d63\5\u0190\u00c9"+
		"\2\u0d36\u0d38\7\u0448\2\2\u0d37\u0d39\7\u0493\2\2\u0d38\u0d37\3\2\2\2"+
		"\u0d38\u0d39\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d3b\7\u0487\2\2\u0d3b"+
		"\u0d3c\5\u00ceh\2\u0d3c\u0d3d\7\u048e\2\2\u0d3d\u0d63\3\2\2\2\u0d3e\u0d40"+
		"\7\u0478\2\2\u0d3f\u0d41\7\u0493\2\2\u0d40\u0d3f\3\2\2\2\u0d40\u0d41\3"+
		"\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d63\7\u0476\2\2\u0d43\u0d45\7\u03ea"+
		"\2\2\u0d44\u0d46\7\u0493\2\2\u0d45\u0d44\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46"+
		"\u0d47\3\2\2\2\u0d47\u0d48\7\u0487\2\2\u0d48\u0d49\5\u00ccg\2\u0d49\u0d4a"+
		"\7\u048e\2\2\u0d4a\u0d63\3\2\2\2\u0d4b\u0d4d\5\u00f0y\2\u0d4c\u0d4e\7"+
		"\u0493\2\2\u0d4d\u0d4c\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u0d4f\3\2\2\2"+
		"\u0d4f\u0d50\5\u017c\u00bf\2\u0d50\u0d63\3\2\2\2\u0d51\u0d53\7t\2\2\u0d52"+
		"\u0d54\7\u0493\2\2\u0d53\u0d52\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d55"+
		"\3\2\2\2\u0d55\u0d63\5\u0176\u00bc\2\u0d56\u0d63\5\u00f4{\2\u0d57\u0d59"+
		"\7\u01ed\2\2\u0d58\u0d5a\7\u0493\2\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a\3"+
		"\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d63\7\u04a3\2\2\u0d5c\u0d63\5\u022c"+
		"\u0117\2\u0d5d\u0d5f\7\u0438\2\2\u0d5e\u0d60\7\u0493\2\2\u0d5f\u0d5e\3"+
		"\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d63\7\u0476\2\2"+
		"\u0d62\u0d24\3\2\2\2\u0d62\u0d29\3\2\2\2\u0d62\u0d31\3\2\2\2\u0d62\u0d36"+
		"\3\2\2\2\u0d62\u0d3e\3\2\2\2\u0d62\u0d43\3\2\2\2\u0d62\u0d4b\3\2\2\2\u0d62"+
		"\u0d51\3\2\2\2\u0d62\u0d56\3\2\2\2\u0d62\u0d57\3\2\2\2\u0d62\u0d5c\3\2"+
		"\2\2\u0d62\u0d5d\3\2\2\2\u0d63\u00cb\3\2\2\2\u0d64\u0d6b\7\u04a3\2\2\u0d65"+
		"\u0d67\7\u0481\2\2\u0d66\u0d65\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d68"+
		"\3\2\2\2\u0d68\u0d6a\7\u04a3\2\2\u0d69\u0d66\3\2\2\2\u0d6a\u0d6d\3\2\2"+
		"\2\u0d6b\u0d69\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c\u00cd\3\2\2\2\u0d6d\u0d6b"+
		"\3\2\2\2\u0d6e\u0d73\7\u04a3\2\2\u0d6f\u0d70\7\u0481\2\2\u0d70\u0d72\7"+
		"\u04a3\2\2\u0d71\u0d6f\3\2\2\2\u0d72\u0d75\3\2\2\2\u0d73\u0d71\3\2\2\2"+
		"\u0d73\u0d74\3\2\2\2\u0d74\u00cf\3\2\2\2\u0d75\u0d73\3\2\2\2\u0d76\u0d77"+
		"\7W\2\2\u0d77\u0d78\7\u0472\2\2\u0d78\u0d7a\5\u05e2\u02f2\2\u0d79\u0d7b"+
		"\7\u0121\2\2\u0d7a\u0d79\3\2\2\2\u0d7a\u0d7b\3\2\2\2\u0d7b\u0d81\3\2\2"+
		"\2\u0d7c\u0d82\5\u00caf\2\u0d7d\u0d7e\5\u00c8e\2\u0d7e\u0d7f\7\u0481\2"+
		"\2\u0d7f\u0d80\5\u00caf\2\u0d80\u0d82\3\2\2\2\u0d81\u0d7c\3\2\2\2\u0d81"+
		"\u0d7d\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d85\3\2\2\2\u0d83\u0d84\7\u0320"+
		"\2\2\u0d84\u0d86\5\u047a\u023e\2\u0d85\u0d83\3\2\2\2\u0d85\u0d86\3\2\2"+
		"\2\u0d86\u0da6\3\2\2\2\u0d87\u0d88\7W\2\2\u0d88\u0d89\7\u0472\2\2\u0d89"+
		"\u0d8b\7[\2\2\u0d8a\u0d8c\7\u0121\2\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c"+
		"\3\2\2\2\u0d8c\u0d92\3\2\2\2\u0d8d\u0d93\5\u00caf\2\u0d8e\u0d8f\5\u00c8"+
		"e\2\u0d8f\u0d90\7\u0481\2\2\u0d90\u0d91\5\u00caf\2\u0d91\u0d93\3\2\2\2"+
		"\u0d92\u0d8d\3\2\2\2\u0d92\u0d8e\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d96"+
		"\3\2\2\2\u0d94\u0d95\7\u0320\2\2\u0d95\u0d97\5\u047a\u023e\2\u0d96\u0d94"+
		"\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0da6\3\2\2\2\u0d98\u0d99\7W\2\2\u0d99"+
		"\u0d9a\7\u0472\2\2\u0d9a\u0d9b\5\u05e2\u02f2\2\u0d9b\u0d9c\7\u0112\2\2"+
		"\u0d9c\u0d9d\7\u03d2\2\2\u0d9d\u0d9e\7\u0140\2\2\u0d9e\u0d9f\5\u05e2\u02f2"+
		"\2\u0d9f\u0da6\3\2\2\2\u0da0\u0da1\7W\2\2\u0da1\u0da2\7\u0472\2\2\u0da2"+
		"\u0da3\5\u05e2\u02f2\2\u0da3\u0da4\5\u0434\u021b\2\u0da4\u0da6\3\2\2\2"+
		"\u0da5\u0d76\3\2\2\2\u0da5\u0d87\3\2\2\2\u0da5\u0d98\3\2\2\2\u0da5\u0da0"+
		"\3\2\2\2\u0da6\u00d1\3\2\2\2\u0da7\u0da8\7x\2\2\u0da8\u0da9\7\u026d\2"+
		"\2\u0da9\u0daa\5\u00d4k\2\u0daa\u0dab\7\u00a7\2\2\u0dab\u0dac\7\u0472"+
		"\2\2\u0dac\u0dad\5\u05e2\u02f2\2\u0dad\u0db2\3\2\2\2\u0dae\u0daf\7x\2"+
		"\2\u0daf\u0db0\7\u026d\2\2\u0db0\u0db2\5\u00d4k\2\u0db1\u0da7\3\2\2\2"+
		"\u0db1\u0dae\3\2\2\2\u0db2\u00d3\3\2\2\2\u0db3\u0db5\5\u05e2\u02f2\2\u0db4"+
		"\u0db3\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u00d5\3\2\2\2\u0db6\u0db7\7\u0097"+
		"\2\2\u0db7\u0db8\7\u026d\2\2\u0db8\u0db9\5\u05e2\u02f2\2\u0db9\u0dba\7"+
		"\u00a7\2\2\u0dba\u0dbb\7\u0472\2\2\u0dbb\u0dbc\5\u05e2\u02f2\2\u0dbc\u0dc1"+
		"\3\2\2\2\u0dbd\u0dbe\7\u0097\2\2\u0dbe\u0dbf\7\u026d\2\2\u0dbf\u0dc1\5"+
		"\u05e2\u02f2\2\u0dc0\u0db6\3\2\2\2\u0dc0\u0dbd\3\2\2\2\u0dc1\u00d7\3\2"+
		"\2\2\u0dc2\u0dc3\7x\2\2\u0dc3\u0dc8\7\u0472\2\2\u0dc4\u0dc5\7\u00b6\2"+
		"\2\u0dc5\u0dc6\5<\37\2\u0dc6\u0dc7\7\u009e\2\2\u0dc7\u0dc9\3\2\2\2\u0dc8"+
		"\u0dc4\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcb\5\u05e2"+
		"\u02f2\2\u0dcb\u0dcc\7\u00a9\2\2\u0dcc\u0dcd\5\u05e2\u02f2\2\u0dcd\u0dce"+
		"\5\u00dan\2\u0dce\u0dcf\7\u015f\2\2\u0dcf\u0dd0\5\u00dep\2\u0dd0\u00d9"+
		"\3\2\2\2\u0dd1\u0dd2\7\u014e\2\2\u0dd2\u0dd3\7\u026d\2\2\u0dd3\u0dd6\5"+
		"\u05e2\u02f2\2\u0dd4\u0dd6\5\u0642\u0322\2\u0dd5\u0dd1\3\2\2\2\u0dd5\u0dd4"+
		"\3\2\2\2\u0dd6\u00db\3\2\2\2\u0dd7\u0dd8\7\u0447\2\2\u0dd8\u0dd9\5\u01a4"+
		"\u00d3\2\u0dd9\u0dda\5\u01a2\u00d2\2\u0dda\u0de0\3\2\2\2\u0ddb\u0ddc\7"+
		"\u0221\2\2\u0ddc\u0ddd\5\u01a4\u00d3\2\u0ddd\u0dde\5\u01a2\u00d2\2\u0dde"+
		"\u0de0\3\2\2\2\u0ddf\u0dd7\3\2\2\2\u0ddf\u0ddb\3\2\2\2\u0de0\u00dd\3\2"+
		"\2\2\u0de1\u0de2\5\u00dco\2\u0de2\u0de3\7\u0481\2\2\u0de3\u0de4\5\u00dc"+
		"o\2\u0de4\u00df\3\2\2\2\u0de5\u0de6\7\u0097\2\2\u0de6\u0de9\7\u0472\2"+
		"\2\u0de7\u0de8\7\u00b6\2\2\u0de8\u0dea\7\u009e\2\2\u0de9\u0de7\3\2\2\2"+
		"\u0de9\u0dea\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0ded\5\u05e2\u02f2\2\u0dec"+
		"\u0dee\t.\2\2\u0ded\u0dec\3\2\2\2\u0ded\u0dee\3\2\2\2\u0dee\u00e1\3\2"+
		"\2\2\u0def\u0df0\7x\2\2\u0df0\u0df1\7\u0269\2\2\u0df1\u0df2\7\u0245\2"+
		"\2\u0df2\u0df3\5\u05e2\u02f2\2\u0df3\u00e3\3\2\2\2\u0df4\u0df5\7\u0097"+
		"\2\2\u0df5\u0df6\7\u0269\2\2\u0df6\u0df7\7\u0245\2\2\u0df7\u0df8\5\u05e2"+
		"\u02f2\2\u0df8\u00e5\3\2\2\2\u0df9\u0dfa\7x\2\2\u0dfa\u0dff\5\u00e8u\2"+
		"\u0dfb\u0dfc\7\u00b6\2\2\u0dfc\u0dfd\5<\37\2\u0dfd\u0dfe\7\u009e\2\2\u0dfe"+
		"\u0e00\3\2\2\2\u0dff\u0dfb\3\2\2\2\u0dff\u0e00\3\2\2\2\u0e00\u0e01\3\2"+
		"\2\2\u0e01\u0e03\5\u00eav\2\u0e02\u0e04\5\u00ecw\2\u0e03\u0e02\3\2\2\2"+
		"\u0e03\u0e04\3\2\2\2\u0e04\u00e7\3\2\2\2\u0e05\u0e06\t/\2\2\u0e06\u00e9"+
		"\3\2\2\2\u0e07\u0e08\5\u05e2\u02f2\2\u0e08\u00eb\3\2\2\2\u0e09\u0e0b\5"+
		"\u00f2z\2\u0e0a\u0e09\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0e0a\3\2\2\2"+
		"\u0e0c\u0e0d\3\2\2\2\u0e0d\u00ed\3\2\2\2\u0e0e\u0e10\7\u0086\2\2\u0e0f"+
		"\u0e11\7\u0493\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0e12"+
		"\3\2\2\2\u0e12\u0e13\7\u04a3\2\2\u0e13\u00ef\3\2\2\2\u0e14\u0e18\7\u02f7"+
		"\2\2\u0e15\u0e16\7l\2\2\u0e16\u0e18\7\u0121\2\2\u0e17\u0e14\3\2\2\2\u0e17"+
		"\u0e15\3\2\2\2\u0e18\u00f1\3\2\2\2\u0e19\u0e1b\7\u008b\2\2\u0e1a\u0e19"+
		"\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c\u0e1e\5\u00f0y"+
		"\2\u0e1d\u0e1f\7\u0493\2\2\u0e1e\u0e1d\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f"+
		"\u0e20\3\2\2\2\u0e20\u0e21\5\u017c\u00bf\2\u0e21\u0e3c\3\2\2\2\u0e22\u0e24"+
		"\7\u008b\2\2\u0e23\u0e22\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e25\3\2\2"+
		"\2\u0e25\u0e27\7t\2\2\u0e26\u0e28\7\u0493\2\2\u0e27\u0e26\3\2\2\2\u0e27"+
		"\u0e28\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29\u0e3c\5\u0176\u00bc\2\u0e2a\u0e2c"+
		"\7\u03cb\2\2\u0e2b\u0e2d\7\u0493\2\2\u0e2c\u0e2b\3\2\2\2\u0e2c\u0e2d\3"+
		"\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e3c\7\u0179\2\2\u0e2f\u0e31\7\u03e8"+
		"\2\2\u0e30\u0e32\7\u0493\2\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32"+
		"\u0e33\3\2\2\2\u0e33\u0e3c\5\u0190\u00c9\2\u0e34\u0e3c\5\u00f4{\2\u0e35"+
		"\u0e3c\5\u022c\u0117\2\u0e36\u0e38\7\u03eb\2\2\u0e37\u0e39\7\u0493\2\2"+
		"\u0e38\u0e37\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a\u0e3c"+
		"\7\u0179\2\2\u0e3b\u0e1a\3\2\2\2\u0e3b\u0e23\3\2\2\2\u0e3b\u0e2a\3\2\2"+
		"\2\u0e3b\u0e2f\3\2\2\2\u0e3b\u0e34\3\2\2\2\u0e3b\u0e35\3\2\2\2\u0e3b\u0e36"+
		"\3\2\2\2\u0e3c\u00f3\3\2\2\2\u0e3d\u0e3e\7\u010b\2\2\u0e3e\u0e42\7\u0443"+
		"\2\2\u0e3f\u0e40\7\u010b\2\2\u0e40\u0e42\7\u0160\2\2\u0e41\u0e3d\3\2\2"+
		"\2\u0e41\u0e3f\3\2\2\2\u0e42\u00f5\3\2\2\2\u0e43\u0e44\7\u0097\2\2\u0e44"+
		"\u0e47\5\u00e8u\2\u0e45\u0e46\7\u00b6\2\2\u0e46\u0e48\7\u009e\2\2\u0e47"+
		"\u0e45\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4a\5\u00ea"+
		"v\2\u0e4a\u00f7\3\2\2\2\u0e4b\u0e4c\7W\2\2\u0e4c\u0e4e\5\u00e8u\2\u0e4d"+
		"\u0e4f\7\u04a2\2\2\u0e4e\u0e4d\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e51"+
		"\3\2\2\2\u0e50\u0e52\7\u0121\2\2\u0e51\u0e50\3\2\2\2\u0e51\u0e52\3\2\2"+
		"\2\u0e52\u0e53\3\2\2\2\u0e53\u0e54\5\u00ecw\2\u0e54\u00f9\3\2\2\2\u0e55"+
		"\u0e57\5\u00fc\177\2\u0e56\u0e58\t\60\2\2\u0e57\u0e56\3\2\2\2\u0e57\u0e58"+
		"\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59\u0e5a\7\u00ba\2\2\u0e5a\u0e5c\7\u04a3"+
		"\2\2\u0e5b\u0e5d\t\61\2\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d"+
		"\u0e5e\3\2\2\2\u0e5e\u0e5f\7\u00c8\2\2\u0e5f\u0e60\7\u013d\2\2\u0e60\u0e62"+
		"\5\u0350\u01a9\2\u0e61\u0e63\5\u033a\u019e\2\u0e62\u0e61\3\2\2\2\u0e62"+
		"\u0e63\3\2\2\2\u0e63\u0e68\3\2\2\2\u0e64\u0e65\7\u01bf\2\2\u0e65\u0e66"+
		"\5\u01a4\u00d3\2\u0e66\u0e67\5\u00fe\u0080\2\u0e67\u0e69\3\2\2\2\u0e68"+
		"\u0e64\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e6d\3\2\2\2\u0e6a\u0e6b\7l"+
		"\2\2\u0e6b\u0e6c\7\u0121\2\2\u0e6c\u0e6e\5\u017e\u00c0\2\u0e6d\u0e6a\3"+
		"\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e70\5\u02dc\u016f"+
		"\2\u0e70\u0e77\5\u02ec\u0177\2\u0e71\u0e72\7\u01eb\2\2\u0e72\u0e73\7\u0179"+
		"\2\2\u0e73\u0e78\5\u0100\u0081\2\u0e74\u0e75\7\u00ad\2\2\u0e75\u0e76\7"+
		"\u0179\2\2\u0e76\u0e78\5\u0100\u0081\2\u0e77\u0e71\3\2\2\2\u0e77\u0e74"+
		"\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0e7f\3\2\2\2\u0e79\u0e7a\7\u0487\2"+
		"\2\u0e7a\u0e80\7\u048e\2\2\u0e7b\u0e7c\7\u0487\2\2\u0e7c\u0e7d\5\u0102"+
		"\u0082\2\u0e7d\u0e7e\7\u048e\2\2\u0e7e\u0e80\3\2\2\2\u0e7f\u0e79\3\2\2"+
		"\2\u0e7f\u0e7b\3\2\2\2\u0e7f\u0e80\3\2\2\2\u0e80\u0e83\3\2\2\2\u0e81\u0e82"+
		"\7\u0121\2\2\u0e82\u0e84\5\u0106\u0084\2\u0e83\u0e81\3\2\2\2\u0e83\u0e84"+
		"\3\2\2\2\u0e84\u0e86\3\2\2\2\u0e85\u0e87\5\u010a\u0086\2\u0e86\u0e85\3"+
		"\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u00fb\3\2\2\2\u0e88\u0e89\7\u00db\2\2"+
		"\u0e89\u0e8d\7\u045c\2\2\u0e8a\u0e8b\7\u04a7\2\2\u0e8b\u0e8d\5\u02f2\u017a"+
		"\2\u0e8c\u0e88\3\2\2\2\u0e8c\u0e8a\3\2\2\2\u0e8d\u00fd\3\2\2\2\u0e8e\u0e91"+
		"\7\u04a2\2\2\u0e8f\u0e91\5\u0634\u031b\2\u0e90\u0e8e\3\2\2\2\u0e90\u0e8f"+
		"\3\2\2\2\u0e91\u00ff\3\2\2\2\u0e92\u0e93\t\62\2\2\u0e93\u0101\3\2\2\2"+
		"\u0e94\u0e99\5\u0104\u0083\2\u0e95\u0e96\7\u0481\2\2\u0e96\u0e98\5\u0104"+
		"\u0083\2\u0e97\u0e95\3\2\2\2\u0e98\u0e9b\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e99"+
		"\u0e9a\3\2\2\2\u0e9a\u0103\3\2\2\2\u0e9b\u0e99\3\2\2\2\u0e9c\u0e9f\5\u0140"+
		"\u00a1\2\u0e9d\u0e9f\7\u04a1\2\2\u0e9e\u0e9c\3\2\2\2\u0e9e\u0e9d\3\2\2"+
		"\2\u0e9f\u0105\3\2\2\2\u0ea0\u0ea5\5\u0108\u0085\2\u0ea1\u0ea2\7\u0481"+
		"\2\2\u0ea2\u0ea4\5\u0108\u0085\2\u0ea3\u0ea1\3\2\2\2\u0ea4\u0ea7\3\2\2"+
		"\2\u0ea5\u0ea3\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0107\3\2\2\2\u0ea7\u0ea5"+
		"\3\2\2\2\u0ea8\u0ea9\5\u0140\u00a1\2\u0ea9\u0eaa\7\u0493\2\2\u0eaa\u0eab"+
		"\5\u02a4\u0153\2\u0eab\u0109\3\2\2\2\u0eac\u0eae\5\u010c\u0087\2\u0ead"+
		"\u0eaf\5\u010a\u0086\2\u0eae\u0ead\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u010b"+
		"\3\2\2\2\u0eb0\u0eb2\7\u0384\2\2\u0eb1\u0eb3\7\u0493\2\2\u0eb2\u0eb1\3"+
		"\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4\u0ec1\7\u04a3\2\2"+
		"\u0eb5\u0eb6\7\u0122\2\2\u0eb6\u0eb8\7\u00d6\2\2\u0eb7\u0eb9\7\u0493\2"+
		"\2\u0eb8\u0eb7\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba\u0ec1"+
		"\7\u0179\2\2\u0ebb\u0ebd\7\u0338\2\2\u0ebc\u0ebe\7\u0493\2\2\u0ebd\u0ebc"+
		"\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u0ec1\7\u04a3\2"+
		"\2\u0ec0\u0eb0\3\2\2\2\u0ec0\u0eb5\3\2\2\2\u0ec0\u0ebb\3\2\2\2\u0ec1\u010d"+
		"\3\2\2\2\u0ec2\u0ec3\7\u014d\2\2\u0ec3\u0ec4\5\u00eav\2\u0ec4\u010f\3"+
		"\2\2\2\u0ec5\u0ec7\t\63\2\2\u0ec6\u0ec5\3\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7"+
		"\u0111\3\2\2\2\u0ec8\u0ec9\7x\2\2\u0ec9\u0eca\5\u0110\u0089\2\u0eca\u0ecf"+
		"\7\u013d\2\2\u0ecb\u0ecc\7\u00b6\2\2\u0ecc\u0ecd\5<\37\2\u0ecd\u0ece\7"+
		"\u009e\2\2\u0ece\u0ed0\3\2\2\2\u0ecf\u0ecb\3\2\2\2\u0ecf\u0ed0\3\2\2\2"+
		"\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed2\5\u0350\u01a9\2\u0ed2\u0ed3\7\u00d7\2"+
		"\2\u0ed3\u0ed4\5\u0350\u01a9\2\u0ed4\u0ee5\3\2\2\2\u0ed5\u0ed6\7x\2\2"+
		"\u0ed6\u0ed7\5\u0110\u0089\2\u0ed7\u0edc\7\u013d\2\2\u0ed8\u0ed9\7\u00b6"+
		"\2\2\u0ed9\u0eda\5<\37\2\u0eda\u0edb\7\u009e\2\2\u0edb\u0edd\3\2\2\2\u0edc"+
		"\u0ed8\3\2\2\2\u0edc\u0edd\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0edf\5\u0350"+
		"\u01a9\2\u0edf\u0ee0\7\u0487\2\2\u0ee0\u0ee1\7\u00d7\2\2\u0ee1\u0ee2\5"+
		"\u0350\u01a9\2\u0ee2\u0ee3\7\u048e\2\2\u0ee3\u0ee5\3\2\2\2\u0ee4\u0ec8"+
		"\3\2\2\2\u0ee4\u0ed5\3\2\2\2\u0ee5\u0113\3\2\2\2\u0ee6\u0ee7\7x\2\2\u0ee7"+
		"\u0ee8\5\u0110\u0089\2\u0ee8\u0eed\7\u013d\2\2\u0ee9\u0eea\7\u00b6\2\2"+
		"\u0eea\u0eeb\5<\37\2\u0eeb\u0eec\7\u009e\2\2\u0eec\u0eee\3\2\2\2\u0eed"+
		"\u0ee9\3\2\2\2\u0eed\u0eee\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef\u0ef0\5\u0350"+
		"\u01a9\2\u0ef0\u0ef1\7\u0487\2\2\u0ef1\u0ef2\5\u0122\u0092\2\u0ef2\u0ef4"+
		"\7\u048e\2\2\u0ef3\u0ef5\5\u018e\u00c8\2\u0ef4\u0ef3\3\2\2\2\u0ef4\u0ef5"+
		"\3\2\2\2\u0ef5\u0ef8\3\2\2\2\u0ef6\u0ef9\5\u01a6\u00d4\2\u0ef7\u0ef9\5"+
		"\u01a8\u00d5\2\u0ef8\u0ef6\3\2\2\2\u0ef8\u0ef7\3\2\2\2\u0ef8\u0ef9\3\2"+
		"\2\2\u0ef9\u0efb\3\2\2\2\u0efa\u0efc\5\u01ae\u00d8\2\u0efb\u0efa\3\2\2"+
		"\2\u0efb\u0efc\3\2\2\2\u0efc\u0f62\3\2\2\2\u0efd\u0efe\7x\2\2\u0efe\u0eff"+
		"\5\u0110\u0089\2\u0eff\u0f04\7\u013d\2\2\u0f00\u0f01\7\u00b6\2\2\u0f01"+
		"\u0f02\5<\37\2\u0f02\u0f03\7\u009e\2\2\u0f03\u0f05\3\2\2\2\u0f04\u0f00"+
		"\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0f07\5\u0350\u01a9"+
		"\2\u0f07\u0f08\7\u0487\2\2\u0f08\u0f09\5\u0122\u0092\2\u0f09\u0f0b\7\u048e"+
		"\2\2\u0f0a\u0f0c\5\u018e\u00c8\2\u0f0b\u0f0a\3\2\2\2\u0f0b\u0f0c\3\2\2"+
		"\2\u0f0c\u0f0f\3\2\2\2\u0f0d\u0f10\5\u01a6\u00d4\2\u0f0e\u0f10\5\u01a8"+
		"\u00d5\2\u0f0f\u0f0d\3\2\2\2\u0f0f\u0f0e\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10"+
		"\u0f15\3\2\2\2\u0f11\u0f13\5\u01ae\u00d8\2\u0f12\u0f11\3\2\2\2\u0f12\u0f13"+
		"\3\2\2\2\u0f13\u0f16\3\2\2\2\u0f14\u0f16\5\u0116\u008c\2\u0f15\u0f12\3"+
		"\2\2\2\u0f15\u0f14\3\2\2\2\u0f16\u0f18\3\2\2\2\u0f17\u0f19\7^\2\2\u0f18"+
		"\u0f17\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b\5\u02a6"+
		"\u0154\2\u0f1b\u0f62\3\2\2\2\u0f1c\u0f1d\7x\2\2\u0f1d\u0f1e\5\u0110\u0089"+
		"\2\u0f1e\u0f23\7\u013d\2\2\u0f1f\u0f20\7\u00b6\2\2\u0f20\u0f21\5<\37\2"+
		"\u0f21\u0f22\7\u009e\2\2\u0f22\u0f24\3\2\2\2\u0f23\u0f1f\3\2\2\2\u0f23"+
		"\u0f24\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25\u0f26\5\u0350\u01a9\2\u0f26\u0f29"+
		"\5\u018e\u00c8\2\u0f27\u0f2a\5\u01a6\u00d4\2\u0f28\u0f2a\5\u01a8\u00d5"+
		"\2\u0f29\u0f27\3\2\2\2\u0f29\u0f28\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u0f2f"+
		"\3\2\2\2\u0f2b\u0f2d\5\u01ae\u00d8\2\u0f2c\u0f2b\3\2\2\2\u0f2c\u0f2d\3"+
		"\2\2\2\u0f2d\u0f30\3\2\2\2\u0f2e\u0f30\5\u0116\u008c\2\u0f2f\u0f2c\3\2"+
		"\2\2\u0f2f\u0f2e\3\2\2\2\u0f30\u0f32\3\2\2\2\u0f31\u0f33\7^\2\2\u0f32"+
		"\u0f31\3\2\2\2\u0f32\u0f33\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f35\5\u02a6"+
		"\u0154\2\u0f35\u0f62\3\2\2\2\u0f36\u0f37\7x\2\2\u0f37\u0f38\5\u0110\u0089"+
		"\2\u0f38\u0f3d\7\u013d\2\2\u0f39\u0f3a\7\u00b6\2\2\u0f3a\u0f3b\5<\37\2"+
		"\u0f3b\u0f3c\7\u009e\2\2\u0f3c\u0f3e\3\2\2\2\u0f3d\u0f39\3\2\2\2\u0f3d"+
		"\u0f3e\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f40\5\u0350\u01a9\2\u0f40\u0f45"+
		"\5\u01a6\u00d4\2\u0f41\u0f43\5\u01ae\u00d8\2\u0f42\u0f41\3\2\2\2\u0f42"+
		"\u0f43\3\2\2\2\u0f43\u0f46\3\2\2\2\u0f44\u0f46\5\u0116\u008c\2\u0f45\u0f42"+
		"\3\2\2\2\u0f45\u0f44\3\2\2\2\u0f46\u0f48\3\2\2\2\u0f47\u0f49\7^\2\2\u0f48"+
		"\u0f47\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f4a\3\2\2\2\u0f4a\u0f4b\5\u02a6"+
		"\u0154\2\u0f4b\u0f62\3\2\2\2\u0f4c\u0f4d\7x\2\2\u0f4d\u0f4e\5\u0110\u0089"+
		"\2\u0f4e\u0f53\7\u013d\2\2\u0f4f\u0f50\7\u00b6\2\2\u0f50\u0f51\5<\37\2"+
		"\u0f51\u0f52\7\u009e\2\2\u0f52\u0f54\3\2\2\2\u0f53\u0f4f\3\2\2\2\u0f53"+
		"\u0f54\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55\u0f5a\5\u0350\u01a9\2\u0f56\u0f58"+
		"\5\u01ae\u00d8\2\u0f57\u0f56\3\2\2\2\u0f57\u0f58\3\2\2\2\u0f58\u0f5b\3"+
		"\2\2\2\u0f59\u0f5b\5\u0116\u008c\2\u0f5a\u0f57\3\2\2\2\u0f5a\u0f59\3\2"+
		"\2\2\u0f5b\u0f5d\3\2\2\2\u0f5c\u0f5e\7^\2\2\u0f5d\u0f5c\3\2\2\2\u0f5d"+
		"\u0f5e\3\2\2\2\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f60\5\u02a6\u0154\2\u0f60\u0f62"+
		"\3\2\2\2\u0f61\u0ee6\3\2\2\2\u0f61\u0efd\3\2\2\2\u0f61\u0f1c\3\2\2\2\u0f61"+
		"\u0f36\3\2\2\2\u0f61\u0f4c\3\2\2\2\u0f62\u0115\3\2\2\2\u0f63\u0f64\t\61"+
		"\2\2\u0f64\u0117\3\2\2\2\u0f65\u0f66\t\64\2\2\u0f66\u0119\3\2\2\2\u0f67"+
		"\u0f69\7x\2\2\u0f68\u0f6a\7\u035d\2\2\u0f69\u0f68\3\2\2\2\u0f69\u0f6a"+
		"\3\2\2\2\u0f6a\u0f6b\3\2\2\2\u0f6b\u0f6c\7\u02b4\2\2\u0f6c\u0f6d\7\u04a2"+
		"\2\2\u0f6d\u0f6e\7\u01fb\2\2\u0f6e\u0f6f\5\u0118\u008d\2\u0f6f\u0f70\7"+
		"\u034d\2\2\u0f70\u0f71\7\u04a3\2\2\u0f71\u011b\3\2\2\2\u0f72\u0f73\7\u0097"+
		"\2\2\u0f73\u0f76\7\u02b4\2\2\u0f74\u0f75\7\u00b6\2\2\u0f75\u0f77\7\u009e"+
		"\2\2\u0f76\u0f74\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78"+
		"\u0f79\5\u0350\u01a9\2\u0f79\u011d\3\2\2\2\u0f7a\u0f7b\7\u0097\2\2\u0f7b"+
		"\u0f7e\7\u0102\2\2\u0f7c\u0f7d\7\u00b6\2\2\u0f7d\u0f7f\7\u009e\2\2\u0f7e"+
		"\u0f7c\3\2\2\2\u0f7e\u0f7f\3\2\2\2\u0f7f\u0f80\3\2\2\2\u0f80\u0f81\5\u0350"+
		"\u01a9\2\u0f81\u011f\3\2\2\2\u0f82\u0f83\7\u0097\2\2\u0f83\u0f86\7\u0142"+
		"\2\2\u0f84\u0f85\7\u00b6\2\2\u0f85\u0f87\7\u009e\2\2\u0f86\u0f84\3\2\2"+
		"\2\u0f86\u0f87\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u0f89\5\u0350\u01a9\2"+
		"\u0f89\u0121\3\2\2\2\u0f8a\u0f8f\5\u0124\u0093\2\u0f8b\u0f8c\7\u0481\2"+
		"\2\u0f8c\u0f8e\5\u0124\u0093\2\u0f8d\u0f8b\3\2\2\2\u0f8e\u0f91\3\2\2\2"+
		"\u0f8f\u0f8d\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0123\3\2\2\2\u0f91\u0f8f"+
		"\3\2\2\2\u0f92\u0f96\5\u0138\u009d\2\u0f93\u0f96\5\u012a\u0096\2\u0f94"+
		"\u0f96\5\u0126\u0094\2\u0f95\u0f92\3\2\2\2\u0f95\u0f93\3\2\2\2\u0f95\u0f94"+
		"\3\2\2\2\u0f96\u0125\3\2\2\2\u0f97\u0f98\7q\2\2\u0f98\u0f9a\5\u025a\u012e"+
		"\2\u0f99\u0f97\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0fbb"+
		"\5\u012c\u0097\2\u0f9c\u0f9d\7q\2\2\u0f9d\u0f9f\5\u025a\u012e\2\u0f9e"+
		"\u0f9c\3\2\2\2\u0f9e\u0f9f\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u0fbb\5\u012e"+
		"\u0098\2\u0fa1\u0fa2\7q\2\2\u0fa2\u0fa4\5\u025a\u012e\2\u0fa3\u0fa1\3"+
		"\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5\u0fa6\7m\2\2\u0fa6"+
		"\u0fa7\7\u0487\2\2\u0fa7\u0fa8\5:\36\2\u0fa8\u0faa\7\u048e\2\2\u0fa9\u0fab"+
		"\5\u0258\u012d\2\u0faa\u0fa9\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fbb\3"+
		"\2\2\2\u0fac\u0fad\7q\2\2\u0fad\u0faf\5\u025a\u012e\2\u0fae\u0fac\3\2"+
		"\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb1\7\u00a3\2\2\u0fb1"+
		"\u0fb3\7\u00cf\2\2\u0fb2\u0fb4\5\u0256\u012c\2\u0fb3\u0fb2\3\2\2\2\u0fb3"+
		"\u0fb4\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u0fb6\7\u0487\2\2\u0fb6\u0fb7"+
		"\5\u01c6\u00e4\2\u0fb7\u0fb8\7\u048e\2\2\u0fb8\u0fb9\5\u0128\u0095\2\u0fb9"+
		"\u0fbb\3\2\2\2\u0fba\u0f99\3\2\2\2\u0fba\u0f9e\3\2\2\2\u0fba\u0fa3\3\2"+
		"\2\2\u0fba\u0fae\3\2\2\2\u0fbb\u0127\3\2\2\2\u0fbc\u0fbd\7\u0110\2\2\u0fbd"+
		"\u0fbe\5\u0350\u01a9\2\u0fbe\u0fbf\7\u0487\2\2\u0fbf\u0fc0\5\u01c6\u00e4"+
		"\2\u0fc0\u0fc3\7\u048e\2\2\u0fc1\u0fc2\7\u00e9\2\2\u0fc2\u0fc4\5\u0136"+
		"\u009c\2\u0fc3\u0fc1\3\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0fc8\3\2\2\2\u0fc5"+
		"\u0fc6\5\u0130\u0099\2\u0fc6\u0fc7\5\u0132\u009a\2\u0fc7\u0fc9\3\2\2\2"+
		"\u0fc8\u0fc5\3\2\2\2\u0fc8\u0fc9\3\2\2\2\u0fc9\u0129\3\2\2\2\u0fca\u0fcc"+
		"\5\u0344\u01a3\2\u0fcb\u0fcd\5\u0256\u012c\2\u0fcc\u0fcb\3\2\2\2\u0fcc"+
		"\u0fcd\3\2\2\2\u0fcd\u0fcf\3\2\2\2\u0fce\u0fd0\5\u0266\u0134\2\u0fcf\u0fce"+
		"\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fd2\7\u0487\2"+
		"\2\u0fd2\u0fd3\5\u025e\u0130\2\u0fd3\u0fd5\7\u048e\2\2\u0fd4\u0fd6\5\u0262"+
		"\u0132\2\u0fd5\u0fd4\3\2\2\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0fd9\3\2\2\2\u0fd7"+
		"\u0fda\5\u01a6\u00d4\2\u0fd8\u0fda\5\u01a8\u00d5\2\u0fd9\u0fd7\3\2\2\2"+
		"\u0fd9\u0fd8\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdc\3\2\2\2\u0fdb\u0fdd"+
		"\5\u01ae\u00d8\2\u0fdc\u0fdb\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u1001\3"+
		"\2\2\2\u0fde\u0fe0\t\65\2\2\u0fdf\u0fe1\5\u0344\u01a3\2\u0fe0\u0fdf\3"+
		"\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe3\3\2\2\2\u0fe2\u0fe4\5\u0256\u012c"+
		"\2\u0fe3\u0fe2\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u0fe6\3\2\2\2\u0fe5\u0fe7"+
		"\5\u0266\u0134\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0fe8\3"+
		"\2\2\2\u0fe8\u0fe9\7\u0487\2\2\u0fe9\u0fea\5\u025e\u0130\2\u0fea\u0fec"+
		"\7\u048e\2\2\u0feb\u0fed\5\u0262\u0132\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed"+
		"\3\2\2\2\u0fed\u0ff0\3\2\2\2\u0fee\u0ff1\5\u01a6\u00d4\2\u0fef\u0ff1\5"+
		"\u01a8\u00d5\2\u0ff0\u0fee\3\2\2\2\u0ff0\u0fef\3\2\2\2\u0ff0\u0ff1\3\2"+
		"\2\2\u0ff1\u0ff3\3\2\2\2\u0ff2\u0ff4\5\u01ae\u00d8\2\u0ff3\u0ff2\3\2\2"+
		"\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u1001\3\2\2\2\u0ff5\u0ff6\7+\2\2\u0ff6\u0ff8"+
		"\5\u0344\u01a3\2\u0ff7\u0ff9\5\u0256\u012c\2\u0ff8\u0ff7\3\2\2\2\u0ff8"+
		"\u0ff9\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffb\7\u0487\2\2\u0ffb\u0ffc"+
		"\5\u025e\u0130\2\u0ffc\u0ffe\7\u048e\2\2\u0ffd\u0fff\5\u0262\u0132\2\u0ffe"+
		"\u0ffd\3\2\2\2\u0ffe\u0fff\3\2\2\2\u0fff\u1001\3\2\2\2\u1000\u0fca\3\2"+
		"\2\2\u1000\u0fde\3\2\2\2\u1000\u0ff5\3\2\2\2\u1001\u012b\3\2\2\2\u1002"+
		"\u1003\7\u0108\2\2\u1003\u1005\7\u00cf\2\2\u1004\u1006\5\u0256\u012c\2"+
		"\u1005\u1004\3\2\2\2\u1005\u1006\3\2\2\2\u1006\u1008\3\2\2\2\u1007\u1009"+
		"\5\u0266\u0134\2\u1008\u1007\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u100a\3"+
		"\2\2\2\u100a\u100b\7\u0487\2\2\u100b\u100c\5\u01c6\u00e4\2\u100c\u100e"+
		"\7\u048e\2\2\u100d\u100f\5\u0262\u0132\2\u100e\u100d\3\2\2\2\u100e\u100f"+
		"\3\2\2\2\u100f\u012d\3\2\2\2\u1010\u1012\7\u0146\2\2\u1011\u1013\5\u0344"+
		"\u01a3\2\u1012\u1011\3\2\2\2\u1012\u1013\3\2\2\2\u1013\u1015\3\2\2\2\u1014"+
		"\u1016\5\u0256\u012c\2\u1015\u1014\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u1018"+
		"\3\2\2\2\u1017\u1019\5\u0266\u0134\2\u1018\u1017\3\2\2\2\u1018\u1019\3"+
		"\2\2\2\u1019\u101a\3\2\2\2\u101a\u101b\7\u0487\2\2\u101b\u101c\5\u025e"+
		"\u0130\2\u101c\u101e\7\u048e\2\2\u101d\u101f\5\u0262\u0132\2\u101e\u101d"+
		"\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u1022\3\2\2\2\u1020\u1023\5\u01a6\u00d4"+
		"\2\u1021\u1023\5\u01a8\u00d5\2\u1022\u1020\3\2\2\2\u1022\u1021\3\2\2\2"+
		"\u1022\u1023\3\2\2\2\u1023\u1025\3\2\2\2\u1024\u1026\5\u01ae\u00d8\2\u1025"+
		"\u1024\3\2\2\2\u1025\u1026\3\2\2\2\u1026\u012f\3\2\2\2\u1027\u1028\b\u0099"+
		"\1\2\u1028\u1029\5\u0642\u0322\2\u1029\u102e\3\2\2\2\u102a\u102b\f\4\2"+
		"\2\u102b\u102d\5\u0132\u009a\2\u102c\u102a\3\2\2\2\u102d\u1030\3\2\2\2"+
		"\u102e\u102c\3\2\2\2\u102e\u102f\3\2\2\2\u102f\u0131\3\2\2\2\u1030\u102e"+
		"\3\2\2\2\u1031\u1032\7\u00f7\2\2\u1032\u1033\t\66\2\2\u1033\u1034\5\u0134"+
		"\u009b\2\u1034\u0133\3\2\2\2\u1035\u103e\7\u0117\2\2\u1036\u103e\7i\2"+
		"\2\u1037\u1038\7\u0121\2\2\u1038\u103e\7\u0178\2\2\u1039\u103a\7\u022b"+
		"\2\2\u103a\u103e\7\u01c7\2\2\u103b\u103c\7\u0121\2\2\u103c\u103e\7\u008b"+
		"\2\2\u103d\u1035\3\2\2\2\u103d\u1036\3\2\2\2\u103d\u1037\3\2\2\2\u103d"+
		"\u1039\3\2\2\2\u103d\u103b\3\2\2\2\u103e\u0135\3\2\2\2\u103f\u1040\t\67"+
		"\2\2\u1040\u0137\3\2\2\2\u1041\u1042\5\u0140\u00a1\2\u1042\u1044\5\u014e"+
		"\u00a8\2\u1043\u1045\5\u0182\u00c2\2\u1044\u1043\3\2\2\2\u1044\u1045\3"+
		"\2\2\2\u1045\u1047\3\2\2\2\u1046\u1048\5\u0128\u0095\2\u1047\u1046\3\2"+
		"\2\2\u1047\u1048\3\2\2\2\u1048\u104e\3\2\2\2\u1049\u104f\7\u0200\2\2\u104a"+
		"\u104b\7b\2\2\u104b\u104f\5\u05e0\u02f1\2\u104c\u104d\7\u03bc\2\2\u104d"+
		"\u104f\5\u05e0\u02f1\2\u104e\u1049\3\2\2\2\u104e\u104a\3\2\2\2\u104e\u104c"+
		"\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u1077\3\2\2\2\u1050\u1051\5\u0140\u00a1"+
		"\2\u1051\u1054\5\u014e\u00a8\2\u1052\u1053\7\u00ad\2\2\u1053\u1055\5\u013a"+
		"\u009e\2\u1054\u1052\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1056\3\2\2\2\u1056"+
		"\u1057\7^\2\2\u1057\u1058\7\u0487\2\2\u1058\u1059\5:\36\2\u1059\u105b"+
		"\7\u048e\2\2\u105a\u105c\t8\2\2\u105b\u105a\3\2\2\2\u105b\u105c\3\2\2"+
		"\2\u105c\u105e\3\2\2\2\u105d\u105f\5\u013c\u009f\2\u105e\u105d\3\2\2\2"+
		"\u105e\u105f\3\2\2\2\u105f\u1061\3\2\2\2\u1060\u1062\5\u0128\u0095\2\u1061"+
		"\u1060\3\2\2\2\u1061\u1062\3\2\2\2\u1062\u1068\3\2\2\2\u1063\u1069\7\u0200"+
		"\2\2\u1064\u1065\7b\2\2\u1065\u1069\5\u05e0\u02f1\2\u1066\u1067\7\u03bc"+
		"\2\2\u1067\u1069\5\u05e0\u02f1\2\u1068\u1063\3\2\2\2\u1068\u1064\3\2\2"+
		"\2\u1068\u1066\3\2\2\2\u1068\u1069\3\2\2\2\u1069\u1077\3\2\2\2\u106a\u106b"+
		"\5\u0140\u00a1\2\u106b\u106d\7\u0194\2\2\u106c\u106e\5\u0182\u00c2\2\u106d"+
		"\u106c\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u1074\3\2\2\2\u106f\u1075\7\u0200"+
		"\2\2\u1070\u1071\7b\2\2\u1071\u1075\5\u05e0\u02f1\2\u1072\u1073\7\u03bc"+
		"\2\2\u1073\u1075\5\u05e0\u02f1\2\u1074\u106f\3\2\2\2\u1074\u1070\3\2\2"+
		"\2\u1074\u1072\3\2\2\2\u1074\u1075\3\2\2\2\u1075\u1077\3\2\2\2\u1076\u1041"+
		"\3\2\2\2\u1076\u1050\3\2\2\2\u1076\u106a\3\2\2\2\u1077\u0139\3\2\2\2\u1078"+
		"\u1079\7X\2\2\u1079\u013b\3\2\2\2\u107a\u107b\b\u009f\1\2\u107b\u107c"+
		"\5\u013e\u00a0\2\u107c\u1081\3\2\2\2\u107d\u107e\f\4\2\2\u107e\u1080\5"+
		"\u013e\u00a0\2\u107f\u107d\3\2\2\2\u1080\u1083\3\2\2\2\u1081\u107f\3\2"+
		"\2\2\u1081\u1082\3\2\2\2\u1082\u013d\3\2\2\2\u1083\u1081\3\2\2\2\u1084"+
		"\u1085\7\u0177\2\2\u1085\u10a0\7\u0178\2\2\u1086\u10a0\7\u0178\2\2\u1087"+
		"\u1088\7\u0146\2\2\u1088\u10a0\7\u00cf\2\2\u1089\u108b\7\u0108\2\2\u108a"+
		"\u1089\3\2\2\2\u108a\u108b\3\2\2\2\u108b\u108c\3\2\2\2\u108c\u10a0\7\u00cf"+
		"\2\2\u108d\u10a0\7\u0146\2\2\u108e\u108f\7\u01ed\2\2\u108f\u10a0\7\u04a3"+
		"\2\2\u1090\u1091\7\u00b5\2\2\u1091\u10a0\7\u0179\2\2\u1092\u1093\7q\2"+
		"\2\u1093\u1095\5\u025a\u012e\2\u1094\u1092\3\2\2\2\u1094\u1095\3\2\2\2"+
		"\u1095\u1096\3\2\2\2\u1096\u1097\7m\2\2\u1097\u1098\7\u0487\2\2\u1098"+
		"\u1099\5:\36\2\u1099\u109b\7\u048e\2\2\u109a\u109c\5\u0258\u012d\2\u109b"+
		"\u109a\3\2\2\2\u109b\u109c\3\2\2\2\u109c\u10a0\3\2\2\2\u109d\u109e\7\u0452"+
		"\2\2\u109e\u10a0\7\u0179\2\2\u109f\u1084\3\2\2\2\u109f\u1086\3\2\2\2\u109f"+
		"\u1087\3\2\2\2\u109f\u108a\3\2\2\2\u109f\u108d\3\2\2\2\u109f\u108e\3\2"+
		"\2\2\u109f\u1090\3\2\2\2\u109f\u1094\3\2\2\2\u109f\u109d\3\2\2\2\u10a0"+
		"\u013f\3\2\2\2\u10a1\u10a2\5\u05e2\u02f2\2\u10a2\u10a3\7\u048c\2\2\u10a3"+
		"\u10a5\3\2\2\2\u10a4\u10a1\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5\u10a6\3\2"+
		"\2\2\u10a6\u10a7\5\u05e2\u02f2\2\u10a7\u10a8\7\u048c\2\2\u10a8\u10aa\3"+
		"\2\2\2\u10a9\u10a4\3\2\2\2\u10a9\u10aa\3\2\2\2\u10aa\u10ab\3\2\2\2\u10ab"+
		"\u10ac\5\u05e0\u02f1\2\u10ac\u0141\3\2\2\2\u10ad\u10b2\5\u0138\u009d\2"+
		"\u10ae\u10af\7\u0481\2\2\u10af\u10b1\5\u0138\u009d\2\u10b0\u10ae\3\2\2"+
		"\2\u10b1\u10b4\3\2\2\2\u10b2\u10b0\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3\u0143"+
		"\3\2\2\2\u10b4\u10b2\3\2\2\2\u10b5\u10c3\5\u0172\u00ba\2\u10b6\u10c3\5"+
		"\u0166\u00b4\2\u10b7\u10c3\5\u016c\u00b7\2\u10b8\u10c3\5\u016e\u00b8\2"+
		"\u10b9\u10c3\5\u0160\u00b1\2\u10ba\u10c3\5\u0162\u00b2\2\u10bb\u10c3\5"+
		"\u0156\u00ac\2\u10bc\u10c3\5\u016a\u00b6\2\u10bd\u10bf\t9\2\2\u10be\u10c0"+
		"\7\u00be\2\2\u10bf\u10be\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c3\3\2\2"+
		"\2\u10c1\u10c3\5\u0158\u00ad\2\u10c2\u10b5\3\2\2\2\u10c2\u10b6\3\2\2\2"+
		"\u10c2\u10b7\3\2\2\2\u10c2\u10b8\3\2\2\2\u10c2\u10b9\3\2\2\2\u10c2\u10ba"+
		"\3\2\2\2\u10c2\u10bb\3\2\2\2\u10c2\u10bc\3\2\2\2\u10c2\u10bd\3\2\2\2\u10c2"+
		"\u10c1\3\2\2\2\u10c3\u0145\3\2\2\2\u10c4\u10c5\t:\2\2\u10c5\u0147\3\2"+
		"\2\2\u10c6\u10c7\7\u0487\2\2\u10c7\u10ce\7\u0179\2\2\u10c8\u10c9\6\u00a5"+
		"\20\3\u10c9\u10ca\7\u0481\2\2\u10ca\u10cb\7\u0179\2\2\u10cb\u10cd\b\u00a5"+
		"\1\2\u10cc\u10c8\3\2\2\2\u10cd\u10d0\3\2\2\2\u10ce\u10cc\3\2\2\2\u10ce"+
		"\u10cf\3\2\2\2\u10cf\u10d1\3\2\2\2\u10d0\u10ce\3\2\2\2\u10d1\u10d2\7\u048e"+
		"\2\2\u10d2\u0149\3\2\2\2\u10d3\u10d4\7\u0487\2\2\u10d4\u10d5\7\u0473\2"+
		"\2\u10d5\u10d6\7\u048e\2\2\u10d6\u014b\3\2\2\2\u10d7\u10da\5\u0148\u00a5"+
		"\2\u10d8\u10da\5\u014a\u00a6\2\u10d9\u10d7\3\2\2\2\u10d9\u10d8\3\2\2\2"+
		"\u10da\u014d\3\2\2\2\u10db\u10dc\b\u00a8\1\2\u10dc\u10f3\5\u015e\u00b0"+
		"\2\u10dd\u10f3\5\u0160\u00b1\2\u10de\u10f3\5\u0162\u00b2\2\u10df\u10f3"+
		"\5\u0168\u00b5\2\u10e0\u10f3\5\u016c\u00b7\2\u10e1\u10f3\5\u016e\u00b8"+
		"\2\u10e2\u10f3\5\u0164\u00b3\2\u10e3\u10f3\5\u0166\u00b4\2\u10e4\u10f3"+
		"\5\u0170\u00b9\2\u10e5\u10f3\5\u0172\u00ba\2\u10e6\u10f3\5\u015c\u00af"+
		"\2\u10e7\u10f3\5\u0156\u00ac\2\u10e8\u10f3\5\u0154\u00ab\2\u10e9\u10f3"+
		"\5\u016a\u00b6\2\u10ea\u10f3\5\u015a\u00ae\2\u10eb\u10f3\5\u0158\u00ad"+
		"\2\u10ec\u10ed\7\30\2\2\u10ed\u10ee\7\u0487\2\2\u10ee\u10ef\5\u014e\u00a8"+
		"\2\u10ef\u10f0\7\u048e\2\2\u10f0\u10f3\3\2\2\2\u10f1\u10f3\7\u04a3\2\2"+
		"\u10f2\u10db\3\2\2\2\u10f2\u10dd\3\2\2\2\u10f2\u10de\3\2\2\2\u10f2\u10df"+
		"\3\2\2\2\u10f2\u10e0\3\2\2\2\u10f2\u10e1\3\2\2\2\u10f2\u10e2\3\2\2\2\u10f2"+
		"\u10e3\3\2\2\2\u10f2\u10e4\3\2\2\2\u10f2\u10e5\3\2\2\2\u10f2\u10e6\3\2"+
		"\2\2\u10f2\u10e7\3\2\2\2\u10f2\u10e8\3\2\2\2\u10f2\u10e9\3\2\2\2\u10f2"+
		"\u10ea\3\2\2\2\u10f2\u10eb\3\2\2\2\u10f2\u10ec\3\2\2\2\u10f2\u10f1\3\2"+
		"\2\2\u10f3\u10f9\3\2\2\2\u10f4\u10f5\f\4\2\2\u10f5\u10f6\7P\2\2\u10f6"+
		"\u10f8\7Q\2\2\u10f7\u10f4\3\2\2\2\u10f8\u10fb\3\2\2\2\u10f9\u10f7\3\2"+
		"\2\2\u10f9\u10fa\3\2\2\2\u10fa\u014f\3\2\2\2\u10fb\u10f9\3\2\2\2\u10fc"+
		"\u1101\5\u0152\u00aa\2\u10fd\u10fe\7\u0481\2\2\u10fe\u1100\5\u0152\u00aa"+
		"\2\u10ff\u10fd\3\2\2\2\u1100\u1103\3\2\2\2\u1101\u10ff\3\2\2\2\u1101\u1102"+
		"\3\2\2\2\u1102\u0151\3\2\2\2\u1103\u1101\3\2\2\2\u1104\u1105\t;\2\2\u1105"+
		"\u0153\3\2\2\2\u1106\u1107\7\u0361\2\2\u1107\u1108\7\u0487\2\2\u1108\u1109"+
		"\5\u0150\u00a9\2\u1109\u110b\7\u048e\2\2\u110a\u110c\7d\2\2\u110b\u110a"+
		"\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u1110\3\2\2\2\u110d\u110e\5\u00f0y"+
		"\2\u110e\u110f\5\u017c\u00bf\2\u110f\u1111\3\2\2\2\u1110\u110d\3\2\2\2"+
		"\u1110\u1111\3\2\2\2\u1111\u1113\3\2\2\2\u1112\u1114\5\u0180\u00c1\2\u1113"+
		"\u1112\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1125\3\2\2\2\u1115\u1116\7\u0121"+
		"\2\2\u1116\u1117\7\u0487\2\2\u1117\u1118\5\u0150\u00a9\2\u1118\u111a\7"+
		"\u048e\2\2\u1119\u111b\7d\2\2\u111a\u1119\3\2\2\2\u111a\u111b\3\2\2\2"+
		"\u111b\u111f\3\2\2\2\u111c\u111d\5\u00f0y\2\u111d\u111e\5\u017c\u00bf"+
		"\2\u111e\u1120\3\2\2\2\u111f\u111c\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u1122"+
		"\3\2\2\2\u1121\u1123\5\u0180\u00c1\2\u1122\u1121\3\2\2\2\u1122\u1123\3"+
		"\2\2\2\u1123\u1125\3\2\2\2\u1124\u1106\3\2\2\2\u1124\u1115\3\2\2\2\u1125"+
		"\u0155\3\2\2\2\u1126\u1127\7\u033b\2\2\u1127\u0157\3\2\2\2\u1128\u1129"+
		"\7\65\2\2\u1129\u0159\3\2\2\2\u112a\u112b\7+\2\2\u112b\u112c\7\u0487\2"+
		"\2\u112c\u112d\7\u0179\2\2\u112d\u112e\7\u048e\2\2\u112e\u015b\3\2\2\2"+
		"\u112f\u1131\7\u01c0\2\2\u1130\u1132\5\u0148\u00a5\2\u1131\u1130\3\2\2"+
		"\2\u1131\u1132\3\2\2\2\u1132\u015d\3\2\2\2\u1133\u1135\t<\2\2\u1134\u1136"+
		"\5\u0148\u00a5\2\u1135\u1134\3\2\2\2\u1135\u1136\3\2\2\2\u1136\u1138\3"+
		"\2\2\2\u1137\u1139\t9\2\2\u1138\u1137\3\2\2\2\u1138\u1139\3\2\2\2\u1139"+
		"\u113b\3\2\2\2\u113a\u113c\7\u0164\2\2\u113b\u113a\3\2\2\2\u113b\u113c"+
		"\3\2\2\2\u113c\u015f\3\2\2\2\u113d\u1147\6\u00b1\22\3\u113e\u1148\7\u00a4"+
		"\2\2\u113f\u1141\7\u0096\2\2\u1140\u1142\7\u0107\2\2\u1141\u1140\3\2\2"+
		"\2\u1141\u1142\3\2\2\2\u1142\u1148\3\2\2\2\u1143\u1145\7\u010e\2\2\u1144"+
		"\u1146\7\u0107\2\2\u1145\u1144\3\2\2\2\u1145\u1146\3\2\2\2\u1146\u1148"+
		"\3\2\2\2\u1147\u113e\3\2\2\2\u1147\u113f\3\2\2\2\u1147\u1143\3\2\2\2\u1148"+
		"\u114a\3\2\2\2\u1149\u114b\5\u014c\u00a7\2\u114a\u1149\3\2\2\2\u114a\u114b"+
		"\3\2\2\2\u114b\u114d\3\2\2\2\u114c\u114e\t9\2\2\u114d\u114c\3\2\2\2\u114d"+
		"\u114e\3\2\2\2\u114e\u1150\3\2\2\2\u114f\u1151\7\u0164\2\2\u1150\u114f"+
		"\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u115a\3\2\2\2\u1152\u1153\6\u00b1\23"+
		"\3\u1153\u1155\7\u00a4\2\2\u1154\u1156\5\u0148\u00a5\2\u1155\u1154\3\2"+
		"\2\2\u1155\u1156\3\2\2\2\u1156\u115a\3\2\2\2\u1157\u1158\6\u00b1\24\3"+
		"\u1158\u115a\7\u0096\2\2\u1159\u113d\3\2\2\2\u1159\u1152\3\2\2\2\u1159"+
		"\u1157\3\2\2\2\u115a\u0161\3\2\2\2\u115b\u115c\6\u00b2\25\3\u115c\u115e"+
		"\t=\2\2\u115d\u115f\5\u0148\u00a5\2\u115e\u115d\3\2\2\2\u115e\u115f\3"+
		"\2\2\2\u115f\u116c\3\2\2\2\u1160\u1161\6\u00b2\26\3\u1161\u1163\t=\2\2"+
		"\u1162\u1164\5\u0148\u00a5\2\u1163\u1162\3\2\2\2\u1163\u1164\3\2\2\2\u1164"+
		"\u1166\3\2\2\2\u1165\u1167\t9\2\2\u1166\u1165\3\2\2\2\u1166\u1167\3\2"+
		"\2\2\u1167\u1169\3\2\2\2\u1168\u116a\7\u0164\2\2\u1169\u1168\3\2\2\2\u1169"+
		"\u116a\3\2\2\2\u116a\u116c\3\2\2\2\u116b\u115b\3\2\2\2\u116b\u1160\3\2"+
		"\2\2\u116c\u0163\3\2\2\2\u116d\u1175\7\u013c\2\2\u116e\u1175\7\u0139\2"+
		"\2\u116f\u1171\7\u00ee\2\2\u1170\u1172\7\u0155\2\2\u1171\u1170\3\2\2\2"+
		"\u1171\u1172\3\2\2\2\u1172\u1175\3\2\2\2\u1173\u1175\7\u00e4\2\2\u1174"+
		"\u116d\3\2\2\2\u1174\u116e\3\2\2\2\u1174\u116f\3\2\2\2\u1174\u1173\3\2"+
		"\2\2\u1175\u1177\3\2\2\2\u1176\u1178\5\u0174\u00bb\2\u1177\u1176\3\2\2"+
		"\2\u1177\u1178\3\2\2\2\u1178\u117a\3\2\2\2\u1179\u117b\7d\2\2\u117a\u1179"+
		"\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117f\3\2\2\2\u117c\u117d\5\u00f0y"+
		"\2\u117d\u117e\5\u017c\u00bf\2\u117e\u1180\3\2\2\2\u117f\u117c\3\2\2\2"+
		"\u117f\u1180\3\2\2\2\u1180\u1182\3\2\2\2\u1181\u1183\5\u0180\u00c1\2\u1182"+
		"\u1181\3\2\2\2\u1182\u1183\3\2\2\2\u1183\u0165\3\2\2\2\u1184\u1185\6\u00b4"+
		"\27\3\u1185\u1187\7l\2\2\u1186\u1188\5\u0174\u00bb\2\u1187\u1186\3\2\2"+
		"\2\u1187\u1188\3\2\2\2\u1188\u118a\3\2\2\2\u1189\u118b\7d\2\2\u118a\u1189"+
		"\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118f\3\2\2\2\u118c\u118d\5\u00f0y"+
		"\2\u118d\u118e\5\u017c\u00bf\2\u118e\u1190\3\2\2\2\u118f\u118c\3\2\2\2"+
		"\u118f\u1190\3\2\2\2\u1190\u1192\3\2\2\2\u1191\u1193\5\u0180\u00c1\2\u1192"+
		"\u1191\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u11ec\3\2\2\2\u1194\u1195\6\u00b4"+
		"\30\3\u1195\u1197\7l\2\2\u1196\u1198\5\u0174\u00bb\2\u1197\u1196\3\2\2"+
		"\2\u1197\u1198\3\2\2\2\u1198\u119a\3\2\2\2\u1199\u119b\7d\2\2\u119a\u1199"+
		"\3\2\2\2\u119a\u119b\3\2\2\2\u119b\u11ec\3\2\2\2\u119c\u119d\6\u00b4\31"+
		"\3\u119d\u119f\7l\2\2\u119e\u11a0\5\u0174\u00bb\2\u119f\u119e\3\2\2\2"+
		"\u119f\u11a0\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a2\5\u00f0y\2\u11a2"+
		"\u11a3\5\u017c\u00bf\2\u11a3\u11ec\3\2\2\2\u11a4\u11a5\6\u00b4\32\3\u11a5"+
		"\u11a7\7\u01b8\2\2\u11a6\u11a8\5\u0174\u00bb\2\u11a7\u11a6\3\2\2\2\u11a7"+
		"\u11a8\3\2\2\2\u11a8\u11aa\3\2\2\2\u11a9\u11ab\7d\2\2\u11aa\u11a9\3\2"+
		"\2\2\u11aa\u11ab\3\2\2\2\u11ab\u11ec\3\2\2\2\u11ac\u11ad\6\u00b4\33\3"+
		"\u11ad\u11ae\7\u0362\2\2\u11ae\u11b0\7l\2\2\u11af\u11b1\5\u0174\u00bb"+
		"\2\u11b0\u11af\3\2\2\2\u11b0\u11b1\3\2\2\2\u11b1\u11b3\3\2\2\2\u11b2\u11b4"+
		"\7d\2\2\u11b3\u11b2\3\2\2\2\u11b3\u11b4\3\2\2\2\u11b4\u11ec\3\2\2\2\u11b5"+
		"\u11b6\6\u00b4\34\3\u11b6\u11b7\7\u0155\2\2\u11b7\u11b9\5\u0174\u00bb"+
		"\2\u11b8\u11ba\7d\2\2\u11b9\u11b8\3\2\2\2\u11b9\u11ba\3\2\2\2\u11ba\u11be"+
		"\3\2\2\2\u11bb\u11bc\5\u00f0y\2\u11bc\u11bd\5\u017c\u00bf\2\u11bd\u11bf"+
		"\3\2\2\2\u11be\u11bb\3\2\2\2\u11be\u11bf\3\2\2\2\u11bf\u11c1\3\2\2\2\u11c0"+
		"\u11c2\5\u0180\u00c1\2\u11c1\u11c0\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u11ec"+
		"\3\2\2\2\u11c3\u11c4\6\u00b4\35\3\u11c4\u11c5\7\u01b8\2\2\u11c5\u11c6"+
		"\7\u0155\2\2\u11c6\u11c8\5\u0174\u00bb\2\u11c7\u11c9\7d\2\2\u11c8\u11c7"+
		"\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11ec\3\2\2\2\u11ca\u11cb\6\u00b4\36"+
		"\3\u11cb\u11cc\7\u01f0\2\2\u11cc\u11ce\5\u0174\u00bb\2\u11cd\u11cf\7d"+
		"\2\2\u11ce\u11cd\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf\u11ec\3\2\2\2\u11d0"+
		"\u11d1\6\u00b4\37\3\u11d1\u11d2\7\u0362\2\2\u11d2\u11d3\7\u0155\2\2\u11d3"+
		"\u11d5\5\u0174\u00bb\2\u11d4\u11d6\7d\2\2\u11d5\u11d4\3\2\2\2\u11d5\u11d6"+
		"\3\2\2\2\u11d6\u11ec\3\2\2\2\u11d7\u11d8\6\u00b4 \3\u11d8\u11d9\7l\2\2"+
		"\u11d9\u11da\7\u0156\2\2\u11da\u11dc\5\u0174\u00bb\2\u11db\u11dd\7d\2"+
		"\2\u11dc\u11db\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd\u11e1\3\2\2\2\u11de\u11df"+
		"\5\u00f0y\2\u11df\u11e0\5\u017c\u00bf\2\u11e0\u11e2\3\2\2\2\u11e1\u11de"+
		"\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u11ec\3\2\2\2\u11e3\u11e4\6\u00b4!"+
		"\3\u11e4\u11e5\7\u0362\2\2\u11e5\u11e6\7l\2\2\u11e6\u11e7\7\u0156\2\2"+
		"\u11e7\u11e9\5\u0174\u00bb\2\u11e8\u11ea\7d\2\2\u11e9\u11e8\3\2\2\2\u11e9"+
		"\u11ea\3\2\2\2\u11ea\u11ec\3\2\2\2\u11eb\u1184\3\2\2\2\u11eb\u1194\3\2"+
		"\2\2\u11eb\u119c\3\2\2\2\u11eb\u11a4\3\2\2\2\u11eb\u11ac\3\2\2\2\u11eb"+
		"\u11b5\3\2\2\2\u11eb\u11c3\3\2\2\2\u11eb\u11ca\3\2\2\2\u11eb\u11d0\3\2"+
		"\2\2\u11eb\u11d7\3\2\2\2\u11eb\u11e3\3\2\2\2\u11ec\u0167\3\2\2\2\u11ed"+
		"\u11ee\t>\2\2\u11ee\u0169\3\2\2\2\u11ef\u11f0\t?\2\2\u11f0\u016b\3\2\2"+
		"\2\u11f1\u11f3\t@\2\2\u11f2\u11f4\5\u0148\u00a5\2\u11f3\u11f2\3\2\2\2"+
		"\u11f3\u11f4\3\2\2\2\u11f4\u11fb\3\2\2\2\u11f5\u11f6\6\u00b7\"\3\u11f6"+
		"\u11f8\7\u021a\2\2\u11f7\u11f9\5\u0148\u00a5\2\u11f8\u11f7\3\2\2\2\u11f8"+
		"\u11f9\3\2\2\2\u11f9\u11fb\3\2\2\2\u11fa\u11f1\3\2\2\2\u11fa\u11f5\3\2"+
		"\2\2\u11fb\u016d\3\2\2\2\u11fc\u1202\7\u0458\2\2\u11fd\u11ff\7\u0182\2"+
		"\2\u11fe\u1200\5\u0148\u00a5\2\u11ff\u11fe\3\2\2\2\u11ff\u1200\3\2\2\2"+
		"\u1200\u1202\3\2\2\2\u1201\u11fc\3\2\2\2\u1201\u11fd\3\2\2\2\u1202\u016f"+
		"\3\2\2\2\u1203\u1205\tA\2\2\u1204\u1206\5\u0174\u00bb\2\u1205\u1204\3"+
		"\2\2\2\u1205\u1206\3\2\2\2\u1206\u0171\3\2\2\2\u1207\u1209\7d\2\2\u1208"+
		"\u120a\5\u0174\u00bb\2\u1209\u1208\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u120f"+
		"\3\2\2\2\u120b\u120c\6\u00ba#\3\u120c\u120d\7\u0154\2\2\u120d\u120f\5"+
		"\u0174\u00bb\2\u120e\u1207\3\2\2\2\u120e\u120b\3\2\2\2\u120f\u0173\3\2"+
		"\2\2\u1210\u1211\7\u0487\2\2\u1211\u1212\5(\25\2\u1212\u1213\7\u048e\2"+
		"\2\u1213\u0175\3\2\2\2\u1214\u1215\tB\2\2\u1215\u0177\3\2\2\2\u1216\u1217"+
		"\7\u047c\2\2\u1217\u1218\7\u04a3\2\2\u1218\u1219\7\u047c\2\2\u1219\u0179"+
		"\3\2\2\2\u121a\u121b\7\u047c\2\2\u121b\u121c\7\u04a3\2\2\u121c\u121f\7"+
		"\u047c\2\2\u121d\u121f\7\u0179\2\2\u121e\u121a\3\2\2\2\u121e\u121d\3\2"+
		"\2\2\u121f\u017b\3\2\2\2\u1220\u1221\tC\2\2\u1221\u017d\3\2\2\2\u1222"+
		"\u1225\5\u017c\u00bf\2\u1223\u1225\7\u008b\2\2\u1224\u1222\3\2\2\2\u1224"+
		"\u1223\3\2\2\2\u1225\u017f\3\2\2\2\u1226\u1227\7t\2\2\u1227\u1228\5\u0176"+
		"\u00bc\2\u1228\u0181\3\2\2\2\u1229\u122a\b\u00c2\1\2\u122a\u122b\5\u0184"+
		"\u00c3\2\u122b\u1230\3\2\2\2\u122c\u122d\f\4\2\2\u122d\u122f\5\u0184\u00c3"+
		"\2\u122e\u122c\3\2\2\2\u122f\u1232\3\2\2\2\u1230\u122e\3\2\2\2\u1230\u1231"+
		"\3\2\2\2\u1231\u0183\3\2\2\2\u1232\u1230\3\2\2\2\u1233\u1234\5<\37\2\u1234"+
		"\u1235\7\u0178\2\2\u1235\u126e\3\2\2\2\u1236\u126e\7\u0178\2\2\u1237\u1238"+
		"\7\u008b\2\2\u1238\u126e\5\u0186\u00c4\2\u1239\u123a\7\u008b\2\2\u123a"+
		"\u123b\7\u0487\2\2\u123b\u123c\5:\36\2\u123c\u123d\7\u048e\2\2\u123d\u126e"+
		"\3\2\2\2\u123e\u123f\7\u0263\2\2\u123f\u126e\5\u0186\u00c4\2\u1240\u126e"+
		"\7\u0382\2\2\u1241\u1242\7\u0146\2\2\u1242\u126e\7\u00cf\2\2\u1243\u1245"+
		"\7\u0108\2\2\u1244\u1243\3\2\2\2\u1244\u1245\3\2\2\2\u1245\u1246\3\2\2"+
		"\2\u1246\u126e\7\u00cf\2\2\u1247\u126e\7\u0146\2\2\u1248\u1249\7\u01ed"+
		"\2\2\u1249\u126e\7\u04a3\2\2\u124a\u124b\7\u00f7\2\2\u124b\u124c\7\u014a"+
		"\2\2\u124c\u126e\5x=\2\u124d\u124e\7\u00b5\2\2\u124e\u126e\7\u0179\2\2"+
		"\u124f\u1250\7q\2\2\u1250\u1252\5\u025a\u012e\2\u1251\u124f\3\2\2\2\u1251"+
		"\u1252\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1254\7m\2\2\u1254\u1255\7\u0487"+
		"\2\2\u1255\u1256\5:\36\2\u1256\u1258\7\u048e\2\2\u1257\u1259\5\u0258\u012d"+
		"\2\u1258\u1257\3\2\2\2\u1258\u1259\3\2\2\2\u1259\u126e\3\2\2\2\u125a\u125b"+
		"\7\u0452\2\2\u125b\u126e\7\u0179\2\2\u125c\u125d\7t\2\2\u125d\u126e\5"+
		"\u0176\u00bc\2\u125e\u125f\7\u0335\2\2\u125f\u1265\7\u0487\2\2\u1260\u1266"+
		"\5\u062a\u0316\2\u1261\u1262\5\u0628\u0315\2\u1262\u1263\7\u0481\2\2\u1263"+
		"\u1264\5\u062a\u0316\2\u1264\u1266\3\2\2\2\u1265\u1260\3\2\2\2\u1265\u1261"+
		"\3\2\2\2\u1265\u1266\3\2\2\2\u1266\u1267\3\2\2\2\u1267\u126e\7\u048e\2"+
		"\2\u1268\u126e\5\u062c\u0317\2\u1269\u126a\7\u03b0\2\2\u126a\u126e\tD"+
		"\2\2\u126b\u126c\7\u0306\2\2\u126c\u126e\tE\2\2\u126d\u1233\3\2\2\2\u126d"+
		"\u1236\3\2\2\2\u126d\u1237\3\2\2\2\u126d\u1239\3\2\2\2\u126d\u123e\3\2"+
		"\2\2\u126d\u1240\3\2\2\2\u126d\u1241\3\2\2\2\u126d\u1244\3\2\2\2\u126d"+
		"\u1247\3\2\2\2\u126d\u1248\3\2\2\2\u126d\u124a\3\2\2\2\u126d\u124d\3\2"+
		"\2\2\u126d\u1251\3\2\2\2\u126d\u125a\3\2\2\2\u126d\u125c\3\2\2\2\u126d"+
		"\u125e\3\2\2\2\u126d\u1268\3\2\2\2\u126d\u1269\3\2\2\2\u126d\u126b\3\2"+
		"\2\2\u126e\u0185\3\2\2\2\u126f\u1272\5x=\2\u1270\u1272\5\u0188\u00c5\2"+
		"\u1271\u126f\3\2\2\2\u1271\u1270\3\2\2\2\u1272\u0187\3\2\2\2\u1273\u1279"+
		"\5&\24\2\u1274\u1275\7\u0482\2\2\u1275\u1279\5(\25\2\u1276\u1277\7\u0488"+
		"\2\2\u1277\u1279\5(\25\2\u1278\u1273\3\2\2\2\u1278\u1274\3\2\2\2\u1278"+
		"\u1276\3\2\2\2\u1279\u0189\3\2\2\2\u127a\u127c\7\u0481\2\2\u127b\u127a"+
		"\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u018b\3\2\2\2\u127d\u127f\5\u0196\u00cc"+
		"\2\u127e\u127d\3\2\2\2\u127f\u1280\3\2\2\2\u1280\u127e\3\2\2\2\u1280\u1281"+
		"\3\2\2\2\u1281\u018d\3\2\2\2\u1282\u1288\5\u018c\u00c7\2\u1283\u1284\5"+
		"\u0196\u00cc\2\u1284\u1285\7\u0481\2\2\u1285\u1286\5\u018e\u00c8\2\u1286"+
		"\u1288\3\2\2\2\u1287\u1282\3\2\2\2\u1287\u1283\3\2\2\2\u1288\u018f\3\2"+
		"\2\2\u1289\u128e\7\u008b\2\2\u128a\u128e\7\u042c\2\2\u128b\u128e\7\u04a1"+
		"\2\2\u128c\u128e\5\u01a2\u00d2\2\u128d\u1289\3\2\2\2\u128d\u128a\3\2\2"+
		"\2\u128d\u128b\3\2\2\2\u128d\u128c\3\2\2\2\u128e\u0191\3\2\2\2\u128f\u1290"+
		"\7\u04a2\2\2\u1290\u0193\3\2\2\2\u1291\u1292\tF\2\2\u1292\u0195\3\2\2"+
		"\2\u1293\u1294\7\u03b7\2\2\u1294\u1295\7\u0487\2\2\u1295\u1296\5\u01c6"+
		"\u00e4\2\u1296\u1297\7\u048e\2\2\u1297\u1384\3\2\2\2\u1298\u129a\tG\2"+
		"\2\u1299\u129b\7\u0493\2\2\u129a\u1299\3\2\2\2\u129a\u129b\3\2\2\2\u129b"+
		"\u129c\3\2\2\2\u129c\u1384\7\u04a3\2\2\u129d\u129f\7\u0278\2\2\u129e\u12a0"+
		"\7\u0493\2\2\u129f\u129e\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a1\3\2\2"+
		"\2\u12a1\u12a3\5\u0194\u00cb\2\u12a2\u12a4\7\u00a8\2\2\u12a3\u12a2\3\2"+
		"\2\2\u12a3\u12a4\3\2\2\2\u12a4\u1384\3\2\2\2\u12a5\u12a7\7\u02dd\2\2\u12a6"+
		"\u12a8\7\u0493\2\2\u12a7\u12a6\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12a9"+
		"\3\2\2\2\u12a9\u12aa\7\u0487\2\2\u12aa\u12ab\5:\36\2\u12ab\u12ac\7\u048e"+
		"\2\2\u12ac\u1384\3\2\2\2\u12ad\u12af\tH\2\2\u12ae\u12b0\7\u0493\2\2\u12af"+
		"\u12ae\3\2\2\2\u12af\u12b0\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u1384\7\u0179"+
		"\2\2\u12b2\u12b4\7\u0385\2\2\u12b3\u12b5\7\u0493\2\2\u12b4\u12b3\3\2\2"+
		"\2\u12b4\u12b5\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u1384\5\u0210\u0109\2"+
		"\u12b7\u12b9\7\u02a9\2\2\u12b8\u12ba\7\u0493\2\2\u12b9\u12b8\3\2\2\2\u12b9"+
		"\u12ba\3\2\2\2\u12ba\u12bb\3\2\2\2\u12bb\u1384\7\u0476\2\2\u12bc\u12be"+
		"\7\u008b\2\2\u12bd\u12bc\3\2\2\2\u12bd\u12be\3\2\2\2\u12be\u12bf\3\2\2"+
		"\2\u12bf\u12c1\5\u00f0y\2\u12c0\u12c2\7\u0493\2\2\u12c1\u12c0\3\2\2\2"+
		"\u12c1\u12c2\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c4\5\u017c\u00bf\2\u12c4"+
		"\u1384\3\2\2\2\u12c5\u12c7\7\u008b\2\2\u12c6\u12c5\3\2\2\2\u12c6\u12c7"+
		"\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8\u12ca\7t\2\2\u12c9\u12cb\7\u0493\2"+
		"\2\u12ca\u12c9\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc\u1384"+
		"\5\u0176\u00bc\2\u12cd\u12cf\7\u03e8\2\2\u12ce\u12d0\7\u0493\2\2\u12cf"+
		"\u12ce\3\2\2\2\u12cf\u12d0\3\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u1384\5\u0190"+
		"\u00c9\2\u12d2\u12d4\tI\2\2\u12d3\u12d5\7\u0493\2\2\u12d4\u12d3\3\2\2"+
		"\2\u12d4\u12d5\3\2\2\2\u12d5\u12d6\3\2\2\2\u12d6\u1384\5\u01a2\u00d2\2"+
		"\u12d7\u12d9\7\u0382\2\2\u12d8\u12da\7\u0493\2\2\u12d9\u12d8\3\2\2\2\u12d9"+
		"\u12da\3\2\2\2\u12da\u12db\3\2\2\2\u12db\u1384\5\u0200\u0101\2\u12dc\u1384"+
		"\5\u00f4{\2\u12dd\u12de\7\u0391\2\2\u12de\u1384\5\u0192\u00ca\2\u12df"+
		"\u1384\5\u019a\u00ce\2\u12e0\u12e2\7\u0262\2\2\u12e1\u12e3\7\u0493\2\2"+
		"\u12e2\u12e1\3\2\2\2\u12e2\u12e3\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u1384"+
		"\7\u0179\2\2\u12e5\u12e7\7\u0356\2\2\u12e6\u12e8\7\u0493\2\2\u12e7\u12e6"+
		"\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u1384\7\u0179\2"+
		"\2\u12ea\u12ec\7\u03b8\2\2\u12eb\u12ed\7\u0493\2\2\u12ec\u12eb\3\2\2\2"+
		"\u12ec\u12ed\3\2\2\2\u12ed\u12ee\3\2\2\2\u12ee\u1384\7\u0179\2\2\u12ef"+
		"\u12f1\7\u0217\2\2\u12f0\u12f2\7\u0493\2\2\u12f1\u12f0\3\2\2\2\u12f1\u12f2"+
		"\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3\u1384\7\u04a3\2\2\u12f4\u12f6\7\u0438"+
		"\2\2\u12f5\u12f7\7\u0493\2\2\u12f6\u12f5\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7"+
		"\u12f8\3\2\2\2\u12f8\u1384\7\u0476\2\2\u12f9\u12fb\7\u018e\2\2\u12fa\u12fc"+
		"\7\u0493\2\2\u12fb\u12fa\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u12fd\3\2\2"+
		"\2\u12fd\u1384\7\u04a3\2\2\u12fe\u1300\7\u017c\2\2\u12ff\u1301\7\u0493"+
		"\2\2\u1300\u12ff\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302\3\2\2\2\u1302"+
		"\u1303\7\u0487\2\2\u1303\u1304\5\u0218\u010d\2\u1304\u1305\7\u048e\2\2"+
		"\u1305\u1384\3\2\2\2\u1306\u1308\7\u033e\2\2\u1307\u1309\7\u0493\2\2\u1308"+
		"\u1307\3\2\2\2\u1308\u1309\3\2\2\2\u1309\u130a\3\2\2\2\u130a\u1384\7\u04a3"+
		"\2\2\u130b\u130c\7\u039f\2\2\u130c\u130d\7\u0487\2\2\u130d\u130e\5\u019c"+
		"\u00cf\2\u130e\u130f\7\u048e\2\2\u130f\u1384\3\2\2\2\u1310\u1312\7\u0331"+
		"\2\2\u1311\u1313\7\u0493\2\2\u1312\u1311\3\2\2\2\u1312\u1313\3\2\2\2\u1313"+
		"\u1314\3\2\2\2\u1314\u1384\7\u04a3\2\2\u1315\u1317\7\u0230\2\2\u1316\u1318"+
		"\7\u0493\2\2\u1317\u1316\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u1319\3\2\2"+
		"\2\u1319\u1384\7\u0179\2\2\u131a\u131c\7\u0231\2\2\u131b\u131d\7\u0493"+
		"\2\2\u131c\u131b\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u131e\3\2\2\2\u131e"+
		"\u1384\7\u0179\2\2\u131f\u1321\7<\2\2\u1320\u1322\7\u0493\2\2\u1321\u1320"+
		"\3\2\2\2\u1321\u1322\3\2\2\2\u1322\u1323\3\2\2\2\u1323\u1384\7\u0179\2"+
		"\2\u1324\u1326\7\22\2\2\u1325\u1327\7\u0493\2\2\u1326\u1325\3\2\2\2\u1326"+
		"\u1327\3\2\2\2\u1327\u1328\3\2\2\2\u1328\u1384\7\63\2\2\u1329\u132b\7"+
		"/\2\2\u132a\u132c\7\u0493\2\2\u132b\u132a\3\2\2\2\u132b\u132c\3\2\2\2"+
		"\u132c\u132d\3\2\2\2\u132d\u132e\7\u0487\2\2\u132e\u132f\5\u0212\u010a"+
		"\2\u132f\u1330\7\u048e\2\2\u1330\u1384\3\2\2\2\u1331\u1384\5\u0632\u031a"+
		"\2\u1332\u1334\7;\2\2\u1333\u1335\7\u0493\2\2\u1334\u1333\3\2\2\2\u1334"+
		"\u1335\3\2\2\2\u1335\u1336\3\2\2\2\u1336\u1384\7\u0476\2\2\u1337\u1339"+
		"\7\27\2\2\u1338\u133a\7\u0493\2\2\u1339\u1338\3\2\2\2\u1339\u133a\3\2"+
		"\2\2\u133a\u133b\3\2\2\2\u133b\u1384\tJ\2\2\u133c\u133e\7\u02c0\2\2\u133d"+
		"\u133f\7\u0493\2\2\u133e\u133d\3\2\2\2\u133e\u133f\3\2\2\2\u133f\u1340"+
		"\3\2\2\2\u1340\u1384\7\u0179\2\2\u1341\u1343\7\u01d7\2\2\u1342\u1344\7"+
		"\u0493\2\2\u1343\u1342\3\2\2\2\u1343\u1344\3\2\2\2\u1344\u1345\3\2\2\2"+
		"\u1345\u1384\7\u0179\2\2\u1346\u1348\7\u0394\2\2\u1347\u1349\7\u0493\2"+
		"\2\u1348\u1347\3\2\2\2\u1348\u1349\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u1384"+
		"\7\u04a3\2\2\u134b\u134d\7\u0437\2\2\u134c\u134e\7\u0493\2\2\u134d\u134c"+
		"\3\2\2\2\u134d\u134e\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1384\tK\2\2\u1350"+
		"\u1352\7\u0318\2\2\u1351\u1353\7\u0493\2\2\u1352\u1351\3\2\2\2\u1352\u1353"+
		"\3\2\2\2\u1353\u1354\3\2\2\2\u1354\u1384\7\u04a3\2\2\u1355\u1356\7\u045c"+
		"\2\2\u1356\u1358\7\u029e\2\2\u1357\u1359\7\u0493\2\2\u1358\u1357\3\2\2"+
		"\2\u1358\u1359\3\2\2\2\u1359\u135a\3\2\2\2\u135a\u1384\7\u04a3\2\2\u135b"+
		"\u135c\7\u00b8\2\2\u135c\u135e\7\u029e\2\2\u135d\u135f\7\u0493\2\2\u135e"+
		"\u135d\3\2\2\2\u135e\u135f\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u1384\7\u04a3"+
		"\2\2\u1361\u1363\7\u01e6\2\2\u1362\u1364\7\u0493\2\2\u1363\u1362\3\2\2"+
		"\2\u1363\u1364\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u1384\7\u04a3\2\2\u1366"+
		"\u1368\7\u02c6\2\2\u1367\u1369\7\u0493\2\2\u1368\u1367\3\2\2\2\u1368\u1369"+
		"\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u1384\tK\2\2\u136b\u136d\7\u02eb\2"+
		"\2\u136c\u136e\7\u0493\2\2\u136d\u136c\3\2\2\2\u136d\u136e\3\2\2\2\u136e"+
		"\u136f\3\2\2\2\u136f\u1384\tK\2\2\u1370\u1372\7\u03f8\2\2\u1371\u1373"+
		"\7\u0493\2\2\u1372\u1371\3\2\2\2\u1372\u1373\3\2\2\2\u1373\u1374\3\2\2"+
		"\2\u1374\u1384\tK\2\2\u1375\u1377\7\u0145\2\2\u1376\u1378\7\u0493\2\2"+
		"\u1377\u1376\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u137b"+
		"\7\u0487\2\2\u137a\u137c\5\u028e\u0148\2\u137b\u137a\3\2\2\2\u137b\u137c"+
		"\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u1384\7\u048e\2\2\u137e\u1380\7\u0414"+
		"\2\2\u137f\u1381\7\u0493\2\2\u1380\u137f\3\2\2\2\u1380\u1381\3\2\2\2\u1381"+
		"\u1382\3\2\2\2\u1382\u1384\5\u0198\u00cd\2\u1383\u1293\3\2\2\2\u1383\u1298"+
		"\3\2\2\2\u1383\u129d\3\2\2\2\u1383\u12a5\3\2\2\2\u1383\u12ad\3\2\2\2\u1383"+
		"\u12b2\3\2\2\2\u1383\u12b7\3\2\2\2\u1383\u12bd\3\2\2\2\u1383\u12c6\3\2"+
		"\2\2\u1383\u12cd\3\2\2\2\u1383\u12d2\3\2\2\2\u1383\u12d7\3\2\2\2\u1383"+
		"\u12dc\3\2\2\2\u1383\u12dd\3\2\2\2\u1383\u12df\3\2\2\2\u1383\u12e0\3\2"+
		"\2\2\u1383\u12e5\3\2\2\2\u1383\u12ea\3\2\2\2\u1383\u12ef\3\2\2\2\u1383"+
		"\u12f4\3\2\2\2\u1383\u12f9\3\2\2\2\u1383\u12fe\3\2\2\2\u1383\u1306\3\2"+
		"\2\2\u1383\u130b\3\2\2\2\u1383\u1310\3\2\2\2\u1383\u1315\3\2\2\2\u1383"+
		"\u131a\3\2\2\2\u1383\u131f\3\2\2\2\u1383\u1324\3\2\2\2\u1383\u1329\3\2"+
		"\2\2\u1383\u1331\3\2\2\2\u1383\u1332\3\2\2\2\u1383\u1337\3\2\2\2\u1383"+
		"\u133c\3\2\2\2\u1383\u1341\3\2\2\2\u1383\u1346\3\2\2\2\u1383\u134b\3\2"+
		"\2\2\u1383\u1350\3\2\2\2\u1383\u1355\3\2\2\2\u1383\u135b\3\2\2\2\u1383"+
		"\u1361\3\2\2\2\u1383\u1366\3\2\2\2\u1383\u136b\3\2\2\2\u1383\u1370\3\2"+
		"\2\2\u1383\u1375\3\2\2\2\u1383\u137e\3\2\2\2\u1384\u0197\3\2\2\2\u1385"+
		"\u1386\tL\2\2\u1386\u0199\3\2\2\2\u1387\u1389\7\u0367\2\2\u1388\u138a"+
		"\7\u0493\2\2\u1389\u1388\3\2\2\2\u1389\u138a\3\2\2\2\u138a\u138b\3\2\2"+
		"\2\u138b\u138e\7\u0179\2\2\u138c\u138e\7\u0368\2\2\u138d\u1387\3\2\2\2"+
		"\u138d\u138c\3\2\2\2\u138e\u019b\3\2\2\2\u138f\u1394\5\u019e\u00d0\2\u1390"+
		"\u1391\7\u0481\2\2\u1391\u1393\5\u019e\u00d0\2\u1392\u1390\3\2\2\2\u1393"+
		"\u1396\3\2\2\2\u1394\u1392\3\2\2\2\u1394\u1395\3\2\2\2\u1395\u019d\3\2"+
		"\2\2\u1396\u1394\3\2\2\2\u1397\u1398\5\u0140\u00a1\2\u1398\u1399\7\u0482"+
		"\2\2\u1399\u139a\7\u00c5\2\2\u139a\u139b\7\u0179\2\2\u139b\u139c\5\u01a0"+
		"\u00d1\2\u139c\u019f\3\2\2\2\u139d\u139e\tM\2\2\u139e\u01a1\3\2\2\2\u139f"+
		"\u13a3\5\u05e2\u02f2\2\u13a0\u13a3\7\u04a3\2\2\u13a1\u13a3\7[\2\2\u13a2"+
		"\u139f\3\2\2\2\u13a2\u13a0\3\2\2\2\u13a2\u13a1\3\2\2\2\u13a3\u01a3\3\2"+
		"\2\2\u13a4\u13a6\7\u0493\2\2\u13a5\u13a4\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6"+
		"\u01a5\3\2\2\2\u13a7\u13ac\5\u01b6\u00dc\2\u13a8\u13ac\5\u01ba\u00de\2"+
		"\u13a9\u13ac\5\u01bc\u00df\2\u13aa\u13ac\5\u01b8\u00dd\2\u13ab\u13a7\3"+
		"\2\2\2\u13ab\u13a8\3\2\2\2\u13ab\u13a9\3\2\2\2\u13ab\u13aa\3\2\2\2\u13ac"+
		"\u01a7\3\2\2\2\u13ad\u13ae\5\u01b2\u00da\2\u13ae\u13af\7\u0106\2\2\u13af"+
		"\u13b0\7\u0186\2\2\u13b0\u13b1\5\u01b0\u00d9\2\u13b1\u13b2\7\u021b\2\2"+
		"\u13b2\u13b3\7\u0393\2\2\u13b3\u01a9\3\2\2\2\u13b4\u13b5\7[\2\2\u13b5"+
		"\u13be\7v\2\2\u13b6\u13b7\7\u0099\2\2\u13b7\u13be\7u\2\2\u13b8\u13b9\5"+
		"\u05e2\u02f2\2\u13b9\u13ba\7\u0487\2\2\u13ba\u13bb\5\u01c6\u00e4\2\u13bb"+
		"\u13bc\7\u048e\2\2\u13bc\u13be\3\2\2\2\u13bd\u13b4\3\2\2\2\u13bd\u13b6"+
		"\3\2\2\2\u13bd\u13b8\3\2\2\2\u13be\u01ab\3\2\2\2\u13bf\u13c4\5\u01aa\u00d6"+
		"\2\u13c0\u13c1\7\u0481\2\2\u13c1\u13c3\5\u01aa\u00d6\2\u13c2\u13c0\3\2"+
		"\2\2\u13c3\u13c6\3\2\2\2\u13c4\u13c2\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5"+
		"\u01ad\3\2\2\2\u13c6\u13c4\3\2\2\2\u13c7\u13c8\7\177\2\2\u13c8\u13c9\7"+
		"\u0487\2\2\u13c9\u13ca\5\u01ac\u00d7\2\u13ca\u13cb\7\u048e\2\2\u13cb\u01af"+
		"\3\2\2\2\u13cc\u13cf\5,\27\2\u13cd\u13cf\7\u0393\2\2\u13ce\u13cc\3\2\2"+
		"\2\u13ce\u13cd\3\2\2\2\u13cf\u01b1\3\2\2\2\u13d0\u13d1\5\u01b4\u00db\2"+
		"\u13d1\u01b3\3\2\2\2\u13d2\u13d3\7\u0106\2\2\u13d3\u13d4\7g\2\2\u13d4"+
		"\u13d5\7\u010a\2\2\u13d5\u13d7\7\u0487\2\2\u13d6\u13d8\5:\36\2\u13d7\u13d6"+
		"\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u13d9\3\2\2\2\u13d9\u13e3\7\u048e\2"+
		"\2\u13da\u13db\7\u0106\2\2\u13db\u13dc\7g\2\2\u13dc\u13dd\7\u010a\2\2"+
		"\u13dd\u13de\7v\2\2\u13de\u13df\7\u0487\2\2\u13df\u13e0\5\u01c6\u00e4"+
		"\2\u13e0\u13e1\7\u048e\2\2\u13e1\u13e3\3\2\2\2\u13e2\u13d2\3\2\2\2\u13e2"+
		"\u13da\3\2\2\2\u13e3\u01b5\3\2\2\2\u13e4\u13e5\7\u0106\2\2\u13e5\u13e6"+
		"\7g\2\2\u13e6\u13e7\7\u01e2\2\2\u13e7\u13e8\7\u0487\2\2\u13e8\u13e9\5"+
		":\36\2\u13e9\u13eb\7\u048e\2\2\u13ea\u13ec\5\u01be\u00e0\2\u13eb\u13ea"+
		"\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u13ee\3\2\2\2\u13ed\u13ef\5\u01ce\u00e8"+
		"\2\u13ee\u13ed\3\2\2\2\u13ee\u13ef\3\2\2\2\u13ef\u01b7\3\2\2\2\u13f0\u13f1"+
		"\7\u0106\2\2\u13f1\u13f2\7g\2\2\u13f2\u13f3\7\u00da\2\2\u13f3\u13f4\7"+
		"\u0487\2\2\u13f4\u13f5\5:\36\2\u13f5\u13f7\7\u048e\2\2\u13f6\u13f8\5\u01be"+
		"\u00e0\2\u13f7\u13f6\3\2\2\2\u13f7\u13f8\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9"+
		"\u13fa\5\u01dc\u00ef\2\u13fa\u1408\3\2\2\2\u13fb\u13fc\7\u0106\2\2\u13fc"+
		"\u13fd\7g\2\2\u13fd\u13fe\7\u00da\2\2\u13fe\u13ff\7v\2\2\u13ff\u1400\7"+
		"\u0487\2\2\u1400\u1401\5\u01c6\u00e4\2\u1401\u1403\7\u048e\2\2\u1402\u1404"+
		"\5\u01be\u00e0\2\u1403\u1402\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u1405\3"+
		"\2\2\2\u1405\u1406\5\u01dc\u00ef\2\u1406\u1408\3\2\2\2\u1407\u13f0\3\2"+
		"\2\2\u1407\u13fb\3\2\2\2\u1408\u01b9\3\2\2\2\u1409\u140a\7\u0106\2\2\u140a"+
		"\u140b\7g\2\2\u140b\u140c\7\u00cf\2\2\u140c\u140e\7\u0487\2\2\u140d\u140f"+
		"\5\u01c6\u00e4\2\u140e\u140d\3\2\2\2\u140e\u140f\3\2\2\2\u140f\u1410\3"+
		"\2\2\2\u1410\u1412\7\u048e\2\2\u1411\u1413\5\u01be\u00e0\2\u1412\u1411"+
		"\3\2\2\2\u1412\u1413\3\2\2\2\u1413\u1415\3\2\2\2\u1414\u1416\5\u01ce\u00e8"+
		"\2\u1415\u1414\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u01bb\3\2\2\2\u1417\u1418"+
		"\7\u0106\2\2\u1418\u1419\7g\2\2\u1419\u141a\7\u010a\2\2\u141a\u141b\7"+
		"\u0487\2\2\u141b\u141c\5:\36\2\u141c\u141e\7\u048e\2\2\u141d\u141f\5\u01be"+
		"\u00e0\2\u141e\u141d\3\2\2\2\u141e\u141f\3\2\2\2\u141f\u1420\3\2\2\2\u1420"+
		"\u1421\5\u01d6\u00ec\2\u1421\u142f\3\2\2\2\u1422\u1423\7\u0106\2\2\u1423"+
		"\u1424\7g\2\2\u1424\u1425\7\u010a\2\2\u1425\u1426\7v\2\2\u1426\u1427\7"+
		"\u0487\2\2\u1427\u1428\5\u01c6\u00e4\2\u1428\u142a\7\u048e\2\2\u1429\u142b"+
		"\5\u01be\u00e0\2\u142a\u1429\3\2\2\2\u142a\u142b\3\2\2\2\u142b\u142c\3"+
		"\2\2\2\u142c\u142d\5\u01d6\u00ec\2\u142d\u142f\3\2\2\2\u142e\u1417\3\2"+
		"\2\2\u142e\u1422\3\2\2\2\u142f\u01bd\3\2\2\2\u1430\u1432\5\u01c0\u00e1"+
		"\2\u1431\u1430\3\2\2\2\u1431\u1432\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1439"+
		"\5\u01c8\u00e5\2\u1434\u1436\5\u01c8\u00e5\2\u1435\u1434\3\2\2\2\u1435"+
		"\u1436\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1439\5\u01c0\u00e1\2\u1438\u1431"+
		"\3\2\2\2\u1438\u1435\3\2\2\2\u1439\u01bf\3\2\2\2\u143a\u143b\7\u021b\2"+
		"\2\u143b\u143c\7\u0179\2\2\u143c\u01c1\3\2\2\2\u143d\u1442\5\u01c4\u00e3"+
		"\2\u143e\u143f\7\u0481\2\2\u143f\u1441\5\u01c4\u00e3\2\u1440\u143e\3\2"+
		"\2\2\u1441\u1444\3\2\2\2\u1442\u1440\3\2\2\2\u1442\u1443\3\2\2\2\u1443"+
		"\u01c3\3\2\2\2\u1444\u1442\3\2\2\2\u1445\u144b\5\u05e0\u02f1\2\u1446\u1447"+
		"\7\u0487\2\2\u1447\u1448\5\u01c6\u00e4\2\u1448\u1449\7\u048e\2\2\u1449"+
		"\u144b\3\2\2\2\u144a\u1445\3\2\2\2\u144a\u1446\3\2\2\2\u144b\u01c5\3\2"+
		"\2\2\u144c\u1451\5\u05e0\u02f1\2\u144d\u144e\7\u0481\2\2\u144e\u1450\5"+
		"\u05e0\u02f1\2\u144f\u144d\3\2\2\2\u1450\u1453\3\2\2\2\u1451\u144f\3\2"+
		"\2\2\u1451\u1452\3\2\2\2\u1452\u01c7\3\2\2\2\u1453\u1451\3\2\2\2\u1454"+
		"\u1457\5\u01ca\u00e6\2\u1455\u1457\5\u01cc\u00e7\2\u1456\u1454\3\2\2\2"+
		"\u1456\u1455\3\2\2\2\u1457\u01c9\3\2\2\2\u1458\u1459\7\u01bc\2\2\u1459"+
		"\u145a\7g\2\2\u145a\u145b\7\u010a\2\2\u145b\u145c\7\u0487\2\2\u145c\u145d"+
		"\5:\36\2\u145d\u145e\7\u048e\2\2\u145e\u145f\7\u01bc\2\2\u145f\u1460\7"+
		"\u02db\2\2\u1460\u1461\5\u01ea\u00f6\2\u1461\u1497\3\2\2\2\u1462\u1463"+
		"\7\u01bc\2\2\u1463\u1464\7g\2\2\u1464\u1465\7\u010a\2\2\u1465\u1466\7"+
		"v\2\2\u1466\u1467\7\u0487\2\2\u1467\u1468\5\u01c6\u00e4\2\u1468\u1469"+
		"\7\u048e\2\2\u1469\u146a\7\u01bc\2\2\u146a\u146b\7\u02db\2\2\u146b\u146c"+
		"\5\u01ea\u00f6\2\u146c\u1497\3\2\2\2\u146d\u146e\7\u01bc\2\2\u146e\u146f"+
		"\7g\2\2\u146f\u1470\7\u01e2\2\2\u1470\u1471\7\u0487\2\2\u1471\u1472\5"+
		":\36\2\u1472\u1473\7\u048e\2\2\u1473\u1474\7\u01bc\2\2\u1474\u1475\7\u02db"+
		"\2\2\u1475\u1476\5\u01e2\u00f2\2\u1476\u1497\3\2\2\2\u1477\u1478\7\u01bc"+
		"\2\2\u1478\u1479\7g\2\2\u1479\u147a\7\u00da\2\2\u147a\u147b\7\u0487\2"+
		"\2\u147b\u147c\5:\36\2\u147c\u147d\7\u048e\2\2\u147d\u147e\7\u01bc\2\2"+
		"\u147e\u147f\7\u02db\2\2\u147f\u1480\5\u01f0\u00f9\2\u1480\u1497\3\2\2"+
		"\2\u1481\u1482\7\u01bc\2\2\u1482\u1483\7g\2\2\u1483\u1484\7\u00da\2\2"+
		"\u1484\u1485\7v\2\2\u1485\u1486\7\u0487\2\2\u1486\u1487\5\u01c6\u00e4"+
		"\2\u1487\u1488\7\u048e\2\2\u1488\u1489\7\u01bc\2\2\u1489\u148a\7\u02db"+
		"\2\2\u148a\u148b\5\u01f0\u00f9\2\u148b\u1497\3\2\2\2\u148c\u148d\7\u01bc"+
		"\2\2\u148d\u148e\7g\2\2\u148e\u148f\7\u00cf\2\2\u148f\u1490\7\u0487\2"+
		"\2\u1490\u1491\5\u01c6\u00e4\2\u1491\u1492\7\u048e\2\2\u1492\u1493\7\u01bc"+
		"\2\2\u1493\u1494\7\u02db\2\2\u1494\u1495\5\u01e2\u00f2\2\u1495\u1497\3"+
		"\2\2\2\u1496\u1458\3\2\2\2\u1496\u1462\3\2\2\2\u1496\u146d\3\2\2\2\u1496"+
		"\u1477\3\2\2\2\u1496\u1481\3\2\2\2\u1496\u148c\3\2\2\2\u1497\u01cb\3\2"+
		"\2\2\u1498\u1499\7\u01bc\2\2\u1499\u149a\7g\2\2\u149a\u149b\tN\2\2\u149b"+
		"\u149c\7\u0487\2\2\u149c\u149d\5:\36\2\u149d\u149e\7\u048e\2\2\u149e\u14bc"+
		"\3\2\2\2\u149f\u14a0\7\u01bc\2\2\u14a0\u14a1\7g\2\2\u14a1\u14a2\tN\2\2"+
		"\u14a2\u14a3\7v\2\2\u14a3\u14a4\7\u0487\2\2\u14a4\u14a5\5\u01c6\u00e4"+
		"\2\u14a5\u14a6\7\u048e\2\2\u14a6\u14bc\3\2\2\2\u14a7\u14a8\7\u01bc\2\2"+
		"\u14a8\u14a9\7g\2\2\u14a9\u14aa\7\u01e2\2\2\u14aa\u14ab\7\u0487\2\2\u14ab"+
		"\u14ac\5:\36\2\u14ac\u14af\7\u048e\2\2\u14ad\u14ae\7\u030b\2\2\u14ae\u14b0"+
		"\7\u0179\2\2\u14af\u14ad\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14bc\3\2\2"+
		"\2\u14b1\u14b2\7\u01bc\2\2\u14b2\u14b3\7g\2\2\u14b3\u14b4\7\u00cf\2\2"+
		"\u14b4\u14b5\7\u0487\2\2\u14b5\u14b6\5\u01c6\u00e4\2\u14b6\u14b9\7\u048e"+
		"\2\2\u14b7\u14b8\7\u030b\2\2\u14b8\u14ba\7\u0179\2\2\u14b9\u14b7\3\2\2"+
		"\2\u14b9\u14ba\3\2\2\2\u14ba\u14bc\3\2\2\2\u14bb\u1498\3\2\2\2\u14bb\u149f"+
		"\3\2\2\2\u14bb\u14a7\3\2\2\2\u14bb\u14b1\3\2\2\2\u14bc\u01cd\3\2\2\2\u14bd"+
		"\u14be\7\u0487\2\2\u14be\u14bf\5\u01d0\u00e9\2\u14bf\u14c0\7\u048e\2\2"+
		"\u14c0\u01cf\3\2\2\2\u14c1\u14c6\5\u01d4\u00eb\2\u14c2\u14c3\7\u0481\2"+
		"\2\u14c3\u14c5\5\u01d4\u00eb\2\u14c4\u14c2\3\2\2\2\u14c5\u14c8\3\2\2\2"+
		"\u14c6\u14c4\3\2\2\2\u14c6\u14c7\3\2\2\2\u14c7\u01d1\3\2\2\2\u14c8\u14c6"+
		"\3\2\2\2\u14c9\u14cd\5\u01e2\u00f2\2\u14ca\u14cd\5\u01ea\u00f6\2\u14cb"+
		"\u14cd\5\u01f0\u00f9\2\u14cc\u14c9\3\2\2\2\u14cc\u14ca\3\2\2\2\u14cc\u14cb"+
		"\3\2\2\2\u14cd\u01d3\3\2\2\2\u14ce\u14cf\7\u0106\2\2\u14cf\u14d2\5\u0350"+
		"\u01a9\2\u14d0\u14d1\7\u00b5\2\2\u14d1\u14d3\7\u0179\2\2\u14d2\u14d0\3"+
		"\2\2\2\u14d2\u14d3\3\2\2\2\u14d3\u14d5\3\2\2\2\u14d4\u14d6\5\u01e6\u00f4"+
		"\2\u14d5\u14d4\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d8\3\2\2\2\u14d7\u14d9"+
		"\5\u01d2\u00ea\2\u14d8\u14d7\3\2\2\2\u14d8\u14d9\3\2\2\2\u14d9\u01d5\3"+
		"\2\2\2\u14da\u14db\7\u0487\2\2\u14db\u14dc\5\u01d8\u00ed\2\u14dc\u14dd"+
		"\7\u048e\2\2\u14dd\u01d7\3\2\2\2\u14de\u14e3\5\u01da\u00ee\2\u14df\u14e0"+
		"\7\u0481\2\2\u14e0\u14e2\5\u01da\u00ee\2\u14e1\u14df\3\2\2\2\u14e2\u14e5"+
		"\3\2\2\2\u14e3\u14e1\3\2\2\2\u14e3\u14e4\3\2\2\2\u14e4\u01d9\3\2\2\2\u14e5"+
		"\u14e3\3\2\2\2\u14e6\u14e7\7\u0106\2\2\u14e7\u14e8\5\u0350\u01a9\2\u14e8"+
		"\u14e9\7\u0152\2\2\u14e9\u14ea\7\u0227\2\2\u14ea\u14eb\7\u037c\2\2\u14eb"+
		"\u14ee\5\u01fa\u00fe\2\u14ec\u14ed\7\u00b5\2\2\u14ed\u14ef\7\u0179\2\2"+
		"\u14ee\u14ec\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef\u14f1\3\2\2\2\u14f0\u14f2"+
		"\5\u01e6\u00f4\2\u14f1\u14f0\3\2\2\2\u14f1\u14f2\3\2\2\2\u14f2\u14f4\3"+
		"\2\2\2\u14f3\u14f5\5\u01d2\u00ea\2\u14f4\u14f3\3\2\2\2\u14f4\u14f5\3\2"+
		"\2\2\u14f5\u01db\3\2\2\2\u14f6\u14f7\7\u0487\2\2\u14f7\u14f8\5\u01de\u00f0"+
		"\2\u14f8\u14f9\7\u048e\2\2\u14f9\u01dd\3\2\2\2\u14fa\u14ff\5\u01e0\u00f1"+
		"\2\u14fb\u14fc\7\u0481\2\2\u14fc\u14fe\5\u01e0\u00f1\2\u14fd\u14fb\3\2"+
		"\2\2\u14fe\u1501\3\2\2\2\u14ff\u14fd\3\2\2\2\u14ff\u1500\3\2\2\2\u1500"+
		"\u01df\3\2\2\2\u1501\u14ff\3\2\2\2\u1502\u1503\7\u0106\2\2\u1503\u1504"+
		"\5\u0350\u01a9\2\u1504\u1505\7\u0152\2\2\u1505\u1506\7\u00b7\2\2\u1506"+
		"\u1509\5\u01f6\u00fc\2\u1507\u1508\7\u00b5\2\2\u1508\u150a\7\u0179\2\2"+
		"\u1509\u1507\3\2\2\2\u1509\u150a\3\2\2\2\u150a\u150c\3\2\2\2\u150b\u150d"+
		"\5\u01e6\u00f4\2\u150c\u150b\3\2\2\2\u150c\u150d\3\2\2\2\u150d\u150f\3"+
		"\2\2\2\u150e\u1510\5\u01d2\u00ea\2\u150f\u150e\3\2\2\2\u150f\u1510\3\2"+
		"\2\2\u1510\u01e1\3\2\2\2\u1511\u1512\7\u0487\2\2\u1512\u1513\5\u01e4\u00f3"+
		"\2\u1513\u1514\7\u048e\2\2\u1514\u01e3\3\2\2\2\u1515\u151a\5\u01e8\u00f5"+
		"\2\u1516\u1517\7\u0481\2\2\u1517\u1519\5\u01e8\u00f5\2\u1518\u1516\3\2"+
		"\2\2\u1519\u151c\3\2\2\2\u151a\u1518\3\2\2\2\u151a\u151b\3\2\2\2\u151b"+
		"\u01e5\3\2\2\2\u151c\u151a\3\2\2\2\u151d\u151e\7\u0203\2\2\u151e\u151f"+
		"\7\u0493\2\2\u151f\u1520\7\u038a\2\2\u1520\u01e7\3\2\2\2\u1521\u1522\7"+
		"\u01bc\2\2\u1522\u1524\5\u0350\u01a9\2\u1523\u1525\5\u01e6\u00f4\2\u1524"+
		"\u1523\3\2\2\2\u1524\u1525\3\2\2\2\u1525\u01e9\3\2\2\2\u1526\u1527\7\u0487"+
		"\2\2\u1527\u1528\5\u01ec\u00f7\2\u1528\u1529\7\u048e\2\2\u1529\u01eb\3"+
		"\2\2\2\u152a\u152f\5\u01ee\u00f8\2\u152b\u152c\7\u0481\2\2\u152c\u152e"+
		"\5\u01ee\u00f8\2\u152d\u152b\3\2\2\2\u152e\u1531\3\2\2\2\u152f\u152d\3"+
		"\2\2\2\u152f\u1530\3\2\2\2\u1530\u01ed\3\2\2\2\u1531\u152f\3\2\2\2\u1532"+
		"\u1533\7\u01bc\2\2\u1533\u1534\5\u0350\u01a9\2\u1534\u1535\7\u0152\2\2"+
		"\u1535\u1536\7\u0227\2\2\u1536\u1537\7\u037c\2\2\u1537\u1539\5\u01fa\u00fe"+
		"\2\u1538\u153a\5\u01e6\u00f4\2\u1539\u1538\3\2\2\2\u1539\u153a\3\2\2\2"+
		"\u153a\u01ef\3\2\2\2\u153b\u153c\7\u0487\2\2\u153c\u153d\5\u01f2\u00fa"+
		"\2\u153d\u153e\7\u048e\2\2\u153e\u01f1\3\2\2\2\u153f\u1544\5\u01f4\u00fb"+
		"\2\u1540\u1541\7\u0481\2\2\u1541\u1543\5\u01f4\u00fb\2\u1542\u1540\3\2"+
		"\2\2\u1543\u1546\3\2\2\2\u1544\u1542\3\2\2\2\u1544\u1545\3\2\2\2\u1545"+
		"\u01f3\3\2\2\2\u1546\u1544\3\2\2\2\u1547\u1548\7\u01bc\2\2\u1548\u1549"+
		"\5\u0350\u01a9\2\u1549\u154a\7\u0152\2\2\u154a\u154b\7\u00b7\2\2\u154b"+
		"\u154d\5\u01f6\u00fc\2\u154c\u154e\5\u01e6\u00f4\2\u154d\u154c\3\2\2\2"+
		"\u154d\u154e\3\2\2\2\u154e\u01f5\3\2\2\2\u154f\u1552\7\u0487\2\2\u1550"+
		"\u1553\7\u008b\2\2\u1551\u1553\5\u01f8\u00fd\2\u1552\u1550\3\2\2\2\u1552"+
		"\u1551\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u1555\7\u048e\2\2\u1555\u01f7"+
		"\3\2\2\2\u1556\u155b\5:\36\2\u1557\u1558\7\u0481\2\2\u1558\u155a\5:\36"+
		"\2\u1559\u1557\3\2\2\2\u155a\u155d\3\2\2\2\u155b\u1559\3\2\2\2\u155b\u155c"+
		"\3\2\2\2\u155c\u01f9\3\2\2\2\u155d\u155b\3\2\2\2\u155e\u155f\7\u0487\2"+
		"\2\u155f\u1560\5\u01fc\u00ff\2\u1560\u1561\7\u048e\2\2\u1561\u1564\3\2"+
		"\2\2\u1562\u1564\7\u00ea\2\2\u1563\u155e\3\2\2\2\u1563\u1562\3\2\2\2\u1564"+
		"\u01fb\3\2\2\2\u1565\u156a\5\u01fe\u0100\2\u1566\u1567\7\u0481\2\2\u1567"+
		"\u1569\5\u01fe\u0100\2\u1568\u1566\3\2\2\2\u1569\u156c\3\2\2\2\u156a\u1568"+
		"\3\2\2\2\u156a\u156b\3\2\2\2\u156b\u01fd\3\2\2\2\u156c\u156a\3\2\2\2\u156d"+
		"\u1570\5:\36\2\u156e\u1570\7\u00ea\2\2\u156f\u156d\3\2\2\2\u156f\u156e"+
		"\3\2\2\2\u1570\u01ff\3\2\2\2\u1571\u1572\t\3\2\2\u1572\u0201\3\2\2\2\u1573"+
		"\u1574\7\u0106\2\2\u1574\u1575\7g\2\2\u1575\u1576\7\u01e2\2\2\u1576\u1579"+
		"\5\u020a\u0106\2\u1577\u1578\7\u021b\2\2\u1578\u157a\7\u0179\2\2\u1579"+
		"\u1577\3\2\2\2\u1579\u157a\3\2\2\2\u157a\u0203\3\2\2\2\u157b\u157c\7\u0106"+
		"\2\2\u157c\u157d\7g\2\2\u157d\u157e\7\u00cf\2\2\u157e\u157f\7\u0179\2"+
		"\2\u157f\u1582\5\u020a\u0106\2\u1580\u1581\7\u021b\2\2\u1581\u1583\7\u0179"+
		"\2\2\u1582\u1580\3\2\2\2\u1582\u1583\3\2\2\2\u1583\u0205\3\2\2\2\u1584"+
		"\u1585\7\u0106\2\2\u1585\u1586\7g\2\2\u1586\u1589\7\u010a\2\2\u1587\u1588"+
		"\7v\2\2\u1588\u158a\7\u0179\2\2\u1589\u1587\3\2\2\2\u1589\u158a\3\2\2"+
		"\2\u158a\u158b\3\2\2\2\u158b\u158e\5\u020a\u0106\2\u158c\u158d\7\u021b"+
		"\2\2\u158d\u158f\7\u0179\2\2\u158e\u158c\3\2\2\2\u158e\u158f\3\2\2\2\u158f"+
		"\u1590\3\2\2\2\u1590\u1591\5\u01d6\u00ec\2\u1591\u0207\3\2\2\2\u1592\u1593"+
		"\7\u0106\2\2\u1593\u1594\7g\2\2\u1594\u1597\7\u00da\2\2\u1595\u1596\7"+
		"v\2\2\u1596\u1598\7\u0179\2\2\u1597\u1595\3\2\2\2\u1597\u1598\3\2\2\2"+
		"\u1598\u1599\3\2\2\2\u1599\u159c\5\u020a\u0106\2\u159a\u159b\7\u021b\2"+
		"\2\u159b\u159d\7\u0179\2\2\u159c\u159a\3\2\2\2\u159c\u159d\3\2\2\2\u159d"+
		"\u159e\3\2\2\2\u159e\u159f\5\u01dc\u00ef\2\u159f\u0209\3\2\2\2\u15a0\u15a3"+
		"\5\u020c\u0107\2\u15a1\u15a3\5\u020e\u0108\2\u15a2\u15a0\3\2\2\2\u15a2"+
		"\u15a1\3\2\2\2\u15a3\u020b\3\2\2\2\u15a4\u15a5\7\u01bc\2\2\u15a5\u15a6"+
		"\7g\2\2\u15a6\u15a9\7\u010a\2\2\u15a7\u15a8\7v\2\2\u15a8\u15aa\7\u0179"+
		"\2\2\u15a9\u15a7\3\2\2\2\u15a9\u15aa\3\2\2\2\u15aa\u15ab\3\2\2\2\u15ab"+
		"\u15ac\7\u01bc\2\2\u15ac\u15ad\7\u02db\2\2\u15ad\u15ba\5\u01ea\u00f6\2"+
		"\u15ae\u15af\7\u01bc\2\2\u15af\u15b0\7g\2\2\u15b0\u15b3\7\u00da\2\2\u15b1"+
		"\u15b2\7v\2\2\u15b2\u15b4\7\u0179\2\2\u15b3\u15b1\3\2\2\2\u15b3\u15b4"+
		"\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b6\7\u01bc\2\2\u15b6\u15b7\7\u02db"+
		"\2\2\u15b7\u15ba\5\u01f0\u00f9\2\u15b8\u15ba\5\u0642\u0322\2\u15b9\u15a4"+
		"\3\2\2\2\u15b9\u15ae\3\2\2\2\u15b9\u15b8\3\2\2\2\u15ba\u020d\3\2\2\2\u15bb"+
		"\u15bc\7\u01bc\2\2\u15bc\u15c0\7g\2\2\u15bd\u15c1\7\u01e2\2\2\u15be\u15bf"+
		"\7\u00cf\2\2\u15bf\u15c1\7\u0179\2\2\u15c0\u15bd\3\2\2\2\u15c0\u15be\3"+
		"\2\2\2\u15c1\u15c4\3\2\2\2\u15c2\u15c3\7\u030b\2\2\u15c3\u15c5\7\u0179"+
		"\2\2\u15c4\u15c2\3\2\2\2\u15c4\u15c5\3\2\2\2\u15c5\u15d5\3\2\2\2\u15c6"+
		"\u15c7\7\u01bc\2\2\u15c7\u15c8\7g\2\2\u15c8\u15cb\7\u010a\2\2\u15c9\u15ca"+
		"\7v\2\2\u15ca\u15cc\7\u0179\2\2\u15cb\u15c9\3\2\2\2\u15cb\u15cc\3\2\2"+
		"\2\u15cc\u15d5\3\2\2\2\u15cd\u15ce\7\u01bc\2\2\u15ce\u15cf\7g\2\2\u15cf"+
		"\u15d2\7\u00da\2\2\u15d0\u15d1\7v\2\2\u15d1\u15d3\7\u0179\2\2\u15d2\u15d0"+
		"\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u15d5\3\2\2\2\u15d4\u15bb\3\2\2\2\u15d4"+
		"\u15c6\3\2\2\2\u15d4\u15cd\3\2\2\2\u15d5\u020f\3\2\2\2\u15d6\u15d7\tO"+
		"\2\2\u15d7\u0211\3\2\2\2\u15d8\u15de\5\u0214\u010b\2\u15d9\u15da\5\u018a"+
		"\u00c6\2\u15da\u15db\5\u0214\u010b\2\u15db\u15dd\3\2\2\2\u15dc\u15d9\3"+
		"\2\2\2\u15dd\u15e0\3\2\2\2\u15de\u15dc\3\2\2\2\u15de\u15df\3\2\2\2\u15df"+
		"\u0213\3\2\2\2\u15e0\u15de\3\2\2\2\u15e1\u15e2\5\u0216\u010c\2\u15e2\u15e3"+
		"\7\u0493\2\2\u15e3\u15e4\7\u04a3\2\2\u15e4\u0215\3\2\2\2\u15e5\u15e8\t"+
		"P\2\2\u15e6\u15e8\tQ\2\2\u15e7\u15e5\3\2\2\2\u15e7\u15e6\3\2\2\2\u15e8"+
		"\u15ee\3\2\2\2\u15e9\u15ec\tR\2\2\u15ea\u15ec\tS\2\2\u15eb\u15e9\3\2\2"+
		"\2\u15eb\u15ea\3\2\2\2\u15ec\u15ee\3\2\2\2\u15ed\u15e7\3\2\2\2\u15ed\u15eb"+
		"\3\2\2\2\u15ee\u15f4\3\2\2\2\u15ef\u15f2\tT\2\2\u15f0\u15f2\7\u01a8\2"+
		"\2\u15f1\u15ef\3\2\2\2\u15f1\u15f0\3\2\2\2\u15f2\u15f4\3\2\2\2\u15f3\u15ed"+
		"\3\2\2\2\u15f3\u15f1\3\2\2\2\u15f4\u0217\3\2\2\2\u15f5\u15fc\5\u021a\u010e"+
		"\2\u15f6\u15f8\7\u0481\2\2\u15f7\u15f6\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8"+
		"\u15f9\3\2\2\2\u15f9\u15fb\5\u021a\u010e\2\u15fa\u15f7\3\2\2\2\u15fb\u15fe"+
		"\3\2\2\2\u15fc\u15fa\3\2\2\2\u15fc\u15fd\3\2\2\2\u15fd\u0219\3\2\2\2\u15fe"+
		"\u15fc\3\2\2\2\u15ff\u1600\tU\2\2\u1600\u1601\7\u0493\2\2\u1601\u1615"+
		"\7\u04a3\2\2\u1602\u1603\tV\2\2\u1603\u1604\7\u0493\2\2\u1604\u1615\5"+
		":\36\2\u1605\u1606\7\u0328\2\2\u1606\u1607\7\u0493\2\2\u1607\u1615\7\u0179"+
		"\2\2\u1608\u1609\tW\2\2\u1609\u160a\7\u0493\2\2\u160a\u1615\7\u0476\2"+
		"\2\u160b\u160c\7\u044b\2\2\u160c\u160d\7\u0493\2\2\u160d\u160e\7\u0487"+
		"\2\2\u160e\u160f\5\32\16\2\u160f\u1610\7\u048e\2\2\u1610\u1615\3\2\2\2"+
		"\u1611\u1612\7\u01bf\2\2\u1612\u1613\7\u0493\2\2\u1613\u1615\5\u00fe\u0080"+
		"\2\u1614\u15ff\3\2\2\2\u1614\u1602\3\2\2\2\u1614\u1605\3\2\2\2\u1614\u1608"+
		"\3\2\2\2\u1614\u160b\3\2\2\2\u1614\u1611\3\2\2\2\u1615\u021b\3\2\2\2\u1616"+
		"\u1617\7x\2\2\u1617\u161c\7\u013e\2\2\u1618\u1619\7\u00b6\2\2\u1619\u161a"+
		"\5<\37\2\u161a\u161b\7\u009e\2\2\u161b\u161d\3\2\2\2\u161c\u1618\3\2\2"+
		"\2\u161c\u161d\3\2\2\2\u161d\u161e\3\2\2\2\u161e\u1620\5\u05e2\u02f2\2"+
		"\u161f\u1621\5\u0224\u0113\2\u1620\u161f\3\2\2\2\u1620\u1621\3\2\2\2\u1621"+
		"\u1626\3\2\2\2\u1622\u1627\5\u0202\u0102\2\u1623\u1627\5\u0204\u0103\2"+
		"\u1624\u1627\5\u0206\u0104\2\u1625\u1627\5\u0208\u0105\2\u1626\u1622\3"+
		"\2\2\2\u1626\u1623\3\2\2\2\u1626\u1624\3\2\2\2\u1626\u1625\3\2\2\2\u1626"+
		"\u1627\3\2\2\2\u1627\u021d\3\2\2\2\u1628\u1629\7\u0097\2\2\u1629\u162c"+
		"\7\u013e\2\2\u162a\u162b\7\u00b6\2\2\u162b\u162d\7\u009e\2\2\u162c\u162a"+
		"\3\2\2\2\u162c\u162d\3\2\2\2\u162d\u162e\3\2\2\2\u162e\u162f\5\u05e2\u02f2"+
		"\2\u162f\u021f\3\2\2\2\u1630\u1631\7W\2\2\u1631\u1632\7\u013e\2\2\u1632"+
		"\u1633\5\u05e2\u02f2\2\u1633\u1635\7U\2\2\u1634\u1636\7\u013d\2\2\u1635"+
		"\u1634\3\2\2\2\u1635\u1636\3\2\2\2\u1636\u1637\3\2\2\2\u1637\u1638\5\u028e"+
		"\u0148\2\u1638\u1644\3\2\2\2\u1639\u163a\7W\2\2\u163a\u163b\7\u013e\2"+
		"\2\u163b\u163c\5\u05e2\u02f2\2\u163c\u163d\5\u0228\u0115\2\u163d\u1644"+
		"\3\2\2\2\u163e\u163f\7W\2\2\u163f\u1640\7\u013e\2\2\u1640\u1641\5\u05e2"+
		"\u02f2\2\u1641\u1642\5\u04ce\u0268\2\u1642\u1644\3\2\2\2\u1643\u1630\3"+
		"\2\2\2\u1643\u1639\3\2\2\2\u1643\u163e\3\2\2\2\u1644\u0221\3\2\2\2\u1645"+
		"\u1647\5\u0226\u0114\2\u1646\u1645\3\2\2\2\u1647\u1648\3\2\2\2\u1648\u1646"+
		"\3\2\2\2\u1648\u1649\3\2\2\2\u1649\u0223\3\2\2\2\u164a\u1650\5\u0222\u0112"+
		"\2\u164b\u164c\5\u0226\u0114\2\u164c\u164d\7\u0481\2\2\u164d\u164e\5\u0224"+
		"\u0113\2\u164e\u1650\3\2\2\2\u164f\u164a\3\2\2\2\u164f\u164b\3\2\2\2\u1650"+
		"\u0225\3\2\2\2\u1651\u1653\7\u0278\2\2\u1652\u1654\7\u0493\2\2\u1653\u1652"+
		"\3\2\2\2\u1653\u1654\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u1657\5\u0194\u00cb"+
		"\2\u1656\u1658\7\u00a8\2\2\u1657\u1656\3\2\2\2\u1657\u1658\3\2\2\2\u1658"+
		"\u166e\3\2\2\2\u1659\u165b\7\u03e8\2\2\u165a\u165c\7\u0493\2\2\u165b\u165a"+
		"\3\2\2\2\u165b\u165c\3\2\2\2\u165c\u165d\3\2\2\2\u165d\u166e\5\u0190\u00c9"+
		"\2\u165e\u1660\tX\2\2\u165f\u1661\7\u0493\2\2\u1660\u165f\3\2\2\2\u1660"+
		"\u1661\3\2\2\2\u1661\u1662\3\2\2\2\u1662\u166e\7\u0179\2\2\u1663\u1665"+
		"\7\u03cd\2\2\u1664\u1666\7\u0493\2\2\u1665\u1664\3\2\2\2\u1665\u1666\3"+
		"\2\2\2\u1666\u1667\3\2\2\2\u1667\u166e\7\u0476\2\2\u1668\u166a\7\u01d4"+
		"\2\2\u1669\u166b\7\u0493\2\2\u166a\u1669\3\2\2\2\u166a\u166b\3\2\2\2\u166b"+
		"\u166c\3\2\2\2\u166c\u166e\7\u04a3\2\2\u166d\u1651\3\2\2\2\u166d\u1659"+
		"\3\2\2\2\u166d\u165e\3\2\2\2\u166d\u1663\3\2\2\2\u166d\u1668\3\2\2\2\u166e"+
		"\u0227\3\2\2\2\u166f\u1674\5\u022a\u0116\2\u1670\u1671\7\u0481\2\2\u1671"+
		"\u1673\5\u022a\u0116\2\u1672\u1670\3\2\2\2\u1673\u1676\3\2\2\2\u1674\u1672"+
		"\3\2\2\2\u1674\u1675\3\2\2\2\u1675\u0229\3\2\2\2\u1676\u1674\3\2\2\2\u1677"+
		"\u1679\7\u0121\2\2\u1678\u1677\3\2\2\2\u1678\u1679\3\2\2\2\u1679\u167a"+
		"\3\2\2\2\u167a\u167b\5\u0222\u0112\2\u167b\u022b\3\2\2\2\u167c\u167e\7"+
		"\u008b\2\2\u167d\u167c\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u167f\3\2\2\2"+
		"\u167f\u1681\7\u013e\2\2\u1680\u1682\7\u0493\2\2\u1681\u1680\3\2\2\2\u1681"+
		"\u1682\3\2\2\2\u1682\u1685\3\2\2\2\u1683\u1686\7\u0178\2\2\u1684\u1686"+
		"\5\u05e2\u02f2\2\u1685\u1683\3\2\2\2\u1685\u1684\3\2\2\2\u1686\u022d\3"+
		"\2\2\2\u1687\u168a\7x\2\2\u1688\u1689\7\u00fb\2\2\u1689\u168b\7\u0113"+
		"\2\2\u168a\u1688\3\2\2\2\u168a\u168b\3\2\2\2\u168b\u168c\3\2\2\2\u168c"+
		"\u168e\5\u0244\u0123\2\u168d\u168f\7\u041e\2\2\u168e\u168d\3\2\2\2\u168e"+
		"\u168f\3\2\2\2\u168f\u1690\3\2\2\2\u1690\u1691\7\u0275\2\2\u1691\u1696"+
		"\5\u024c\u0127\2\u1692\u1693\7\u0487\2\2\u1693\u1694\5\u01c6\u00e4\2\u1694"+
		"\u1695\7\u048e\2\2\u1695\u1697\3\2\2\2\u1696\u1692\3\2\2\2\u1696\u1697"+
		"\3\2\2\2\u1697\u169b\3\2\2\2\u1698\u1699\7\u024c\2\2\u1699\u169a\7\u0493"+
		"\2\2\u169a\u169c\7\u0179\2\2\u169b\u1698\3\2\2\2\u169b\u169c\3\2\2\2\u169c"+
		"\u169d\3\2\2\2\u169d\u169e\7^\2\2\u169e\u16a0\5\u024a\u0126\2\u169f\u16a1"+
		"\5\u0246\u0124\2\u16a0\u169f\3\2\2\2\u16a0\u16a1\3\2\2\2\u16a1\u16b7\3"+
		"\2\2\2\u16a2\u16a3\7W\2\2\u16a3\u16a4\5\u0244\u0123\2\u16a4\u16a5\7\u0275"+
		"\2\2\u16a5\u16aa\5\u024c\u0127\2\u16a6\u16a7\7\u0487\2\2\u16a7\u16a8\5"+
		"\u01c6\u00e4\2\u16a8\u16a9\7\u048e\2\2\u16a9\u16ab\3\2\2\2\u16aa\u16a6"+
		"\3\2\2\2\u16aa\u16ab\3\2\2\2\u16ab\u16af\3\2\2\2\u16ac\u16ad\7\u024c\2"+
		"\2\u16ad\u16ae\7\u0493\2\2\u16ae\u16b0\7\u0179\2\2\u16af\u16ac\3\2\2\2"+
		"\u16af\u16b0\3\2\2\2\u16b0\u16b1\3\2\2\2\u16b1\u16b2\7^\2\2\u16b2\u16b4"+
		"\5\u024a\u0126\2\u16b3\u16b5\5\u0246\u0124\2\u16b4\u16b3\3\2\2\2\u16b4"+
		"\u16b5\3\2\2\2\u16b5\u16b7\3\2\2\2\u16b6\u1687\3\2\2\2\u16b6\u16a2\3\2"+
		"\2\2\u16b7\u022f\3\2\2\2\u16b8\u16b9\7x\2\2\u16b9\u16ba\7\u041e\2\2\u16ba"+
		"\u16bb\7\u0275\2\2\u16bb\u16c0\5\u024c\u0127\2\u16bc\u16bd\7\u0487\2\2"+
		"\u16bd\u16be\5\u024e\u0128\2\u16be\u16bf\7\u048e\2\2\u16bf\u16c1\3\2\2"+
		"\2\u16c0\u16bc\3\2\2\2\u16c0\u16c1\3\2\2\2\u16c1\u16c3\3\2\2\2\u16c2\u16c4"+
		"\5\u018e\u00c8\2\u16c3\u16c2\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16c7\3"+
		"\2\2\2\u16c5\u16c8\5\u01a6\u00d4\2\u16c6\u16c8\5\u01a8\u00d5\2\u16c7\u16c5"+
		"\3\2\2\2\u16c7\u16c6\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u16ca\3\2\2\2\u16c9"+
		"\u16cb\5\u01ae\u00d8\2\u16ca\u16c9\3\2\2\2\u16ca\u16cb\3\2\2\2\u16cb\u16cc"+
		"\3\2\2\2\u16cc\u16cd\5\u0232\u011a\2\u16cd\u16ce\7^\2\2\u16ce\u16da\5"+
		"\u024a\u0126\2\u16cf\u16d0\7\u015f\2\2\u16d0\u16d1\7m\2\2\u16d1\u16db"+
		"\7\u00f8\2\2\u16d2\u16d3\7\u015f\2\2\u16d3\u16d4\7\u046f\2\2\u16d4\u16d5"+
		"\7m\2\2\u16d5\u16db\7\u00f8\2\2\u16d6\u16d7\7\u015f\2\2\u16d7\u16d8\7"+
		"\u00dc\2\2\u16d8\u16d9\7m\2\2\u16d9\u16db\7\u00f8\2\2\u16da\u16cf\3\2"+
		"\2\2\u16da\u16d2\3\2\2\2\u16da\u16d6\3\2\2\2\u16da\u16db\3\2\2\2\u16db"+
		"\u0231\3\2\2\2\u16dc\u16fb\5\u0236\u011c\2\u16dd\u16de\5\u0236\u011c\2"+
		"\u16de\u16df\5\u0234\u011b\2\u16df\u16e0\7\u00f7\2\2\u16e0\u16e1\7\u030f"+
		"\2\2\u16e1\u16e2\7\25\2\2\u16e2\u16fb\3\2\2\2\u16e3\u16e4\5\u0236\u011c"+
		"\2\u16e4\u16e5\5\u0234\u011b\2\u16e5\u16e6\7\u030f\2\2\u16e6\u16e7\7\17"+
		"\2\2\u16e7\u16fb\3\2\2\2\u16e8\u16e9\5\u0236\u011c\2\u16e9\u16ea\5\u0234"+
		"\u011b\2\u16ea\u16eb\7\u00f7\2\2\u16eb\u16ec\7\u030f\2\2\u16ec\u16ed\7"+
		"\25\2\2\u16ed\u16ee\5\u0234\u011b\2\u16ee\u16ef\7\u030f\2\2\u16ef\u16f0"+
		"\7\17\2\2\u16f0\u16fb\3\2\2\2\u16f1\u16f2\5\u0236\u011c\2\u16f2\u16f3"+
		"\5\u0234\u011b\2\u16f3\u16f4\7\u030f\2\2\u16f4\u16f5\7\17\2\2\u16f5\u16f6"+
		"\5\u0234\u011b\2\u16f6\u16f7\7\u00f7\2\2\u16f7\u16f8\7\u030f\2\2\u16f8"+
		"\u16f9\7\25\2\2\u16f9\u16fb\3\2\2\2\u16fa\u16dc\3\2\2\2\u16fa\u16dd\3"+
		"\2\2\2\u16fa\u16e3\3\2\2\2\u16fa\u16e8\3\2\2\2\u16fa\u16f1\3\2\2\2\u16fb"+
		"\u0233\3\2\2\2\u16fc\u16fd\tY\2\2\u16fd\u0235\3\2\2\2\u16fe\u16ff\7\u039b"+
		"\2\2\u16ff\u1700\5\u023a\u011e\2\u1700\u1701\5\u0238\u011d\2\u1701\u1702"+
		"\5\u023e\u0120\2\u1702\u1707\3\2\2\2\u1703\u1704\7\u03bb\2\2\u1704\u1707"+
		"\7\u039b\2\2\u1705\u1707\5\u0642\u0322\2\u1706\u16fe\3\2\2\2\u1706\u1703"+
		"\3\2\2\2\u1706\u1705\3\2\2\2\u1707\u0237\3\2\2\2\u1708\u1709\7\u00f7\2"+
		"\2\u1709\u170c\5\u023c\u011f\2\u170a\u170c\5\u0642\u0322\2\u170b\u1708"+
		"\3\2\2\2\u170b\u170a\3\2\2\2\u170c\u0239\3\2\2\2\u170d\u170e\tZ\2\2\u170e"+
		"\u023b\3\2\2\2\u170f\u1710\t[\2\2\u1710\u023d\3\2\2\2\u1711\u1712\5\u0240"+
		"\u0121\2\u1712\u1713\5\u0242\u0122\2\u1713\u023f\3\2\2\2\u1714\u1715\7"+
		"\u01cb\2\2\u1715\u1716\7\u015f\2\2\u1716\u1719\5\66\34\2\u1717\u1719\5"+
		"\u0642\u0322\2\u1718\u1714\3\2\2\2\u1718\u1717\3\2\2\2\u1719\u0241\3\2"+
		"\2\2\u171a\u171b\7\u028f\2\2\u171b\u171e\5\66\34\2\u171c\u171e\5\u0642"+
		"\u0322\2\u171d\u171a\3\2\2\2\u171d\u171c\3\2\2\2\u171e\u0243\3\2\2\2\u171f"+
		"\u1720\7\u0462\2\2\u1720\u1721\7\u0493\2\2\u1721\u1723\5\u0248\u0125\2"+
		"\u1722\u171f\3\2\2\2\u1722\u1723\3\2\2\2\u1723\u1727\3\2\2\2\u1724\u1725"+
		"\7\u0410\2\2\u1725\u1726\7\u0493\2\2\u1726\u1728\5\u0414\u020b\2\u1727"+
		"\u1724\3\2\2\2\u1727\u1728\3\2\2\2\u1728\u172c\3\2\2\2\u1729\u172a\7\u0129"+
		"\2\2\u172a\u172b\7\u019e\2\2\u172b\u172d\t\\\2\2\u172c\u1729\3\2\2\2\u172c"+
		"\u172d\3\2\2\2\u172d\u1730\3\2\2\2\u172e\u1730\5\u0642\u0322\2\u172f\u1722"+
		"\3\2\2\2\u172f\u172e\3\2\2\2\u1730\u0245\3\2\2\2\u1731\u1732\7\u015f\2"+
		"\2\u1732\u1733\7m\2\2\u1733\u173d\7\u00f8\2\2\u1734\u1735\7\u015f\2\2"+
		"\u1735\u1736\7\u046f\2\2\u1736\u1737\7m\2\2\u1737\u173d\7\u00f8\2\2\u1738"+
		"\u1739\7\u015f\2\2\u1739\u173a\7\u00dc\2\2\u173a\u173b\7m\2\2\u173b\u173d"+
		"\7\u00f8\2\2\u173c\u1731\3\2\2\2\u173c\u1734\3\2\2\2\u173c\u1738\3\2\2"+
		"\2\u173d\u0247\3\2\2\2\u173e\u173f\t]\2\2\u173f\u0249\3\2\2\2\u1740\u1741"+
		"\5\u02a6\u0154\2\u1741\u024b\3\2\2\2\u1742\u1743\5\u0350\u01a9\2\u1743"+
		"\u024d\3\2\2\2\u1744\u175a\5\u01c6\u00e4\2\u1745\u1746\5\u01c6\u00e4\2"+
		"\u1746\u1747\7\u0481\2\2\u1747\u1749\3\2\2\2\u1748\u1745\3\2\2\2\u1748"+
		"\u1749\3\2\2\2\u1749\u174a\3\2\2\2\u174a\u174b\7\u0108\2\2\u174b\u174d"+
		"\7\u00cf\2\2\u174c\u174e\5\u0266\u0134\2\u174d\u174c\3\2\2\2\u174d\u174e"+
		"\3\2\2\2\u174e\u174f\3\2\2\2\u174f\u1750\7\u0487\2\2\u1750\u1751\5\u01c6"+
		"\u00e4\2\u1751\u1753\7\u048e\2\2\u1752\u1754\5\u0266\u0134\2\u1753\u1752"+
		"\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u1757\3\2\2\2\u1755\u1756\7\u01ed\2"+
		"\2\u1756\u1758\7\u04a3\2\2\u1757\u1755\3\2\2\2\u1757\u1758\3\2\2\2\u1758"+
		"\u175a\3\2\2\2\u1759\u1744\3\2\2\2\u1759\u1748\3\2\2\2\u175a\u024f\3\2"+
		"\2\2\u175b\u175c\7\u03c7\2\2\u175c\u175d\7\u0493\2\2\u175d\u175e\7\u0179"+
		"\2\2\u175e\u0251\3\2\2\2\u175f\u1760\7\u03c7\2\2\u1760\u1761\5\u01a4\u00d3"+
		"\2\u1761\u1762\7\u0179\2\2\u1762\u0253\3\2\2\2\u1763\u1765\7x\2\2\u1764"+
		"\u1766\t^\2\2\u1765\u1764\3\2\2\2\u1765\u1766\3\2\2\2\u1766\u1767\3\2"+
		"\2\2\u1767\u176c\7\u00b8\2\2\u1768\u1769\7\u00b6\2\2\u1769\u176a\5<\37"+
		"\2\u176a\u176b\7\u009e\2\2\u176b\u176d\3\2\2\2\u176c\u1768\3\2\2\2\u176c"+
		"\u176d\3\2\2\2\u176d\u176e\3\2\2\2\u176e\u1770\5\u0356\u01ac\2\u176f\u1771"+
		"\5\u0266\u0134\2\u1770\u176f\3\2\2\2\u1770\u1771\3\2\2\2\u1771\u1772\3"+
		"\2\2\2\u1772\u1773\7\u00f7\2\2\u1773\u1774\5\u0350\u01a9\2\u1774\u1775"+
		"\7\u0487\2\2\u1775\u1776\5\u025e\u0130\2\u1776\u1778\7\u048e\2\2\u1777"+
		"\u1779\5\u0262\u0132\2\u1778\u1777\3\2\2\2\u1778\u1779\3\2\2\2\u1779\u177c"+
		"\3\2\2\2\u177a\u177d\5\u01a6\u00d4\2\u177b\u177d\5\u01a8\u00d5\2\u177c"+
		"\u177a\3\2\2\2\u177c\u177b\3\2\2\2\u177c\u177d\3\2\2\2\u177d\u177f\3\2"+
		"\2\2\u177e\u1780\5\u01ae\u00d8\2\u177f\u177e\3\2\2\2\u177f\u1780\3\2\2"+
		"\2\u1780\u0255\3\2\2\2\u1781\u1782\5\u05e2\u02f2\2\u1782\u0257\3\2\2\2"+
		"\u1783\u1785\7\u0177\2\2\u1784\u1783\3\2\2\2\u1784\u1785\3\2\2\2\u1785"+
		"\u1786\3\2\2\2\u1786\u1787\7\u0357\2\2\u1787\u0259\3\2\2\2\u1788\u178a"+
		"\5\u025c\u012f\2\u1789\u1788\3\2\2\2\u1789\u178a\3\2\2\2\u178a\u025b\3"+
		"\2\2\2";
	private static final String _serializedATNSegment3 =
		"\u178b\u178c\5\u05e2\u02f2\2\u178c\u025d\3\2\2\2\u178d\u1792\5\u0260\u0131"+
		"\2\u178e\u178f\7\u0481\2\2\u178f\u1791\5\u0260\u0131\2\u1790\u178e\3\2"+
		"\2\2\u1791\u1794\3\2\2\2\u1792\u1790\3\2\2\2\u1792\u1793\3\2\2\2\u1793"+
		"\u025f\3\2\2\2\u1794\u1792\3\2\2\2\u1795\u1799\5\u05e0\u02f1\2\u1796\u1797"+
		"\7\u0487\2\2\u1797\u1798\7\u0179\2\2\u1798\u179a\7\u048e\2\2\u1799\u1796"+
		"\3\2\2\2\u1799\u179a\3\2\2\2\u179a\u179c\3\2\2\2\u179b\u179d\t)\2\2\u179c"+
		"\u179b\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u17a0\3\2\2\2\u179e\u179f\7\u00b5"+
		"\2\2\u179f\u17a1\7\u0179\2\2\u17a0\u179e\3\2\2\2\u17a0\u17a1\3\2\2\2\u17a1"+
		"\u17ad\3\2\2\2\u17a2\u17a3\7\u0487\2\2\u17a3\u17a4\5:\36\2\u17a4\u17a6"+
		"\7\u048e\2\2\u17a5\u17a7\t)\2\2\u17a6\u17a5\3\2\2\2\u17a6\u17a7\3\2\2"+
		"\2\u17a7\u17aa\3\2\2\2\u17a8\u17a9\7\u00b5\2\2\u17a9\u17ab\7\u0179\2\2"+
		"\u17aa\u17a8\3\2\2\2\u17aa\u17ab\3\2\2\2\u17ab\u17ad\3\2\2\2\u17ac\u1795"+
		"\3\2\2\2\u17ac\u17a2\3\2\2\2\u17ad\u0261\3\2\2\2\u17ae\u17b0\5\u0264\u0133"+
		"\2\u17af\u17ae\3\2\2\2\u17b0\u17b1\3\2\2\2\u17b1\u17af\3\2\2\2\u17b1\u17b2"+
		"\3\2\2\2\u17b2\u0263\3\2\2\2\u17b3\u17cf\7\u0291\2\2\u17b4\u17cf\7\u00dc"+
		"\2\2\u17b5\u17b7\t_\2\2\u17b6\u17b8\7\u0493\2\2\u17b7\u17b6\3\2\2\2\u17b7"+
		"\u17b8\3\2\2\2\u17b8\u17b9\3\2\2\2\u17b9\u17cf\7\u0179\2\2\u17ba\u17bb"+
		"\7\u01ed\2\2\u17bb\u17cf\7\u04a3\2\2\u17bc\u17bd\t`\2\2\u17bd\u17be\7"+
		"\u0487\2\2\u17be\u17bf\5\u01c6\u00e4\2\u17bf\u17c0\7\u048e\2\2\u17c0\u17cf"+
		"\3\2\2\2\u17c1\u17c2\7\u015f\2\2\u17c2\u17cf\7\u008a\2\2\u17c3\u17c4\7"+
		"\u015f\2\2\u17c4\u17c5\7\u0101\2\2\u17c5\u17cf\7\u04a3\2\2\u17c6\u17c7"+
		"\7\u015f\2\2\u17c7\u17c8\7\u0487\2\2\u17c8\u17c9\5\u0602\u0302\2\u17c9"+
		"\u17ca\7\u048e\2\2\u17ca\u17cf\3\2\2\2\u17cb\u17cf\5\u0266\u0134\2\u17cc"+
		"\u17cf\5\u04d8\u026d\2\u17cd\u17cf\5\u019a\u00ce\2\u17ce\u17b3\3\2\2\2"+
		"\u17ce\u17b4\3\2\2\2\u17ce\u17b5\3\2\2\2\u17ce\u17ba\3\2\2\2\u17ce\u17bc"+
		"\3\2\2\2\u17ce\u17c1\3\2\2\2\u17ce\u17c3\3\2\2\2\u17ce\u17c6\3\2\2\2\u17ce"+
		"\u17cb\3\2\2\2\u17ce\u17cc\3\2\2\2\u17ce\u17cd\3\2\2\2\u17cf\u0265\3\2"+
		"\2\2\u17d0\u17d1\7\u014e\2\2\u17d1\u17d2\ta\2\2\u17d2\u0267\3\2\2\2\u17d3"+
		"\u17d4\7x\2\2\u17d4\u17d5\7\u041e\2\2\u17d5\u17d6\7\u0275\2\2\u17d6\u17d7"+
		"\7\u0416\2\2\u17d7\u17d8\7\u00f7\2\2\u17d8\u17da\5\u0350\u01a9\2\u17d9"+
		"\u17db\5\u026a\u0136\2\u17da\u17d9\3\2\2\2\u17da\u17db\3\2\2\2\u17db\u17de"+
		"\3\2\2\2\u17dc\u17dd\7\u015f\2\2\u17dd\u17df\5\u026e\u0138\2\u17de\u17dc"+
		"\3\2\2\2\u17de\u17df\3\2\2\2\u17df\u17e4\3\2\2\2\u17e0\u17e1\5\u027c\u013f"+
		"\2\u17e1\u17e2\7\u037a\2\2\u17e2\u17e3\7\u0152\2\2\u17e3\u17e5\3\2\2\2"+
		"\u17e4\u17e0\3\2\2\2\u17e4\u17e5\3\2\2\2\u17e5\u17e8\3\2\2\2\u17e6\u17e7"+
		"\7\u0105\2\2\u17e7\u17e9\5\u027e\u0140\2\u17e8\u17e6\3\2\2\2\u17e8\u17e9"+
		"\3\2\2\2\u17e9\u0269\3\2\2\2\u17ea\u17ec\5\u026c\u0137\2\u17eb\u17ea\3"+
		"\2\2\2\u17ec\u17ed\3\2\2\2\u17ed\u17eb\3\2\2\2\u17ed\u17ee\3\2\2\2\u17ee"+
		"\u026b\3\2\2\2\u17ef\u17f0\5\u019a\u00ce\2\u17f0\u026d\3\2\2\2\u17f1\u17f2"+
		"\5\u0270\u0139\2\u17f2\u17f3\5\u0276\u013c\2\u17f3\u026f\3\2\2\2\u17f4"+
		"\u17f6\5\u0272\u013a\2\u17f5\u17f4\3\2\2\2\u17f5\u17f6\3\2\2\2\u17f6\u0271"+
		"\3\2\2\2\u17f7\u17fa\5\u0274\u013b\2\u17f8\u17f9\7\u0481\2\2\u17f9\u17fb"+
		"\5\u0272\u013a\2\u17fa\u17f8\3\2\2\2\u17fa\u17fb\3\2\2\2\u17fb\u0273\3"+
		"\2\2\2\u17fc\u17fd\7\u0108\2\2\u17fd\u1801\7\u00cf\2\2\u17fe\u1801\7\u008a"+
		"\2\2\u17ff\u1801\7\u01ba\2\2\u1800\u17fc\3\2\2\2\u1800\u17fe\3\2\2\2\u1800"+
		"\u17ff\3\2\2\2\u1801\u0275\3\2\2\2\u1802\u1809\5\u0642\u0322\2\u1803\u1805"+
		"\7\u0487\2\2\u1804\u1806\5\u0278\u013d\2\u1805\u1804\3\2\2\2\u1805\u1806"+
		"\3\2\2\2\u1806\u1807\3\2\2\2\u1807\u1809\7\u048e\2\2\u1808\u1802\3\2\2"+
		"\2\u1808\u1803\3\2\2\2\u1809\u0277\3\2\2\2\u180a\u180d\5\u027a\u013e\2"+
		"\u180b\u180c\7\u0481\2\2\u180c\u180e\5\u0278\u013d\2\u180d\u180b\3\2\2"+
		"\2\u180d\u180e\3\2\2\2\u180e\u0279\3\2\2\2\u180f\u1810\5\u05e0\u02f1\2"+
		"\u1810\u027b\3\2\2\2\u1811\u1812\tb\2\2\u1812\u027d\3\2\2\2\u1813\u1814"+
		"\7\u008f\2\2\u1814\u1819\5\u0280\u0141\2\u1815\u1816\5\u0282\u0142\2\u1816"+
		"\u1817\5\u0284\u0143\2\u1817\u1819\3\2\2\2\u1818\u1813\3\2\2\2\u1818\u1815"+
		"\3\2\2\2\u1819\u027f\3\2\2\2\u181a\u181c\tc\2\2\u181b\u181a\3\2\2\2\u181b"+
		"\u181c\3\2\2\2\u181c\u0281\3\2\2\2\u181d\u1822\5\u0642\u0322\2\u181e\u181f"+
		"\7\u01cb\2\2\u181f\u1820\7\u015f\2\2\u1820\u1822\5\66\34\2\u1821\u181d"+
		"\3\2\2\2\u1821\u181e\3\2\2\2\u1822\u0283\3\2\2\2\u1823\u1827\5\u0642\u0322"+
		"\2\u1824\u1825\7\u028f\2\2\u1825\u1827\5\66\34\2\u1826\u1823\3\2\2\2\u1826"+
		"\u1824\3\2\2\2\u1827\u0285\3\2\2\2\u1828\u1829\7\u0097\2\2\u1829\u182a"+
		"\7\u041e\2\2\u182a\u182b\7\u0275\2\2\u182b\u182c\7\u0416\2\2\u182c\u182d"+
		"\7\u00f7\2\2\u182d\u182e\5\u0350\u01a9\2\u182e\u0287\3\2\2\2\u182f\u1831"+
		"\7\u0097\2\2\u1830\u1832\td\2\2\u1831\u1830\3\2\2\2\u1831\u1832\3\2\2"+
		"\2\u1832\u1833\3\2\2\2\u1833\u1836\5\u028a\u0146\2\u1834\u1835\7\u00b6"+
		"\2\2\u1835\u1837\7\u009e\2\2\u1836\u1834\3\2\2\2\u1836\u1837\3\2\2\2\u1837"+
		"\u1838\3\2\2\2\u1838\u183a\5\u028e\u0148\2\u1839\u183b\te\2\2\u183a\u1839"+
		"\3\2\2\2\u183a\u183b\3\2\2\2\u183b\u0289\3\2\2\2\u183c\u183d\tf\2\2\u183d"+
		"\u028b\3\2\2\2\u183e\u183f\7\u0097\2\2\u183f\u1842\7\u0275\2\2\u1840\u1841"+
		"\7\u00b6\2\2\u1841\u1843\7\u009e\2\2\u1842\u1840\3\2\2\2\u1842\u1843\3"+
		"\2\2\2\u1843\u1844\3\2\2\2\u1844\u1846\5\u028e\u0148\2\u1845\u1847\te"+
		"\2\2\u1846\u1845\3\2\2\2\u1846\u1847\3\2\2\2\u1847\u1854\3\2\2\2\u1848"+
		"\u1849\7\u0097\2\2\u1849\u184a\7\u041e\2\2\u184a\u184d\7\u0275\2\2\u184b"+
		"\u184c\7\u00b6\2\2\u184c\u184e\7\u009e\2\2\u184d\u184b\3\2\2\2\u184d\u184e"+
		"\3\2\2\2\u184e\u184f\3\2\2\2\u184f\u1851\5\u028e\u0148\2\u1850\u1852\t"+
		"e\2\2\u1851\u1850\3\2\2\2\u1851\u1852\3\2\2\2\u1852\u1854\3\2\2\2\u1853"+
		"\u183e\3\2\2\2\u1853\u1848\3\2\2\2\u1854\u028d\3\2\2\2\u1855\u185a\5\u0350"+
		"\u01a9\2\u1856\u1857\7\u0481\2\2\u1857\u1859\5\u0350\u01a9\2\u1858\u1856"+
		"\3\2\2\2\u1859\u185c\3\2\2\2\u185a\u1858\3\2\2\2\u185a\u185b\3\2\2\2\u185b"+
		"\u028f\3\2\2\2\u185c\u185a\3\2\2\2\u185d\u185e\7\u0097\2\2\u185e\u185f"+
		"\7\u00b8\2\2\u185f\u1860\5\u05e2\u02f2\2\u1860\u1861\7\u00f7\2\2\u1861"+
		"\u1862\5\u0350\u01a9\2\u1862\u0291\3\2\2\2\u1863\u1865\5\u029c\u014f\2"+
		"\u1864\u1866\tg\2\2\u1865\u1864\3\2\2\2\u1865\u1866\3\2\2\2\u1866\u1868"+
		"\3\2\2\2\u1867\u1869\7\u01eb\2\2\u1868\u1867\3\2\2\2\u1868\u1869\3\2\2"+
		"\2\u1869\u186b\3\2\2\2\u186a\u186c\7\u00c8\2\2\u186b\u186a\3\2\2\2\u186b"+
		"\u186c\3\2\2\2\u186c\u186d\3\2\2\2\u186d\u1873\5\u0294\u014b\2\u186e\u186f"+
		"\7\u00f7\2\2\u186f\u1870\7\u01f6\2\2\u1870\u1871\7\u00cf\2\2\u1871\u1872"+
		"\7\u014a\2\2\u1872\u1874\5\u00a8U\2\u1873\u186e\3\2\2\2\u1873\u1874\3"+
		"\2\2\2\u1874\u188c\3\2\2\2\u1875\u1877\5\u029c\u014f\2\u1876\u1878\tg"+
		"\2\2\u1877\u1876\3\2\2\2\u1877\u1878\3\2\2\2\u1878\u187a\3\2\2\2\u1879"+
		"\u187b\7\u01eb\2\2\u187a\u1879\3\2\2\2\u187a\u187b\3\2\2\2\u187b\u187c"+
		"\3\2\2\2\u187c\u187d\7@\2\2\u187d\u187e\5\u0294\u014b\2\u187e\u188c\3"+
		"\2\2\2\u187f\u1881\5\u029a\u014e\2\u1880\u1882\7\u00e6\2\2\u1881\u1880"+
		"\3\2\2\2\u1881\u1882\3\2\2\2\u1882\u1884\3\2\2\2\u1883\u1885\7\u01eb\2"+
		"\2\u1884\u1883\3\2\2\2\u1884\u1885\3\2\2\2\u1885\u1887\3\2\2\2\u1886\u1888"+
		"\7\u00c8\2\2\u1887\u1886\3\2\2\2\u1887\u1888\3\2\2\2\u1888\u1889\3\2\2"+
		"\2\u1889\u188a\5\u0294\u014b\2\u188a\u188c\3\2\2\2\u188b\u1863\3\2\2\2"+
		"\u188b\u1875\3\2\2\2\u188b\u187f\3\2\2\2\u188c\u0293\3\2\2\2\u188d\u1895"+
		"\5\u032e\u0198\2\u188e\u188f\7\u0121\2\2\u188f\u1892\5\u00a8U\2\u1890"+
		"\u1891\7^\2\2\u1891\u1893\5\u0338\u019d\2\u1892\u1890\3\2\2\2\u1892\u1893"+
		"\3\2\2\2\u1893\u1896\3\2\2\2\u1894\u1896\5\u0296\u014c\2\u1895\u188e\3"+
		"\2\2\2\u1895\u1894\3\2\2\2\u1896\u18a0\3\2\2\2\u1897\u1898\5\u032e\u0198"+
		"\2\u1898\u189a\7\u0487\2\2\u1899\u189b\5\u029e\u0150\2\u189a\u1899\3\2"+
		"\2\2\u189a\u189b\3\2\2\2\u189b\u189c\3\2\2\2\u189c\u189d\7\u048e\2\2\u189d"+
		"\u189e\5\u0296\u014c\2\u189e\u18a0\3\2\2\2\u189f\u188d\3\2\2\2\u189f\u1897"+
		"\3\2\2\2\u18a0\u0295\3\2\2\2\u18a1\u18a2\5\u0298\u014d\2\u18a2\u18a5\5"+
		"\u02a0\u0151\2\u18a3\u18a4\7^\2\2\u18a4\u18a6\5\u0338\u019d\2\u18a5\u18a3"+
		"\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a9\3\2\2\2\u18a7\u18a9\5\u02a6\u0154"+
		"\2\u18a8\u18a1\3\2\2\2\u18a8\u18a7\3\2\2\2\u18a9\u0297\3\2\2\2\u18aa\u18ab"+
		"\th\2\2\u18ab\u0299\3\2\2\2\u18ac\u18b0\7\u0113\2\2\u18ad\u18ae\7\u04a8"+
		"\2\2\u18ae\u18b0\5\u02f2\u017a\2\u18af\u18ac\3\2\2\2\u18af\u18ad\3\2\2"+
		"\2\u18b0\u029b\3\2\2\2\u18b1\u18b5\7\u00c6\2\2\u18b2\u18b3\7\u04a9\2\2"+
		"\u18b3\u18b5\5\u02f2\u017a\2\u18b4\u18b1\3\2\2\2\u18b4\u18b2\3\2\2\2\u18b5"+
		"\u029d\3\2\2\2\u18b6\u18bb\5\u0140\u00a1\2\u18b7\u18b8\7\u0481\2\2\u18b8"+
		"\u18ba\5\u0140\u00a1\2\u18b9\u18b7\3\2\2\2\u18ba\u18bd\3\2\2\2\u18bb\u18b9"+
		"\3\2\2\2\u18bb\u18bc\3\2\2\2\u18bc\u029f\3\2\2\2\u18bd\u18bb\3\2\2\2\u18be"+
		"\u18bf\b\u0151\1\2\u18bf\u18c0\7\u0487\2\2\u18c0\u18c1\5\u02a2\u0152\2"+
		"\u18c1\u18c2\7\u048e\2\2\u18c2\u18cb\3\2\2\2\u18c3\u18c4\f\3\2\2\u18c4"+
		"\u18c5\7\u0481\2\2\u18c5\u18c6\7\u0487\2\2\u18c6\u18c7\5\u02a2\u0152\2"+
		"\u18c7\u18c8\7\u048e\2\2\u18c8\u18ca\3\2\2\2\u18c9\u18c3\3\2\2\2\u18ca"+
		"\u18cd\3\2\2\2\u18cb\u18c9\3\2\2\2\u18cb\u18cc\3\2\2\2\u18cc\u02a1\3\2"+
		"\2\2\u18cd\u18cb\3\2\2\2\u18ce\u18cf\b\u0152\1\2\u18cf\u18d2\5\u02a4\u0153"+
		"\2\u18d0\u18d2\5\u0642\u0322\2\u18d1\u18ce\3\2\2\2\u18d1\u18d0\3\2\2\2"+
		"\u18d2\u18d8\3\2\2\2\u18d3\u18d4\f\3\2\2\u18d4\u18d5\7\u0481\2\2\u18d5"+
		"\u18d7\5\u02a4\u0153\2\u18d6\u18d3\3\2\2\2\u18d7\u18da\3\2\2\2\u18d8\u18d6"+
		"\3\2\2\2\u18d8\u18d9\3\2\2\2\u18d9\u02a3\3\2\2\2\u18da\u18d8\3\2\2\2\u18db"+
		"\u18de\5:\36\2\u18dc\u18de\7\u008b\2\2\u18dd\u18db\3\2\2\2\u18dd\u18dc"+
		"\3\2\2\2\u18de\u02a5\3\2\2\2\u18df\u18e1\5\u0378\u01bd\2\u18e0\u18df\3"+
		"\2\2\2\u18e0\u18e1\3\2\2\2\u18e1\u18e7\3\2\2\2\u18e2\u18e4\5\u02aa\u0156"+
		"\2\u18e3\u18e5\5\u02d4\u016b\2\u18e4\u18e3\3\2\2\2\u18e4\u18e5\3\2\2\2"+
		"\u18e5\u18e8\3\2\2\2\u18e6\u18e8\5\u02a8\u0155\2\u18e7\u18e2\3\2\2\2\u18e7"+
		"\u18e6\3\2\2\2\u18e8\u02a7\3\2\2\2\u18e9\u18eb\7\u0487\2\2\u18ea\u18ec"+
		"\5\u0378\u01bd\2\u18eb\u18ea\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u18ef\3"+
		"\2\2\2\u18ed\u18f0\5\u02aa\u0156\2\u18ee\u18f0\5\u02a8\u0155\2\u18ef\u18ed"+
		"\3\2\2\2\u18ef\u18ee\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u18f2\7\u048e\2"+
		"\2\u18f2\u02a9\3\2\2\2\u18f3\u18f6\5\u02ae\u0158\2\u18f4\u18f7\5\u0306"+
		"\u0184\2\u18f5\u18f7\5\u0308\u0185\2\u18f6\u18f4\3\2\2\2\u18f6\u18f5\3"+
		"\2\2\2\u18f6\u18f7\3\2\2\2\u18f7\u1903\3\2\2\2\u18f8\u18fb\5\u02b2\u015a"+
		"\2\u18f9\u18fc\5\u0306\u0184\2\u18fa\u18fc\5\u0308\u0185\2\u18fb\u18f9"+
		"\3\2\2\2\u18fb\u18fa\3\2\2\2\u18fb\u18fc\3\2\2\2\u18fc\u1903\3\2\2\2\u18fd"+
		"\u1900\5\u02b0\u0159\2\u18fe\u1901\5\u0306\u0184\2\u18ff\u1901\5\u0308"+
		"\u0185\2\u1900\u18fe\3\2\2\2\u1900\u18ff\3\2\2\2\u1900\u1901\3\2\2\2\u1901"+
		"\u1903\3\2\2\2\u1902\u18f3\3\2\2\2\u1902\u18f8\3\2\2\2\u1902\u18fd\3\2"+
		"\2\2\u1903\u02ab\3\2\2\2\u1904\u1906\5\u02c0\u0161\2\u1905\u1907\5\u031a"+
		"\u018e\2\u1906\u1905\3\2\2\2\u1906\u1907\3\2\2\2\u1907\u1908\3\2\2\2\u1908"+
		"\u1909\5\u0320\u0191\2\u1909\u191f\5\u02d6\u016c\2\u190a\u190b\7\u00a9"+
		"\2\2\u190b\u1910\7\u0098\2\2\u190c\u190d\7\u0158\2\2\u190d\u190e\5\u02d0"+
		"\u0169\2\u190e\u190f\5:\36\2\u190f\u1911\3\2\2\2\u1910\u190c\3\2\2\2\u1910"+
		"\u1911\3\2\2\2\u1911\u1915\3\2\2\2\u1912\u1913\7\u00af\2\2\u1913\u1914"+
		"\7g\2\2\u1914\u1916\5\u030e\u0188\2\u1915\u1912\3\2\2\2\u1915\u1916\3"+
		"\2\2\2\u1916\u1919\3\2\2\2\u1917\u1918\7\u00b0\2\2\u1918\u191a\5:\36\2"+
		"\u1919\u1917\3\2\2\2\u1919\u191a\3\2\2\2\u191a\u191d\3\2\2\2\u191b\u191c"+
		"\7\u015e\2\2\u191c\u191e\5P)\2\u191d\u191b\3\2\2\2\u191d\u191e\3\2\2\2"+
		"\u191e\u1920\3\2\2\2\u191f\u190a\3\2\2\2\u191f\u1920\3\2\2\2\u1920\u02ad"+
		"\3\2\2\2\u1921\u1927\5\u02b8\u015d\2\u1922\u1927\5\u02bc\u015f\2\u1923"+
		"\u1927\5\u02be\u0160\2\u1924\u1927\5\u0382\u01c2\2\u1925\u1927\5\u0384"+
		"\u01c3\2\u1926\u1921\3\2\2\2\u1926\u1922\3\2\2\2\u1926\u1923\3\2\2\2\u1926"+
		"\u1924\3\2\2\2\u1926\u1925\3\2\2\2\u1927\u02af\3\2\2\2\u1928\u1929\5\u02b2"+
		"\u015a\2\u1929\u192a\5\u0314\u018b\2\u192a\u1932\3\2\2\2\u192b\u192d\5"+
		"\u02b2\u015a\2\u192c\u192e\5\u0314\u018b\2\u192d\u192c\3\2\2\2\u192d\u192e"+
		"\3\2\2\2\u192e\u192f\3\2\2\2\u192f\u1930\5\u02d2\u016a\2\u1930\u1932\3"+
		"\2\2\2\u1931\u1928\3\2\2\2\u1931\u192b\3\2\2\2\u1932\u02b1\3\2\2\2\u1933"+
		"\u1934\b\u015a\1\2\u1934\u1935\5\u02b6\u015c\2\u1935\u1936\5\u02cc\u0167"+
		"\2\u1936\u1937\5\u02b4\u015b\2\u1937\u1944\3\2\2\2\u1938\u193a\f\4\2\2"+
		"\u1939\u193b\5\u0314\u018b\2\u193a\u1939\3\2\2\2\u193a\u193b\3\2\2\2\u193b"+
		"\u193d\3\2\2\2\u193c\u193e\5\u02d2\u016a\2\u193d\u193c\3\2\2\2\u193d\u193e"+
		"\3\2\2\2\u193e\u193f\3\2\2\2\u193f\u1940\5\u02cc\u0167\2\u1940\u1941\5"+
		"\u02b4\u015b\2\u1941\u1943\3\2\2\2\u1942\u1938\3\2\2\2\u1943\u1946\3\2"+
		"\2\2\u1944\u1942\3\2\2\2\u1944\u1945\3\2\2\2\u1945\u02b3\3\2\2\2\u1946"+
		"\u1944\3\2\2\2\u1947\u194c\5\u02ac\u0157\2\u1948\u194c\5\u02c6\u0164\2"+
		"\u1949\u194c\5\u02a8\u0155\2\u194a\u194c\5\u0382\u01c2\2\u194b\u1947\3"+
		"\2\2\2\u194b\u1948\3\2\2\2\u194b\u1949\3\2\2\2\u194b\u194a\3\2\2\2\u194c"+
		"\u02b5\3\2\2\2\u194d\u1951\5\u02b8\u015d\2\u194e\u1951\5\u02bc\u015f\2"+
		"\u194f\u1951\5\u02b4\u015b\2\u1950\u194d\3\2\2\2\u1950\u194e\3\2\2\2\u1950"+
		"\u194f\3\2\2\2\u1951\u02b7\3\2\2\2\u1952\u1954\5\u02ac\u0157\2\u1953\u1955"+
		"\5\u0314\u018b\2\u1954\u1953\3\2\2\2\u1954\u1955\3\2\2\2\u1955\u1957\3"+
		"\2\2\2\u1956\u1958\5\u02d2\u016a\2\u1957\u1956\3\2\2\2\u1957\u1958\3\2"+
		"\2\2\u1958\u02b9\3\2\2\2\u1959\u195a\ti\2\2\u195a\u02bb\3\2\2\2\u195b"+
		"\u195d\5\u02c6\u0164\2\u195c\u195e\5\u0314\u018b\2\u195d\u195c\3\2\2\2"+
		"\u195d\u195e\3\2\2\2\u195e\u1960\3\2\2\2\u195f\u1961\5\u02d2\u016a\2\u1960"+
		"\u195f\3\2\2\2\u1960\u1961\3\2\2\2\u1961\u1968\3\2\2\2\u1962\u1963\5\u02c6"+
		"\u0164\2\u1963\u1964\5\u0314\u018b\2\u1964\u1965\5\u02ba\u015e\2\u1965"+
		"\u1966\5\u02d2\u016a\2\u1966\u1968\3\2\2\2\u1967\u195b\3\2\2\2\u1967\u1962"+
		"\3\2\2\2\u1968\u02bd\3\2\2\2\u1969\u196a\5\u02a8\u0155\2\u196a\u196b\5"+
		"\u0314\u018b\2\u196b\u1973\3\2\2\2\u196c\u196e\5\u02a8\u0155\2\u196d\u196f"+
		"\5\u0314\u018b\2\u196e\u196d\3\2\2\2\u196e\u196f\3\2\2\2\u196f\u1970\3"+
		"\2\2\2\u1970\u1971\5\u02d2\u016a\2\u1971\u1973\3\2\2\2\u1972\u1969\3\2"+
		"\2\2\u1972\u196c\3\2\2\2\u1973\u02bf\3\2\2\2\u1974\u1978\7\u011d\2\2\u1975"+
		"\u1976\7\u04aa\2\2\u1976\u1978\5\u02f2\u017a\2\u1977\u1974\3\2\2\2\u1977"+
		"\u1975\3\2\2\2\u1978\u02c1\3\2\2\2\u1979\u197d\7\u014a\2\2\u197a\u197b"+
		"\7\u04ab\2\2\u197b\u197d\5\u02f2\u017a\2\u197c\u1979\3\2\2\2\u197c\u197a"+
		"\3\2\2\2\u197d\u02c3\3\2\2\2\u197e\u1982\7\u008d\2\2\u197f\u1980\7\u04ac"+
		"\2\2\u1980\u1982\5\u02f2\u017a\2\u1981\u197e\3\2\2\2\u1981\u197f\3\2\2"+
		"\2\u1982\u02c5\3\2\2\2\u1983\u1985\5\u02c0\u0161\2\u1984\u1986\5\u031a"+
		"\u018e\2\u1985\u1984\3\2\2\2\u1985\u1986\3\2\2\2\u1986\u1987\3\2\2\2\u1987"+
		"\u1988\5\u0320\u0191\2\u1988\u1989\5\u02d6\u016c\2\u1989\u198a\7\u00a9"+
		"\2\2\u198a\u198f\5\u0322\u0192\2\u198b\u198c\7\u0158\2\2\u198c\u198d\5"+
		"\u02d0\u0169\2\u198d\u198e\5:\36\2\u198e\u1990\3\2\2\2\u198f\u198b\3\2"+
		"\2\2\u198f\u1990\3\2\2\2\u1990\u1994\3\2\2\2\u1991\u1992\7\u00af\2\2\u1992"+
		"\u1993\7g\2\2\u1993\u1995\5\u030e\u0188\2\u1994\u1991\3\2\2\2\u1994\u1995"+
		"\3\2\2\2\u1995\u1998\3\2\2\2\u1996\u1997\7\u00b0\2\2\u1997\u1999\5:\36"+
		"\2\u1998\u1996\3\2\2\2\u1998\u1999\3\2\2\2\u1999\u199c\3\2\2\2\u199a\u199b"+
		"\7\u015e\2\2\u199b\u199d\5P)\2\u199c\u199a\3\2\2\2\u199c\u199d\3\2\2\2"+
		"\u199d\u02c7\3\2\2\2\u199e\u199f\7\u0145\2\2\u199f\u02c9\3\2\2\2\u19a0"+
		"\u19a1\tj\2\2\u19a1\u02cb\3\2\2\2\u19a2\u19a3\5\u02c8\u0165\2\u19a3\u19a4"+
		"\5\u02ce\u0168\2\u19a4\u19a7\3\2\2\2\u19a5\u19a7\5\u02ca\u0166\2\u19a6"+
		"\u19a2\3\2\2\2\u19a6\u19a5\3\2\2\2\u19a7\u02cd\3\2\2\2\u19a8\u19aa\t\21"+
		"\2\2\u19a9\u19a8\3\2\2\2\u19a9\u19aa\3\2\2\2\u19aa\u02cf\3\2\2\2\u19ab"+
		"\u19ad\7\u0480\2\2\u19ac\u19ab\3\2\2\2\u19ac\u19ad\3\2\2\2\u19ad\u02d1"+
		"\3\2\2\2\u19ae\u19af\7\u00d6\2\2\u19af\u19b6\5\u0304\u0183\2\u19b0\u19b1"+
		"\7\u026a\2\2\u19b1\u19b3\5\u0304\u0183\2\u19b2\u19b0\3\2\2\2\u19b2\u19b3"+
		"\3\2\2\2\u19b3\u19b7\3\2\2\2\u19b4\u19b5\7\u0481\2\2\u19b5\u19b7\5\u0304"+
		"\u0183\2\u19b6\u19b2\3\2\2\2\u19b6\u19b4\3\2\2\2\u19b7\u02d3\3\2\2\2\u19b8"+
		"\u19b9\7\u00c8\2\2\u19b9\u19ba\7\u0100\2\2\u19ba\u19bb\7\u04a3\2\2\u19bb"+
		"\u19bf\5\u02e8\u0175\2\u19bc\u19bd\5\u00f0y\2\u19bd\u19be\5\u017c\u00bf"+
		"\2\u19be\u19c0\3\2\2\2\u19bf\u19bc\3\2\2\2\u19bf\u19c0\3\2\2\2\u19c0\u19c1"+
		"\3\2\2\2\u19c1\u19c2\5\u02dc\u016f\2\u19c2\u19c3\5\u02ec\u0177\2\u19c3"+
		"\u19c4\5\u02e2\u0172\2\u19c4\u19cb\3\2\2\2\u19c5\u19c6\7\u00c8\2\2\u19c6"+
		"\u19c7\7\u0371\2\2\u19c7\u19cb\7\u04a3\2\2\u19c8\u19c9\7\u00c8\2\2\u19c9"+
		"\u19cb\5\u02d8\u016d\2\u19ca\u19b8\3\2\2\2\u19ca\u19c5\3\2\2\2\u19ca\u19c8"+
		"\3\2\2\2\u19cb\u02d5\3\2\2\2\u19cc\u19ce\5\u02d4\u016b\2\u19cd\u19cc\3"+
		"\2\2\2\u19cd\u19ce\3\2\2\2\u19ce\u02d7\3\2\2\2\u19cf\u19d4\5\u02da\u016e"+
		"\2\u19d0\u19d1\7\u0481\2\2\u19d1\u19d3\5\u02da\u016e\2\u19d2\u19d0\3\2"+
		"\2\2\u19d3\u19d6\3\2\2\2\u19d4\u19d2\3\2\2\2\u19d4\u19d5\3\2\2\2\u19d5"+
		"\u02d9\3\2\2\2\u19d6\u19d4\3\2\2\2\u19d7\u19db\7\u04a1\2\2\u19d8\u19db"+
		"\7\u04a2\2\2\u19d9\u19db\5\u0638\u031d\2\u19da\u19d7\3\2\2\2\u19da\u19d8"+
		"\3\2\2\2\u19da\u19d9\3\2\2\2\u19db\u02db\3\2\2\2\u19dc\u19dd\5\u03ce\u01e8"+
		"\2\u19dd\u19de\5\u02de\u0170\2\u19de\u19e1\3\2\2\2\u19df\u19e1\5\u0642"+
		"\u0322\2\u19e0\u19dc\3\2\2\2\u19e0\u19df\3\2\2\2\u19e1\u02dd\3\2\2\2\u19e2"+
		"\u19e4\5\u02e0\u0171\2\u19e3\u19e2\3\2\2\2\u19e4\u19e5\3\2\2\2\u19e5\u19e3"+
		"\3\2\2\2\u19e5\u19e6\3\2\2\2\u19e6\u02df\3\2\2\2\u19e7\u19e9\7\u00fa\2"+
		"\2\u19e8\u19e7\3\2\2\2\u19e8\u19e9\3\2\2\2\u19e9\u19ea\3\2\2\2\u19ea\u19ed"+
		"\7\u009a\2\2\u19eb\u19ed\7\u0138\2\2\u19ec\u19e8\3\2\2\2\u19ec\u19eb\3"+
		"\2\2\2\u19ed\u19f0\3\2\2\2\u19ee\u19f0\7\u009d\2\2\u19ef\u19ec\3\2\2\2"+
		"\u19ef\u19ee\3\2\2\2\u19f0\u19f1\3\2\2\2\u19f1\u19f2\7g\2\2\u19f2\u19f3"+
		"\5\u0152\u00aa\2\u19f3\u02e1\3\2\2\2\u19f4\u19f6\5\u02e4\u0173\2\u19f5"+
		"\u19f4\3\2\2\2\u19f5\u19f6\3\2\2\2\u19f6\u02e3\3\2\2\2\u19f7\u19f9\5\u02e6"+
		"\u0174\2\u19f8\u19f7\3\2\2\2\u19f9\u19fa\3\2\2\2\u19fa\u19f8\3\2\2\2\u19fa"+
		"\u19fb\3\2\2\2\u19fb\u02e5\3\2\2\2\u19fc\u19fe\7\31\2\2\u19fd\u19ff\7"+
		"\u0493\2\2\u19fe\u19fd\3\2\2\2\u19fe\u19ff\3\2\2\2\u19ff\u1a00\3\2\2\2"+
		"\u1a00\u1a0c\7\u0476\2\2\u1a01\u1a03\7F\2\2\u1a02\u1a04\7\u0493\2\2\u1a03"+
		"\u1a02\3\2\2\2\u1a03\u1a04\3\2\2\2\u1a04\u1a05\3\2\2\2\u1a05\u1a0c\5\u02ea"+
		"\u0176\2\u1a06\u1a08\7.\2\2\u1a07\u1a09\7\u0493\2\2\u1a08\u1a07\3\2\2"+
		"\2\u1a08\u1a09\3\2\2\2\u1a09\u1a0a\3\2\2\2\u1a0a\u1a0c\5\u02ea\u0176\2"+
		"\u1a0b\u19fc\3\2\2\2\u1a0b\u1a01\3\2\2\2\u1a0b\u1a06\3\2\2\2\u1a0c\u02e7"+
		"\3\2\2\2\u1a0d\u1a12\5\u0642\u0322\2\u1a0e\u1a0f\7\u0106\2\2\u1a0f\u1a10"+
		"\7g\2\2\u1a10\u1a12\5\66\34\2\u1a11\u1a0d\3\2\2\2\u1a11\u1a0e\3\2\2\2"+
		"\u1a12\u02e9\3\2\2\2\u1a13\u1a14\tk\2\2\u1a14\u02eb\3\2\2\2\u1a15\u1a16"+
		"\7\u00d9\2\2\u1a16\u1a19\5\u02ee\u0178\2\u1a17\u1a19\5\u0642\u0322\2\u1a18"+
		"\u1a15\3\2\2\2\u1a18\u1a17\3\2\2\2\u1a19\u02ed\3\2\2\2\u1a1a\u1a1c\5\u02f0"+
		"\u0179\2\u1a1b\u1a1a\3\2\2\2\u1a1c\u1a1d\3\2\2\2\u1a1d\u1a1b\3\2\2\2\u1a1d"+
		"\u1a1e\3\2\2\2\u1a1e\u02ef\3\2\2\2\u1a1f\u1a20\tl\2\2\u1a20\u1a21\7g\2"+
		"\2\u1a21\u1a22\5\u0152\u00aa\2\u1a22\u02f1\3\2\2\2\u1a23\u1a29\5\u02f6"+
		"\u017c\2\u1a24\u1a25\5\u02f4\u017b\2\u1a25\u1a26\7\u0481\2\2\u1a26\u1a27"+
		"\5\u02f6\u017c\2\u1a27\u1a29\3\2\2\2\u1a28\u1a23\3\2\2\2\u1a28\u1a24\3"+
		"\2\2\2\u1a28\u1a29\3\2\2\2\u1a29\u1a2a\3\2\2\2\u1a2a\u1a2b\7\u04ad\2\2"+
		"\u1a2b\u02f3\3\2\2\2\u1a2c\u1a2d\b\u017b\1\2\u1a2d\u1a30\5\u02f6\u017c"+
		"\2\u1a2e\u1a30\5\u0642\u0322\2\u1a2f\u1a2c\3\2\2\2\u1a2f\u1a2e\3\2\2\2"+
		"\u1a30\u1a36\3\2\2\2\u1a31\u1a32\f\3\2\2\u1a32\u1a33\7\u0481\2\2\u1a33"+
		"\u1a35\5\u02f6\u017c\2\u1a34\u1a31\3\2\2\2\u1a35\u1a38\3\2\2\2\u1a36\u1a34"+
		"\3\2\2\2\u1a36\u1a37\3\2\2\2\u1a37\u02f5\3\2\2\2\u1a38\u1a36\3\2\2\2\u1a39"+
		"\u1a3b\5\u02fa\u017e\2\u1a3a\u1a39\3\2\2\2\u1a3b\u1a3c\3\2\2\2\u1a3c\u1a3a"+
		"\3\2\2\2\u1a3c\u1a3d\3\2\2\2\u1a3d\u02f7\3\2\2\2\u1a3e\u1a3f\b\u017d\1"+
		"\2\u1a3f\u1a40\7\u04a2\2\2\u1a40\u1a48\3\2\2\2\u1a41\u1a43\f\3\2\2\u1a42"+
		"\u1a44\7\u0481\2\2\u1a43\u1a42\3\2\2\2\u1a43\u1a44\3\2\2\2\u1a44\u1a45"+
		"\3\2\2\2\u1a45\u1a47\7\u04a2\2\2\u1a46\u1a41\3\2\2\2\u1a47\u1a4a\3\2\2"+
		"\2\u1a48\u1a46\3\2\2\2\u1a48\u1a49\3\2\2\2\u1a49\u02f9\3\2\2\2\u1a4a\u1a48"+
		"\3\2\2\2\u1a4b\u1ac2\tm\2\2\u1a4c\u1a4d\7\u04b9\2\2\u1a4d\u1a4e\7\u0487"+
		"\2\2\u1a4e\u1a4f\5\u02fc\u017f\2\u1a4f\u1a50\7\u048e\2\2\u1a50\u1ac2\3"+
		"\2\2\2\u1a51\u1a52\7\u04ba\2\2\u1a52\u1a53\7\u0487\2\2\u1a53\u1a54\5\u035c"+
		"\u01af\2\u1a54\u1a55\5\u035a\u01ae\2\u1a55\u1a56\7\u04a2\2\2\u1a56\u1a57"+
		"\7\u048e\2\2\u1a57\u1ac2\3\2\2\2\u1a58\u1a59\tn\2\2\u1a59\u1a5a\7\u0487"+
		"\2\2\u1a5a\u1a5b\7\u0179\2\2\u1a5b\u1ac2\7\u048e\2\2\u1a5c\u1a5d\7\u04bd"+
		"\2\2\u1a5d\u1a5e\7\u0487\2\2\u1a5e\u1a5f\7\u0179\2\2\u1a5f\u1a60\7\u0179"+
		"\2\2\u1a60\u1ac2\7\u048e\2\2\u1a61\u1a62\7\u04be\2\2\u1a62\u1a63\7\u0487"+
		"\2\2\u1a63\u1a64\7\u04a2\2\2\u1a64\u1ac2\7\u048e\2\2\u1a65\u1a66\7\u04be"+
		"\2\2\u1a66\u1a67\7\u0487\2\2\u1a67\u1a68\7\u047c\2\2\u1a68\u1a69\7\u04a3"+
		"\2\2\u1a69\u1a6a\7\u047c\2\2\u1a6a\u1ac2\7\u048e\2\2\u1a6b\u1a6c\7\u04bf"+
		"\2\2\u1a6c\u1a6d\7\u0487\2\2\u1a6d\u1a6e\5\u035c\u01af\2\u1a6e\u1a6f\5"+
		"\u0368\u01b5\2\u1a6f\u1a70\7\u048e\2\2\u1a70\u1ac2\3\2\2\2\u1a71\u1a72"+
		"\7\u04bf\2\2\u1a72\u1a73\7\u0487\2\2\u1a73\u1a74\5\u035c\u01af\2\u1a74"+
		"\u1a75\5\u035e\u01b0\2\u1a75\u1a76\7\u048e\2\2\u1a76\u1ac2\3\2\2\2\u1a77"+
		"\u1a78\to\2\2\u1a78\u1a79\7\u0487\2\2\u1a79\u1a7a\5\u035c\u01af\2\u1a7a"+
		"\u1a7b\5\u035a\u01ae\2\u1a7b\u1a7c\7\u048e\2\2\u1a7c\u1ac2\3\2\2\2\u1a7d"+
		"\u1a7e\7\u04c1\2\2\u1a7e\u1a7f\7\u0487\2\2\u1a7f\u1a80\5\u02fe\u0180\2"+
		"\u1a80\u1a81\7\u048e\2\2\u1a81\u1ac2\3\2\2\2\u1a82\u1a83\tp\2\2\u1a83"+
		"\u1a84\7\u0487\2\2\u1a84\u1a85\5\u035c\u01af\2\u1a85\u1a86\5\u036a\u01b6"+
		"\2\u1a86\u1a87\7\u048e\2\2\u1a87\u1ac2\3\2\2\2\u1a88\u1a8d\tq\2\2\u1a89"+
		"\u1a8a\7\u0487\2\2\u1a8a\u1a8b\5\u035c\u01af\2\u1a8b\u1a8c\7\u048e\2\2"+
		"\u1a8c\u1a8e\3\2\2\2\u1a8d\u1a89\3\2\2\2\u1a8d\u1a8e\3\2\2\2\u1a8e\u1ac2"+
		"\3\2\2\2\u1a8f\u1a90\7\u04d6\2\2\u1a90\u1a91\7\u0487\2\2\u1a91\u1a92\5"+
		"\u0300\u0181\2\u1a92\u1a93\7\u048e\2\2\u1a93\u1ac2\3\2\2\2\u1a94\u1a95"+
		"\tr\2\2\u1a95\u1a96\7\u0487\2\2\u1a96\u1a97\5\u036c\u01b7\2\u1a97\u1a98"+
		"\7\u048e\2\2\u1a98\u1ac2\3\2\2\2\u1a99\u1a9a\7\u01dd\2\2\u1a9a\u1a9b\7"+
		"\u0487\2\2\u1a9b\u1a9c\7\u0179\2\2\u1a9c\u1a9d\7\u0481\2\2\u1a9d\u1a9e"+
		"\7\u0179\2\2\u1a9e\u1ac2\7\u048e\2\2\u1a9f\u1aa0\7\u04d8\2\2\u1aa0\u1aa1"+
		"\7\u0487\2\2\u1aa1\u1aa3\5\u0178\u00bd\2\u1aa2\u1aa4\7\u0481\2\2\u1aa3"+
		"\u1aa2\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aa5\3\2\2\2\u1aa5\u1aa6\5\u017a"+
		"\u00be\2\u1aa6\u1aa7\7\u048e\2\2\u1aa7\u1ac2\3\2\2\2\u1aa8\u1ac2\7\u04d9"+
		"\2\2\u1aa9\u1aaa\7\u04da\2\2\u1aaa\u1aab\7\u0487\2\2\u1aab\u1aac\7\u04a2"+
		"\2\2\u1aac\u1ac2\7\u048e\2\2\u1aad\u1aae\ts\2\2\u1aae\u1aaf\7\u0487\2"+
		"\2\u1aaf\u1ab0\7\u0179\2\2\u1ab0\u1ac2\7\u048e\2\2\u1ab1\u1ab2\7\u04dd"+
		"\2\2\u1ab2\u1ab3\7\u0487\2\2\u1ab3\u1ab4\5\u035c\u01af\2\u1ab4\u1ab6\5"+
		"\u0362\u01b2\2\u1ab5\u1ab7\7\u0481\2\2\u1ab6\u1ab5\3\2\2\2\u1ab6\u1ab7"+
		"\3\2\2\2\u1ab7\u1ab8\3\2\2\2\u1ab8\u1abd\5\u0302\u0182\2\u1ab9\u1abb\7"+
		"\u0481\2\2\u1aba\u1ab9\3\2\2\2\u1aba\u1abb\3\2\2\2\u1abb\u1abc\3\2\2\2"+
		"\u1abc\u1abe\5\u0302\u0182\2\u1abd\u1aba\3\2\2\2\u1abd\u1abe\3\2\2\2\u1abe"+
		"\u1abf\3\2\2\2\u1abf\u1ac0\7\u048e\2\2\u1ac0\u1ac2\3\2\2\2\u1ac1\u1a4b"+
		"\3\2\2\2\u1ac1\u1a4c\3\2\2\2\u1ac1\u1a51\3\2\2\2\u1ac1\u1a58\3\2\2\2\u1ac1"+
		"\u1a5c\3\2\2\2\u1ac1\u1a61\3\2\2\2\u1ac1\u1a65\3\2\2\2\u1ac1\u1a6b\3\2"+
		"\2\2\u1ac1\u1a71\3\2\2\2\u1ac1\u1a77\3\2\2\2\u1ac1\u1a7d\3\2\2\2\u1ac1"+
		"\u1a82\3\2\2\2\u1ac1\u1a88\3\2\2\2\u1ac1\u1a8f\3\2\2\2\u1ac1\u1a94\3\2"+
		"\2\2\u1ac1\u1a99\3\2\2\2\u1ac1\u1a9f\3\2\2\2\u1ac1\u1aa8\3\2\2\2\u1ac1"+
		"\u1aa9\3\2\2\2\u1ac1\u1aad\3\2\2\2\u1ac1\u1ab1\3\2\2\2\u1ac2\u02fb\3\2"+
		"\2\2\u1ac3\u1ac4\tt\2\2\u1ac4\u02fd\3\2\2\2\u1ac5\u1ac6\tu\2\2\u1ac6\u02ff"+
		"\3\2\2\2\u1ac7\u1ac8\tv\2\2\u1ac8\u0301\3\2\2\2\u1ac9\u1aca\tw\2\2\u1aca"+
		"\u0303\3\2\2\2\u1acb\u1acf\7\u0179\2\2\u1acc\u1acf\7\u049f\2\2\u1acd\u1acf"+
		"\5 \21\2\u1ace\u1acb\3\2\2\2\u1ace\u1acc\3\2\2\2\u1ace\u1acd\3\2\2\2\u1acf"+
		"\u0305\3\2\2\2\u1ad0\u1ad1\7\u00a7\2\2\u1ad1\u1ad2\7\u014a\2\2\u1ad2\u1ad3"+
		"\5\u030a\u0186\2\u1ad3\u0307\3\2\2\2\u1ad4\u1ad5\7\u00e0\2\2\u1ad5\u1ad6"+
		"\7\u00b7\2\2\u1ad6\u1ad7\7\u02a6\2\2\u1ad7\u1ad8\7\u00f3\2\2\u1ad8\u0309"+
		"\3\2\2\2\u1ad9\u1ae1\5\u0642\u0322\2\u1ada\u1adb\7\u01f7\2\2\u1adb\u1ae1"+
		"\7\u0473\2\2\u1adc\u1add\7\u01f7\2\2\u1add\u1ae1\7\u0179\2\2\u1ade\u1ae1"+
		"\7\u02b5\2\2\u1adf\u1ae1\7\u02cc\2\2\u1ae0\u1ad9\3\2\2\2\u1ae0\u1ada\3"+
		"\2\2\2\u1ae0\u1adc\3\2\2\2\u1ae0\u1ade\3\2\2\2\u1ae0\u1adf\3\2\2\2\u1ae1"+
		"\u030b\3\2\2\2\u1ae2\u1ae3\7f\2\2\u1ae3\u1ae5\7\u00a9\2\2\u1ae4\u1ae2"+
		"\3\2\2\2\u1ae4\u1ae5\3\2\2\2\u1ae5\u1ae6\3\2\2\2\u1ae6\u1af5\5:\36\2\u1ae7"+
		"\u1ae9\7f\2\2\u1ae8\u1ae7\3\2\2\2\u1ae8\u1ae9\3\2\2\2\u1ae9\u1aea\3\2"+
		"\2\2\u1aea\u1aeb\5:\36\2\u1aeb\u1aec\7\u00a9\2\2\u1aec\u1aed\5:\36\2\u1aed"+
		"\u1af5\3\2\2\2\u1aee\u1af0\tx\2\2\u1aef\u1af1\5:\36\2\u1af0\u1aef\3\2"+
		"\2\2\u1af0\u1af1\3\2\2\2\u1af1\u1af2\3\2\2\2\u1af2\u1af3\7\u00a9\2\2\u1af3"+
		"\u1af5\5:\36\2\u1af4\u1ae4\3\2\2\2\u1af4\u1ae8\3\2\2\2\u1af4\u1aee\3\2"+
		"\2\2\u1af5\u030d\3\2\2\2\u1af6\u1af9\5\u0310\u0189\2\u1af7\u1af8\7\u015f"+
		"\2\2\u1af8\u1afa\7\u0459\2\2\u1af9\u1af7\3\2\2\2\u1af9\u1afa\3\2\2\2\u1afa"+
		"\u030f\3\2\2\2\u1afb\u1b00\5\u0312\u018a\2\u1afc\u1afd\7\u0481\2\2\u1afd"+
		"\u1aff\5\u0312\u018a\2\u1afe\u1afc\3\2\2\2\u1aff\u1b02\3\2\2\2\u1b00\u1afe"+
		"\3\2\2\2\u1b00\u1b01\3\2\2\2\u1b01\u0311\3\2\2\2\u1b02\u1b00\3\2\2\2\u1b03"+
		"\u1b05\5:\36\2\u1b04\u1b06\t)\2\2\u1b05\u1b04\3\2\2\2\u1b05\u1b06\3\2"+
		"\2\2\u1b06\u0313\3\2\2\2\u1b07\u1b08\7\u00fc\2\2\u1b08\u1b09\7g\2\2\u1b09"+
		"\u1b0a\5\u0316\u018c\2\u1b0a\u0315\3\2\2\2\u1b0b\u1b10\5\u0318\u018d\2"+
		"\u1b0c\u1b0d\7\u0481\2\2\u1b0d\u1b0f\5\u0318\u018d\2\u1b0e\u1b0c\3\2\2"+
		"\2\u1b0f\u1b12\3\2\2\2\u1b10\u1b0e\3\2\2\2\u1b10\u1b11\3\2\2\2\u1b11\u0317"+
		"\3\2\2\2\u1b12\u1b10\3\2\2\2\u1b13\u1b15\5:\36\2\u1b14\u1b16\t)\2\2\u1b15"+
		"\u1b14\3\2\2\2\u1b15\u1b16\3\2\2\2\u1b16\u0319\3\2\2\2\u1b17\u1b19\5\u031c"+
		"\u018f\2\u1b18\u1b17\3\2\2\2\u1b19\u1b1a\3\2\2\2\u1b1a\u1b18\3\2\2\2\u1b1a"+
		"\u1b1b\3\2\2\2\u1b1b\u031b\3\2\2\2\u1b1c\u1b1d\ty\2\2\u1b1d\u031d\3\2"+
		"\2\2\u1b1e\u1b20\5:\36\2\u1b1f\u1b21\7^\2\2\u1b20\u1b1f\3\2\2\2\u1b20"+
		"\u1b21\3\2\2\2\u1b21\u1b24\3\2\2\2\u1b22\u1b25\5\u05e6\u02f4\2\u1b23\u1b25"+
		"\7\u04a3\2\2\u1b24\u1b22\3\2\2\2\u1b24\u1b23\3\2\2\2\u1b24\u1b25\3\2\2"+
		"\2\u1b25\u1b28\3\2\2\2\u1b26\u1b28\7\u0485\2\2\u1b27\u1b1e\3\2\2\2\u1b27"+
		"\u1b26\3\2\2\2\u1b28\u031f\3\2\2\2\u1b29\u1b2e\5\u031e\u0190\2\u1b2a\u1b2b"+
		"\7\u0481\2\2\u1b2b\u1b2d\5\u031e\u0190\2\u1b2c\u1b2a\3\2\2\2\u1b2d\u1b30"+
		"\3\2\2\2\u1b2e\u1b2c\3\2\2\2\u1b2e\u1b2f\3\2\2\2\u1b2f\u0321\3\2\2\2\u1b30"+
		"\u1b2e\3\2\2\2\u1b31\u1b32\5\u0324\u0193\2\u1b32\u0323\3\2\2\2\u1b33\u1b38"+
		"\5\u0328\u0195\2\u1b34\u1b35\7\u0481\2\2\u1b35\u1b37\5\u0328\u0195\2\u1b36"+
		"\u1b34\3\2\2\2\u1b37\u1b3a\3\2\2\2\u1b38\u1b36\3\2\2\2\u1b38\u1b39\3\2"+
		"\2\2\u1b39\u1b44\3\2\2\2\u1b3a\u1b38\3\2\2\2\u1b3b\u1b40\5\u0326\u0194"+
		"\2\u1b3c\u1b3d\7\u0481\2\2\u1b3d\u1b3f\5\u0326\u0194\2\u1b3e\u1b3c\3\2"+
		"\2\2\u1b3f\u1b42\3\2\2\2\u1b40\u1b3e\3\2\2\2\u1b40\u1b41\3\2\2\2\u1b41"+
		"\u1b44\3\2\2\2\u1b42\u1b40\3\2\2\2\u1b43\u1b33\3\2\2\2\u1b43\u1b3b\3\2"+
		"\2\2\u1b44\u0325\3\2\2\2\u1b45\u1b4a\5\u0328\u0195\2\u1b46\u1b47\7\u0481"+
		"\2\2\u1b47\u1b49\5\u0328\u0195\2\u1b48\u1b46\3\2\2\2\u1b49\u1b4c\3\2\2"+
		"\2\u1b4a\u1b48\3\2\2\2\u1b4a\u1b4b\3\2\2\2\u1b4b\u1b64\3\2\2\2\u1b4c\u1b4a"+
		"\3\2\2\2\u1b4d\u1b4e\7\u0487\2\2\u1b4e\u1b53\5\u0328\u0195\2\u1b4f\u1b50"+
		"\7\u0481\2\2\u1b50\u1b52\5\u0328\u0195\2\u1b51\u1b4f\3\2\2\2\u1b52\u1b55"+
		"\3\2\2\2\u1b53\u1b51\3\2\2\2\u1b53\u1b54\3\2\2\2\u1b54\u1b56\3\2\2\2\u1b55"+
		"\u1b53\3\2\2\2\u1b56\u1b57\7\u048e\2\2\u1b57\u1b64\3\2\2\2\u1b58\u1b59"+
		"\7\u0487\2\2\u1b59\u1b5e\5\u0326\u0194\2\u1b5a\u1b5b\7\u0481\2\2\u1b5b"+
		"\u1b5d\5\u0328\u0195\2\u1b5c\u1b5a\3\2\2\2\u1b5d\u1b60\3\2\2\2\u1b5e\u1b5c"+
		"\3\2\2\2\u1b5e\u1b5f\3\2\2\2\u1b5f\u1b61\3\2\2\2\u1b60\u1b5e\3\2\2\2\u1b61"+
		"\u1b62\7\u048e\2\2\u1b62\u1b64\3\2\2\2\u1b63\u1b45\3\2\2\2\u1b63\u1b4d"+
		"\3\2\2\2\u1b63\u1b58\3\2\2\2\u1b64\u0327\3\2\2\2\u1b65\u1b68\5\u032a\u0196"+
		"\2\u1b66\u1b68\5\u0370\u01b9\2\u1b67\u1b65\3\2\2\2\u1b67\u1b66\3\2\2\2"+
		"\u1b68\u0329\3\2\2\2\u1b69\u1b91\5\u032c\u0197\2\u1b6a\u1b6c\7\u0233\2"+
		"\2\u1b6b\u1b6a\3\2\2\2\u1b6b\u1b6c\3\2\2\2\u1b6c\u1b6d\3\2\2\2\u1b6d\u1b91"+
		"\5\u0336\u019c\2\u1b6e\u1b70\7\u0233\2\2\u1b6f\u1b6e\3\2\2\2\u1b6f\u1b70"+
		"\3\2\2\2\u1b70\u1b71\3\2\2\2\u1b71\u1b73\5\u02a8\u0155\2\u1b72\u1b74\5"+
		"\u0340\u01a1\2\u1b73\u1b72\3\2\2\2\u1b73\u1b74\3\2\2\2\u1b74\u1b91\3\2"+
		"\2\2\u1b75\u1b76\7\u013d\2\2\u1b76\u1b77\7\u0487\2\2\u1b77\u1b78\58\35"+
		"\2\u1b78\u1b7e\7\u048e\2\2\u1b79\u1b7a\7^\2\2\u1b7a\u1b7f\5\u05e2\u02f2"+
		"\2\u1b7b\u1b7d\5\u05e2\u02f2\2\u1b7c\u1b7b\3\2\2\2\u1b7c\u1b7d\3\2\2\2"+
		"\u1b7d\u1b7f\3\2\2\2\u1b7e\u1b79\3\2\2\2\u1b7e\u1b7c\3\2\2\2\u1b7f\u1b91"+
		"\3\2\2\2\u1b80\u1b81\7\u0487\2\2\u1b81\u1b82\5\u0328\u0195\2\u1b82\u1b83"+
		"\7\u048e\2\2\u1b83\u1b91\3\2\2\2\u1b84\u1b85\7\u047a\2\2\u1b85\u1b86\7"+
		"\u023e\2\2\u1b86\u1b87\5\u0328\u0195\2\u1b87\u1b88\7\u047b\2\2\u1b88\u1b91"+
		"\3\2\2\2\u1b89\u1b8e\5\u05ee\u02f8\2\u1b8a\u1b8c\7^\2\2\u1b8b\u1b8a\3"+
		"\2\2\2\u1b8b\u1b8c\3\2\2\2\u1b8c\u1b8d\3\2\2\2\u1b8d\u1b8f\5\u05e2\u02f2"+
		"\2\u1b8e\u1b8b\3\2\2\2\u1b8e\u1b8f\3\2\2\2\u1b8f\u1b91\3\2\2\2\u1b90\u1b69"+
		"\3\2\2\2\u1b90\u1b6b\3\2\2\2\u1b90\u1b6f\3\2\2\2\u1b90\u1b75\3\2\2\2\u1b90"+
		"\u1b80\3\2\2\2\u1b90\u1b84\3\2\2\2\u1b90\u1b89\3\2\2\2\u1b91\u032b\3\2"+
		"\2\2\u1b92\u1b94\5\u0350\u01a9\2\u1b93\u1b95\5\u033a\u019e\2\u1b94\u1b93"+
		"\3\2\2\2\u1b94\u1b95\3\2\2\2\u1b95\u1b9d\3\2\2\2\u1b96\u1b98\5\u0334\u019b"+
		"\2\u1b97\u1b99\5\u0330\u0199\2\u1b98\u1b97\3\2\2\2\u1b98\u1b99\3\2\2\2"+
		"\u1b99\u1b9e\3\2\2\2\u1b9a\u1b9c\5\u0340\u01a1\2\u1b9b\u1b9a\3\2\2\2\u1b9b"+
		"\u1b9c\3\2\2\2\u1b9c\u1b9e\3\2\2\2\u1b9d\u1b96\3\2\2\2\u1b9d\u1b9b\3\2"+
		"\2\2\u1b9e\u1ba0\3\2\2\2\u1b9f\u1ba1\5\u05e2\u02f2\2\u1ba0\u1b9f\3\2\2"+
		"\2\u1ba0\u1ba1\3\2\2\2\u1ba1\u1bd3\3\2\2\2\u1ba2\u1ba4\5\u0350\u01a9\2"+
		"\u1ba3\u1ba5\5\u033a\u019e\2\u1ba4\u1ba3\3\2\2\2\u1ba4\u1ba5\3\2\2\2\u1ba5"+
		"\u1bb7\3\2\2\2\u1ba6\u1ba8\7^\2\2\u1ba7\u1ba6\3\2\2\2\u1ba7\u1ba8\3\2"+
		"\2\2\u1ba8\u1ba9\3\2\2\2\u1ba9\u1bae\5\u05e2\u02f2\2\u1baa\u1bac\5\u0334"+
		"\u019b\2\u1bab\u1baa\3\2\2\2\u1bab\u1bac\3\2\2\2\u1bac\u1bae\3\2\2\2\u1bad"+
		"\u1ba7\3\2\2\2\u1bad\u1bab\3\2\2\2\u1bae\u1bb8\3\2\2\2\u1baf\u1bb5\5\u0334"+
		"\u019b\2\u1bb0\u1bb6\5\u05e2\u02f2\2\u1bb1\u1bb3\5\u0330\u0199\2\u1bb2"+
		"\u1bb4\5\u05e2\u02f2\2\u1bb3\u1bb2\3\2\2\2\u1bb3\u1bb4\3\2\2\2\u1bb4\u1bb6"+
		"\3\2\2\2\u1bb5\u1bb0\3\2\2\2\u1bb5\u1bb1\3\2\2\2\u1bb6\u1bb8\3\2\2\2\u1bb7"+
		"\u1bad\3\2\2\2\u1bb7\u1baf\3\2\2\2\u1bb8\u1bb9\3\2\2\2\u1bb9\u1bba\5\u034e"+
		"\u01a8\2\u1bba\u1bd3\3\2\2\2\u1bbb\u1bbd\5\u0350\u01a9\2\u1bbc\u1bbe\5"+
		"\u033a\u019e\2\u1bbd\u1bbc\3\2\2\2\u1bbd\u1bbe\3\2\2\2\u1bbe\u1bc0\3\2"+
		"\2\2\u1bbf\u1bc1\5\u0340\u01a1\2\u1bc0\u1bbf\3\2\2\2\u1bc0\u1bc1\3\2\2"+
		"\2\u1bc1\u1bc2\3\2\2\2\u1bc2\u1bc3\7^\2\2\u1bc3\u1bc4\5\u05e2\u02f2\2"+
		"\u1bc4\u1bd3\3\2\2\2\u1bc5\u1bc7\5\u0350\u01a9\2\u1bc6\u1bc8\5\u033a\u019e"+
		"\2\u1bc7\u1bc6\3\2\2\2\u1bc7\u1bc8\3\2\2\2\u1bc8\u1bc9\3\2\2\2\u1bc9\u1bcb"+
		"\5\u0334\u019b\2\u1bca\u1bcc\5\u0330\u0199\2\u1bcb\u1bca\3\2\2\2\u1bcb"+
		"\u1bcc\3\2\2\2\u1bcc\u1bcd\3\2\2\2\u1bcd\u1bce\7^\2\2\u1bce\u1bd0\5\u05e2"+
		"\u02f2\2\u1bcf\u1bd1\5\u034e\u01a8\2\u1bd0\u1bcf\3\2\2\2\u1bd0\u1bd1\3"+
		"\2\2\2\u1bd1\u1bd3\3\2\2\2\u1bd2\u1b92\3\2\2\2\u1bd2\u1ba2\3\2\2\2\u1bd2"+
		"\u1bbb\3\2\2\2\u1bd2\u1bc5\3\2\2\2\u1bd3\u032d\3\2\2\2\u1bd4\u1bd6\5\u0350"+
		"\u01a9\2\u1bd5\u1bd7\5\u033a\u019e\2\u1bd6\u1bd5\3\2\2\2\u1bd6\u1bd7\3"+
		"\2\2\2\u1bd7\u032f\3\2\2\2\u1bd8\u1bd9\7\u03d7\2\2\u1bd9\u1bda\7\u0487"+
		"\2\2\u1bda\u1bdb\7\u0179\2\2\u1bdb\u1bdc\7\u048e\2\2\u1bdc\u0331\3\2\2"+
		"\2\u1bdd\u1bde\t\3\2\2\u1bde\u0333\3\2\2\2\u1bdf\u1be1\7\u01c2\2\2\u1be0"+
		"\u1be2\7\u0456\2\2\u1be1\u1be0\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u1be4"+
		"\3\2\2\2\u1be3\u1be5\tz\2\2\u1be4\u1be3\3\2\2\2\u1be4\u1be5\3\2\2\2\u1be5"+
		"\u1be6\3\2\2\2\u1be6\u1be7\7\u0487\2\2\u1be7\u1be8\5\u0332\u019a\2\u1be8"+
		"\u1be9\7\u048e\2\2\u1be9\u0335\3\2\2\2\u1bea\u1bec\5\u02a8\u0155\2\u1beb"+
		"\u1bed\5\u0340\u01a1\2\u1bec\u1beb\3\2\2\2\u1bec\u1bed\3\2\2\2\u1bed\u1bef"+
		"\3\2\2\2\u1bee\u1bf0\7^\2\2\u1bef\u1bee\3\2\2\2\u1bef\u1bf0\3\2\2\2\u1bf0"+
		"\u1bf1\3\2\2\2\u1bf1\u1bf2\5\u0338\u019d\2\u1bf2\u0337\3\2\2\2\u1bf3\u1bfa"+
		"\5\u05e2\u02f2\2\u1bf4\u1bf5\5\u05e2\u02f2\2\u1bf5\u1bf6\7\u0487\2\2\u1bf6"+
		"\u1bf7\5\u037e\u01c0\2\u1bf7\u1bf8\7\u048e\2\2\u1bf8\u1bfa\3\2\2\2\u1bf9"+
		"\u1bf3\3\2\2\2\u1bf9\u1bf4\3\2\2\2\u1bfa\u0339\3\2\2\2\u1bfb\u1bfc\7\u0106"+
		"\2\2\u1bfc\u1bff\7\u0487\2\2\u1bfd\u1c00\5\u033c\u019f\2\u1bfe\u1c00\5"+
		"\u02f8\u017d\2\u1bff\u1bfd\3\2\2\2\u1bff\u1bfe\3\2\2\2\u1c00\u1c01\3\2"+
		"\2\2\u1c01\u1c02\7\u048e\2\2\u1c02\u033b\3\2\2\2\u1c03\u1c08\5\u033e\u01a0"+
		"\2\u1c04\u1c05\7\u0481\2\2\u1c05\u1c07\5\u033e\u01a0\2\u1c06\u1c04\3\2"+
		"\2\2\u1c07\u1c0a\3\2\2\2\u1c08\u1c06\3\2\2\2\u1c08\u1c09\3\2\2\2\u1c09"+
		"\u033d\3\2\2\2\u1c0a\u1c08\3\2\2\2\u1c0b\u1c0c\5\u05e2\u02f2\2\u1c0c\u1c0d"+
		"\7\u0493\2\2\u1c0d\u1c0e\5*\26\2\u1c0e\u033f\3\2\2\2\u1c0f\u1c10\7^\2"+
		"\2\u1c10\u1c11\7\u023c\2\2\u1c11\u1c12\7\u026d\2\2\u1c12\u1c13\5\66\34"+
		"\2\u1c13\u0341\3\2\2\2\u1c14\u1c15\t{\2\2\u1c15\u0343\3\2\2\2\u1c16\u1c17"+
		"\t|\2\2\u1c17\u0345\3\2\2\2\u1c18\u1c24\5\u0642\u0322\2\u1c19\u1c21\7"+
		"\u00a7\2\2\u1c1a\u1c1e\7\u00ce\2\2\u1c1b\u1c1c\7\u00fc\2\2\u1c1c\u1c1e"+
		"\7g\2\2\u1c1d\u1c1a\3\2\2\2\u1c1d\u1c1b\3\2\2\2\u1c1e\u1c22\3\2\2\2\u1c1f"+
		"\u1c20\7\u00af\2\2\u1c20\u1c22\7g\2\2\u1c21\u1c1d\3\2\2\2\u1c21\u1c1f"+
		"\3\2\2\2\u1c22\u1c24\3\2\2\2\u1c23\u1c18\3\2\2\2\u1c23\u1c19\3\2\2\2\u1c24"+
		"\u0347\3\2\2\2\u1c25\u1c26\t}\2\2\u1c26\u0349\3\2\2\2\u1c27\u1c2c\5\u0348"+
		"\u01a5\2\u1c28\u1c29\7\u0481\2\2\u1c29\u1c2b\5\u0348\u01a5\2\u1c2a\u1c28"+
		"\3\2\2\2\u1c2b\u1c2e\3\2\2\2\u1c2c\u1c2a\3\2\2\2\u1c2c\u1c2d\3\2\2\2\u1c2d"+
		"\u034b\3\2\2\2\u1c2e\u1c2c\3\2\2\2\u1c2f\u1c30\7\u014d\2\2\u1c30\u1c31"+
		"\5\u0344\u01a3\2\u1c31\u1c32\5\u0346\u01a4\2\u1c32\u1c34\7\u0487\2\2\u1c33"+
		"\u1c35\5\u034a\u01a6\2\u1c34\u1c33\3\2\2\2\u1c34\u1c35\3\2\2\2\u1c35\u1c36"+
		"\3\2\2\2\u1c36\u1c37\7\u048e\2\2\u1c37\u1c40\3\2\2\2\u1c38\u1c39\5\u0342"+
		"\u01a2\2\u1c39\u1c3a\5\u0344\u01a3\2\u1c3a\u1c3b\5\u0346\u01a4\2\u1c3b"+
		"\u1c3c\7\u0487\2\2\u1c3c\u1c3d\5\u034a\u01a6\2\u1c3d\u1c3e\7\u048e\2\2"+
		"\u1c3e\u1c40\3\2\2\2\u1c3f\u1c2f\3\2\2\2\u1c3f\u1c38\3\2\2\2\u1c40\u034d"+
		"\3\2\2\2\u1c41\u1c43\5\u034c\u01a7\2\u1c42\u1c41\3\2\2\2\u1c43\u1c44\3"+
		"\2\2\2\u1c44\u1c42\3\2\2\2\u1c44\u1c45\3\2\2\2\u1c45\u034f\3\2\2\2\u1c46"+
		"\u1c49\5\u0356\u01ac\2\u1c47\u1c49\5\u0358\u01ad\2\u1c48\u1c46\3\2\2\2"+
		"\u1c48\u1c47\3\2\2\2\u1c49\u0351\3\2\2\2\u1c4a\u1c4f\5\u0354\u01ab\2\u1c4b"+
		"\u1c4c\7\u0481\2\2\u1c4c\u1c4e\5\u0354\u01ab\2\u1c4d\u1c4b\3\2\2\2\u1c4e"+
		"\u1c51\3\2\2\2\u1c4f\u1c4d\3\2\2\2\u1c4f\u1c50\3\2\2\2\u1c50\u0353\3\2"+
		"\2\2\u1c51\u1c4f\3\2\2\2\u1c52\u1c55\5\u05e2\u02f2\2\u1c53\u1c54\7\u048c"+
		"\2\2\u1c54\u1c56\5\u05e2\u02f2\2\u1c55\u1c53\3\2\2\2\u1c55\u1c56\3\2\2"+
		"\2\u1c56\u1c59\3\2\2\2\u1c57\u1c58\7\u048c\2\2\u1c58\u1c5a\7\u0485\2\2"+
		"\u1c59\u1c57\3\2\2\2\u1c59\u1c5a\3\2\2\2\u1c5a\u0355\3\2\2\2\u1c5b\u1c5d"+
		"\5\u05e2\u02f2\2\u1c5c\u1c5e\7\u04a1\2\2\u1c5d\u1c5c\3\2\2\2\u1c5d\u1c5e"+
		"\3\2\2\2\u1c5e\u1c6a\3\2\2\2\u1c5f\u1c60\5\u05e2\u02f2\2\u1c60\u1c61\7"+
		"\u048c\2\2\u1c61\u1c63\5\u05e2\u02f2\2\u1c62\u1c64\7\u04a1\2\2\u1c63\u1c62"+
		"\3\2\2\2\u1c63\u1c64\3\2\2\2\u1c64\u1c6a\3\2\2\2\u1c65\u1c66\5\u05e2\u02f2"+
		"\2\u1c66\u1c67\7\u048c\2\2\u1c67\u1c68\5\u0640\u0321\2\u1c68\u1c6a\3\2"+
		"\2\2\u1c69\u1c5b\3\2\2\2\u1c69\u1c5f\3\2\2\2\u1c69\u1c65\3\2\2\2\u1c6a"+
		"\u0357\3\2\2\2\u1c6b\u1c6e\7\u048c\2\2\u1c6c\u1c6f\5\u05e2\u02f2\2\u1c6d"+
		"\u1c6f\5\u0640\u0321\2\u1c6e\u1c6c\3\2\2\2\u1c6e\u1c6d\3\2\2\2\u1c6f\u0359"+
		"\3\2\2\2\u1c70\u1c71\5\u0356\u01ac\2\u1c71\u1c72\5\u035c\u01af\2\u1c72"+
		"\u035b\3\2\2\2\u1c73\u1c74\7\u0479\2\2\u1c74\u1c77\7\u04a2\2\2\u1c75\u1c77"+
		"\5\u0642\u0322\2\u1c76\u1c73\3\2\2\2\u1c76\u1c75\3\2\2\2\u1c77\u035d\3"+
		"\2\2\2\u1c78\u1c7e\5\u035a\u01ae\2\u1c79\u1c7a\5\u0360\u01b1\2\u1c7a\u1c7b"+
		"\5\u035a\u01ae\2\u1c7b\u1c7d\3\2\2\2\u1c7c\u1c79\3\2\2\2\u1c7d\u1c80\3"+
		"\2\2\2\u1c7e\u1c7c\3\2\2\2\u1c7e\u1c7f\3\2\2\2\u1c7f\u035f\3\2\2\2\u1c80"+
		"\u1c7e\3\2\2\2\u1c81\u1c83\7\u0481\2\2\u1c82\u1c81\3\2\2\2\u1c82\u1c83"+
		"\3\2\2\2\u1c83\u0361\3\2\2\2\u1c84\u1c8a\5\u035a\u01ae\2\u1c85\u1c86\7"+
		"\u0487\2\2\u1c86\u1c87\5\u035e\u01b0\2\u1c87\u1c88\7\u048e\2\2\u1c88\u1c8a"+
		"\3\2\2\2\u1c89\u1c84\3\2\2\2\u1c89\u1c85\3\2\2\2\u1c8a\u0363\3\2\2\2\u1c8b"+
		"\u1c8c\7\u0487\2\2\u1c8c\u1c8d\5\u035e\u01b0\2\u1c8d\u1c8e\7\u048e\2\2"+
		"\u1c8e\u0365\3\2\2\2\u1c8f\u1c90\b\u01b4\1\2\u1c90\u1c9b\5\u0364\u01b3"+
		"\2\u1c91\u1c95\7\u0487\2\2\u1c92\u1c93\5\u035e\u01b0\2\u1c93\u1c94\5\u0360"+
		"\u01b1\2\u1c94\u1c96\3\2\2\2\u1c95\u1c92\3\2\2\2\u1c95\u1c96\3\2\2\2\u1c96"+
		"\u1c97\3\2\2\2\u1c97\u1c98\5\u0366\u01b4\2\u1c98\u1c99\7\u048e\2\2\u1c99"+
		"\u1c9b\3\2\2\2\u1c9a\u1c8f\3\2\2\2\u1c9a\u1c91\3\2\2\2\u1c9b\u1cac\3\2"+
		"\2\2\u1c9c\u1c9d\f\4\2\2\u1c9d\u1ca0\5\u0360\u01b1\2\u1c9e\u1ca1\5\u035a"+
		"\u01ae\2\u1c9f\u1ca1\5\u0364\u01b3\2\u1ca0\u1c9e\3\2\2\2\u1ca0\u1c9f\3"+
		"\2\2\2\u1ca1\u1cab\3\2\2\2\u1ca2\u1ca3\f\3\2\2\u1ca3\u1ca4\5\u0360\u01b1"+
		"\2\u1ca4\u1ca5\7\u0487\2\2\u1ca5\u1ca6\5\u035e\u01b0\2\u1ca6\u1ca7\5\u0360"+
		"\u01b1\2\u1ca7\u1ca8\5\u0366\u01b4\2\u1ca8\u1ca9\7\u048e\2\2\u1ca9\u1cab"+
		"\3\2\2\2\u1caa\u1c9c\3\2\2\2\u1caa\u1ca2\3\2\2\2\u1cab\u1cae\3\2\2\2\u1cac"+
		"\u1caa\3\2\2\2\u1cac\u1cad\3\2\2\2\u1cad\u0367\3\2\2\2\u1cae\u1cac\3\2"+
		"\2\2\u1caf\u1cb0\5\u035e\u01b0\2\u1cb0\u1cb1\5\u0360\u01b1\2\u1cb1\u1cb3"+
		"\3\2\2\2\u1cb2\u1caf\3\2\2\2\u1cb2\u1cb3\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4"+
		"\u1cb5\5\u0366\u01b4\2\u1cb5\u0369\3\2\2\2\u1cb6\u1cb7\b\u01b6\1\2\u1cb7"+
		"\u1cbd\5\u035a\u01ae\2\u1cb8\u1cb9\7\u0487\2\2\u1cb9\u1cba\5\u035e\u01b0"+
		"\2\u1cba\u1cbb\7\u048e\2\2\u1cbb\u1cbd\3\2\2\2\u1cbc\u1cb6\3\2\2\2\u1cbc"+
		"\u1cb8\3\2\2\2\u1cbd\u1cca\3\2\2\2\u1cbe\u1cbf\f\4\2\2\u1cbf\u1cc0\5\u0360"+
		"\u01b1\2\u1cc0\u1cc1\5\u035a\u01ae\2\u1cc1\u1cc9\3\2\2\2\u1cc2\u1cc3\f"+
		"\3\2\2\u1cc3\u1cc4\5\u0360\u01b1\2\u1cc4\u1cc5\7\u0487\2\2\u1cc5\u1cc6"+
		"\5\u035e\u01b0\2\u1cc6\u1cc7\7\u048e\2\2\u1cc7\u1cc9\3\2\2\2\u1cc8\u1cbe"+
		"\3\2\2\2\u1cc8\u1cc2\3\2\2\2\u1cc9\u1ccc\3\2\2\2\u1cca\u1cc8\3\2\2\2\u1cca"+
		"\u1ccb\3\2\2\2\u1ccb\u036b\3\2\2\2\u1ccc\u1cca\3\2\2\2\u1ccd\u1cd1\7\u0179"+
		"\2\2\u1cce\u1ccf\5\u0360\u01b1\2\u1ccf\u1cd0\5\u036c\u01b7\2\u1cd0\u1cd2"+
		"\3\2\2\2\u1cd1\u1cce\3\2\2\2\u1cd1\u1cd2\3\2\2\2\u1cd2\u036d\3\2\2\2\u1cd3"+
		"\u1cd4\7\u00f7\2\2\u1cd4\u1cdb\5:\36\2\u1cd5\u1cd6\7\u014e\2\2\u1cd6\u1cd7"+
		"\7\u0487\2\2\u1cd7\u1cd8\5\u029e\u0150\2\u1cd8\u1cd9\7\u048e\2\2\u1cd9"+
		"\u1cdb\3\2\2\2\u1cda\u1cd3\3\2\2\2\u1cda\u1cd5\3\2\2\2\u1cdb\u036f\3\2"+
		"\2\2\u1cdc\u1cdd\b\u01b9\1\2\u1cdd\u1cde\5\u032a\u0196\2\u1cde\u1cdf\5"+
		"\u0374\u01bb\2\u1cdf\u1ce2\5\u032a\u0196\2\u1ce0\u1ce1\7\u00f7\2\2\u1ce1"+
		"\u1ce3\5:\36\2\u1ce2\u1ce0\3\2\2\2\u1ce2\u1ce3\3\2\2\2\u1ce3\u1cf7\3\2"+
		"\2\2\u1ce4\u1ce5\5\u032a\u0196\2\u1ce5\u1ce6\5\u0374\u01bb\2\u1ce6\u1ce7"+
		"\5\u032a\u0196\2\u1ce7\u1ce8\7\u014e\2\2\u1ce8\u1ce9\7\u0487\2\2\u1ce9"+
		"\u1cea\5\u029e\u0150\2\u1cea\u1ceb\7\u048e\2\2\u1ceb\u1cf7\3\2\2\2\u1cec"+
		"\u1ced\5\u032a\u0196\2\u1ced\u1cee\5\u0376\u01bc\2\u1cee\u1cf0\5\u032a"+
		"\u0196\2\u1cef\u1cf1\5\u036e\u01b8\2\u1cf0\u1cef\3\2\2\2\u1cf0\u1cf1\3"+
		"\2\2\2\u1cf1\u1cf7\3\2\2\2\u1cf2\u1cf3\5\u032a\u0196\2\u1cf3\u1cf4\5\u0372"+
		"\u01ba\2\u1cf4\u1cf5\5\u032a\u0196\2\u1cf5\u1cf7\3\2\2\2\u1cf6\u1cdc\3"+
		"\2\2\2\u1cf6\u1ce4\3\2\2\2\u1cf6\u1cec\3\2\2\2\u1cf6\u1cf2\3\2\2\2\u1cf7"+
		"\u1d13\3\2\2\2\u1cf8\u1cf9\f\6\2\2\u1cf9\u1cfa\5\u0374\u01bb\2\u1cfa\u1cfd"+
		"\5\u032a\u0196\2\u1cfb\u1cfc\7\u00f7\2\2\u1cfc\u1cfe\5:\36\2\u1cfd\u1cfb"+
		"\3\2\2\2\u1cfd\u1cfe\3\2\2\2\u1cfe\u1d12\3\2\2\2\u1cff\u1d00\f\5\2\2\u1d00"+
		"\u1d01\5\u0374\u01bb\2\u1d01\u1d02\5\u032a\u0196\2\u1d02\u1d03\7\u014e"+
		"\2\2\u1d03\u1d04\7\u0487\2\2\u1d04\u1d05\5\u029e\u0150\2\u1d05\u1d06\7"+
		"\u048e\2\2\u1d06\u1d12\3\2\2\2\u1d07\u1d08\f\4\2\2\u1d08\u1d09\5\u0376"+
		"\u01bc\2\u1d09\u1d0b\5\u032a\u0196\2\u1d0a\u1d0c\5\u036e\u01b8\2\u1d0b"+
		"\u1d0a\3\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d12\3\2\2\2\u1d0d\u1d0e\f\3"+
		"\2\2\u1d0e\u1d0f\5\u0372\u01ba\2\u1d0f\u1d10\5\u032a\u0196\2\u1d10\u1d12"+
		"\3\2\2\2\u1d11\u1cf8\3\2\2\2\u1d11\u1cff\3\2\2\2\u1d11\u1d07\3\2\2\2\u1d11"+
		"\u1d0d\3\2\2\2\u1d12\u1d15\3\2\2\2\u1d13\u1d11\3\2\2\2\u1d13\u1d14\3\2"+
		"\2\2\u1d14\u0371\3\2\2\2\u1d15\u1d13\3\2\2\2\u1d16\u1d17\7\u00f5\2\2\u1d17"+
		"\u1d1e\5\u0376\u01bc\2\u1d18\u1d1a\7\u00f5\2\2\u1d19\u1d1b\7\u00b9\2\2"+
		"\u1d1a\u1d19\3\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b\u1d1c\3\2\2\2\u1d1c\u1d1e"+
		"\7\u00ce\2\2\u1d1d\u1d16\3\2\2\2\u1d1d\u1d18\3\2\2\2\u1d1e\u0373\3\2\2"+
		"\2\u1d1f\u1d21\7\u00b9\2\2\u1d20\u1d1f\3\2\2\2\u1d20\u1d21\3\2\2\2\u1d21"+
		"\u1d22\3\2\2\2\u1d22\u1d27\7\u00ce\2\2\u1d23\u1d24\7y\2\2\u1d24\u1d27"+
		"\7\u00ce\2\2\u1d25\u1d27\7\u0135\2\2\u1d26\u1d20\3\2\2\2\u1d26\u1d23\3"+
		"\2\2\2\u1d26\u1d25\3\2\2\2\u1d27\u0375\3\2\2\2\u1d28\u1d2a\t~\2\2\u1d29"+
		"\u1d2b\7\u00ff\2\2\u1d2a\u1d29\3\2\2\2\u1d2a\u1d2b\3\2\2\2\u1d2b\u1d2c"+
		"\3\2\2\2\u1d2c\u1d2d\7\u00ce\2\2\u1d2d\u0377\3\2\2\2\u1d2e\u1d30\7\u015f"+
		"\2\2\u1d2f\u1d31\7\u0442\2\2\u1d30\u1d2f\3\2\2\2\u1d30\u1d31\3\2\2\2\u1d31"+
		"\u1d32\3\2\2\2\u1d32\u1d33\5\u037a\u01be\2\u1d33\u0379\3\2\2\2\u1d34\u1d39"+
		"\5\u037c\u01bf\2\u1d35\u1d36\7\u0481\2\2\u1d36\u1d38\5\u037c\u01bf\2\u1d37"+
		"\u1d35\3\2\2\2\u1d38\u1d3b\3\2\2\2\u1d39\u1d37\3\2\2\2\u1d39\u1d3a\3\2"+
		"\2\2\u1d3a\u037b\3\2\2\2\u1d3b\u1d39\3\2\2\2\u1d3c\u1d41\5\u05e2\u02f2"+
		"\2\u1d3d\u1d3e\7\u0487\2\2\u1d3e\u1d3f\5\u037e\u01c0\2\u1d3f\u1d40\7\u048e"+
		"\2\2\u1d40\u1d42\3\2\2\2\u1d41\u1d3d\3\2\2\2\u1d41\u1d42\3\2\2\2\u1d42"+
		"\u1d43\3\2\2\2\u1d43\u1d44\7^\2\2\u1d44\u1d46\7\u0487\2\2\u1d45\u1d47"+
		"\5\u0378\u01bd\2\u1d46\u1d45\3\2\2\2\u1d46\u1d47\3\2\2\2\u1d47\u1d4a\3"+
		"\2\2\2\u1d48\u1d4b\5\u02aa\u0156\2\u1d49\u1d4b\5\u02a8\u0155\2\u1d4a\u1d48"+
		"\3\2\2\2\u1d4a\u1d49\3\2\2\2\u1d4b\u1d4c\3\2\2\2\u1d4c\u1d4d\7\u048e\2"+
		"\2\u1d4d\u037d\3\2\2\2\u1d4e\u1d53\5\u0380\u01c1\2\u1d4f\u1d50\7\u0481"+
		"\2\2\u1d50\u1d52\5\u0380\u01c1\2\u1d51\u1d4f\3\2\2\2\u1d52\u1d55\3\2\2"+
		"\2\u1d53\u1d51\3\2\2\2\u1d53\u1d54\3\2\2\2\u1d54\u037f\3\2\2\2\u1d55\u1d53"+
		"\3\2\2\2\u1d56\u1d57\5\u05e0\u02f1\2\u1d57\u0381\3\2\2\2\u1d58\u1d59\7"+
		"\u0152\2\2\u1d59\u1d5a\5\u0386\u01c4\2\u1d5a\u0383\3\2\2\2\u1d5b\u1d5c"+
		"\5\u0382\u01c2\2\u1d5c\u1d5d\5\u0314\u018b\2\u1d5d\u1d65\3\2\2\2\u1d5e"+
		"\u1d60\5\u0382\u01c2\2\u1d5f\u1d61\5\u0314\u018b\2\u1d60\u1d5f\3\2\2\2"+
		"\u1d60\u1d61\3\2\2\2\u1d61\u1d62\3\2\2\2\u1d62\u1d63\5\u02d2\u016a\2\u1d63"+
		"\u1d65\3\2\2\2\u1d64\u1d5b\3\2\2\2\u1d64\u1d5e\3\2\2\2\u1d65\u0385\3\2"+
		"\2\2\u1d66\u1d6b\5\u0388\u01c5\2\u1d67\u1d68\7\u0481\2\2\u1d68\u1d6a\5"+
		"\u0388\u01c5\2\u1d69\u1d67\3\2\2\2\u1d6a\u1d6d\3\2\2\2\u1d6b\u1d69\3\2"+
		"\2\2\u1d6b\u1d6c\3\2\2\2\u1d6c\u0387\3\2\2\2\u1d6d\u1d6b\3\2\2\2\u1d6e"+
		"\u1d6f\7\u0396\2\2\u1d6f\u1d70\7\u0487\2\2\u1d70\u1d71\5\u02a2\u0152\2"+
		"\u1d71\u1d72\7\u048e\2\2\u1d72\u0389\3\2\2\2\u1d73\u1d74\7Z\2\2\u1d74"+
		"\u1d75\7\u013d\2\2\u1d75\u1d76\5\u0350\u01a9\2\u1d76\u1d77\7\u014a\2\2"+
		"\u1d77\u1d78\7\u038c\2\2\u1d78\u1d79\7\u00f7\2\2\u1d79\u1d7a\5\u01c6\u00e4"+
		"\2\u1d7a\u1d7b\7\u015f\2\2\u1d7b\u1d7c\7\u0179\2\2\u1d7c\u1d7d\7\u044c"+
		"\2\2\u1d7d\u1d92\3\2\2\2\u1d7e\u1d7f\7Z\2\2\u1d7f\u1d80\7\u013d\2\2\u1d80"+
		"\u1d81\5\u0350\u01a9\2\u1d81\u1d82\t\177\2\2\u1d82\u1d83\7\u038c\2\2\u1d83"+
		"\u1d84\7\u00f7\2\2\u1d84\u1d85\5\u01c6\u00e4\2\u1d85\u1d92\3\2\2\2\u1d86"+
		"\u1d87\7Z\2\2\u1d87\u1d88\7\u013d\2\2\u1d88\u1d8a\5\u0350\u01a9\2\u1d89"+
		"\u1d8b\5\u033a\u019e\2\u1d8a\u1d89\3\2\2\2\u1d8a\u1d8b\3\2\2\2\u1d8b\u1d8c"+
		"\3\2\2\2\u1d8c\u1d8d\5\u038c\u01c7\2\u1d8d\u1d92\3\2\2\2\u1d8e\u1d8f\7"+
		"Z\2\2\u1d8f\u1d90\7\u013d\2\2\u1d90\u1d92\5\u028e\u0148\2\u1d91\u1d73"+
		"\3\2\2\2\u1d91\u1d7e\3\2\2\2\u1d91\u1d86\3\2\2\2\u1d91\u1d8e\3\2\2\2\u1d92"+
		"\u038b\3\2\2\2\u1d93\u1d94\7\u042b\2\2\u1d94\u1d96\7\u026e\2\2\u1d95\u1d97"+
		"\5\u038e\u01c8\2\u1d96\u1d95\3\2\2\2\u1d96\u1d97\3\2\2\2\u1d97\u1da3\3"+
		"\2\2\2\u1d98\u1d99\7\u0351\2\2\u1d99\u1d9b\7\u026e\2\2\u1d9a\u1d9c\5\u038e"+
		"\u01c8\2\u1d9b\u1d9a\3\2\2\2\u1d9b\u1d9c\3\2\2\2\u1d9c\u1da0\3\2\2\2\u1d9d"+
		"\u1d9e\7\u01c2\2\2\u1d9e\u1d9f\7\u0179\2\2\u1d9f\u1da1\5\u0392\u01ca\2"+
		"\u1da0\u1d9d\3\2\2\2\u1da0\u1da1\3\2\2\2\u1da1\u1da3\3\2\2\2\u1da2\u1d93"+
		"\3\2\2\2\u1da2\u1d98\3\2\2\2\u1da3\u038d\3\2\2\2\u1da4\u1da5\5\u0390\u01c9"+
		"\2\u1da5\u038f\3\2\2\2\u1da6\u1da7\7\u00a7\2\2\u1da7\u1dab\7\u013d\2\2"+
		"\u1da8\u1dab\5\u0394\u01cb\2\u1da9\u1dab\5\u0398\u01cd\2\u1daa\u1da6\3"+
		"\2\2\2\u1daa\u1da8\3\2\2\2\u1daa\u1da9\3\2\2\2\u1dab\u0391\3\2\2\2\u1dac"+
		"\u1dad\t\u0080\2\2\u1dad\u0393\3\2\2\2\u1dae\u1daf\7\u00a7\2\2\u1daf\u1db1"+
		"\7[\2\2\u1db0\u1db2\t\u0081\2\2\u1db1\u1db0\3\2\2\2\u1db1\u1db2\3\2\2"+
		"\2\u1db2\u1db3\3\2\2\2\u1db3\u1db5\7v\2\2\u1db4\u1db6\5\u0396\u01cc\2"+
		"\u1db5\u1db4\3\2\2\2\u1db5\u1db6\3\2\2\2\u1db6\u0395\3\2\2\2\u1db7\u1db8"+
		"\7\u0186\2\2\u1db8\u1dbc\t\u0082\2\2\u1db9\u1dba\7\u0186\2\2\u1dba\u1dbc"+
		"\5(\25\2\u1dbb\u1db7\3\2\2\2\u1dbb\u1db9\3\2\2\2\u1dbc\u0397\3\2\2\2\u1dbd"+
		"\u1dbe\7\u00a7\2\2\u1dbe\u1dc0\7v\2\2\u1dbf\u1dc1\5\u039a\u01ce\2\u1dc0"+
		"\u1dbf\3\2\2\2\u1dc0\u1dc1\3\2\2\2\u1dc1\u0399\3\2\2\2\u1dc2\u1dc3\b\u01ce"+
		"\1\2\u1dc3\u1dc4\5\u039c\u01cf\2\u1dc4\u1dcc\3\2\2\2\u1dc5\u1dc6\f\4\2"+
		"\2\u1dc6\u1dcb\5\u039c\u01cf\2\u1dc7\u1dc8\f\3\2\2\u1dc8\u1dc9\7\u0481"+
		"\2\2\u1dc9\u1dcb\5\u039c\u01cf\2\u1dca\u1dc5\3\2\2\2\u1dca\u1dc7\3\2\2"+
		"\2\u1dcb\u1dce\3\2\2\2\u1dcc\u1dca\3\2\2\2\u1dcc\u1dcd\3\2\2\2\u1dcd\u039b"+
		"\3\2\2\2\u1dce\u1dcc\3\2\2\2\u1dcf\u1dd1\5\u039e\u01d0\2\u1dd0\u1dd2\5"+
		"\u0396\u01cc\2\u1dd1\u1dd0\3\2\2\2\u1dd1\u1dd2\3\2\2\2\u1dd2\u1dd5\3\2"+
		"\2\2\u1dd3\u1dd5\5\u0396\u01cc\2\u1dd4\u1dcf\3\2\2\2\u1dd4\u1dd3\3\2\2"+
		"\2\u1dd5\u039d\3\2\2\2\u1dd6\u1ddc\5\u05e0\u02f1\2\u1dd7\u1dd8\7\u0487"+
		"\2\2\u1dd8\u1dd9\5\u01c6\u00e4\2\u1dd9\u1dda\7\u048e\2\2\u1dda\u1ddc\3"+
		"\2\2\2\u1ddb\u1dd6\3\2\2\2\u1ddb\u1dd7\3\2\2\2\u1ddc\u039f\3\2\2\2\u1ddd"+
		"\u1de0\7x\2\2\u1dde\u1ddf\7\u00fb\2\2\u1ddf\u1de1\7\u0113\2\2\u1de0\u1dde"+
		"\3\2\2\2\u1de0\u1de1\3\2\2\2\u1de1\u1de2\3\2\2\2\u1de2\u1de3\7\u034e\2"+
		"\2\u1de3\u1de4\5\u05e2\u02f2\2\u1de4\u1de5\7\u00f7\2\2\u1de5\u1de8\5\u03aa"+
		"\u01d6\2\u1de6\u1de7\7\u0140\2\2\u1de7\u1de9\5\u03aa\u01d6\2\u1de8\u1de6"+
		"\3\2\2\2\u1de8\u1de9\3\2\2\2\u1de9\u1df8\3\2\2\2\u1dea\u1ded\7x\2\2\u1deb"+
		"\u1dec\7\u00fb\2\2\u1dec\u1dee\7\u0113\2\2\u1ded\u1deb\3\2\2\2\u1ded\u1dee"+
		"\3\2\2\2\u1dee\u1def\3\2\2\2\u1def\u1df0\7\u034e\2\2\u1df0\u1df1\5\u05e2"+
		"\u02f2\2\u1df1\u1df2\7\u00f7\2\2\u1df2\u1df3\7\u04a3\2\2\u1df3\u1df4\7"+
		"\u014e\2\2\u1df4\u1df5\7\u04e1\2\2\u1df5\u1df6\5\u02f2\u017a\2\u1df6\u1df8"+
		"\3\2\2\2\u1df7\u1ddd\3\2\2\2\u1df7\u1dea\3\2\2\2\u1df8\u03a1\3\2\2\2\u1df9"+
		"\u1dfa\7W\2\2\u1dfa\u1dfb\7\u034e\2\2\u1dfb\u1dfc\5\u05e2\u02f2\2\u1dfc"+
		"\u1dfd\7U\2\2\u1dfd\u1e00\5\u03aa\u01d6\2\u1dfe\u1dff\7\u0140\2\2\u1dff"+
		"\u1e01\5\u03aa\u01d6\2\u1e00\u1dfe\3\2\2\2\u1e00\u1e01\3\2\2\2\u1e01\u03a3"+
		"\3\2\2\2\u1e02\u1e03\7\u0097\2\2\u1e03\u1e04\7\u034e\2\2\u1e04\u1e05\5"+
		"\u0350\u01a9\2\u1e05\u03a5\3\2\2\2\u1e06\u1e07\5\u03a8\u01d5\2\u1e07\u1e0a"+
		"\5\u0350\u01a9\2\u1e08\u1e0b\7\u04a3\2\2\u1e09\u1e0b\5\u05e0\u02f1\2\u1e0a"+
		"\u1e08\3\2\2\2\u1e0a\u1e09\3\2\2\2\u1e0a\u1e0b\3\2\2\2\u1e0b\u1e87\3\2"+
		"\2\2\u1e0c\u1e0d\5\u03a8\u01d5\2\u1e0d\u1e0e\5\u03aa\u01d6\2\u1e0e\u1e87"+
		"\3\2\2\2\u1e0f\u1e10\5\u03a8\u01d5\2\u1e10\u1e11\7\u01f5\2\2\u1e11\u1e12"+
		"\5\u03aa\u01d6\2\u1e12\u1e87\3\2\2\2\u1e13\u1e14\5\u03a8\u01d5\2\u1e14"+
		"\u1e15\7\u02a1\2\2\u1e15\u1e16\5\u03aa\u01d6\2\u1e16\u1e87\3\2\2\2\u1e17"+
		"\u1e18\5\u03a8\u01d5\2\u1e18\u1e19\7\u0466\2\2\u1e19\u1e1a\5\u03aa\u01d6"+
		"\2\u1e1a\u1e87\3\2\2\2\u1e1b\u1e1c\5\u03a8\u01d5\2\u1e1c\u1e1d\7\u0466"+
		"\2\2\u1e1d\u1e1e\7\u01f5\2\2\u1e1e\u1e1f\5\u03aa\u01d6\2\u1e1f\u1e87\3"+
		"\2\2\2\u1e20\u1e21\5\u03a8\u01d5\2\u1e21\u1e22\7\u0466\2\2\u1e22\u1e23"+
		"\7\u02a1\2\2\u1e23\u1e24\5\u03aa\u01d6\2\u1e24\u1e87\3\2\2\2\u1e25\u1e26"+
		"\5\u03a8\u01d5\2\u1e26\u1e27\7\u034e\2\2\u1e27\u1e28\5\u03aa\u01d6\2\u1e28"+
		"\u1e87\3\2\2\2\u1e29\u1e2a\5\u03a8\u01d5\2\u1e2a\u1e2b\7\u034e\2\2\u1e2b"+
		"\u1e2c\7\u01f5\2\2\u1e2c\u1e2d\5\u03aa\u01d6\2\u1e2d\u1e87\3\2\2\2\u1e2e"+
		"\u1e2f\5\u03a8\u01d5\2\u1e2f\u1e30\7\u034e\2\2\u1e30\u1e31\7\u02a1\2\2"+
		"\u1e31\u1e32\5\u03aa\u01d6\2\u1e32\u1e87\3\2\2\2\u1e33\u1e34\5\u03a8\u01d5"+
		"\2\u1e34\u1e35\7\u0415\2\2\u1e35\u1e36\5\u03aa\u01d6\2\u1e36\u1e87\3\2"+
		"\2\2\u1e37\u1e38\5\u03a8\u01d5\2\u1e38\u1e39\7\u0415\2\2\u1e39\u1e3a\7"+
		"\u01f5\2\2\u1e3a\u1e3b\5\u03aa\u01d6\2\u1e3b\u1e87\3\2\2\2\u1e3c\u1e3d"+
		"\5\u03a8\u01d5\2\u1e3d\u1e3e\7\u0415\2\2\u1e3e\u1e3f\7\u02a1\2\2\u1e3f"+
		"\u1e40\5\u03aa\u01d6\2\u1e40\u1e87\3\2\2\2\u1e41\u1e42\5\u03a8\u01d5\2"+
		"\u1e42\u1e43\7\u03d1\2\2\u1e43\u1e44\5\u03aa\u01d6\2\u1e44\u1e87\3\2\2"+
		"\2\u1e45\u1e46\5\u03a8\u01d5\2\u1e46\u1e47\7\u03d1\2\2\u1e47\u1e48\7\u01f5"+
		"\2\2\u1e48\u1e49\5\u03aa\u01d6\2\u1e49\u1e87\3\2\2\2\u1e4a\u1e4b\5\u03a8"+
		"\u01d5\2\u1e4b\u1e4c\7\u03d1\2\2\u1e4c\u1e4d\7\u02a1\2\2\u1e4d\u1e4e\5"+
		"\u03aa\u01d6\2\u1e4e\u1e87\3\2\2\2\u1e4f\u1e50\5\u03a8\u01d5\2\u1e50\u1e51"+
		"\7\u03c5\2\2\u1e51\u1e52\5\u03aa\u01d6\2\u1e52\u1e87\3\2\2\2\u1e53\u1e54"+
		"\5\u03a8\u01d5\2\u1e54\u1e55\7\u03c5\2\2\u1e55\u1e56\7\u01f5\2\2\u1e56"+
		"\u1e57\5\u03aa\u01d6\2\u1e57\u1e87\3\2\2\2\u1e58\u1e59\5\u03a8\u01d5\2"+
		"\u1e59\u1e5a\7\u03c5\2\2\u1e5a\u1e5b\7\u02a1\2\2\u1e5b\u1e5c\5\u03aa\u01d6"+
		"\2\u1e5c\u1e87\3\2\2\2\u1e5d\u1e5e\5\u03a8\u01d5\2\u1e5e\u1e5f\7\u021b"+
		"\2\2\u1e5f\u1e60\5\u03aa\u01d6\2\u1e60\u1e87\3\2\2\2\u1e61\u1e62\5\u03a8"+
		"\u01d5\2\u1e62\u1e63\7\u021b\2\2\u1e63\u1e64\7\u01f5\2\2\u1e64\u1e65\5"+
		"\u03aa\u01d6\2\u1e65\u1e87\3\2\2\2\u1e66\u1e67\5\u03a8\u01d5\2\u1e67\u1e68"+
		"\7\u021b\2\2\u1e68\u1e69\7\u02a1\2\2\u1e69\u1e6a\5\u03aa\u01d6\2\u1e6a"+
		"\u1e87\3\2\2\2\u1e6b\u1e6c\5\u03a8\u01d5\2\u1e6c\u1e6d\7\u0121\2\2\u1e6d"+
		"\u1e6e\7\u046c\2\2\u1e6e\u1e6f\7\u0493\2\2\u1e6f\u1e70\5&\24\2\u1e70\u1e71"+
		"\5\u03aa\u01d6\2\u1e71\u1e87\3\2\2\2\u1e72\u1e73\5\u03a8\u01d5\2\u1e73"+
		"\u1e74\7\u00c8\2\2\u1e74\u1e75\5\u05e2\u02f2\2\u1e75\u1e76\5\u03aa\u01d6"+
		"\2\u1e76\u1e87\3\2\2\2\u1e77\u1e78\5\u03a8\u01d5\2\u1e78\u1e79\7\u00c8"+
		"\2\2\u1e79\u1e7a\5\u05e2\u02f2\2\u1e7a\u1e7b\7\u0121\2\2\u1e7b\u1e7c\7"+
		"\u046c\2\2\u1e7c\u1e7d\7\u0493\2\2\u1e7d\u1e7e\5&\24\2\u1e7e\u1e7f\5\u03aa"+
		"\u01d6\2\u1e7f\u1e87\3\2\2\2\u1e80\u1e81\5\u03a8\u01d5\2\u1e81\u1e82\7"+
		"\u017c\2\2\u1e82\u1e83\7\u0493\2\2\u1e83\u1e84\5\u03ac\u01d7\2\u1e84\u1e85"+
		"\5\u03aa\u01d6\2\u1e85\u1e87\3\2\2\2\u1e86\u1e06\3\2\2\2\u1e86\u1e0c\3"+
		"\2\2\2\u1e86\u1e0f\3\2\2\2\u1e86\u1e13\3\2\2\2\u1e86\u1e17\3\2\2\2\u1e86"+
		"\u1e1b\3\2\2\2\u1e86\u1e20\3\2\2\2\u1e86\u1e25\3\2\2\2\u1e86\u1e29\3\2"+
		"\2\2\u1e86\u1e2e\3\2\2\2\u1e86\u1e33\3\2\2\2\u1e86\u1e37\3\2\2\2\u1e86"+
		"\u1e3c\3\2\2\2\u1e86\u1e41\3\2\2\2\u1e86\u1e45\3\2\2\2\u1e86\u1e4a\3\2"+
		"\2\2\u1e86\u1e4f\3\2\2\2\u1e86\u1e53\3\2\2\2\u1e86\u1e58\3\2\2\2\u1e86"+
		"\u1e5d\3\2\2\2\u1e86\u1e61\3\2\2\2\u1e86\u1e66\3\2\2\2\u1e86\u1e6b\3\2"+
		"\2\2\u1e86\u1e72\3\2\2\2\u1e86\u1e77\3\2\2\2\u1e86\u1e80\3\2\2\2\u1e87"+
		"\u03a7\3\2\2\2\u1e88\u1e89\t\u0083\2\2\u1e89\u03a9\3\2\2\2\u1e8a\u1e8f"+
		"\5\u02a6\u0154\2\u1e8b\u1e8f\5\u009aN\2\u1e8c\u1e8f\5\u0292\u014a\2\u1e8d"+
		"\u1e8f\5\u00a4S\2\u1e8e\u1e8a\3\2\2\2\u1e8e\u1e8b\3\2\2\2\u1e8e\u1e8c"+
		"\3\2\2\2\u1e8e\u1e8d\3\2\2\2\u1e8f\u03ab\3\2\2\2\u1e90\u1e91\t\u0084\2"+
		"\2\u1e91\u03ad\3\2\2\2\u1e92\u1e97\7\u0124\2\2\u1e93\u1e98\7\u00aa\2\2"+
		"\u1e94\u1e98\7\u0415\2\2\u1e95\u1e96\7\u0415\2\2\u1e96\u1e98\7\u00aa\2"+
		"\2\u1e97\u1e93\3\2\2\2\u1e97\u1e94\3\2\2\2\u1e97\u1e95\3\2\2\2\u1e97\u1e98"+
		"\3\2\2\2\u1e98\u1e99\3\2\2\2\u1e99\u1e9d\7\u0205\2\2\u1e9a\u1e9b\5\u03d4"+
		"\u01eb\2\u1e9b\u1e9c\5\u00eav\2\u1e9c\u1e9e\3\2\2\2\u1e9d\u1e9a\3\2\2"+
		"\2\u1e9d\u1e9e\3\2\2\2\u1e9e\u1ea7\3\2\2\2\u1e9f\u1ea0\7\u00d7\2\2\u1ea0"+
		"\u1ea8\7\u04a3\2\2\u1ea1\u1ea2\7\u00d7\2\2\u1ea2\u1ea3\7\u04a3\2\2\u1ea3"+
		"\u1ea4\7\u0402\2\2\u1ea4\u1ea8\7\u04a3\2\2\u1ea5\u1ea6\7\u0158\2\2\u1ea6"+
		"\u1ea8\5:\36\2\u1ea7\u1e9f\3\2\2\2\u1ea7\u1ea1\3\2\2\2\u1ea7\u1ea5\3\2"+
		"\2\2\u1ea7\u1ea8\3\2\2\2\u1ea8\u1fd6\3\2\2\2\u1ea9\u1eaa\7\u0124\2\2\u1eaa"+
		"\u1eac\5\u03c8\u01e5\2\u1eab\u1ead\7\u0216\2\2\u1eac\u1eab\3\2\2\2\u1eac"+
		"\u1ead\3\2\2\2\u1ead\u1eb6\3\2\2\2\u1eae\u1eaf\7\u00d7\2\2\u1eaf\u1eb7"+
		"\7\u04a3\2\2\u1eb0\u1eb1\7\u00d7\2\2\u1eb1\u1eb2\7\u04a3\2\2\u1eb2\u1eb3"+
		"\7\u0402\2\2\u1eb3\u1eb7\7\u04a3\2\2\u1eb4\u1eb5\7\u0158\2\2\u1eb5\u1eb7"+
		"\5:\36\2\u1eb6\u1eae\3\2\2\2\u1eb6\u1eb0\3\2\2\2\u1eb6\u1eb4\3\2\2\2\u1eb6"+
		"\u1eb7\3\2\2\2\u1eb7\u1fd6\3\2\2\2\u1eb8\u1ebd\7\u0124\2\2\u1eb9\u1ebe"+
		"\7\u00aa\2\2\u1eba\u1ebe\7\u0415\2\2\u1ebb\u1ebc\7\u0415\2\2\u1ebc\u1ebe"+
		"\7\u00aa\2\2\u1ebd\u1eb9\3\2\2\2\u1ebd\u1eba\3\2\2\2\u1ebd\u1ebb\3\2\2"+
		"\2\u1ebd\u1ebe\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ec0\5\u03ce\u01e8\2"+
		"\u1ec0\u1ec1\5\u03d4\u01eb\2\u1ec1\u1ec5\5\u0350\u01a9\2\u1ec2\u1ec3\5"+
		"\u03d4\u01eb\2\u1ec3\u1ec4\5\u00eav\2\u1ec4\u1ec6\3\2\2\2\u1ec5\u1ec2"+
		"\3\2\2\2\u1ec5\u1ec6\3\2\2\2\u1ec6\u1ecf\3\2\2\2\u1ec7\u1ec8\7\u00d7\2"+
		"\2\u1ec8\u1ed0\7\u04a3\2\2\u1ec9\u1eca\7\u00d7\2\2\u1eca\u1ecb\7\u04a3"+
		"\2\2\u1ecb\u1ecc\7\u0402\2\2\u1ecc\u1ed0\7\u04a3\2\2\u1ecd\u1ece\7\u0158"+
		"\2\2\u1ece\u1ed0\5:\36\2\u1ecf\u1ec7\3\2\2\2\u1ecf\u1ec9\3\2\2\2\u1ecf"+
		"\u1ecd\3\2\2\2\u1ecf\u1ed0\3\2\2\2\u1ed0\u1fd6\3\2\2\2\u1ed1\u1ed2\7\u0124"+
		"\2\2\u1ed2\u1ed3\t\u0085\2\2\u1ed3\u1ed7\7\u0216\2\2\u1ed4\u1ed5\5\u03d4"+
		"\u01eb\2\u1ed5\u1ed6\5\u00eav\2\u1ed6\u1ed8\3\2\2\2\u1ed7\u1ed4\3\2\2"+
		"\2\u1ed7\u1ed8\3\2\2\2\u1ed8\u1ee1\3\2\2\2\u1ed9\u1eda\7\u00d7\2\2\u1eda"+
		"\u1ee2\7\u04a3\2\2\u1edb\u1edc\7\u00d7\2\2\u1edc\u1edd\7\u04a3\2\2\u1edd"+
		"\u1ede\7\u0402\2\2\u1ede\u1ee2\7\u04a3\2\2\u1edf\u1ee0\7\u0158\2\2\u1ee0"+
		"\u1ee2\5:\36\2\u1ee1\u1ed9\3\2\2\2\u1ee1\u1edb\3\2\2\2\u1ee1\u1edf\3\2"+
		"\2\2\u1ee1\u1ee2\3\2\2\2\u1ee2\u1fd6\3\2\2\2\u1ee3\u1ee4\7\u0124\2\2\u1ee4"+
		"\u1ee5\7\u028e\2\2\u1ee5\u1eee\7\u0216\2\2\u1ee6\u1ee7\7\u00d7\2\2\u1ee7"+
		"\u1eef\7\u04a3\2\2\u1ee8\u1ee9\7\u00d7\2\2\u1ee9\u1eea\7\u04a3\2\2\u1eea"+
		"\u1eeb\7\u0402\2\2\u1eeb\u1eef\7\u04a3\2\2\u1eec\u1eed\7\u0158\2\2\u1eed"+
		"\u1eef\5:\36\2\u1eee\u1ee6\3\2\2\2\u1eee\u1ee8\3\2\2\2\u1eee\u1eec\3\2"+
		"\2\2\u1eee\u1eef\3\2\2\2\u1eef\u1fd6\3\2\2\2\u1ef0\u1ef2\7\u0124\2\2\u1ef1"+
		"\u1ef3\t\u0086\2\2\u1ef2\u1ef1\3\2\2\2\u1ef2\u1ef3\3\2\2\2\u1ef3\u1ef4"+
		"\3\2\2\2\u1ef4\u1efd\7\u0320\2\2\u1ef5\u1ef6\7\u00d7\2\2\u1ef6\u1efe\7"+
		"\u04a3\2\2\u1ef7\u1ef8\7\u00d7\2\2\u1ef8\u1ef9\7\u04a3\2\2\u1ef9\u1efa"+
		"\7\u0402\2\2\u1efa\u1efe\7\u04a3\2\2\u1efb\u1efc\7\u0158\2\2\u1efc\u1efe"+
		"\5:\36\2\u1efd\u1ef5\3\2\2\2\u1efd\u1ef7\3\2\2\2\u1efd\u1efb\3\2\2\2\u1efd"+
		"\u1efe\3\2\2\2\u1efe\u1fd6\3\2\2\2\u1eff\u1f00\7\u0124\2\2\u1f00\u1fd6"+
		"\7\u011e\2\2\u1f01\u1f02\7\u0124\2\2\u1f02\u1f03\t\u0087\2\2\u1f03\u1f04"+
		"\7\u03ac\2\2\u1f04\u1fd6\5\u0350\u01a9\2\u1f05\u1f06\7\u0124\2\2\u1f06"+
		"\u1f07\7x\2\2\u1f07\u1f0c\5\u03d0\u01e9\2\u1f08\u1f09\7\u00b6\2\2\u1f09"+
		"\u1f0a\5<\37\2\u1f0a\u1f0b\7\u009e\2\2\u1f0b\u1f0d\3\2\2\2\u1f0c\u1f08"+
		"\3\2\2\2\u1f0c\u1f0d\3\2\2\2\u1f0d\u1f0e\3\2\2\2\u1f0e\u1f0f\5\u00eav"+
		"\2\u1f0f\u1fd6\3\2\2\2\u1f10\u1f11\7\u0124\2\2\u1f11\u1f12\7x\2\2\u1f12"+
		"\u1f13\t\u0088\2\2\u1f13\u1fd6\5\u0350\u01a9\2\u1f14\u1f15\7\u0124\2\2"+
		"\u1f15\u1f1c\t\u0089\2\2\u1f16\u1f17\7\u00d6\2\2\u1f17\u1f18\7\u0179\2"+
		"\2\u1f18\u1f19\7\u0481\2\2\u1f19\u1f1d\7\u0179\2\2\u1f1a\u1f1b\7\u00d6"+
		"\2\2\u1f1b\u1f1d\7\u0179\2\2\u1f1c\u1f16\3\2\2\2\u1f1c\u1f1a\3\2\2\2\u1f1c"+
		"\u1f1d\3\2\2\2\u1f1d\u1fd6\3\2\2\2\u1f1e\u1f1f\7\u0124\2\2\u1f1f\u1f20"+
		"\7\u02b8\2\2\u1f20\u1f21\7\u0487\2\2\u1f21\u1f22\7\u0485\2\2\u1f22\u1f23"+
		"\7\u048e\2\2\u1f23\u1fd6\t\u0089\2\2\u1f24\u1f25\7\u0124\2\2\u1f25\u1f26"+
		"\7\u02ad\2\2\u1f26\u1f29\5\u03ca\u01e6\2\u1f27\u1f28\7\u014e\2\2\u1f28"+
		"\u1f2a\5\u041e\u0210\2\u1f29\u1f27\3\2\2\2\u1f29\u1f2a\3\2\2\2\u1f2a\u1fd6"+
		"\3\2\2\2\u1f2b\u1f2c\7\u0124\2\2\u1f2c\u1f35\5\u00f0y\2\u1f2d\u1f2e\7"+
		"\u00d7\2\2\u1f2e\u1f36\7\u04a3\2\2\u1f2f\u1f30\7\u00d7\2\2\u1f30\u1f31"+
		"\7\u04a3\2\2\u1f31\u1f32\7\u0402\2\2\u1f32\u1f36\7\u04a3\2\2\u1f33\u1f34"+
		"\7\u0158\2\2\u1f34\u1f36\5:\36\2\u1f35\u1f2d\3\2\2\2\u1f35\u1f2f\3\2\2"+
		"\2\u1f35\u1f33\3\2\2\2\u1f35\u1f36\3\2\2\2\u1f36\u1fd6\3\2\2\2\u1f37\u1f38"+
		"\7\u0124\2\2\u1f38\u1f41\t\u008a\2\2\u1f39\u1f3a\7\u00d7\2\2\u1f3a\u1f42"+
		"\7\u04a3\2\2\u1f3b\u1f3c\7\u00d7\2\2\u1f3c\u1f3d\7\u04a3\2\2\u1f3d\u1f3e"+
		"\7\u0402\2\2\u1f3e\u1f42\7\u04a3\2\2\u1f3f\u1f40\7\u0158\2\2\u1f40\u1f42"+
		"\5:\36\2\u1f41\u1f39\3\2\2\2\u1f41\u1f3b\3\2\2\2\u1f41\u1f3f\3\2\2\2\u1f41"+
		"\u1f42\3\2\2\2\u1f42\u1fd6\3\2\2\2\u1f43\u1f44\7\u0124\2\2\u1f44\u1f45"+
		"\7\u03a7\2\2\u1f45\u1f46\7\u017c\2\2\u1f46\u1f47\7\u0493\2\2\u1f47\u1f50"+
		"\7\u04a3\2\2\u1f48\u1f49\7\u00d7\2\2\u1f49\u1f51\7\u04a3\2\2\u1f4a\u1f4b"+
		"\7\u00d7\2\2\u1f4b\u1f4c\7\u04a3\2\2\u1f4c\u1f4d\7\u0402\2\2\u1f4d\u1f51"+
		"\7\u04a3\2\2\u1f4e\u1f4f\7\u0158\2\2\u1f4f\u1f51\5:\36\2\u1f50\u1f48\3"+
		"\2\2\2\u1f50\u1f4a\3\2\2\2\u1f50\u1f4e\3\2\2\2\u1f50\u1f51\3\2\2\2\u1f51"+
		"\u1fd6\3\2\2\2\u1f52\u1f54\7\u0124\2\2\u1f53\u1f55\7\u0415\2\2\u1f54\u1f53"+
		"\3\2\2\2\u1f54\u1f55\3\2\2\2\u1f55\u1f56\3\2\2\2\u1f56\u1f57\5\u03d2\u01ea"+
		"\2\u1f57\u1f58\5\u03d4\u01eb\2\u1f58\u1f5c\5\u0350\u01a9\2\u1f59\u1f5a"+
		"\5\u03d4\u01eb\2\u1f5a\u1f5b\5\u00eav\2\u1f5b\u1f5d\3\2\2\2\u1f5c\u1f59"+
		"\3\2\2\2\u1f5c\u1f5d\3\2\2\2\u1f5d\u1f62\3\2\2\2\u1f5e\u1f5f\7\u0158\2"+
		"\2\u1f5f\u1f60\5\u02d0\u0169\2\u1f60\u1f61\5:\36\2\u1f61\u1f63\3\2\2\2"+
		"\u1f62\u1f5e\3\2\2\2\u1f62\u1f63\3\2\2\2\u1f63\u1fd6\3\2\2\2\u1f64\u1f66"+
		"\7\u0124\2\2\u1f65\u1f67\7\u00aa\2\2\u1f66\u1f65\3\2\2\2\u1f66\u1f67\3"+
		"\2\2\2\u1f67\u1f68\3\2\2\2\u1f68\u1fd6\7\u0412\2\2\u1f69\u1f6b\7\u0124"+
		"\2\2\u1f6a\u1f6c\t\u0086\2\2\u1f6b\u1f6a\3\2\2\2\u1f6b\u1f6c\3\2\2\2\u1f6c"+
		"\u1f6d\3\2\2\2\u1f6d\u1f76\7\u0216\2\2\u1f6e\u1f6f\7\u00d7\2\2\u1f6f\u1f77"+
		"\7\u04a3\2\2\u1f70\u1f71\7\u00d7\2\2\u1f71\u1f72\7\u04a3\2\2\u1f72\u1f73"+
		"\7\u0402\2\2\u1f73\u1f77\7\u04a3\2\2\u1f74\u1f75\7\u0158\2\2\u1f75\u1f77"+
		"\5:\36\2\u1f76\u1f6e\3\2\2\2\u1f76\u1f70\3\2\2\2\u1f76\u1f74\3\2\2\2\u1f76"+
		"\u1f77\3\2\2\2\u1f77\u1fd6\3\2\2\2\u1f78\u1f79\7\u0124\2\2\u1f79\u1f7b"+
		"\7\u0472\2\2\u1f7a\u1f7c\7\u0216\2\2\u1f7b\u1f7a\3\2\2\2\u1f7b\u1f7c\3"+
		"\2\2\2\u1f7c\u1fd6\3\2\2\2\u1f7d\u1f7e\7\u0124\2\2\u1f7e\u1f7f\7x\2\2"+
		"\u1f7f\u1f80\7\u0472\2\2\u1f80\u1fd6\5\u05e2\u02f2\2\u1f81\u1f83\7\u0124"+
		"\2\2\u1f82\u1f84\7\u0306\2\2\u1f83\u1f82\3\2\2\2\u1f83\u1f84\3\2\2\2\u1f84"+
		"\u1f85\3\2\2\2\u1f85\u1fd6\7\u01fa\2\2\u1f86\u1f87\7\u0124\2\2\u1f87\u1fd6"+
		"\7\u0223\2\2\u1f88\u1f89\7\u0124\2\2\u1f89\u1fd6\7\u0153\2\2\u1f8a\u1f8b"+
		"\7\u0124\2\2\u1f8b\u1fd6\7\u01cd\2\2\u1f8c\u1f8d\7\u0124\2\2\u1f8d\u1fd6"+
		"\7\u03a4\2\2\u1f8e\u1f8f\7\u0124\2\2\u1f8f\u1fd6\7\u01ce\2\2\u1f90\u1f91"+
		"\7\u0124\2\2\u1f91\u1f92\7x\2\2\u1f92\u1f93\7\u013e\2\2\u1f93\u1fd6\5"+
		"\u05e2\u02f2\2\u1f94\u1f95\7\u0124\2\2\u1f95\u1f96\7\u0269\2\2\u1f96\u1fd6"+
		"\7\u01a1\2\2\u1f97\u1f98\7\u0124\2\2\u1f98\u1fa1\7\u02a0\2\2\u1f99\u1f9a"+
		"\7\u00d7\2\2\u1f9a\u1fa2\7\u04a3\2\2\u1f9b\u1f9c\7\u00d7\2\2\u1f9c\u1f9d"+
		"\7\u04a3\2\2\u1f9d\u1f9e\7\u0402\2\2\u1f9e\u1fa2\7\u04a3\2\2\u1f9f\u1fa0"+
		"\7\u0158\2\2\u1fa0\u1fa2\5:\36\2\u1fa1\u1f99\3\2\2\2\u1fa1\u1f9b\3\2\2"+
		"\2\u1fa1\u1f9f\3\2\2\2\u1fa1\u1fa2\3\2\2\2\u1fa2\u1fa6\3\2\2\2\u1fa3\u1fa4"+
		"\5\u03d4\u01eb\2\u1fa4\u1fa5\5\u00eav\2\u1fa5\u1fa7\3\2\2\2\u1fa6\u1fa3"+
		"\3\2\2\2\u1fa6\u1fa7\3\2\2\2\u1fa7\u1fd6\3\2\2\2\u1fa8\u1fa9\7\u0124\2"+
		"\2\u1fa9\u1faa\7x\2\2\u1faa\u1fab\7\u02f4\2\2\u1fab\u1fd6\5\u0412\u020a"+
		"\2\u1fac\u1fad\7\u0124\2\2\u1fad\u1fae\7\u0203\2\2\u1fae\u1faf\5\u01a2"+
		"\u00d2\2\u1faf\u1fb0\5\u03d8\u01ed\2\u1fb0\u1fd6\3\2\2\2\u1fb1\u1fb2\7"+
		"\u0124\2\2\u1fb2\u1fb3\7\u03de\2\2\u1fb3\u1fb7\7\u0205\2\2\u1fb4\u1fb5"+
		"\5\u03d4\u01eb\2\u1fb5\u1fb6\5\u00eav\2\u1fb6\u1fb8\3\2\2\2\u1fb7\u1fb4"+
		"\3\2\2\2\u1fb7\u1fb8\3\2\2\2\u1fb8\u1fc1\3\2\2\2\u1fb9\u1fba\7\u00d7\2"+
		"\2\u1fba\u1fc2\7\u04a3\2\2\u1fbb\u1fbc\7\u00d7\2\2\u1fbc\u1fbd\7\u04a3"+
		"\2\2\u1fbd\u1fbe\7\u0402\2\2\u1fbe\u1fc2\7\u04a3\2\2\u1fbf\u1fc0\7\u0158"+
		"\2\2\u1fc0\u1fc2\5:\36\2\u1fc1\u1fb9\3\2\2\2\u1fc1\u1fbb\3\2\2\2\u1fc1"+
		"\u1fbf\3\2\2\2\u1fc1\u1fc2\3\2\2\2\u1fc2\u1fd6\3\2\2\2\u1fc3\u1fc4\7\u0124"+
		"\2\2\u1fc4\u1fc5\7\u0451\2\2\u1fc5\u1fd6\7\u0216\2\2\u1fc6\u1fc7\7\u0124"+
		"\2\2\u1fc7\u1fc8\7\u0451\2\2\u1fc8\u1fc9\7\u0216\2\2\u1fc9\u1fca\7\u0158"+
		"\2\2\u1fca\u1fcb\7\u0451\2\2\u1fcb\u1fcc\7\u0493\2\2\u1fcc\u1fd6\7\u04a3"+
		"\2\2\u1fcd\u1fce\7m\2\2\u1fce\u1fcf\7\u013d\2\2\u1fcf\u1fd0\5\u028e\u0148"+
		"\2\u1fd0\u1fd1\5\u03b0\u01d9\2\u1fd1\u1fd6\3\2\2\2\u1fd2\u1fd3\7m\2\2"+
		"\u1fd3\u1fd4\7\u013d\2\2\u1fd4\u1fd6\5\u028e\u0148\2\u1fd5\u1e92\3\2\2"+
		"\2\u1fd5\u1ea9\3\2\2\2\u1fd5\u1eb8\3\2\2\2\u1fd5\u1ed1\3\2\2\2\u1fd5\u1ee3"+
		"\3\2\2\2\u1fd5\u1ef0\3\2\2\2\u1fd5\u1eff\3\2\2\2\u1fd5\u1f01\3\2\2\2\u1fd5"+
		"\u1f05\3\2\2\2\u1fd5\u1f10\3\2\2\2\u1fd5\u1f14\3\2\2\2\u1fd5\u1f1e\3\2"+
		"\2\2\u1fd5\u1f24\3\2\2\2\u1fd5\u1f2b\3\2\2\2\u1fd5\u1f37\3\2\2\2\u1fd5"+
		"\u1f43\3\2\2\2\u1fd5\u1f52\3\2\2\2\u1fd5\u1f64\3\2\2\2\u1fd5\u1f69\3\2"+
		"\2\2\u1fd5\u1f78\3\2\2\2\u1fd5\u1f7d\3\2\2\2\u1fd5\u1f81\3\2\2\2\u1fd5"+
		"\u1f86\3\2\2\2\u1fd5\u1f88\3\2\2\2\u1fd5\u1f8a\3\2\2\2\u1fd5\u1f8c\3\2"+
		"\2\2\u1fd5\u1f8e\3\2\2\2\u1fd5\u1f90\3\2\2\2\u1fd5\u1f94\3\2\2\2\u1fd5"+
		"\u1f97\3\2\2\2\u1fd5\u1fa8\3\2\2\2\u1fd5\u1fac\3\2\2\2\u1fd5\u1fb1\3\2"+
		"\2\2\u1fd5\u1fc3\3\2\2\2\u1fd5\u1fc6\3\2\2\2\u1fd5\u1fcd\3\2\2\2\u1fd5"+
		"\u1fd2\3\2\2\2\u1fd6\u03af\3\2\2\2\u1fd7\u1fd9\5\u03b2\u01da\2\u1fd8\u1fd7"+
		"\3\2\2\2\u1fd9\u1fda\3\2\2\2\u1fda\u1fd8\3\2\2\2\u1fda\u1fdb\3\2\2\2\u1fdb"+
		"\u03b1\3\2\2\2\u1fdc\u1fdd\7\u00a7\2\2\u1fdd\u1fe4\7\u01c9\2\2\u1fde\u1fe4"+
		"\7\u01f4\2\2\u1fdf\u1fe4\7\u01a0\2\2\u1fe0\u1fe4\7\u0307\2\2\u1fe1\u1fe4"+
		"\7\u0415\2\2\u1fe2\u1fe4\7\u0190\2\2\u1fe3\u1fdc\3\2\2\2\u1fe3\u1fde\3"+
		"\2\2\2\u1fe3\u1fdf\3\2\2\2\u1fe3\u1fe0\3\2\2\2\u1fe3\u1fe1\3\2\2\2\u1fe3"+
		"\u1fe2\3\2\2\2\u1fe4\u03b3\3\2\2\2\u1fe5\u1fe8\5\u03b6\u01dc\2\u1fe6\u1fe8"+
		"\5\u03c0\u01e1\2\u1fe7\u1fe5\3\2\2\2\u1fe7\u1fe6\3\2\2\2\u1fe8\u03b5\3"+
		"\2\2\2\u1fe9\u1feb\7\u00ac\2\2\u1fea\u1fec\t\u008b\2\2\u1feb\u1fea\3\2"+
		"\2\2\u1feb\u1fec\3\2\2\2\u1fec\u1fed\3\2\2\2\u1fed\u1fee\7\u0229\2\2\u1fee"+
		"\u1fef\7p\2\2\u1fef\u1ff0\5\u03b8\u01dd\2\u1ff0\u1ff1\5\u03ba\u01de\2"+
		"\u1ff1\u03b7\3\2\2\2\u1ff2\u1ff9\7\u0179\2\2\u1ff3\u1ff9\7\u04a1\2\2\u1ff4"+
		"\u1ff9\7\u04a3\2\2\u1ff5\u1ff9\7\u0476\2\2\u1ff6\u1ff9\7\u049f\2\2\u1ff7"+
		"\u1ff9\5\u05e0\u02f1\2\u1ff8\u1ff2\3\2\2\2\u1ff8\u1ff3\3\2\2\2\u1ff8\u1ff4"+
		"\3\2\2\2\u1ff8\u1ff5\3\2\2\2\u1ff8\u1ff6\3\2\2\2\u1ff8\u1ff7\3\2\2\2\u1ff9"+
		"\u03b9\3\2\2\2\u1ffa\u1fff\5\u03bc\u01df\2\u1ffb\u1ffc\7\u0481\2\2\u1ffc"+
		"\u1ffe\5\u03bc\u01df\2\u1ffd\u1ffb\3\2\2\2\u1ffe\u2001\3\2\2\2\u1fff\u1ffd"+
		"\3\2\2\2\u1fff\u2000\3\2\2\2\u2000\u03bb\3\2\2\2\u2001\u1fff\3\2\2\2\u2002"+
		"\u2006\7\u049f\2\2\u2003\u2006\7\u04a1\2\2\u2004\u2006\5\u05e0\u02f1\2"+
		"\u2005\u2002\3\2\2\2\u2005\u2003\3\2\2\2\u2005\u2004\3\2\2\2\u2006\u2007"+
		"\3\2\2\2\u2007\u2008\7\u0493\2\2\u2008\u2009\5\u03be\u01e0\2\u2009\u03bd"+
		"\3\2\2\2\u200a\u200b\t\u008c\2\2\u200b\u03bf\3\2\2\2\u200c\u200e\7\u00ac"+
		"\2\2\u200d\u200f\t\u008b\2\2\u200e\u200d\3\2\2\2\u200e\u200f\3\2\2\2\u200f"+
		"\u2010\3\2\2\2\u2010\u2011\7\u0229\2\2\u2011\u2012\5\u03c2\u01e2\2\u2012"+
		"\u03c1\3\2\2\2\u2013\u2018\5\u03c4\u01e3\2\u2014\u2015\7\u0481\2\2\u2015"+
		"\u2017\5\u03c4\u01e3\2\u2016\u2014\3\2\2\2\u2017\u201a\3\2\2\2\u2018\u2016"+
		"\3\2\2\2\u2018\u2019\3\2\2\2\u2019\u03c3\3\2\2\2\u201a\u2018\3\2\2\2\u201b"+
		"\u201f\7\u049f\2\2\u201c\u201f\7\u04a1\2\2\u201d\u201f\5\u05e0\u02f1\2"+
		"\u201e\u201b\3\2\2\2\u201e\u201c\3\2\2\2\u201e\u201d\3\2\2\2\u201f\u2020"+
		"\3\2\2\2\u2020\u2021\7\u0493\2\2\u2021\u2022\5\u03c6\u01e4\2\u2022\u03c5"+
		"\3\2\2\2\u2023\u2024\t\u008d\2\2\u2024\u03c7\3\2\2\2\u2025\u2026\t\u008e"+
		"\2\2\u2026\u03c9\3\2\2\2\u2027\u202f\5\u042a\u0216\2\u2028\u2029\7\u00a7"+
		"\2\2\u2029\u202c\7~\2\2\u202a\u202b\7\u0487\2\2\u202b\u202d\7\u048e\2"+
		"\2\u202c\u202a\3\2\2\2\u202c\u202d\3\2\2\2\u202d\u202f\3\2\2\2\u202e\u2027"+
		"\3\2\2\2\u202e\u2028\3\2\2\2\u202f\u03cb\3\2\2\2\u2030\u2032\7\u0306\2"+
		"\2\u2031\u2030\3\2\2\2\u2031\u2032\3\2\2\2\u2032\u03cd\3\2\2\2\u2033\u2034"+
		"\t\u008f\2\2\u2034\u03cf\3\2\2\2\u2035\u2036\t/\2\2\u2036\u03d1\3\2\2"+
		"\2\u2037\u2038\t\u0090\2\2\u2038\u03d3\3\2\2\2\u2039\u203a\t\u0091\2\2"+
		"\u203a\u03d5\3\2\2\2\u203b\u203c\b\u01ec\1\2\u203c\u203f\5\u0642\u0322"+
		"\2\u203d\u203f\7\u04a3\2\2\u203e\u203b\3\2\2\2\u203e\u203d\3\2\2\2\u203f"+
		"\u2045\3\2\2\2\u2040\u2041\f\3\2\2\u2041\u2042\7\u0481\2\2\u2042\u2044"+
		"\7\u04a3\2\2\u2043\u2040\3\2\2\2\u2044\u2047\3\2\2\2\u2045\u2043\3\2\2"+
		"\2\u2045\u2046\3\2\2\2\u2046\u03d7\3\2\2\2\u2047\u2045\3\2\2\2\u2048\u2049"+
		"\t\u0092\2\2\u2049\u03d9\3\2\2\2\u204a\u204b\7\u0429\2\2\u204b\u204f\7"+
		"\u04a3\2\2\u204c\u204d\7\u0429\2\2\u204d\u204f\7\u04a2\2\2\u204e\u204a"+
		"\3\2\2\2\u204e\u204c\3\2\2\2\u204f\u03db\3\2\2\2\u2050\u2051\7x\2\2\u2051"+
		"\u2052\7\u0391\2\2\u2052\u2053\5\u0192\u00ca\2\u2053\u2054\5\u03de\u01f0"+
		"\2\u2054\u03dd\3\2\2\2\u2055\u2058\5\u03f6\u01fc\2\u2056\u2058\5\u03f8"+
		"\u01fd\2\u2057\u2055\3\2\2\2\u2057\u2056\3\2\2\2\u2057\u2058\3\2\2\2\u2058"+
		"\u03df\3\2\2\2\u2059\u205b\7\u01e6\2\2\u205a\u205c\7\u0493\2\2\u205b\u205a"+
		"\3\2\2\2\u205b\u205c\3\2\2\2\u205c\u205d\3\2\2\2\u205d\u205e\7\u04a3\2"+
		"\2\u205e\u03e1\3\2\2\2\u205f\u2060\7U\2\2\u2060\u2061\7\u0209\2\2\u2061"+
		"\u207b\7\u04a3\2\2\u2062\u2063\7#\2\2\u2063\u2064\5\u01a4\u00d3\2\u2064"+
		"\u2065\7\u0179\2\2\u2065\u207b\3\2\2\2\u2066\u2067\7\u014d\2\2\u2067\u2068"+
		"\7\u0384\2\2\u2068\u2069\7\u00af\2\2\u2069\u207b\7\u04a3\2\2\u206a\u206d"+
		"\t\u0093\2\2\u206b\u206d\t\u0094\2\2\u206c\u206a\3\2\2\2\u206c\u206b\3"+
		"\2\2\2\u206d\u2070\3\2\2\2\u206e\u2070\7\u02ec\2\2\u206f\u206c\3\2\2\2"+
		"\u206f\u206e\3\2\2\2\u2070\u2071\3\2\2\2\u2071\u2072\5\u01a4\u00d3\2\u2072"+
		"\u2073\7\u0179\2\2\u2073\u207b\3\2\2\2\u2074\u207b\7\u01f7\2\2\u2075\u2076"+
		"\7\u01ed\2\2\u2076\u2077\5\u01a4\u00d3\2\u2077\u2078\7\u04a3\2\2\u2078"+
		"\u207b\3\2\2\2\u2079\u207b\5\u03e4\u01f3\2\u207a\u205f\3\2\2\2\u207a\u2062"+
		"\3\2\2\2\u207a\u2066\3\2\2\2\u207a\u206f\3\2\2\2\u207a\u2074\3\2\2\2\u207a"+
		"\u2075\3\2\2\2\u207a\u2079\3\2\2\2\u207b\u03e3\3\2\2\2\u207c\u207d\7\u0203"+
		"\2\2\u207d\u207e\5\u01a4\u00d3\2\u207e\u207f\5\u01a2\u00d2\2\u207f\u03e5"+
		"\3\2\2\2\u2080\u2081\7\u0097\2\2\u2081\u2082\7\u0391\2\2\u2082\u2084\5"+
		"\u0192\u00ca\2\u2083\u2085\5\u03e4\u01f3\2\u2084\u2083\3\2\2\2\u2084\u2085"+
		"\3\2\2\2\u2085\u03e7\3\2\2\2\u2086\u2089\5\u03ec\u01f7\2\u2087\u2089\5"+
		"\u03ee\u01f8\2\u2088\u2086\3\2\2\2\u2088\u2087\3\2\2\2\u2089\u03e9\3\2"+
		"\2\2\u208a\u208c\7\u0121\2\2\u208b\u208a\3\2\2\2\u208b\u208c\3\2\2\2\u208c"+
		"\u208d\3\2\2\2\u208d\u208e\5\u03e0\u01f1\2\u208e\u03eb\3\2\2\2\u208f\u2092"+
		"\5\u03ea\u01f6\2\u2090\u2091\7\u0481\2\2\u2091\u2093\5\u03ea\u01f6\2\u2092"+
		"\u2090\3\2\2\2\u2092\u2093\3\2\2\2\u2093\u03ed\3\2\2\2\u2094\u2096\5\u03f0"+
		"\u01f9\2\u2095\u2094\3\2\2\2\u2096\u2097\3\2\2\2\u2097\u2095\3\2\2\2\u2097"+
		"\u2098\3\2\2\2\u2098\u03ef\3\2\2\2\u2099\u209a\t\u0095\2\2\u209a\u209b"+
		"\7\u0209\2\2\u209b\u20a3\7\u04a3\2\2\u209c\u209d\7\u0424\2\2\u209d\u209e"+
		"\5\u01a4\u00d3\2\u209e\u209f\7\u0179\2\2\u209f\u20a3\3\2\2\2\u20a0\u20a3"+
		"\7\u01f7\2\2\u20a1\u20a3\5\u03e4\u01f3\2\u20a2\u2099\3\2\2\2\u20a2\u209c"+
		"\3\2\2\2\u20a2\u20a0\3\2\2\2\u20a2\u20a1\3\2\2\2\u20a3\u03f1\3\2\2\2\u20a4"+
		"\u20a5\7W\2\2\u20a5\u20a6\7\u0391\2\2\u20a6\u20a7\5\u0192\u00ca\2\u20a7"+
		"\u20a8\5\u03e8\u01f5\2\u20a8\u03f3\3\2\2\2\u20a9\u20aa\7W\2\2\u20aa\u20ab"+
		"\7\u02b3\2\2\u20ab\u20ac\7\u01e3\2\2\u20ac\u20ad\7\u038a\2\2\u20ad\u20ae"+
		"\7\u01e5\2\2\u20ae\u20af\7\u00cf\2\2\u20af\u03f5\3\2\2\2\u20b0\u20b5\5"+
		"\u03e0\u01f1\2\u20b1\u20b2\7\u0481\2\2\u20b2\u20b4\5\u03e0\u01f1\2\u20b3"+
		"\u20b1\3\2\2\2\u20b4\u20b7\3\2\2\2\u20b5\u20b3\3\2\2\2\u20b5\u20b6\3\2"+
		"\2\2\u20b6\u03f7\3\2\2\2\u20b7\u20b5\3\2\2\2\u20b8\u20ba\5\u03e2\u01f2"+
		"\2\u20b9\u20b8\3\2\2\2\u20ba\u20bb\3\2\2\2\u20bb\u20b9\3\2\2\2\u20bb\u20bc"+
		"\3\2\2\2\u20bc\u03f9\3\2\2\2\u20bd\u20be\7x\2\2\u20be\u20c3\7\u02f4\2"+
		"\2\u20bf\u20c0\7\u00b6\2\2\u20c0\u20c1\5<\37\2\u20c1\u20c2\7\u009e\2\2"+
		"\u20c2\u20c4\3\2\2\2\u20c3\u20bf\3\2\2\2\u20c3\u20c4\3\2\2\2\u20c4\u20c5"+
		"\3\2\2\2\u20c5\u20c7\5\u03fc\u01ff\2\u20c6\u20c8\5\u0404\u0203\2\u20c7"+
		"\u20c6\3\2\2\2\u20c7\u20c8\3\2\2\2\u20c8\u20cb\3\2\2\2\u20c9\u20ca\7\u015f"+
		"\2\2\u20ca\u20cc\5\u0406\u0204\2\u20cb\u20c9\3\2\2\2\u20cb\u20cc\3\2\2"+
		"\2\u20cc\u03fb\3\2\2\2\u20cd\u20d2\5\u03fe\u0200\2\u20ce\u20cf\7\u0481"+
		"\2\2\u20cf\u20d1\5\u03fe\u0200\2\u20d0\u20ce\3\2\2\2\u20d1\u20d4\3\2\2"+
		"\2\u20d2\u20d0\3\2\2\2\u20d2\u20d3\3\2\2\2\u20d3\u03fd\3\2\2\2\u20d4\u20d2"+
		"\3\2\2\2\u20d5\u20d8\5\u0400\u0201\2\u20d6\u20d8\5\u0402\u0202\2\u20d7"+
		"\u20d5\3\2\2\2\u20d7\u20d6\3\2\2\2\u20d8\u03ff\3\2\2\2\u20d9\u20db\5\u040e"+
		"\u0208\2\u20da\u20dc\7\u04a1\2\2\u20db\u20da\3\2\2\2\u20db\u20dc\3\2\2"+
		"\2\u20dc\u20e2\3\2\2\2\u20dd\u20e2\7~\2\2\u20de\u20df\7~\2\2\u20df\u20e0"+
		"\7\u0487\2\2\u20e0\u20e2\7\u048e\2\2\u20e1\u20d9\3\2\2\2\u20e1\u20dd\3"+
		"\2\2\2\u20e1\u20de\3\2\2\2\u20e2\u0401\3\2\2\2\u20e3\u20e5\5\u040e\u0208"+
		"\2\u20e4\u20e6\7\u04a1\2\2\u20e5\u20e4\3\2\2\2\u20e5\u20e6\3\2\2\2\u20e6"+
		"\u20e7\3\2\2\2\u20e7\u20ec\7\u0345\2\2\u20e8\u20e9\7\u015f\2\2\u20e9\u20ed"+
		"\7\u04a3\2\2\u20ea\u20eb\7\u015f\2\2\u20eb\u20ed\7\u04a2\2\2\u20ec\u20e8"+
		"\3\2\2\2\u20ec\u20ea\3\2\2\2\u20ec\u20ed\3\2\2\2\u20ed\u20ee\3\2\2\2\u20ee"+
		"\u20ef\7g\2\2\u20ef\u20f0\5\u0416\u020c\2\u20f0\u2118\3\2\2\2\u20f1\u20f3"+
		"\5\u040e\u0208\2\u20f2\u20f4\7\u04a1\2\2\u20f3\u20f2\3\2\2\2\u20f3\u20f4"+
		"\3\2\2\2\u20f4\u20f5\3\2\2\2\u20f5\u20fa\7\u0345\2\2\u20f6\u20f7\7\u015f"+
		"\2\2\u20f7\u20fb\7\u04a3\2\2\u20f8\u20f9\7\u015f\2\2\u20f9\u20fb\7\u04a2"+
		"\2\2\u20fa\u20f6\3\2\2\2\u20fa\u20f8\3\2\2\2\u20fa\u20fb\3\2\2\2\u20fb"+
		"\u20fc\3\2\2\2\u20fc\u20fd\7g\2\2\u20fd\u20fe\7\u0394\2\2\u20fe\u20ff"+
		"\5\u0416\u020c\2\u20ff\u2118\3\2\2\2\u2100\u2101\7~\2\2\u2101\u2106\7"+
		"\u0345\2\2\u2102\u2103\7\u015f\2\2\u2103\u2107\7\u04a3\2\2\u2104\u2105"+
		"\7\u015f\2\2\u2105\u2107\7\u04a2\2\2\u2106\u2102\3\2\2\2\u2106\u2104\3"+
		"\2\2\2\u2106\u2107\3\2\2\2\u2107\u2108\3\2\2\2\u2108\u2109\7g\2\2\u2109"+
		"\u2118\5\u0416\u020c\2\u210a\u210b\7~\2\2\u210b\u210c\7\u0487\2\2\u210c"+
		"\u210d\7\u048e\2\2\u210d\u2112\7\u0345\2\2\u210e\u210f\7\u015f\2\2\u210f"+
		"\u2113\7\u04a3\2\2\u2110\u2111\7\u015f\2\2\u2111\u2113\7\u04a2\2\2\u2112"+
		"\u210e\3\2\2\2\u2112\u2110\3\2\2\2\u2112\u2113\3\2\2\2\u2113\u2114\3\2"+
		"\2\2\u2114\u2115\7g\2\2\u2115\u2116\7\u0394\2\2\u2116\u2118\5\u0416\u020c"+
		"\2\u2117\u20e3\3\2\2\2\u2117\u20f1\3\2\2\2\u2117\u2100\3\2\2\2\u2117\u210a"+
		"\3\2\2\2\u2118\u0403\3\2\2\2\u2119\u211a\7\u0115\2\2\u211a\u211e\t\u0096"+
		"\2\2\u211b\u211c\7\u0115\2\2\u211c\u211e\5\u040a\u0206\2\u211d\u2119\3"+
		"\2\2\2\u211d\u211b\3\2\2\2\u211e\u0405\3\2\2\2\u211f\u2121\5\u0408\u0205"+
		"\2\u2120\u211f\3\2\2\2\u2121\u2122\3\2\2\2\u2122\u2120\3\2\2\2\u2122\u2123"+
		"\3\2\2\2\u2123\u0407\3\2\2\2\u2124\u2125\7\u0240\2\2\u2125\u2129\7\u0179"+
		"\2\2\u2126\u2127\7\u01da\2\2\u2127\u2129\7\u0179\2\2\u2128\u2124\3\2\2"+
		"\2\u2128\u2126\3\2\2\2\u2129\u0409\3\2\2\2\u212a\u212b\b\u0206\1\2\u212b"+
		"\u212c\5\u040c\u0207\2\u212c\u2134\3\2\2\2\u212d\u212e\f\4\2\2\u212e\u2133"+
		"\5\u040c\u0207\2\u212f\u2130\f\3\2\2\u2130\u2131\7Y\2\2\u2131\u2133\5"+
		"\u040c\u0207\2\u2132\u212d\3\2\2\2\u2132\u212f\3\2\2\2\u2133\u2136\3\2"+
		"\2\2\u2134\u2132\3\2\2\2\u2134\u2135\3\2\2\2\u2135\u040b\3\2\2\2\u2136"+
		"\u2134\3\2\2\2\u2137\u2138\t\u0097\2\2\u2138\u2139\7\u04a3\2\2\u2139\u040d"+
		"\3\2\2\2\u213a\u213e\7\u04a3\2\2\u213b\u213e\7\u04a2\2\2\u213c\u213e\5"+
		"\u0634\u031b\2\u213d\u213a\3\2\2\2\u213d\u213b\3\2\2\2\u213d\u213c\3\2"+
		"\2\2\u213e\u040f\3\2\2\2\u213f\u2141\7\u04a1\2\2\u2140\u213f\3\2\2\2\u2140"+
		"\u2141\3\2\2\2\u2141\u0411\3\2\2\2\u2142\u2144\5\u040e\u0208\2\u2143\u2145"+
		"\7\u04a1\2\2\u2144\u2143\3\2\2\2\u2144\u2145\3\2\2\2\u2145\u214b\3\2\2"+
		"\2\u2146\u214b\7~\2\2\u2147\u2148\7~\2\2\u2148\u2149\7\u0487\2\2\u2149"+
		"\u214b\7\u048e\2\2\u214a\u2142\3\2\2\2\u214a\u2146\3\2\2\2\u214a\u2147"+
		"\3\2\2\2\u214b\u0413\3\2\2\2\u214c\u214e\5\u040e\u0208\2\u214d\u214f\7"+
		"\u04a1\2\2\u214e\u214d\3\2\2\2\u214e\u214f\3\2\2\2\u214f\u2155\3\2\2\2"+
		"\u2150\u2155\7~\2\2\u2151\u2152\7~\2\2\u2152\u2153\7\u0487\2\2\u2153\u2155"+
		"\7\u048e\2\2\u2154\u214c\3\2\2\2\u2154\u2150\3\2\2\2\u2154\u2151\3\2\2"+
		"\2\u2155\u0415\3\2\2\2\u2156\u2157\7\u04a3\2\2\u2157\u0417\3\2\2\2\u2158"+
		"\u2159\7\u0097\2\2\u2159\u215c\7\u02f4\2\2\u215a\u215b\7\u00b6\2\2\u215b"+
		"\u215d\7\u009e\2\2\u215c\u215a\3\2\2\2\u215c\u215d\3\2\2\2\u215d\u215e"+
		"\3\2\2\2\u215e\u215f\5\u041a\u020e\2\u215f\u0419\3\2\2\2\u2160\u2165\5"+
		"\u0414\u020b\2\u2161\u2162\7\u0481\2\2\u2162\u2164\5\u0414\u020b\2\u2163"+
		"\u2161\3\2\2\2\u2164\u2167\3\2\2\2\u2165\u2163\3\2\2\2\u2165\u2166\3\2"+
		"\2\2\u2166\u041b\3\2\2\2\u2167\u2165\3\2\2\2\u2168\u2169\7x\2\2\u2169"+
		"\u216e\7\6\2\2\u216a\u216b\7\u00b6\2\2\u216b\u216c\5<\37\2\u216c\u216d"+
		"\7\u009e\2\2\u216d\u216f\3\2\2\2\u216e\u216a\3\2\2\2\u216e\u216f\3\2\2"+
		"\2\u216f\u2170\3\2\2\2\u2170\u2171\5\u041e\u0210\2\u2171\u041d\3\2\2\2"+
		"\u2172\u2177\5\u0424\u0213\2\u2173\u2174\7\u0481\2\2\u2174\u2176\5\u0424"+
		"\u0213\2\u2175\u2173\3\2\2\2\u2176\u2179\3\2\2\2\u2177\u2175\3\2\2\2\u2177"+
		"\u2178\3\2\2\2\u2178\u041f\3\2\2\2\u2179\u2177\3\2\2\2\u217a\u217f\5\u0400"+
		"\u0201\2\u217b\u217c\7\u0481\2\2\u217c\u217e\5\u0400\u0201\2\u217d\u217b"+
		"\3\2\2\2\u217e\u2181\3\2\2\2\u217f\u217d\3\2\2\2\u217f\u2180\3\2\2\2\u2180"+
		"\u0421\3\2\2\2\u2181\u217f\3\2\2\2\u2182\u2183\7\u0097\2\2\u2183\u2188"+
		"\7\6\2\2\u2184\u2185\7\u00b6\2\2\u2185\u2186\5<\37\2\u2186\u2187\7\u009e"+
		"\2\2\u2187\u2189\3\2\2\2\u2188\u2184\3\2\2\2\u2188\u2189\3\2\2\2\u2189"+
		"\u218a\3\2\2\2\u218a\u218b\5\u041a\u020e\2\u218b\u0423\3\2\2\2\u218c\u218e"+
		"\5\u0426\u0214\2\u218d\u218f\7\u04a1\2\2\u218e\u218d\3\2\2\2\u218e\u218f"+
		"\3\2\2\2\u218f\u0425\3\2\2\2\u2190\u2194\7\u04a3\2\2\u2191\u2194\7\u04a2"+
		"\2\2\u2192\u2194\5\u0636\u031c\2\u2193\u2190\3\2\2\2\u2193\u2191\3\2\2"+
		"\2\u2193\u2192\3\2\2\2\u2194\u0427\3\2\2\2\u2195\u2196\7\u0121\2\2\u2196"+
		"\u219b\7\u0394\2\2\u2197\u2198\7\u00a7\2\2\u2198\u2199\5\u040e\u0208\2"+
		"\u2199\u219a\5\u0410\u0209\2\u219a\u219c\3\2\2\2\u219b\u2197\3\2\2\2\u219b"+
		"\u219c\3\2\2\2\u219c\u219d\3\2\2\2\u219d\u219e\7\u0493\2\2\u219e\u21c6"+
		"\7\u04a3\2\2\u219f\u21a0\7\u0121\2\2\u21a0\u21a5\7\u0394\2\2\u21a1\u21a2"+
		"\7\u00a7\2\2\u21a2\u21a3\5\u040e\u0208\2\u21a3\u21a4\5\u0410\u0209\2\u21a4"+
		"\u21a6\3\2\2\2\u21a5\u21a1\3\2\2\2\u21a5\u21a6\3\2\2\2\u21a6\u21a7\3\2"+
		"\2\2\u21a7\u21a8\7\u0493\2\2\u21a8\u21a9\7\u0394\2\2\u21a9\u21aa\7\u0487"+
		"\2\2\u21aa\u21ab\5\u0416\u020c\2\u21ab\u21ac\7\u048e\2\2\u21ac\u21c6\3"+
		"\2\2\2\u21ad\u21ae\7W\2\2\u21ae\u21af\7\u02f4\2\2\u21af\u21b0\5\u0414"+
		"\u020b\2\u21b0\u21b5\7\u0345\2\2\u21b1\u21b2\7\u015f\2\2\u21b2\u21b6\7"+
		"\u04a3\2\2\u21b3\u21b4\7\u015f\2\2\u21b4\u21b6\7\u04a2\2\2\u21b5\u21b1"+
		"\3\2\2\2\u21b5\u21b3\3\2\2\2\u21b5\u21b6\3\2\2\2\u21b6\u21b7\3\2\2\2\u21b7"+
		"\u21b8\7g\2\2\u21b8\u21b9\5\u0416\u020c\2\u21b9\u21c6\3\2\2\2\u21ba\u21bb"+
		"\7W\2\2\u21bb\u21bc\7\u02f4\2\2\u21bc\u21bd\5\u0414\u020b\2\u21bd\u21be"+
		"\5\u0404\u0203\2\u21be\u21c6\3\2\2\2\u21bf\u21c0\7W\2\2\u21c0\u21c1\7"+
		"\u02f4\2\2\u21c1\u21c2\5\u0414\u020b\2\u21c2\u21c3\7\u015f\2\2\u21c3\u21c4"+
		"\5\u0406\u0204\2\u21c4\u21c6\3\2\2\2\u21c5\u2195\3\2\2\2\u21c5\u219f\3"+
		"\2\2\2\u21c5\u21ad\3\2\2\2\u21c5\u21ba\3\2\2\2\u21c5\u21bf\3\2\2\2\u21c6"+
		"\u0429\3\2\2\2\u21c7\u21c8\7\u00a7\2\2\u21c8\u21c9\5\u040e\u0208\2\u21c9"+
		"\u21ca\5\u0410\u0209\2\u21ca\u21cd\3\2\2\2\u21cb\u21cd\5\u0642\u0322\2"+
		"\u21cc\u21c7\3\2\2\2\u21cc\u21cb\3\2\2\2\u21cd\u042b\3\2\2\2\u21ce\u21cf"+
		"\7\u0112\2\2\u21cf\u21d0\7\u02f4\2\2\u21d0\u21d1\5\u0430\u0219\2\u21d1"+
		"\u042d\3\2\2\2\u21d2\u21d4\5\u040e\u0208\2\u21d3\u21d5\7\u04a1\2\2\u21d4"+
		"\u21d3\3\2\2\2\u21d4\u21d5\3\2\2\2\u21d5\u21d6\3\2\2\2\u21d6\u21d7\7\u0140"+
		"\2\2\u21d7\u21d9\5\u040e\u0208\2\u21d8\u21da\7\u04a1\2\2\u21d9\u21d8\3"+
		"\2\2\2\u21d9\u21da\3\2\2\2\u21da\u042f\3\2\2\2\u21db\u21e0\5\u042e\u0218"+
		"\2\u21dc\u21dd\7\u0481\2\2\u21dd\u21df\5\u042e\u0218\2\u21de\u21dc\3\2"+
		"\2\2\u21df\u21e2\3\2\2\2\u21e0\u21de\3\2\2\2\u21e0\u21e1\3\2\2\2\u21e1"+
		"\u0431\3\2\2\2\u21e2\u21e0\3\2\2\2\u21e3\u21e4\7W\2\2\u21e4\u21e5\7\u02f4"+
		"\2\2\u21e5\u21e6\5\u041a\u020e\2\u21e6\u21e7\7\u0277\2\2\u21e7\u21e8\5"+
		"\u0434\u021b\2\u21e8\u0433\3\2\2\2\u21e9\u21ea\t\u0098\2\2\u21ea\u0435"+
		"\3\2\2\2\u21eb\u21ec\7\u00e0\2\2\u21ec\u21ed\5\u028a\u0146\2\u21ed\u21ee"+
		"\5\u043a\u021e\2\u21ee\u0437\3\2\2\2\u21ef\u21f0\7\u0147\2\2\u21f0\u21f1"+
		"\7\u0205\2\2\u21f1\u0439\3\2\2\2\u21f2\u21f7\5\u043c\u021f\2\u21f3\u21f4"+
		"\7\u0481\2\2\u21f4\u21f6\5\u043c\u021f\2\u21f5\u21f3\3\2\2\2\u21f6\u21f9"+
		"\3\2\2\2\u21f7\u21f5\3\2\2\2\u21f7\u21f8\3\2\2\2\u21f8\u043b\3\2\2\2\u21f9"+
		"\u21f7\3\2\2\2\u21fa\u21fb\5\u0350\u01a9\2\u21fb\u21fc\5\u043e\u0220\2"+
		"\u21fc\u2205\3\2\2\2\u21fd\u21ff\5\u0350\u01a9\2\u21fe\u2200\7^\2\2\u21ff"+
		"\u21fe\3\2\2\2\u21ff\u2200\3\2\2\2\u2200\u2201\3\2\2\2\u2201\u2202\5\u05e2"+
		"\u02f2\2\u2202\u2203\5\u043e\u0220\2\u2203\u2205\3\2\2\2\u2204\u21fa\3"+
		"\2\2\2\u2204\u21fd\3\2\2\2\u2205\u043d\3\2\2\2\u2206\u2208\7\u010b\2\2"+
		"\u2207\u2209\7\u00dc\2\2\u2208\u2207\3\2\2\2\u2208\u2209\3\2\2\2\u2209"+
		"\u220e\3\2\2\2\u220a\u220e\7\u0160\2\2\u220b\u220c\7\u00e6\2\2\u220c\u220e"+
		"\7\u0160\2\2\u220d\u2206\3\2\2\2\u220d\u220a\3\2\2\2\u220d\u220b\3\2\2"+
		"\2\u220e\u043f\3\2\2\2\u220f\u2210\7x\2\2\u2210\u2215\7\u01ba\2\2\u2211"+
		"\u2212\7\u00b6\2\2\u2212\u2213\5<\37\2\u2213\u2214\7\u009e\2\2\u2214\u2216"+
		"\3\2\2\2\u2215\u2211\3\2\2\2\u2215\u2216\3\2\2\2\u2216\u2217\3\2\2\2\u2217"+
		"\u2219\5\u0350\u01a9\2\u2218\u221a\5\u0442\u0222\2\u2219\u2218\3\2\2\2"+
		"\u2219\u221a\3\2\2\2\u221a\u0441\3\2\2\2\u221b\u221d\5\u0444\u0223\2\u221c"+
		"\u221b\3\2\2\2\u221d\u221e\3\2\2\2\u221e\u221c\3\2\2\2\u221e\u221f\3\2"+
		"\2\2\u221f\u0443\3\2\2\2\u2220\u2221\7\u0377\2\2\u2221\u2224\7g\2\2\u2222"+
		"\u2224\7\u00ea\2\2\u2223\u2220\3\2\2\2\u2223\u2222\3\2\2\2\u2224\u2225"+
		"\3\2\2\2\u2225\u2237\5\u0446\u0224\2\u2226\u222a\7\u017d\2\2\u2227\u2228"+
		"\7\u01cb\2\2\u2228\u222a\7\u015f\2\2\u2229\u2226\3\2\2\2\u2229\u2227\3"+
		"\2\2\2\u222a\u222b\3\2\2\2\u222b\u2237\5\u0446\u0224\2\u222c\u2237\7\u0350"+
		"\2\2\u222d\u2237\7\u029c\2\2\u222e\u2237\7z\2\2\u222f\u2237\7\u0432\2"+
		"\2\u2230\u2231\7\u0330\2\2\u2231\u2237\5\u0446\u0224\2\u2232\u2237\7\u03e3"+
		"\2\2\u2233\u2237\7\u00fc\2\2\u2234\u2237\7\u043a\2\2\u2235\u2237\7\u03a6"+
		"\2\2\u2236\u2223\3\2\2\2\u2236\u2229\3\2\2\2\u2236\u222c\3\2\2\2\u2236"+
		"\u222d\3\2\2\2\u2236\u222e\3\2\2\2\u2236\u222f\3\2\2\2\u2236\u2230\3\2"+
		"\2\2\u2236\u2232\3\2\2\2\u2236\u2233\3\2\2\2\u2236\u2234\3\2\2\2\u2236"+
		"\u2235\3\2\2\2\u2237\u0445\3\2\2\2\u2238\u223c\t\3\2\2\u2239\u223a\t\n"+
		"\2\2\u223a\u223c\t\3\2\2\u223b\u2238\3\2\2\2\u223b\u2239\3\2\2\2\u223c"+
		"\u0447\3\2\2\2\u223d\u223e\7\u0097\2\2\u223e\u2241\7\u01ba\2\2\u223f\u2240"+
		"\7\u00b6\2\2\u2240\u2242\7\u009e\2\2\u2241\u223f\3\2\2\2\u2241\u2242\3"+
		"\2\2\2\u2242\u2243\3\2\2\2\u2243\u2244\5\u0350\u01a9\2\u2244\u0449\3\2"+
		"\2\2\u2245\u2246\7W\2\2\u2246\u2247\7\u01ba\2\2\u2247\u2249\5\u0350\u01a9"+
		"\2\u2248\u224a\5\u0442\u0222\2\u2249\u2248\3\2\2\2\u2249\u224a\3\2\2\2"+
		"\u224a\u044b\3\2\2\2\u224b\u224c\7x\2\2\u224c\u224d\7\u0085\2\2\u224d"+
		"\u2252\7\u046b\2\2\u224e\u224f\7\u00b6\2\2\u224f\u2250\5<\37\2\u2250\u2251"+
		"\7\u009e\2\2\u2251\u2253\3\2\2\2\u2252\u224e\3\2\2\2\u2252\u2253\3\2\2"+
		"\2\u2253\u2254\3\2\2\2\u2254\u2255\5\u05e2\u02f2\2\u2255\u2256\7\u0171"+
		"\2\2\u2256\u2257\7\u0140\2\2\u2257\u2258\5\u040e\u0208\2\u2258\u2259\7"+
		"\u04a1\2\2\u2259\u225a\7\u0085\2\2\u225a\u225b\5\u00eav\2\u225b\u225c"+
		"\7\u0345\2\2\u225c\u225d\7g\2\2\u225d\u225e\5\u0416\u020c\2\u225e\u2261"+
		"\5\u050c\u0287\2\u225f\u2260\7\u02ab\2\2\u2260\u2262\7\u04a3\2\2\u2261"+
		"\u225f\3\2\2\2\u2261\u2262\3\2\2\2\u2262\u044d\3\2\2\2\u2263\u2264\7\u0097"+
		"\2\2\u2264\u2265\7\u0085\2\2\u2265\u2268\7\u046b\2\2\u2266\u2267\7\u00b6"+
		"\2\2\u2267\u2269\7\u009e\2\2\u2268\u2266\3\2\2\2\u2268\u2269\3\2\2\2\u2269"+
		"\u226a\3\2\2\2\u226a\u226b\5\u05e2\u02f2\2\u226b\u044f\3\2\2\2\u226c\u226e"+
		"\7\u031f\2\2\u226d\u226f\7\u0480\2\2\u226e\u226d\3\2\2\2\u226e\u226f\3"+
		"\2\2\2\u226f\u2271\3\2\2\2\u2270\u2272\7\u0420\2\2\u2271\u2270\3\2\2\2"+
		"\u2271\u2272\3\2\2\2\u2272\u228a\3\2\2\2\u2273\u2275\7\u01cb\2\2\u2274"+
		"\u2276\7\u0480\2\2\u2275\u2274\3\2\2\2\u2275\u2276\3\2\2\2\u2276\u2277"+
		"\3\2\2\2\u2277\u2287\7\u01e8\2\2\u2278\u2279\7\u015f\2\2\u2279\u227a\7"+
		"\u019b\2\2\u227a\u2288\7\u026d\2\2\u227b\u2288\5\u05b8\u02dd\2\u227c\u227d"+
		"\7\u015f\2\2\u227d\u227e\7\u019b\2\2\u227e\u227f\7\u026d\2\2\u227f\u2280"+
		"\7\u0481\2\2\u2280\u2288\5\u05b8\u02dd\2\u2281\u2282\5\u05b8\u02dd\2\u2282"+
		"\u2283\7\u0481\2\2\u2283\u2284\7\u015f\2\2\u2284\u2285\7\u019b\2\2\u2285"+
		"\u2286\7\u026d\2\2\u2286\u2288\3\2\2\2\u2287\u2278\3\2\2\2\u2287\u227b"+
		"\3\2\2\2\u2287\u227c\3\2\2\2\u2287\u2281\3\2\2\2\u2287\u2288\3\2\2\2\u2288"+
		"\u228a\3\2\2\2\u2289\u226c\3\2\2\2\u2289\u2273\3\2\2\2\u228a\u0451\3\2"+
		"\2\2\u228b\u228c\7\u0299\2\2\u228c\u228d\t\u0099\2\2\u228d\u228e\7\u04a3"+
		"\2\2\u228e\u0453\3\2\2\2\u228f\u2290\7\u0299\2\2\u2290\u2291\7\u0336\2"+
		"\2\u2291\u2292\7\u04a3\2\2\u2292\u0455\3\2\2\2\u2293\u2294\7\u0299\2\2"+
		"\u2294\u2295\7\u041d\2\2\u2295\u2296\7\u04a3\2\2\u2296\u0457\3\2\2\2\u2297"+
		"\u2298\7\u0299\2\2\u2298\u2299\7\u02f1\2\2\u2299\u229a\7\u04a3\2\2\u229a"+
		"\u0459\3\2\2\2\u229b\u229c\7\u0299\2\2\u229c\u229d\7\u0234\2\2\u229d\u229e"+
		"\7\u04a3\2\2\u229e\u045b\3\2\2\2\u229f\u22a1\7\u02f1\2\2\u22a0\u22a2\7"+
		"\u0480\2\2\u22a1\u22a0\3\2\2\2\u22a1\u22a2\3\2\2\2\u22a2\u22a4\3\2\2\2"+
		"\u22a3\u22a5\7\u0420\2\2\u22a4\u22a3\3\2\2\2\u22a4\u22a5\3\2\2\2\u22a5"+
		"\u045d\3\2\2\2\u22a6\u22a8\7\u0234\2\2\u22a7\u22a9\7\u0420\2\2\u22a8\u22a7"+
		"\3\2\2\2\u22a8\u22a9\3\2\2\2\u22a9\u22b0\3\2\2\2\u22aa\u22ab\7\u0234\2"+
		"\2\u22ab\u22ad\7\u0480\2\2\u22ac\u22ae\7\u0420\2\2\u22ad\u22ac\3\2\2\2"+
		"\u22ad\u22ae\3\2\2\2\u22ae\u22b0\3\2\2\2\u22af\u22a6\3\2\2\2\u22af\u22aa"+
		"\3\2\2\2\u22b0\u045f\3\2\2\2\u22b1\u22b6\7\u00d1\2\2\u22b2\u22b4\7\u0318"+
		"\2\2\u22b3\u22b2\3\2\2\2\u22b3\u22b4\3\2\2\2\u22b4\u22b7\3\2\2\2\u22b5"+
		"\u22b7\7\u030f\2\2\u22b6\u22b3\3\2\2\2\u22b6\u22b5\3\2\2\2\u22b7\u22b8"+
		"\3\2\2\2\u22b8\u22b9\5:\36\2\u22b9\u0461\3\2\2\2\u22ba\u22bb\7\u00ae\2"+
		"\2\u22bb\u22bc\5\u0464\u0233\2\u22bc\u22be\7\u00f7\2\2\u22bd\u22bf\5\u046a"+
		"\u0236\2\u22be\u22bd\3\2\2\2\u22be\u22bf\3\2\2\2\u22bf\u22c0\3\2\2\2\u22c0"+
		"\u22c1\5\u046c\u0237\2\u22c1\u22c2\7\u0140\2\2\u22c2\u22c3\5\u03fc\u01ff"+
		"\2\u22c3\u22c4\5\u046e\u0238\2\u22c4\u22d8\3\2\2\2\u22c5\u22c6\7\u00ae"+
		"\2\2\u22c6\u22c7\5\u0464\u0233\2\u22c7\u22c8\7\u00f7\2\2\u22c8\u22c9\5"+
		"\u046a\u0236\2\u22c9\u22ca\5\u046c\u0237\2\u22ca\u22cb\7\u0140\2\2\u22cb"+
		"\u22cc\5\u03fc\u01ff\2\u22cc\u22cd\5\u046e\u0238\2\u22cd\u22d8\3\2\2\2"+
		"\u22ce\u22cf\7\u00ae\2\2\u22cf\u22d0\5\u0466\u0234\2\u22d0\u22d1\7\u0140"+
		"\2\2\u22d1\u22d5\5\u0420\u0211\2\u22d2\u22d3\7\u015f\2\2\u22d3\u22d4\7"+
		"\n\2\2\u22d4\u22d6\7\u00f8\2\2\u22d5\u22d2\3\2\2\2\u22d5\u22d6\3\2\2\2"+
		"\u22d6\u22d8\3\2\2\2\u22d7\u22ba\3\2\2\2\u22d7\u22c5\3\2\2\2\u22d7\u22ce"+
		"\3\2\2\2\u22d8\u0463\3\2\2\2\u22d9\u22df\5\u0466\u0234\2\u22da\u22dc\7"+
		"[\2\2\u22db\u22dd\7\u0223\2\2\u22dc\u22db\3\2\2\2\u22dc\u22dd\3\2\2\2"+
		"\u22dd\u22df\3\2\2\2\u22de\u22d9\3\2\2\2\u22de\u22da\3\2\2\2\u22df\u0465"+
		"\3\2\2\2\u22e0\u22e5\5\u0468\u0235\2\u22e1\u22e2\7\u0481\2\2\u22e2\u22e4"+
		"\5\u0468\u0235\2\u22e3\u22e1\3\2\2\2\u22e4\u22e7\3\2\2\2\u22e5\u22e3\3"+
		"\2\2\2\u22e5\u22e6\3\2\2\2\u22e6\u0467\3\2\2\2\u22e7\u22e5\3\2\2\2\u22e8"+
		"\u2330\5\u0424\u0213\2\u22e9\u22eb\7W\2\2\u22ea\u22ec\7\u0472\2\2\u22eb"+
		"\u22ea\3\2\2\2\u22eb\u22ec\3\2\2\2\u22ec\u2330\3\2\2\2\u22ed\u22f3\7x"+
		"\2\2\u22ee\u22ef\7\u03d9\2\2\u22ef\u22f4\7\u018a\2\2\u22f0\u22f2\7\u02f4"+
		"\2\2\u22f1\u22f0\3\2\2\2\u22f1\u22f2\3\2\2\2\u22f2\u22f4\3\2\2\2\u22f3"+
		"\u22ee\3\2\2\2\u22f3\u22f1\3\2\2\2\u22f4\u2330\3\2\2\2\u22f5\u2330\7\u008d"+
		"\2\2\u22f6\u22fa\7\u0097\2\2\u22f7\u22f8\7\u0085\2\2\u22f8\u22fb\7\u046b"+
		"\2\2\u22f9\u22fb\7\6\2\2\u22fa\u22f7\3\2\2\2\u22fa\u22f9\3\2\2\2\u22fa"+
		"\u22fb\3\2\2\2\u22fb\u2330\3\2\2\2\u22fc\u22fd\7\u00ae\2\2\u22fd\u2330"+
		"\7\u00f8\2\2\u22fe\u2330\7\u00c6\2\2\u22ff\u2330\7\u014a\2\2\u2300\u2330"+
		"\7\u011d\2\2\u2301\u2304\t\u009a\2\2\u2302\u2304\t\u009b\2\2\u2303\u2301"+
		"\3\2\2\2\u2303\u2302\3\2\2\2\u2304\u2305\3\2\2\2\u2305\u2306\7\u0487\2"+
		"\2\u2306\u2307\5\u01c6\u00e4\2\u2307\u2308\7\u048e\2\2\u2308\u2330\3\2"+
		"\2\2\u2309\u2330\7\u00b8\2\2\u230a\u230e\7x\2\2\u230b\u230c\7\u03d9\2"+
		"\2\u230c\u230f\7\u0221\2\2\u230d\u230f\7\u0275\2\2\u230e\u230b\3\2\2\2"+
		"\u230e\u230d\3\2\2\2\u230f\u2330\3\2\2\2\u2310\u2311\7\u0124\2\2\u2311"+
		"\u2330\7\u0275\2\2\u2312\u2313\7\u0124\2\2\u2313\u2330\7\u0086\2\2\u2314"+
		"\u2330\7\u02ef\2\2\u2315\u2330\7\u0254\2\2\u2316\u2330\7\u014b\2\2\u2317"+
		"\u2330\7\u021e\2\2\u2318\u2319\7W\2\2\u2319\u2330\7\u0323\2\2\u231a\u231b"+
		"\7\u02c3\2\2\u231b\u2330\7\u0352\2\2\u231c\u231d\7\u02c3\2\2\u231d\u2330"+
		"\7\u0202\2\2\u231e\u2322\7x\2\2\u231f\u2320\7\u0085\2\2\u2320\u2323\7"+
		"\u046b\2\2\u2321\u2323\7\u022e\2\2\u2322\u231f\3\2\2\2\u2322\u2321\3\2"+
		"\2\2\u2323\u2330\3\2\2\2\u2324\u2330\7\u0434\2\2\u2325\u2326\7W\2\2\u2326"+
		"\u2330\7\u022e\2\2\u2327\u2328\7x\2\2\u2328\u2330\7\u0391\2\2\u2329\u2330"+
		"\7\u0293\2\2\u232a\u2330\7\u0260\2\2\u232b\u2330\7\u0110\2\2\u232c\u232d"+
		"\7x\2\2\u232d\u2330\7\6\2\2\u232e\u2330\7\u0142\2\2\u232f\u22e8\3\2\2"+
		"\2\u232f\u22e9\3\2\2\2\u232f\u22ed\3\2\2\2\u232f\u22f5\3\2\2\2\u232f\u22f6"+
		"\3\2\2\2\u232f\u22fc\3\2\2\2\u232f\u22fe\3\2\2\2\u232f\u22ff\3\2\2\2\u232f"+
		"\u2300\3\2\2\2\u232f\u2303\3\2\2\2\u232f\u2309\3\2\2\2\u232f\u230a\3\2"+
		"\2\2\u232f\u2310\3\2\2\2\u232f\u2312\3\2\2\2\u232f\u2314\3\2\2\2\u232f"+
		"\u2315\3\2\2\2\u232f\u2316\3\2\2\2\u232f\u2317\3\2\2\2\u232f\u2318\3\2"+
		"\2\2\u232f\u231a\3\2\2\2\u232f\u231c\3\2\2\2\u232f\u231e\3\2\2\2\u232f"+
		"\u2324\3\2\2\2\u232f\u2325\3\2\2\2\u232f\u2327\3\2\2\2\u232f\u2329\3\2"+
		"\2\2\u232f\u232a\3\2\2\2\u232f\u232b\3\2\2\2\u232f\u232c\3\2\2\2\u232f"+
		"\u232e\3\2\2\2\u2330\u0469\3\2\2\2\u2331\u2332\t\u009c\2\2\u2332\u046b"+
		"\3\2\2\2\u2333\u2336\7\u0485\2\2\u2334\u2335\7\u048c\2\2\u2335\u2337\7"+
		"\u0485\2\2\u2336\u2334\3\2\2\2\u2336\u2337\3\2\2\2\u2337\u2342\3\2\2\2"+
		"\u2338\u233f\5\u05e2\u02f2\2\u2339\u233a\7\u048c\2\2\u233a\u233c\7\u0485"+
		"\2\2\u233b\u2339\3\2\2\2\u233b\u233c\3\2\2\2\u233c\u2340\3\2\2\2\u233d"+
		"\u233e\7\u048c\2\2\u233e\u2340\5\u05e2\u02f2";
	private static final String _serializedATNSegment4 =
		"\2\u233f\u233b\3\2\2\2\u233f\u233d\3\2\2\2\u2340\u2342\3\2\2\2\u2341\u2333"+
		"\3\2\2\2\u2341\u2338\3\2\2\2\u2342\u046d\3\2\2\2\u2343\u2344\7\u015f\2"+
		"\2\u2344\u2345\7\u00ae\2\2\u2345\u2348\7\u00f8\2\2\u2346\u2348\5\u0642"+
		"\u0322\2\u2347\u2343\3\2\2\2\u2347\u2346\3\2\2\2\u2348\u046f\3\2\2\2\u2349"+
		"\u234c\7\u0119\2\2\u234a\u234b\7\u00b6\2\2\u234b\u234d\7\u009e\2\2\u234c"+
		"\u234a\3\2\2\2\u234c\u234d\3\2\2\2\u234d\u234e\3\2\2\2\u234e\u234f\5\u0464"+
		"\u0233\2\u234f\u2350\7\u00f7\2\2\u2350\u2351\5\u046c\u0237\2\u2351\u2352"+
		"\7\u00a9\2\2\u2352\u2356\5\u041a\u020e\2\u2353\u2354\7\u01eb\2\2\u2354"+
		"\u2355\7\u0244\2\2\u2355\u2357\7\u02f4\2\2\u2356\u2353\3\2\2\2\u2356\u2357"+
		"\3\2\2\2\u2357\u2389\3\2\2\2\u2358\u235b\7\u0119\2\2\u2359\u235a\7\u00b6"+
		"\2\2\u235a\u235c\7\u009e\2\2\u235b\u2359\3\2\2\2\u235b\u235c\3\2\2\2\u235c"+
		"\u235d\3\2\2\2\u235d\u235e\5\u0464\u0233\2\u235e\u235f\7\u00f7\2\2\u235f"+
		"\u2360\5\u046a\u0236\2\u2360\u2361\5\u046c\u0237\2\u2361\u2362\7\u00a9"+
		"\2\2\u2362\u2366\5\u041a\u020e\2\u2363\u2364\7\u01eb\2\2\u2364\u2365\7"+
		"\u0244\2\2\u2365\u2367\7\u02f4\2\2\u2366\u2363\3\2\2\2\u2366\u2367\3\2"+
		"\2\2\u2367\u2389\3\2\2\2\u2368\u236b\7\u0119\2\2\u2369\u236a\7\u00b6\2"+
		"\2\u236a\u236c\7\u009e\2\2\u236b\u2369\3\2\2\2\u236b\u236c\3\2\2\2\u236c"+
		"\u236d\3\2\2\2\u236d\u236f\7[\2\2\u236e\u2370\7\u0223\2\2\u236f\u236e"+
		"\3\2\2\2\u236f\u2370\3\2\2\2\u2370\u2371\3\2\2\2\u2371\u2372\7\u0481\2"+
		"\2\u2372\u2373\7\u00ae\2\2\u2373\u2374\7\u00f8\2\2\u2374\u2375\7\u00a9"+
		"\2\2\u2375\u2379\5\u041a\u020e\2\u2376\u2377\7\u01eb\2\2\u2377\u2378\7"+
		"\u0244\2\2\u2378\u237a\7\u02f4\2\2\u2379\u2376\3\2\2\2\u2379\u237a\3\2"+
		"\2\2\u237a\u2389\3\2\2\2\u237b\u237e\7\u0119\2\2\u237c\u237d\7\u00b6\2"+
		"\2\u237d\u237f\7\u009e\2\2\u237e\u237c\3\2\2\2\u237e\u237f\3\2\2\2\u237f"+
		"\u2380\3\2\2\2\u2380\u2381\5\u0466\u0234\2\u2381\u2382\7\u00a9\2\2\u2382"+
		"\u2386\5\u0420\u0211\2\u2383\u2384\7\u01eb\2\2\u2384\u2385\7\u0244\2\2"+
		"\u2385\u2387\7\u02f4\2\2\u2386\u2383\3\2\2\2\u2386\u2387\3\2\2\2\u2387"+
		"\u2389\3\2\2\2\u2388\u2349\3\2\2\2\u2388\u2358\3\2\2\2\u2388\u2368\3\2"+
		"\2\2\u2388\u237b\3\2\2\2\u2389\u0471\3\2\2\2\u238a\u238b\7\u041d\2\2\u238b"+
		"\u238c\5\u0474\u023b\2\u238c\u238d\7\u00a9\2\2\u238d\u238e\5\u0476\u023c"+
		"\2\u238e\u0473\3\2\2\2\u238f\u2390\5\u05e6\u02f4\2\u2390\u0475\3\2\2\2"+
		"\u2391\u2394\5\u0152\u00aa\2\u2392\u2394\7\u04a1\2\2\u2393\u2391\3\2\2"+
		"\2\u2393\u2392\3\2\2\2\u2394\u0477\3\2\2\2\u2395\u2396\7\u0121\2\2\u2396"+
		"\u2397\5\u047c\u023f\2\u2397\u0479\3\2\2\2\u2398\u239d\5\u0482\u0242\2"+
		"\u2399\u239a\7\u0481\2\2\u239a\u239c\5\u0482\u0242\2\u239b\u2399\3\2\2"+
		"\2\u239c\u239f\3\2\2\2\u239d\u239b\3\2\2\2\u239d\u239e\3\2\2\2\u239e\u047b"+
		"\3\2\2\2\u239f\u239d\3\2\2\2\u23a0\u23a5\5\u0480\u0241\2\u23a1\u23a2\7"+
		"\u0481\2\2\u23a2\u23a4\5\u0480\u0241\2\u23a3\u23a1\3\2\2\2\u23a4\u23a7"+
		"\3\2\2\2\u23a5\u23a3\3\2\2\2\u23a5\u23a6\3\2\2\2\u23a6\u047d\3\2\2\2\u23a7"+
		"\u23a5\3\2\2\2\u23a8\u23ad\5:\36\2\u23a9\u23ad\7\u00f7\2\2\u23aa\u23ad"+
		"\7d\2\2\u23ab\u23ad\7\u008b\2\2\u23ac\u23a8\3\2\2\2\u23ac\u23a9\3\2\2"+
		"\2\u23ac\u23aa\3\2\2\2\u23ac\u23ab\3\2\2\2\u23ad\u047f\3\2\2\2\u23ae\u23b1"+
		"\7\u04a1\2\2\u23af\u23b2\7\u0494\2\2\u23b0\u23b2\5\u0486\u0244\2\u23b1"+
		"\u23af\3\2\2\2\u23b1\u23b0\3\2\2\2\u23b2\u23b3\3\2\2\2\u23b3\u23cb\5:"+
		"\36\2\u23b4\u23cb\5\u0482\u0242\2\u23b5\u23ba\7\u04a0\2\2\u23b6\u23b7"+
		"\5\u0484\u0243\2\u23b7\u23b8\5\u05e0\u02f1\2\u23b8\u23ba\3\2\2\2\u23b9"+
		"\u23b5\3\2\2\2\u23b9\u23b6\3\2\2\2\u23ba\u23bb\3\2\2\2\u23bb\u23bc\5\u0486"+
		"\u0244\2\u23bc\u23bd\5\u047e\u0240\2\u23bd\u23cb\3\2\2\2\u23be\u23bf\7"+
		"\u04a0\2\2\u23bf\u23c0\5\u0486\u0244\2\u23c0\u23c1\5\u047e\u0240\2\u23c1"+
		"\u23cb\3\2\2\2\u23c2\u23c3\7\u02ba\2\2\u23c3\u23c5\5\u017e\u00c0\2\u23c4"+
		"\u23c6\5\u0180\u00c1\2\u23c5\u23c4\3\2\2\2\u23c5\u23c6\3\2\2\2\u23c6\u23cb"+
		"\3\2\2\2\u23c7\u23c8\5\u00f0y\2\u23c8\u23c9\5\u017e\u00c0\2\u23c9\u23cb"+
		"\3\2\2\2\u23ca\u23ae\3\2\2\2\u23ca\u23b4\3\2\2\2\u23ca\u23b9\3\2\2\2\u23ca"+
		"\u23be\3\2\2\2\u23ca\u23c2\3\2\2\2\u23ca\u23c7\3\2\2\2\u23cb\u0481\3\2"+
		"\2\2\u23cc\u23cf\5\u05da\u02ee\2\u23cd\u23d0\7\u0494\2\2\u23ce\u23d0\5"+
		"\u0486\u0244\2\u23cf\u23cd\3\2\2\2\u23cf\u23ce\3\2\2\2\u23d0\u23d1\3\2"+
		"\2\2\u23d1\u23d2\5\u047e\u0240\2\u23d2\u0483\3\2\2\2\u23d3\u23da\7\u0291"+
		"\2\2\u23d4\u23da\7\u0430\2\2\u23d5\u23d6\7\u0165\2\2\u23d6\u23da\7\u048c"+
		"\2\2\u23d7\u23d8\7\u0166\2\2\u23d8\u23da\7\u048c\2\2\u23d9\u23d3\3\2\2"+
		"\2\u23d9\u23d4\3\2\2\2\u23d9\u23d5\3\2\2\2\u23d9\u23d7\3\2\2\2\u23da\u0485"+
		"\3\2\2\2\u23db\u23dc\t\u009d\2\2\u23dc\u0487\3\2\2\2\u23dd\u23de\7\u0121"+
		"\2\2\u23de\u23df\7\6\2\2\u23df\u23ef\5\u048c\u0247\2\u23e0\u23e1\7\u0121"+
		"\2\2\u23e1\u23e2\7\u008b\2\2\u23e2\u23e3\7\6\2\2\u23e3\u23e4\5\u048a\u0246"+
		"\2\u23e4\u23e5\7\u0140\2\2\u23e5\u23e6\5\u041a\u020e\2\u23e6\u23ef\3\2"+
		"\2\2\u23e7\u23e8\7W\2\2\u23e8\u23e9\7\u02f4\2\2\u23e9\u23ea\5\u0414\u020b"+
		"\2\u23ea\u23eb\7\u008b\2\2\u23eb\u23ec\7\6\2\2\u23ec\u23ed\5\u048a\u0246"+
		"\2\u23ed\u23ef\3\2\2\2\u23ee\u23dd\3\2\2\2\u23ee\u23e0\3\2\2\2\u23ee\u23e7"+
		"\3\2\2\2\u23ef\u0489\3\2\2\2\u23f0\u23f4\5\u041e\u0210\2\u23f1\u23f4\7"+
		"\u0411\2\2\u23f2\u23f4\7[\2\2\u23f3\u23f0\3\2\2\2\u23f3\u23f1\3\2\2\2"+
		"\u23f3\u23f2\3\2\2\2\u23f4\u048b\3\2\2\2\u23f5\u23fb\5\u048a\u0246\2\u23f6"+
		"\u23f7\7[\2\2\u23f7\u23f8\7\u0173\2\2\u23f8\u23fb\5\u0464\u0233\2\u23f9"+
		"\u23fb\7\u008b\2\2\u23fa\u23f5\3\2\2\2\u23fa\u23f6\3\2\2\2\u23fa\u23f9"+
		"\3\2\2\2\u23fb\u048d\3\2\2\2\u23fc\u23fd\7\u0434\2\2\u23fd\u2400\5\u0474"+
		"\u023b\2\u23fe\u23ff\7\u014e\2\2\u23ff\u2401\5\u0490\u0249\2\u2400\u23fe"+
		"\3\2\2\2\u2400\u2401\3\2\2\2\u2401\u048f\3\2\2\2\u2402\u2407\5\u0492\u024a"+
		"\2\u2403\u2404\7\u0481\2\2\u2404\u2406\5\u0492\u024a\2\u2405\u2403\3\2"+
		"\2\2\u2406\u2409\3\2\2\2\u2407\u2405\3\2\2\2\u2407\u2408\3\2\2\2\u2408"+
		"\u0491\3\2\2\2\u2409\u2407\3\2\2\2\u240a\u240b\7\u04a1\2\2\u240b\u0493"+
		"\3\2\2\2\u240c\u240d\5\u0496\u024c\2\u240d\u240e\7\u041d\2\2\u240e\u240f"+
		"\5\u0474\u023b\2\u240f\u0495\3\2\2\2\u2410\u2411\t\u009e\2\2\u2411\u0497"+
		"\3\2\2\2\u2412\u2414\7\u01a3\2\2\u2413\u2415\7\u013d\2\2\u2414\u2413\3"+
		"\2\2\2\u2414\u2415\3\2\2\2\u2415\u2416\3\2\2\2\u2416\u2417\5\u0350\u01a9"+
		"\2\u2417\u0499\3\2\2\2\u2418\u2419\5\u049c\u024f\2\u2419\u241a\5\u049e"+
		"\u0250\2\u241a\u049b\3\2\2\2\u241b\u241c\t\u009f\2\2\u241c\u049d\3\2\2"+
		"\2\u241d\u2422\5\u04a0\u0251\2\u241e\u2423\5\u04ac\u0257\2\u241f\u2421"+
		"\5\u04a4\u0253\2\u2420\u241f\3\2\2\2\u2420\u2421\3\2\2\2\u2421\u2423\3"+
		"\2\2\2\u2422\u241e\3\2\2\2\u2422\u2420\3\2\2\2\u2423\u2424\3\2\2\2\u2424"+
		"\u2425\5\u04ae\u0258\2\u2425\u049f\3\2\2\2\u2426\u242c\5\u04a2\u0252\2"+
		"\u2427\u2429\7[\2\2\u2428\u242a\7\u01c6\2\2\u2429\u2428\3\2\2\2\u2429"+
		"\u242a\3\2\2\2\u242a\u242c\3\2\2\2\u242b\u2426\3\2\2\2\u242b\u2427\3\2"+
		"\2\2\u242c\u04a1\3\2\2\2\u242d\u2432\5\u04b4\u025b\2\u242e\u242f\7\u0481"+
		"\2\2\u242f\u2431\5\u04b4\u025b\2\u2430\u242e\3\2\2\2\u2431\u2434\3\2\2"+
		"\2\u2432\u2430\3\2\2\2\u2432\u2433\3\2\2\2\u2433\u04a3\3\2\2\2\u2434\u2432"+
		"\3\2\2\2\u2435\u2436\7\u00f7\2\2\u2436\u243a\5\u0356\u01ac\2\u2437\u2438"+
		"\7\u00f7\2\2\u2438\u243a\7\u008b\2\2\u2439\u2435\3\2\2\2\u2439\u2437\3"+
		"\2\2\2\u243a\u04a5\3\2\2\2\u243b\u2440\5\u04a8\u0255\2\u243c\u243d\7\u0481"+
		"\2\2\u243d\u243f\5\u04a8\u0255\2\u243e\u243c\3\2\2\2\u243f\u2442\3\2\2"+
		"\2\u2440\u243e\3\2\2\2\u2440\u2441\3\2\2\2\u2441\u04a7\3\2\2\2\u2442\u2440"+
		"\3\2\2\2\u2443\u2445\5\u04aa\u0256\2\u2444\u2446\7\u04a1\2\2\u2445\u2444"+
		"\3\2\2\2\u2445\u2446\3\2\2\2\u2446\u04a9\3\2\2\2\u2447\u244b\7\u04a3\2"+
		"\2\u2448\u244b\7\u04a2\2\2\u2449\u244b\5\u0638\u031d\2\u244a\u2447\3\2"+
		"\2\2\u244a\u2448\3\2\2\2\u244a\u2449\3\2\2\2\u244b\u04ab\3\2\2\2\u244c"+
		"\u244d\7g\2\2\u244d\u244e\5\u04a6\u0254\2\u244e\u04ad\3\2\2\2\u244f\u2456"+
		"\5\u0642\u0322\2\u2450\u2452\5\u04b0\u0259\2\u2451\u2453\5\u04b2\u025a"+
		"\2\u2452\u2451\3\2\2\2\u2452\u2453\3\2\2\2\u2453\u2456\3\2\2\2\u2454\u2456"+
		"\5\u04b2\u025a\2\u2455\u244f\3\2\2\2\u2455\u2450\3\2\2\2\u2455\u2454\3"+
		"\2\2\2\u2456\u04af\3\2\2\2\u2457\u2458\7g\2\2\u2458\u2459\7R\2\2\u2459"+
		"\u04b1\3\2\2\2\u245a\u245c\7\u0417\2\2\u245b\u245d\7\u0177\2\2\u245c\u245b"+
		"\3\2\2\2\u245c\u245d\3\2\2\2\u245d\u245e\3\2\2\2\u245e\u245f\7\u045d\2"+
		"\2\u245f\u04b3\3\2\2\2\u2460\u2462\7W\2\2\u2461\u2463\7\u0323\2\2\u2462"+
		"\u2461\3\2\2\2\u2462\u2463\3\2\2\2\u2463\u24a3\3\2\2\2\u2464\u24a3\7\u02ab"+
		"\2\2\u2465\u24a3\7\u024d\2\2\u2466\u2468\7\u041e\2\2\u2467\u2466\3\2\2"+
		"\2\u2467\u2468\3\2\2\2\u2468\u2469\3\2\2\2\u2469\u24a3\7\u0275\2\2\u246a"+
		"\u246b\7\u0177\2\2\u246b\u24a3\7\u009e\2\2\u246c\u24a3\7\u034e\2\2\u246d"+
		"\u246f\7\u0434\2\2\u246e\u246d\3\2\2\2\u246e\u246f\3\2\2\2\u246f\u2470"+
		"\3\2\2\2\u2470\u24a3\7\u0102\2\2\u2471\u24a3\7\u03a4\2\2\u2472\u24a3\7"+
		"\u0430\2\2\u2473\u2475\7\u0323\2\2\u2474\u2473\3\2\2\2\u2474\u2475\3\2"+
		"\2\2\u2475\u2476\3\2\2\2\u2476\u24a3\7\u017a\2\2\u2477\u2479\7\u0323\2"+
		"\2\u2478\u2477\3\2\2\2\u2478\u2479\3\2\2\2\u2479\u247a\3\2\2\2\u247a\u24a3"+
		"\7\u00ae\2\2\u247b\u247d\7W\2\2\u247c\u247b\3\2\2\2\u247c\u247d\3\2\2"+
		"\2\u247d\u247e\3\2\2\2\u247e\u24a3\7\u013d\2\2\u247f\u24a3\7\u0391\2\2"+
		"\u2480\u24a3\7\u0142\2\2\u2481\u2483\7\u00ae\2\2\u2482\u2481\3\2\2\2\u2482"+
		"\u2483\3\2\2\2\u2483\u2484\3\2\2\2\u2484\u24a3\7\u0413\2\2\u2485\u24a3"+
		"\7\u02f4\2\2\u2486\u2488\7\u01ed\2\2\u2487\u2489\7\u013d\2\2\u2488\u2487"+
		"\3\2\2\2\u2488\u2489\3\2\2\2\u2489\u24a3\3\2\2\2\u248a\u248c\7\u008d\2"+
		"\2\u248b\u248d\7\u013d\2\2\u248c\u248b\3\2\2\2\u248c\u248d\3\2\2\2\u248d"+
		"\u24a3\3\2\2\2\u248e\u248f\7\u00ae\2\2\u248f\u24a3\7\u0102\2\2\u2490\u2491"+
		"\7\u00ae\2\2\u2491\u24a3\7\u013d\2\2\u2492\u2494\7\u00c6\2\2\u2493\u2495"+
		"\7\u013d\2\2\u2494\u2493\3\2\2\2\u2494\u2495\3\2\2\2\u2495\u24a3\3\2\2"+
		"\2\u2496\u2498\7\u011d\2\2\u2497\u2499\7\u013d\2\2\u2498\u2497\3\2\2\2"+
		"\u2498\u2499\3\2\2\2\u2499\u24a3\3\2\2\2\u249a\u249c\7\u014a\2\2\u249b"+
		"\u249d\7\u013d\2\2\u249c\u249b\3\2\2\2\u249c\u249d\3\2\2\2\u249d\u24a3"+
		"\3\2\2\2\u249e\u24a3\7\u0434\2\2\u249f\u24a3\7\u0358\2\2\u24a0\u24a3\7"+
		"\u00b8\2\2\u24a1\u24a3\7\u0112\2\2\u24a2\u2460\3\2\2\2\u24a2\u2464\3\2"+
		"\2\2\u24a2\u2465\3\2\2\2\u24a2\u2467\3\2\2\2\u24a2\u246a\3\2\2\2\u24a2"+
		"\u246c\3\2\2\2\u24a2\u246e\3\2\2\2\u24a2\u2471\3\2\2\2\u24a2\u2472\3\2"+
		"\2\2\u24a2\u2474\3\2\2\2\u24a2\u2478\3\2\2\2\u24a2\u247c\3\2\2\2\u24a2"+
		"\u247f\3\2\2\2\u24a2\u2480\3\2\2\2\u24a2\u2482\3\2\2\2\u24a2\u2485\3\2"+
		"\2\2\u24a2\u2486\3\2\2\2\u24a2\u248a\3\2\2\2\u24a2\u248e\3\2\2\2\u24a2"+
		"\u2490\3\2\2\2\u24a2\u2492\3\2\2\2\u24a2\u2496\3\2\2\2\u24a2\u249a\3\2"+
		"\2\2\u24a2\u249e\3\2\2\2\u24a2\u249f\3\2\2\2\u24a2\u24a0\3\2\2\2\u24a2"+
		"\u24a1\3\2\2\2\u24a3\u04b5\3\2\2\2\u24a4\u24a5\7\u0112\2\2\u24a5\u24a6"+
		"\7\u013d\2\2\u24a6\u24a7\5\u04b8\u025d\2\u24a7\u04b7\3\2\2\2\u24a8\u24ad"+
		"\5\u04ba\u025e\2\u24a9\u24aa\7\u0481\2\2\u24aa\u24ac\5\u04ba\u025e\2\u24ab"+
		"\u24a9\3\2\2\2\u24ac\u24af\3\2\2\2\u24ad\u24ab\3\2\2\2\u24ad\u24ae\3\2"+
		"\2\2\u24ae\u04b9\3\2\2\2\u24af\u24ad\3\2\2\2\u24b0\u24b1\5\u0350\u01a9"+
		"\2\u24b1\u24b2\7\u0140\2\2\u24b2\u24b3\5\u0350\u01a9\2\u24b3\u04bb\3\2"+
		"\2\2\u24b4\u24b6\7W\2\2\u24b5\u24b7\7\u0239\2\2\u24b6\u24b5\3\2\2\2\u24b6"+
		"\u24b7\3\2\2\2\u24b7\u24b8\3\2\2\2\u24b8\u24b9\7\u013d\2\2\u24b9\u24bb"+
		"\5\u0350\u01a9\2\u24ba\u24bc\5\u04c4\u0263\2\u24bb\u24ba\3\2\2\2\u24bb"+
		"\u24bc\3\2\2\2\u24bc\u24c9\3\2\2\2\u24bd\u24be\7W\2\2\u24be\u24bf\7\u013d"+
		"\2\2\u24bf\u24c0\5\u0350\u01a9\2\u24c0\u24c1\5\u04da\u026e\2\u24c1\u24c9"+
		"\3\2\2\2\u24c2\u24c3\7W\2\2\u24c3\u24c4\7\u0239\2\2\u24c4\u24c5\7\u013d"+
		"\2\2\u24c5\u24c6\5\u0350\u01a9\2\u24c6\u24c7\5\u04be\u0260\2\u24c7\u24c9"+
		"\3\2\2\2\u24c8\u24b4\3\2\2\2\u24c8\u24bd\3\2\2\2\u24c8\u24c2\3\2\2\2\u24c9"+
		"\u04bd\3\2\2\2\u24ca\u24cb\7U\2\2\u24cb\u24cc\7\u0106\2\2\u24cc\u24ce"+
		"\7\u0487\2\2\u24cd\u24cf\5\u04c0\u0261\2\u24ce\u24cd\3\2\2\2\u24ce\u24cf"+
		"\3\2\2\2\u24cf\u24d0\3\2\2\2\u24d0\u24d1\7\u048e\2\2\u24d1\u24d2\7\u018e"+
		"\2\2\u24d2\u24d8\7\u04a3\2\2\u24d3\u24d4\7\u0097\2\2\u24d4\u24d5\7\u0106"+
		"\2\2\u24d5\u24d6\7\u018e\2\2\u24d6\u24d8\7\u04a3\2\2\u24d7\u24ca\3\2\2"+
		"\2\u24d7\u24d3\3\2\2\2\u24d8\u04bf\3\2\2\2\u24d9\u24da\b\u0261\1\2\u24da"+
		"\u24db\5\u04c2\u0262\2\u24db\u24e1\3\2\2\2\u24dc\u24dd\f\3\2\2\u24dd\u24de"+
		"\7\u0481\2\2\u24de\u24e0\5\u04c2\u0262\2\u24df\u24dc\3\2\2\2\u24e0\u24e3"+
		"\3\2\2\2\u24e1\u24df\3\2\2\2\u24e1\u24e2\3\2\2\2\u24e2\u04c1\3\2\2\2\u24e3"+
		"\u24e1\3\2\2\2\u24e4\u24e5\5\u05e0\u02f1\2\u24e5\u24e6\5\u01a4\u00d3\2"+
		"\u24e6\u24e7\5*\26\2\u24e7\u04c3\3\2\2\2\u24e8\u24e9\b\u0263\1\2\u24e9"+
		"\u24ea\5\u04c6\u0264\2\u24ea\u24f0\3\2\2\2\u24eb\u24ec\f\3\2\2\u24ec\u24ed"+
		"\7\u0481\2\2\u24ed\u24ef\5\u04c6\u0264\2\u24ee\u24eb\3\2\2\2\u24ef\u24f2"+
		"\3\2\2\2\u24f0\u24ee\3\2\2\2\u24f0\u24f1\3\2\2\2\u24f1\u04c5\3\2\2\2\u24f2"+
		"\u24f0\3\2\2\2\u24f3\u24f5\7\u0121\2\2\u24f4\u24f3\3\2\2\2\u24f4\u24f5"+
		"\3\2\2\2\u24f5\u24f6\3\2\2\2\u24f6\u250b\5\u018c\u00c7\2\u24f7\u24f8\7"+
		"s\2\2\u24f8\u24f9\7\u0140\2\2\u24f9\u24fa\7l\2\2\u24fa\u24fb\7\u0121\2"+
		"\2\u24fb\u24fd\5\u017c\u00bf\2\u24fc\u24fe\5\u0180\u00c1\2\u24fd\u24fc"+
		"\3\2\2\2\u24fd\u24fe\3\2\2\2\u24fe\u250b\3\2\2\2\u24ff\u250b\5\u04dc\u026f"+
		"\2\u2500\u250b\5\u04de\u0270\2\u2501\u2503\7\u0112\2\2\u2502\u2504\7\u0140"+
		"\2\2\u2503\u2502\3\2\2\2\u2503\u2504\3\2\2\2\u2504\u2505\3\2\2\2\u2505"+
		"\u250b\5\u0350\u01a9\2\u2506\u250b\5\u04d6\u026c\2\u2507\u250b\5\u04ca"+
		"\u0266\2\u2508\u250b\5\u04c8\u0265\2\u2509\u250b\7\u039b\2\2\u250a\u24f4"+
		"\3\2\2\2\u250a\u24f7\3\2\2\2\u250a\u24ff\3\2\2\2\u250a\u2500\3\2\2\2\u250a"+
		"\u2501\3\2\2\2\u250a\u2506\3\2\2\2\u250a\u2507\3\2\2\2\u250a\u2508\3\2"+
		"\2\2\u250a\u2509\3\2\2\2\u250b\u04c7\3\2\2\2\u250c\u250d\7U\2\2\u250d"+
		"\u2529\5\u0126\u0094\2\u250e\u250f\7U\2\2\u250f\u2510\7\u0487\2\2\u2510"+
		"\u2511\5\u0126\u0094\2\u2511\u2512\7\u048e\2\2\u2512\u2529\3\2\2\2\u2513"+
		"\u2514\7\u0097\2\2\u2514\u2515\t\u00a0\2\2\u2515\u2516\7\u0487\2\2\u2516"+
		"\u2517\5\u02f8\u017d\2\u2517\u2518\7\u048e\2\2\u2518\u2529\3\2\2\2\u2519"+
		"\u251a\7\u0097\2\2\u251a\u251b\t\u00a0\2\2\u251b\u2529\5\u025c\u012f\2"+
		"\u251c\u251d\7\u0097\2\2\u251d\u251e\7\u00a3\2\2\u251e\u251f\7\u00cf\2"+
		"\2\u251f\u2529\5\u0256\u012c\2\u2520\u2521\7\u0097\2\2\u2521\u2522\7\u0108"+
		"\2\2\u2522\u2529\7\u00cf\2\2\u2523\u2524\7W\2\2\u2524\u2525\t\u00a0\2"+
		"\2\u2525\u2526\5\u025c\u012f\2\u2526\u2527\5\u0258\u012d\2\u2527\u2529"+
		"\3\2\2\2\u2528\u250c\3\2\2\2\u2528\u250e\3\2\2\2\u2528\u2513\3\2\2\2\u2528"+
		"\u2519\3\2\2\2\u2528\u251c\3\2\2\2\u2528\u2520\3\2\2\2\u2528\u2523\3\2"+
		"\2\2\u2529\u04c9\3\2\2\2\u252a\u252b\7\u0097\2\2\u252b\u252c\t\u00a1\2"+
		"\2\u252c\u2546\5\u04d0\u0269\2\u252d\u252e\7U\2\2\u252e\u252f\7\u0106"+
		"\2\2\u252f\u2546\5\u04cc\u0267\2\u2530\u2546\5\u04d2\u026a\2\u2531\u2532"+
		"\7\u02e3\2\2\u2532\u2533\7\u0106\2\2\u2533\u2534\5\u02f8\u017d\2\u2534"+
		"\u2535\7\u00c8\2\2\u2535\u2536\5\u04cc\u0267\2\u2536\u2546\3\2\2\2\u2537"+
		"\u2538\7\u01a3\2\2\u2538\u2539\t\u00a1\2\2\u2539\u2546\5\u02f8\u017d\2"+
		"\u253a\u253b\7\u02c5\2\2\u253b\u2546\7\u02ed\2\2\u253c\u253d\7\u02ac\2"+
		"\2\u253d\u253e\7\u0106\2\2\u253e\u253f\5\u05e2\u02f2\2\u253f\u2540\7\u015f"+
		"\2\2\u2540\u2541\7\u013d\2\2\u2541\u2542\5\u0350\u01a9\2\u2542\u2543\7"+
		"E\2\2\u2543\u2544\7\66\2\2\u2544\u2546\3\2\2\2\u2545\u252a\3\2\2\2\u2545"+
		"\u252d\3\2\2\2\u2545\u2530\3\2\2\2\u2545\u2531\3\2\2\2\u2545\u2537\3\2"+
		"\2\2\u2545\u253a\3\2\2\2\u2545\u253c\3\2\2\2\u2546\u04cb\3\2\2\2\u2547"+
		"\u254a\5\u01d6\u00ec\2\u2548\u254a\5\u01dc\u00ef\2\u2549\u2547\3\2\2\2"+
		"\u2549\u2548\3\2\2\2\u254a\u04cd\3\2\2\2\u254b\u254c\7\u0097\2\2\u254c"+
		"\u254d\t\u00a1\2\2\u254d\u255c\5\u04d0\u0269\2\u254e\u254f\7U\2\2\u254f"+
		"\u2550\7\u0106\2\2\u2550\u255c\5\u04cc\u0267\2\u2551\u255c\5\u04d4\u026b"+
		"\2\u2552\u2553\7\u02e3\2\2\u2553\u2554\7\u0106\2\2\u2554\u2555\5\u02f8"+
		"\u017d\2\u2555\u2556\7\u00c8\2\2\u2556\u2557\5\u04cc\u0267\2\u2557\u255c"+
		"\3\2\2\2\u2558\u2559\7\u01a3\2\2\u2559\u255a\7\u0106\2\2\u255a\u255c\5"+
		"\u02f8\u017d\2\u255b\u254b\3\2\2\2\u255b\u254e\3\2\2\2\u255b\u2551\3\2"+
		"\2\2\u255b\u2552\3\2\2\2\u255b\u2558\3\2\2\2\u255c\u04cf\3\2\2\2\u255d"+
		"\u2563\5\u02f8\u017d\2\u255e\u255f\7\u0487\2\2\u255f\u2560\5\u02f8\u017d"+
		"\2\u2560\u2561\7\u048e\2\2\u2561\u2563\3\2\2\2\u2562\u255d\3\2\2\2\u2562"+
		"\u255e\3\2\2\2\u2563\u04d1\3\2\2\2\u2564\u2569\5\u01b6\u00dc\2\u2565\u2569"+
		"\5\u01ba\u00de\2\u2566\u2569\5\u01bc\u00df\2\u2567\u2569\5\u01b8\u00dd"+
		"\2\u2568\u2564\3\2\2\2\u2568\u2565\3\2\2\2\u2568\u2566\3\2\2\2\u2568\u2567"+
		"\3\2\2\2\u2569\u04d3\3\2\2\2\u256a\u256f\5\u0202\u0102\2\u256b\u256f\5"+
		"\u0204\u0103\2\u256c\u256f\5\u0206\u0104\2\u256d\u256f\5\u0208\u0105\2"+
		"\u256e\u256a\3\2\2\2\u256e\u256b\3\2\2\2\u256e\u256c\3\2\2\2\u256e\u256d"+
		"\3\2\2\2\u256f\u04d5\3\2\2\2\u2570\u2571\7U\2\2\u2571\u2589\5\u012a\u0096"+
		"\2\u2572\u2573\7U\2\2\u2573\u2574\7\u0487\2\2\u2574\u2575\5\u012a\u0096"+
		"\2\u2575\u2576\7\u048e\2\2\u2576\u2589\3\2\2\2\u2577\u2578\7\u0097\2\2"+
		"\u2578\u2579\5\u0344\u01a3\2\u2579\u257a\5\u0256\u012c\2\u257a\u2589\3"+
		"\2\2\2\u257b\u257c\7W\2\2\u257c\u257d\7\u00b8\2\2\u257d\u2580\5\u0256"+
		"\u012c\2\u257e\u2581\5\u019a\u00ce\2\u257f\u2581\5\u04d8\u026d\2\u2580"+
		"\u257e\3\2\2\2\u2580\u257f\3\2\2\2\u2581\u2589\3\2\2\2\u2582\u2583\7\u0112"+
		"\2\2\u2583\u2584\5\u0344\u01a3\2\u2584\u2585\5\u0256\u012c\2\u2585\u2586"+
		"\7\u0140\2\2\u2586\u2587\5\u0256\u012c\2\u2587\u2589\3\2\2\2\u2588\u2570"+
		"\3\2\2\2\u2588\u2572\3\2\2\2\u2588\u2577\3\2\2\2\u2588\u257b\3\2\2\2\u2588"+
		"\u2582\3\2\2\2\u2589\u04d7\3\2\2\2\u258a\u258b\t\u00a2\2\2\u258b\u04d9"+
		"\3\2\2\2\u258c\u258d\t\u0095\2\2\u258d\u258e\7u\2\2\u258e\u258f\7\u00af"+
		"\2\2\u258f\u2590\7\u0487\2\2\u2590\u2591\5\u01ac\u00d7\2\u2591\u2592\7"+
		"\u048e\2\2\u2592\u04db\3\2\2\2\u2593\u2595\7U\2\2\u2594\u2596\7u\2\2\u2595"+
		"\u2594\3\2\2\2\u2595\u2596\3\2\2\2\u2596\u2597\3\2\2\2\u2597\u25c7\5\u0138"+
		"\u009d\2\u2598\u259a\7U\2\2\u2599\u259b\7u\2\2\u259a\u2599\3\2\2\2\u259a"+
		"\u259b\3\2\2\2\u259b\u259c\3\2\2\2\u259c\u259d\7\u0487\2\2\u259d\u259e"+
		"\5\u0142\u00a2\2\u259e\u25a0\7\u048e\2\2\u259f\u25a1\5\u0632\u031a\2\u25a0"+
		"\u259f\3\2\2\2\u25a0\u25a1\3\2\2\2\u25a1\u25c7\3\2\2\2\u25a2\u25a3\7\u0097"+
		"\2\2\u25a3\u25a5\5\u0140\u00a1\2\u25a4\u25a6\te\2\2\u25a5\u25a4\3\2\2"+
		"\2\u25a5\u25a6\3\2\2\2\u25a6\u25c7\3\2\2\2\u25a7\u25a8\7\u0097\2\2\u25a8"+
		"\u25a9\7u\2\2\u25a9\u25ab\5\u0140\u00a1\2\u25aa\u25ac\te\2\2\u25ab\u25aa"+
		"\3\2\2\2\u25ab\u25ac\3\2\2\2\u25ac\u25c7\3\2\2\2\u25ad\u25af\7W\2\2\u25ae"+
		"\u25b0\7u\2\2\u25af\u25ae\3\2\2\2\u25af\u25b0\3\2\2\2\u25b0\u25b1\3\2"+
		"\2\2\u25b1\u25b2\5\u0140\u00a1\2\u25b2\u25b3\5\u04e0\u0271\2\u25b3\u25c7"+
		"\3\2\2\2\u25b4\u25b6\7k\2\2\u25b5\u25b7\7u\2\2\u25b6\u25b5\3\2\2\2\u25b6"+
		"\u25b7\3\2\2\2\u25b7\u25b8\3\2\2\2\u25b8\u25b9\5\u0140\u00a1\2\u25b9\u25ba"+
		"\5\u0138\u009d\2\u25ba\u25c7\3\2\2\2\u25bb\u25bd\7\u02c8\2\2\u25bc\u25be"+
		"\7u\2\2\u25bd\u25bc\3\2\2\2\u25bd\u25be\3\2\2\2\u25be\u25bf\3\2\2\2\u25bf"+
		"\u25c7\5\u0138\u009d\2\u25c0\u25c1\7\u0112\2\2\u25c1\u25c2\7u\2\2\u25c2"+
		"\u25c3\5\u0140\u00a1\2\u25c3\u25c4\7\u0140\2\2\u25c4\u25c5\5\u05e0\u02f1"+
		"\2\u25c5\u25c7\3\2\2\2\u25c6\u2593\3\2\2\2\u25c6\u2598\3\2\2\2\u25c6\u25a2"+
		"\3\2\2\2\u25c6\u25a7\3\2\2\2\u25c6\u25ad\3\2\2\2\u25c6\u25b4\3\2\2\2\u25c6"+
		"\u25bb\3\2\2\2\u25c6\u25c0\3\2\2\2\u25c7\u04dd\3\2\2\2\u25c8\u25c9\7\u0097"+
		"\2\2\u25c9\u25ca\7\u013e\2\2\u25ca\u04df\3\2\2\2\u25cb\u25cc\7\u0121\2"+
		"\2\u25cc\u25cd\7\u008b\2\2\u25cd\u25d7\5\u0188\u00c5\2\u25ce\u25cf\7\u0121"+
		"\2\2\u25cf\u25d0\7\u008b\2\2\u25d0\u25d1\7\u0487\2\2\u25d1\u25d2\5:\36"+
		"\2\u25d2\u25d3\7\u048e\2\2\u25d3\u25d7\3\2\2\2\u25d4\u25d5\7\u0097\2\2"+
		"\u25d5\u25d7\7\u008b\2\2\u25d6\u25cb\3\2\2\2\u25d6\u25ce\3\2\2\2\u25d6"+
		"\u25d4\3\2\2\2\u25d7\u04e1\3\2\2\2\u25d8\u25d9\7\u0358\2\2\u25d9\u25da"+
		"\7\u013d\2\2\u25da\u25db\5\u0350\u01a9\2\u25db\u25dc\7\u0140\2\2\u25dc"+
		"\u25dd\7b\2\2\u25dd\u25e1\7\u0097\2\2\u25de\u25df\7\u0112\2\2\u25df\u25e0"+
		"\7\u0140\2\2\u25e0\u25e2\5\u0350\u01a9\2\u25e1\u25de\3\2\2\2\u25e1\u25e2"+
		"\3\2\2\2\u25e2\u25fa\3\2\2\2\u25e3\u25e4\7\u0358\2\2\u25e4\u25e5\5\u00e8"+
		"u\2\u25e5\u25e6\5\u00eav\2\u25e6\u25e7\7\u0140\2\2\u25e7\u25e8\7b\2\2"+
		"\u25e8\u25ec\7\u0097\2\2\u25e9\u25ea\7\u0112\2\2\u25ea\u25eb\7\u0140\2"+
		"\2\u25eb\u25ed\5\u00eav\2\u25ec\u25e9\3\2\2\2\u25ec\u25ed\3\2\2\2\u25ed"+
		"\u25fa\3\2\2\2\u25ee\u25ef\7\u0358\2\2\u25ef\u25f0\7\u0472\2\2\u25f0\u25f1"+
		"\5\u05e2\u02f2\2\u25f1\u25f2\7\u0140\2\2\u25f2\u25f3\7b\2\2\u25f3\u25f7"+
		"\7\u0097\2\2\u25f4\u25f5\7\u0112\2\2\u25f5\u25f6\7\u0140\2\2\u25f6\u25f8"+
		"\5\u05e2\u02f2\2\u25f7\u25f4\3\2\2\2\u25f7\u25f8\3\2\2\2\u25f8\u25fa\3"+
		"\2\2\2\u25f9\u25d8\3\2\2\2\u25f9\u25e3\3\2\2\2\u25f9\u25ee\3\2\2\2\u25fa"+
		"\u04e3\3\2\2\2\u25fb\u2608\7\u0105\2\2\u25fc\u25fd\t\u00a3\2\2\u25fd\u2605"+
		"\5\u0350\u01a9\2\u25fe\u2603\7\u01cd\2\2\u25ff\u2600\5\u00e8u\2\u2600"+
		"\u2601\5\u00eav\2\u2601\u2603\3\2\2\2\u2602\u25fe\3\2\2\2\u2602\u25ff"+
		"\3\2\2\2\u2603\u2605\3\2\2\2\u2604\u25fc\3\2\2\2\u2604\u2602\3\2\2\2\u2605"+
		"\u2609\3\2\2\2\u2606\u2607\7\u0472\2\2\u2607\u2609\5\u05e2\u02f2\2\u2608"+
		"\u2604\3\2\2\2\u2608\u2606\3\2\2\2\u2609\u04e5\3\2\2\2\u260a\u260b\7\u00f9"+
		"\2\2\u260b\u260c\7\u013d\2\2\u260c\u2614\5\u028e\u0148\2\u260d\u260e\7"+
		"\u00f9\2\2\u260e\u2611\7\u0472\2\2\u260f\u2612\7[\2\2\u2610\u2612\5\u05e2"+
		"\u02f2\2\u2611\u260f\3\2\2\2\u2611\u2610\3\2\2\2\u2612\u2614\3\2\2\2\u2613"+
		"\u260a\3\2\2\2\u2613\u260d\3\2\2\2\u2614\u04e7\3\2\2\2\u2615\u2616\7\u0238"+
		"\2\2\u2616\u2617\t\u00a4\2\2\u2617\u263d\7[\2\2\u2618\u2619\7\u0238\2"+
		"\2\u2619\u261a\7\u03a3\2\2\u261a\u261b\7\u02be\2\2\u261b\u261c\7\u0493"+
		"\2\2\u261c\u261d\7\u04a3\2\2\u261d\u261e\7\u0481\2\2\u261e\u261f\7\u01e0"+
		"\2\2\u261f\u2620\7\u0493\2\2\u2620\u263d\7\u0179\2\2\u2621\u2622\7\u0238"+
		"\2\2\u2622\u2623\7\u021d\2\2\u2623\u2624\7\u043b\2\2\u2624\u2625\7\u0493"+
		"\2\2\u2625\u2626\7\u0179\2\2\u2626\u2627\7\u0481\2\2\u2627\u2628\7\u01ee"+
		"\2\2\u2628\u2629\7\u0493\2\2\u2629\u263d\5\u01a2\u00d2\2\u262a\u262b\7"+
		"\u0238\2\2\u262b\u262c\7\u021d\2\2\u262c\u262d\7\u0322\2\2\u262d\u262e"+
		"\7\u0493\2\2\u262e\u263d\7\u04a3\2\2\u262f\u2630\7\u0121\2\2\u2630\u2631"+
		"\7\u00f8\2\2\u2631\u2632\7\u0303\2\2\u2632\u2633\7\u0493\2\2\u2633\u263d"+
		"\7\u04a3\2\2\u2634\u2635\7\u0121\2\2\u2635\u2636\7\u00f8\2\2\u2636\u2637"+
		"\7\u02f5\2\2\u2637\u2638\7\u0493\2\2\u2638\u263d\7\u0179\2\2\u2639\u263a"+
		"\7\u0238\2\2\u263a\u263b\7\u03d5\2\2\u263b\u263d\7\u0423\2\2\u263c\u2615"+
		"\3\2\2\2\u263c\u2618\3\2\2\2\u263c\u2621\3\2\2\2\u263c\u262a\3\2\2\2\u263c"+
		"\u262f\3\2\2\2\u263c\u2634\3\2\2\2\u263c\u2639\3\2\2\2\u263d\u04e9\3\2"+
		"\2\2\u263e\u263f\7W\2\2\u263f\u2640\7\u0323\2\2\u2640\u2641\7\u0207\2"+
		"\2\u2641\u2643\5\u0500\u0281\2\u2642\u2644\5\u0504\u0283\2\u2643\u2642"+
		"\3\2\2\2\u2643\u2644\3\2\2\2\u2644\u28bc\3\2\2\2\u2645\u2646\7W\2\2\u2646"+
		"\u2647\7\u0323\2\2\u2647\u2648\7\u01d6\2\2\u2648\u2649\5\u04f4\u027b\2"+
		"\u2649\u264b\7\u0330\2\2\u264a\u264c\5\u0538\u029d\2\u264b\u264a\3\2\2"+
		"\2\u264b\u264c\3\2\2\2\u264c\u264e\3\2\2\2\u264d\u264f\5\u0536\u029c\2"+
		"\u264e\u264d\3\2\2\2\u264e\u264f\3\2\2\2\u264f\u2651\3\2\2\2\u2650\u2652"+
		"\5\u00eex\2\u2651\u2650\3\2\2\2\u2651\u2652\3\2\2\2\u2652\u2657\3\2\2"+
		"\2\u2653\u2654\7\u0472\2\2\u2654\u2655\5\u01a4\u00d3\2\u2655\u2656\5\u04fa"+
		"\u027e\2\u2656\u2658\3\2\2\2\u2657\u2653\3\2\2\2\u2657\u2658\3\2\2\2\u2658"+
		"\u2659\3\2\2\2\u2659\u265a\5\u04fe\u0280\2\u265a\u28bc\3\2\2\2\u265b\u265c"+
		"\7W\2\2\u265c\u265d\7\u0323\2\2\u265d\u265e\7\u01d6\2\2\u265e\u265f\7"+
		"\u0129\2\2\u265f\u2664\5\u04f4\u027b\2\u2660\u2661\7\u0472\2\2\u2661\u2662"+
		"\5\u01a4\u00d3\2\u2662\u2663\5\u04fa\u027e\2\u2663\u2665\3\2\2\2\u2664"+
		"\u2660\3\2\2\2\u2664\u2665\3\2\2\2\u2665\u2666\3\2\2\2\u2666\u2667\5\u04fe"+
		"\u0280\2\u2667\u28bc\3\2\2\2\u2668\u2669\7W\2\2\u2669\u266a\7\u0323\2"+
		"\2\u266a\u266b\7\u01d6\2\2\u266b\u266d\7\u03fb\2\2\u266c\u266e\5\u053c"+
		"\u029f\2\u266d\u266c\3\2\2\2\u266d\u266e\3\2\2\2\u266e\u2670\3\2\2\2\u266f"+
		"\u2671\5\u053e\u02a0\2\u2670\u266f\3\2\2\2\u2670\u2671\3\2\2\2\u2671\u28bc"+
		"\3\2\2\2\u2672\u2673\7W\2\2\u2673\u2674\7\u0323\2\2\u2674\u2675\7\u01d6"+
		"\2\2\u2675\u2677\7I\2\2\u2676\u2678\5\u053c\u029f\2\u2677\u2676\3\2\2"+
		"\2\u2677\u2678\3\2\2\2\u2678\u28bc\3\2\2\2\u2679\u267a\7W\2\2\u267a\u267b"+
		"\7\u0323\2\2\u267b\u267c\7\u01d6\2\2\u267c\u267d\7\u0431\2\2\u267d\u28bc"+
		"\7\u017b\2\2\u267e\u267f\7W\2\2\u267f\u2680\7\u0323\2\2\u2680\u2681\7"+
		"\u01d6\2\2\u2681\u2683\7\u0198\2\2\u2682\u2684\5\u0540\u02a1\2\u2683\u2682"+
		"\3\2\2\2\u2683\u2684\3\2\2\2\u2684\u28bc\3\2\2\2\u2685\u2686\7W\2\2\u2686"+
		"\u2687\7\u0323\2\2\u2687\u2688\7\u0228\2\2\u2688\u2689\7\u01ac\2\2\u2689"+
		"\u268a\5\u0550\u02a9\2\u268a\u268b\5\u0524\u0293\2\u268b\u28bc\3\2\2\2"+
		"\u268c\u268d\7W\2\2\u268d\u268e\7\u0323\2\2\u268e\u268f\7\u0228\2\2\u268f"+
		"\u2690\7\u0324\2\2\u2690\u2691\5\u054e\u02a8\2\u2691\u2692\5\u0512\u028a"+
		"\2\u2692\u28bc\3\2\2\2\u2693\u2694\7W\2\2\u2694\u2695\7\u0323\2\2\u2695"+
		"\u2696\7\u0401\2\2\u2696\u2698\7\u01ac\2\2\u2697\u2699\5\u0512\u028a\2"+
		"\u2698\u2697\3\2\2\2\u2698\u2699\3\2\2\2\u2699\u28bc\3\2\2\2\u269a\u269b"+
		"\7W\2\2\u269b\u269c\7\u0323\2\2\u269c\u269d\7\u0363\2\2\u269d\u269f\7"+
		"\u01ac\2\2\u269e\u26a0\5\u0512\u028a\2\u269f\u269e\3\2\2\2\u269f\u26a0"+
		"\3\2\2\2\u26a0\u28bc\3\2\2\2\u26a1\u26a2\7W\2\2\u26a2\u26a3\7\u0323\2"+
		"\2\u26a3\u26a4\7\u01cb\2\2\u26a4\u26a5\7\u00ed\2\2\u26a5\u28bc\5\u050e"+
		"\u0288\2\u26a6\u26a7\7W\2\2\u26a7\u26a8\7\u0323\2\2\u26a8\u26a9\5\u0530"+
		"\u0299\2\u26a9\u26ab\7\u00ed\2\2\u26aa\u26ac\5\u04f8\u027d\2\u26ab\u26aa"+
		"\3\2\2\2\u26ab\u26ac\3\2\2\2\u26ac\u28bc\3\2\2\2\u26ad\u26ae\7W\2\2\u26ae"+
		"\u26af\7\u0323\2\2\u26af\u26b0\5\u0530\u0299\2\u26b0\u26b2\7\u01ae\2\2"+
		"\u26b1\u26b3\5\u050e\u0288\2\u26b2\u26b1\3\2\2\2\u26b2\u26b3\3\2\2\2\u26b3"+
		"\u28bc\3\2\2\2\u26b4\u26b5\7W\2\2\u26b5\u26b6\7\u0323\2\2\u26b6\u26b7"+
		"\7\u03b5\2\2\u26b7\u26b8\7\u00ed\2\2\u26b8\u26ba\7\u01d8\2\2\u26b9\u26bb"+
		"\5\u04f8\u027d\2\u26ba\u26b9\3\2\2\2\u26ba\u26bb\3\2\2\2\u26bb\u28bc\3"+
		"\2\2\2\u26bc\u26bd\7W\2\2\u26bd\u26be\7\u0323\2\2\u26be\u26bf\7U\2\2\u26bf"+
		"\u26c0\7\u01ea\2\2\u26c0\u26c1\7\u02da\2\2\u26c1\u28bc\7\u04a3\2\2\u26c2"+
		"\u26c3\7W\2\2\u26c3\u26c4\7\u0323\2\2\u26c4\u26c5\7\u02c5\2\2\u26c5\u26c6"+
		"\7\u01ea\2\2\u26c6\u26c7\7\u02da\2\2\u26c7\u28bc\7\u04a3\2\2\u26c8\u26c9"+
		"\7W\2\2\u26c9\u26ca\7\u0323\2\2\u26ca\u26cb\7\u0113\2\2\u26cb\u26cc\7"+
		"\u01ea\2\2\u26cc\u26cd\7\u02da\2\2\u26cd\u26ce\7\u04a3\2\2\u26ce\u26cf"+
		"\7\u015f\2\2\u26cf\u28bc\7\u04a3\2\2\u26d0\u26d1\7W\2\2\u26d1\u26d2\7"+
		"\u0323\2\2\u26d2\u26d3\7\u031d\2\2\u26d3\u26d4\5\u0542\u02a2\2\u26d4\u26d5"+
		"\7\u0389\2\2\u26d5\u26d6\7\u04a3\2\2\u26d6\u28bc\3\2\2\2\u26d7\u26d8\7"+
		"W\2\2\u26d8\u26d9\7\u0323\2\2\u26d9\u26da\7\u022c\2\2\u26da\u26e3\7\u0272"+
		"\2\2\u26db\u26dc\5\u04f8\u027d\2\u26dc\u26dd\5\u0250\u0129\2\u26dd\u26e4"+
		"\3\2\2\2\u26de\u26df\5\u04f8\u027d\2\u26df\u26e0\5\u0522\u0292\2\u26e0"+
		"\u26e1\5\u0250\u0129\2\u26e1\u26e4\3\2\2\2\u26e2\u26e4\5\u0252\u012a\2"+
		"\u26e3\u26db\3\2\2\2\u26e3\u26de\3\2\2\2\u26e3\u26e2\3\2\2\2\u26e3\u26e4"+
		"\3\2\2\2\u26e4\u26e8\3\2\2\2\u26e5\u26e6\7\u01b2\2\2\u26e6\u26e7\7u\2"+
		"\2\u26e7\u26e9\7\u00af\2\2\u26e8\u26e5\3\2\2\2\u26e8\u26e9\3\2\2\2\u26e9"+
		"\u28bc\3\2\2\2\u26ea\u26eb\7W\2\2\u26eb\u26ec\7\u0323\2\2\u26ec\u28bc"+
		"\7\u043c\2\2\u26ed\u26ee\7W\2\2\u26ee\u26ef\7\u0323\2\2\u26ef\u26f0\7"+
		"\u02e7\2\2\u26f0\u26f9\7\u0272\2\2\u26f1\u26f2\5\u04f8\u027d\2\u26f2\u26f3"+
		"\5\u0250\u0129\2\u26f3\u26fa\3\2\2\2\u26f4\u26f5\5\u04f8\u027d\2\u26f5"+
		"\u26f6\5\u0522\u0292\2\u26f6\u26f7\5\u0250\u0129\2\u26f7\u26fa\3\2\2\2"+
		"\u26f8\u26fa\5\u0252\u012a\2\u26f9\u26f1\3\2\2\2\u26f9\u26f4\3\2\2\2\u26f9"+
		"\u26f8\3\2\2\2\u26f9\u26fa\3\2\2\2\u26fa\u2701\3\2\2\2\u26fb\u26fc\7\u028e"+
		"\2\2\u26fc\u26fd\5\u01a4\u00d3\2\u26fd\u26fe\7\u0487\2\2\u26fe\u26ff\5"+
		"\u0508\u0285\2\u26ff\u2700\7\u048e\2\2\u2700\u2702\3\2\2\2\u2701\u26fb"+
		"\3\2\2\2\u2701\u2702\3\2\2\2\u2702\u2704\3\2\2\2\u2703\u2705\5\u050e\u0288"+
		"\2\u2704\u2703\3\2\2\2\u2704\u2705\3\2\2\2\u2705\u28bc\3\2\2\2\u2706\u2707"+
		"\7W\2\2\u2707\u2708\7\u0323\2\2\u2708\u2709\7\u043c\2\2\u2709\u2712\7"+
		"\u023d\2\2\u270a\u270b\7\u043b\2\2\u270b\u270c\5\u01a4\u00d3\2\u270c\u270d"+
		"\7\u0179\2\2\u270d\u2713\3\2\2\2\u270e\u270f\7\u0472\2\2\u270f\u2710\5"+
		"\u01a4\u00d3\2\u2710\u2711\5\u01a2\u00d2\2\u2711\u2713\3\2\2\2\u2712\u270a"+
		"\3\2\2\2\u2712\u270e\3\2\2\2\u2712\u2713\3\2\2\2\u2713\u2714\3\2\2\2\u2714"+
		"\u28bc\5\u050c\u0287\2\u2715\u2716\7W\2\2\u2716\u2717\7\u0323\2\2\u2717"+
		"\u2718\7\u03b5\2\2\u2718\u271a\7\u02d6\2\2\u2719\u271b\5\u053c\u029f\2"+
		"\u271a\u2719\3\2\2\2\u271a\u271b\3\2\2\2\u271b\u28bc\3\2\2\2\u271c\u271d"+
		"\7W\2\2\u271d\u271e\7\u0323\2\2\u271e\u271f\5\u0506\u0284\2\u271f\u2720"+
		"\7\u028e\2\2\u2720\u2722\5\u0508\u0285\2\u2721\u2723\5\u050e\u0288\2\u2722"+
		"\u2721\3\2\2\2\u2722\u2723\3\2\2\2\u2723\u28bc\3\2\2\2\u2724\u2725\7W"+
		"\2\2\u2725\u2726\7\u0323\2\2\u2726\u2727\7U\2\2\u2727\u2728\7\u02d8\2"+
		"\2\u2728\u2729\5\u01a2\u00d2\2\u2729\u272a\5\u0516\u028c\2\u272a\u28bc"+
		"\3\2\2\2\u272b\u272c\7W\2\2\u272c\u272d\7\u0323\2\2\u272d\u272e\5\u050a"+
		"\u0286\2\u272e\u272f\7\u02d8\2\2\u272f\u2730\5\u01a2\u00d2\2\u2730\u28bc"+
		"\3\2\2\2\u2731\u2732\7W\2\2\u2732\u2733\7\u0323\2\2\u2733\u2734\5\u0518"+
		"\u028d\2\u2734\u2735\7?\2\2\u2735\u2737\5\u051a\u028e\2\u2736\u2738\7"+
		"\u0121\2\2\u2737\u2736\3\2\2\2\u2737\u2738\3\2\2\2\u2738\u273d\3\2\2\2"+
		"\u2739\u273a\7\64\2\2\u273a\u273b\5\u01a4\u00d3\2\u273b\u273c\7\u04a3"+
		"\2\2\u273c\u273e\3\2\2\2\u273d\u2739\3\2\2\2\u273d\u273e\3\2\2\2\u273e"+
		"\u2743\3\2\2\2\u273f\u2740\7\60\2\2\u2740\u2741\5\u01a4\u00d3\2\u2741"+
		"\u2742\7\u04a3\2\2\u2742\u2744\3\2\2\2\u2743\u273f\3\2\2\2\u2743\u2744"+
		"\3\2\2\2\u2744\u28bc\3\2\2\2\u2745\u2746\7W\2\2\u2746\u2747\7\u0323\2"+
		"\2\u2747\u2748\5\u0518\u028d\2\u2748\u2749\7\u02d8\2\2\u2749\u274b\5\u01a2"+
		"\u00d2\2\u274a\u274c\7\u0121\2\2\u274b\u274a\3\2\2\2\u274b\u274c\3\2\2"+
		"\2\u274c\u274d\3\2\2\2\u274d\u274e\5\u0516\u028c\2\u274e\u28bc\3\2\2\2"+
		"\u274f\u2750\7W\2\2\u2750\u2751\7\u0323\2\2\u2751\u2752\7U\2\2\u2752\u2753"+
		"\7\32\2\2\u2753\u2758\5\u051a\u028e\2\u2754\u2755\7\64\2\2\u2755\u2756"+
		"\5\u01a4\u00d3\2\u2756\u2757\7\u04a3\2\2\u2757\u2759\3\2\2\2\u2758\u2754"+
		"\3\2\2\2\u2758\u2759\3\2\2\2\u2759\u275e\3\2\2\2\u275a\u275b\7\60\2\2"+
		"\u275b\u275c\5\u01a4\u00d3\2\u275c\u275d\7\u04a3\2\2\u275d\u275f\3\2\2"+
		"\2\u275e\u275a\3\2\2\2\u275e\u275f\3\2\2\2\u275f\u2760\3\2\2\2\u2760\u2761"+
		"\5\u051c\u028f\2\u2761\u2762\5\u051e\u0290\2\u2762\u28bc\3\2\2\2\u2763"+
		"\u2764\7W\2\2\u2764\u2765\7\u0323\2\2\u2765\u2766\7\u0097\2\2\u2766\u2767"+
		"\7\32\2\2\u2767\u2768\5\u051a\u028e\2\u2768\u2769\5\u051c\u028f\2\u2769"+
		"\u276a\5\u051e\u0290\2\u276a\u28bc\3\2\2\2\u276b\u276c\7W\2\2\u276c\u276d"+
		"\7\u0323\2\2\u276d\u276e\5\u0518\u028d\2\u276e\u276f\7\32\2\2\u276f\u2771"+
		"\5\u051a\u028e\2\u2770\u2772\7\u0121\2\2\u2771\u2770\3\2\2\2\u2771\u2772"+
		"\3\2\2\2\u2772\u2777\3\2\2\2\u2773\u2774\7\64\2\2\u2774\u2775\5\u01a4"+
		"\u00d3\2\u2775\u2776\7\u04a3\2\2\u2776\u2778\3\2\2\2\u2777\u2773\3\2\2"+
		"\2\u2777\u2778\3\2\2\2\u2778\u277d\3\2\2\2\u2779\u277a\7\60\2\2\u277a"+
		"\u277b\5\u01a4\u00d3\2\u277b\u277c\7\u04a3\2\2\u277c\u277e\3\2\2\2\u277d"+
		"\u2779\3\2\2\2\u277d\u277e\3\2\2\2\u277e\u28bc\3\2\2\2\u277f\u2780\7W"+
		"\2\2\u2780\u2781\7\u0323\2\2\u2781\u2782\7\u039b\2\2\u2782\u2784\7\u011e"+
		"\2\2\u2783\u2785\5\u0512\u028a\2\u2784\u2783\3\2\2\2\u2784\u2785\3\2\2"+
		"\2\u2785\u28bc\3\2\2\2\u2786\u2787\7W\2\2\u2787\u2788\7\u0323\2\2\u2788"+
		"\u2789\7\u039b\2\2\u2789\u278a\7\u03d5\2\2\u278a\u278c\7\u04d7\2\2\u278b"+
		"\u278d\5\u0512\u028a\2\u278c\u278b\3\2\2\2\u278c\u278d\3\2\2\2\u278d\u28bc"+
		"\3\2\2\2\u278e\u278f\7W\2\2\u278f\u2790\7\u0323\2\2\u2790\u2791\7\u0283"+
		"\2\2\u2791\u2792\7\u03d5\2\2\u2792\u2794\7\u030d\2\2\u2793\u2795\5\u0512"+
		"\u028a\2\u2794\u2793\3\2\2\2\u2794\u2795\3\2\2\2\u2795\u28bc\3\2\2\2\u2796"+
		"\u2797\7W\2\2\u2797\u2798\7\u0323\2\2\u2798\u2799\7\u039b\2\2\u2799\u279a"+
		"\7\u01de\2\2\u279a\u279f\7\u0144\2\2\u279b\u279c\7\u0306\2\2\u279c\u279d"+
		"\5\u01a4\u00d3\2\u279d\u279e\7\u04a3\2\2\u279e\u27a0\3\2\2\2\u279f\u279b"+
		"\3\2\2\2\u279f\u27a0\3\2\2\2\u27a0\u27a7\3\2\2\2\u27a1\u27a2\7\u015c\2"+
		"\2\u27a2\u27a3\5\u01a4\u00d3\2\u27a3\u27a4\7\u0487\2\2\u27a4\u27a5\5\u03d6"+
		"\u01ec\2\u27a5\u27a6\7\u048e\2\2\u27a6\u27a8\3\2\2\2\u27a7\u27a1\3\2\2"+
		"\2\u27a7\u27a8\3\2\2\2\u27a8\u27aa\3\2\2\2\u27a9\u27ab\5\u0512\u028a\2"+
		"\u27aa\u27a9\3\2\2\2\u27aa\u27ab\3\2\2\2\u27ab\u28bc\3\2\2\2\u27ac\u27ad"+
		"\7W\2\2\u27ad\u27af\7\u0323\2\2\u27ae\u27b0\7\u0121\2\2\u27af\u27ae\3"+
		"\2\2\2\u27af\u27b0\3\2\2\2\u27b0\u27b1\3\2\2\2\u27b1\u28bc\5\u0544\u02a3"+
		"\2\u27b2\u27b3\7W\2\2\u27b3\u27b4\7\u0323\2\2\u27b4\u27b5\7\u03bf\2\2"+
		"\u27b5\u27b7\5\u0548\u02a5\2\u27b6\u27b8\5\u0512\u028a\2\u27b7\u27b6\3"+
		"\2\2\2\u27b7\u27b8\3\2\2\2\u27b8\u28bc\3\2\2\2\u27b9\u27ba\7W\2\2\u27ba"+
		"\u27bb\7\u0323\2\2\u27bb\u27bc\7\u03b5\2\2\u27bc\u27bd\7\u018e\2\2\u27bd"+
		"\u27bf\7\u0330\2\2\u27be\u27c0\5\u0512\u028a\2\u27bf\u27be\3\2\2\2\u27bf"+
		"\u27c0\3\2\2\2\u27c0\u28bc\3\2\2\2\u27c1\u27c2\7W\2\2\u27c2\u27c3\7\u0323"+
		"\2\2\u27c3\u27c4\7\u02c5\2\2\u27c4\u27c5\7\u030e\2\2\u27c5\u27ca\7\u0389"+
		"\2\2\u27c6\u27c7\7\u0472\2\2\u27c7\u27c8\5\u01a4\u00d3\2\u27c8\u27c9\5"+
		"\u04fa\u027e\2\u27c9\u27cb\3\2\2\2\u27ca\u27c6\3\2\2\2\u27ca\u27cb\3\2"+
		"\2\2\u27cb\u27d0\3\2\2\2\u27cc\u27cd\7\u02d8\2\2\u27cd\u27ce\5\u01a4\u00d3"+
		"\2\u27ce\u27cf\5\u00ccg\2\u27cf\u27d1\3\2\2\2\u27d0\u27cc\3\2\2\2\u27d0"+
		"\u27d1\3\2\2\2\u27d1\u27d6\3\2\2\2\u27d2\u27d3\7\u0413\2\2\u27d3\u27d4"+
		"\5\u01a4\u00d3\2\u27d4\u27d5\5\u04f6\u027c\2\u27d5\u27d7\3\2\2\2\u27d6"+
		"\u27d2\3\2\2\2\u27d6\u27d7\3\2\2\2\u27d7\u28bc\3\2\2\2\u27d8\u27d9\7W"+
		"\2\2\u27d9\u27da\7\u0323\2\2\u27da\u27db\7\u0260\2\2\u27db\u28bc\7\u0354"+
		"\2\2\u27dc\u27dd\7W\2\2\u27dd\u27de\7\u0323\2\2\u27de\u27df\7\u0260\2"+
		"\2\u27df\u28bc\7\u0221\2\2\u27e0\u27e1\7W\2\2\u27e1\u27e2\7\u0323\2\2"+
		"\u27e2\u27e3\7\u0260\2\2\u27e3\u28bc\7\u028e\2\2\u27e4\u27e5\7W\2\2\u27e5"+
		"\u27e6\7\u0323\2\2\u27e6\u27e7\7\u0260\2\2\u27e7\u28bc\7\u02d8\2\2\u27e8"+
		"\u27e9\7W\2\2\u27e9\u27ea\7\u0323\2\2\u27ea\u27eb\7\u019a\2\2\u27eb\u27ec"+
		"\7\u0221\2\2\u27ec\u27ed\5\u01a4\u00d3\2\u27ed\u27ee\7\u0179\2\2\u27ee"+
		"\u27ef\7\u034c\2\2\u27ef\u27f0\5\u01a4\u00d3\2\u27f0\u27f1\7\u04a3\2\2"+
		"\u27f1\u28bc\3\2\2\2\u27f2\u27f3\7W\2\2\u27f3\u27f4\7\u0323\2\2\u27f4"+
		"\u27f5\7\u031d\2\2\u27f5\u27f6\7\u019a\2\2\u27f6\u27f7\7\u0221\2\2\u27f7"+
		"\u28bc\7\u0179\2\2\u27f8\u27f9\7W\2\2\u27f9\u27fa\7\u0323\2\2\u27fa\u27fb"+
		"\7U\2\2\u27fb\u27fc\7\u01ac\2\2\u27fc\u27fd\5\u0522\u0292\2\u27fd\u27fe"+
		"\7\u028e\2\2\u27fe\u27ff\5\u01a4\u00d3\2\u27ff\u2800\7\u04a3\2\2\u2800"+
		"\u2801\7\u035c\2\2\u2801\u2802\5\u01a4\u00d3\2\u2802\u2807\7\u04a3\2\2"+
		"\u2803\u2804\7)\2\2\u2804\u2805\5\u01a4\u00d3\2\u2805\u2806\7\u04a3\2"+
		"\2\u2806\u2808\3\2\2\2\u2807\u2803\3\2\2\2\u2807\u2808\3\2\2\2\u2808\u280d"+
		"\3\2\2\2\u2809\u280a\7K\2\2\u280a\u280b\5\u01a4\u00d3\2\u280b\u280c\7"+
		"\u0179\2\2\u280c\u280e\3\2\2\2\u280d\u2809\3\2\2\2\u280d\u280e\3\2\2\2"+
		"\u280e\u2810\3\2\2\2\u280f\u2811\5\u053c\u029f\2\u2810\u280f\3\2\2\2\u2810"+
		"\u2811\3\2\2\2\u2811\u28bc\3\2\2\2\u2812\u2813\7W\2\2\u2813\u2814\7\u0323"+
		"\2\2\u2814\u2815\7\u02c5\2\2\u2815\u2816\7\u01ac\2\2\u2816\u2817\5\u0522"+
		"\u0292\2\u2817\u2818\7\u028e\2\2\u2818\u2819\5\u01a4\u00d3\2\u2819\u281e"+
		"\7\u04a3\2\2\u281a\u281b\7K\2\2\u281b\u281c\5\u01a4\u00d3\2\u281c\u281d"+
		"\7\u0179\2\2\u281d\u281f\3\2\2\2\u281e\u281a\3\2\2\2\u281e\u281f\3\2\2"+
		"\2\u281f\u2821\3\2\2\2\u2820\u2822\5\u053c\u029f\2\u2821\u2820\3\2\2\2"+
		"\u2821\u2822\3\2\2\2\u2822\u28bc\3\2\2\2\u2823\u2824\7W\2\2\u2824\u2825"+
		"\7\u0323\2\2\u2825\u2826\7\u019a\2\2\u2826\u2827\7\u01ac\2\2\u2827\u2828"+
		"\5\u0522\u0292\2\u2828\u2829\7\u03c8\2\2\u2829\u282a\5\u01a4\u00d3\2\u282a"+
		"\u282b\7\u04a3\2\2\u282b\u282c\7\u034c\2\2\u282c\u282d\5\u01a4\u00d3\2"+
		"\u282d\u2832\7\u04a3\2\2\u282e\u282f\7)\2\2\u282f\u2830\5\u01a4\u00d3"+
		"\2\u2830\u2831\7\u04a3\2\2\u2831\u2833\3\2\2\2\u2832\u282e\3\2\2\2\u2832"+
		"\u2833\3\2\2\2\u2833\u2835\3\2\2\2\u2834\u2836\5\u053c\u029f\2\u2835\u2834"+
		"\3\2\2\2\u2835\u2836\3\2\2\2\u2836\u28bc\3\2\2\2\u2837\u2838\7W\2\2\u2838"+
		"\u2839\7\u0323\2\2\u2839\u283a\7\u02c8\2\2\u283a\u283b\7\u01ac\2\2\u283b"+
		"\u283c\5\u0522\u0292\2\u283c\u283d\7\u028e\2\2\u283d\u283e\5\u01a4\u00d3"+
		"\2\u283e\u283f\7\u04a3\2\2\u283f\u2840\7\u035c\2\2\u2840\u2841\5\u01a4"+
		"\u00d3\2\u2841\u2846\7\u04a3\2\2\u2842\u2843\7K\2\2\u2843\u2844\5\u01a4"+
		"\u00d3\2\u2844\u2845\7\u0179\2\2\u2845\u2847\3\2\2\2\u2846\u2842\3\2\2"+
		"\2\u2846\u2847\3\2\2\2\u2847\u2849\3\2\2\2\u2848\u284a\5\u053c\u029f\2"+
		"\u2849\u2848\3\2\2\2\u2849\u284a\3\2\2\2\u284a\u28bc\3\2\2\2\u284b\u284c"+
		"\7W\2\2\u284c\u284d\7\u0323\2\2\u284d\u284e\7\u02c8\2\2\u284e\u284f\5"+
		"\u0522\u0292\2\u284f\u2850\7K\2\2\u2850\u2851\5\u01a4\u00d3\2\u2851\u2853"+
		"\7\u0179\2\2\u2852\u2854\5\u053c\u029f\2\u2853\u2852\3\2\2\2\u2853\u2854"+
		"\3\2\2\2\u2854\u28bc\3\2\2\2\u2855\u2856\7W\2\2\u2856\u2857\7\u0323\2"+
		"\2\u2857\u2858\7\u031d\2\2\u2858\u2859\7\u01ac\2\2\u2859\u285a\7\u0389"+
		"\2\2\u285a\u285b\7\24\2\2\u285b\u285c\5\u01a4\u00d3\2\u285c\u285e\7\u04a3"+
		"\2\2\u285d\u285f\5\u053c\u029f\2\u285e\u285d\3\2\2\2\u285e\u285f\3\2\2"+
		"\2\u285f\u28bc\3\2\2\2\u2860\u2861\7W\2\2\u2861\u2862\7\u0323\2\2\u2862"+
		"\u2863\7\u01c9\2\2\u2863\u2864\7\u0157\2\2\u2864\u28bc\7\u011e\2\2\u2865"+
		"\u2866\7W\2\2\u2866\u2867\7\u0323\2\2\u2867\u2868\7\u03db\2\2\u2868\u2869"+
		"\7\u0451\2\2\u2869\u286b\7\u04a3\2\2\u286a\u286c\5\u0512\u028a\2\u286b"+
		"\u286a\3\2\2\2\u286b\u286c\3\2\2\2\u286c\u28bc\3\2\2\2\u286d\u286e\7W"+
		"\2\2\u286e\u286f\7\u0323\2\2\u286f\u2870\5\u0552\u02aa\2\u2870\u2871\7"+
		"\u01c9\2\2\u2871\u28bc\3\2\2\2\u2872\u2873\7W\2\2\u2873\u2874\7\u0323"+
		"\2\2\u2874\u2875\7\u03db\2\2\u2875\u2876\7\u01c9\2\2\u2876\u2877\7\u0451"+
		"\2\2\u2877\u2879\7\u04a3\2\2\u2878\u287a\5\u04f8\u027d\2\u2879\u2878\3"+
		"\2\2\2\u2879\u287a\3\2\2\2\u287a\u28bc\3\2\2\2\u287b\u287c\7W\2\2\u287c"+
		"\u287d\7\u0323\2\2\u287d\u287e\7\u0184\2\2\u287e\u287f\7\u01c9\2\2\u287f"+
		"\u28bc\7\u0451\2\2\u2880\u2881\7W\2\2\u2881\u2882\7\u0323\2\2\u2882\u2883"+
		"\5\u0552\u02aa\2\u2883\u2884\7\u0288\2\2\u2884\u2885\7\u01c9\2\2\u2885"+
		"\u28bc\3\2\2\2\u2886\u2887\7W\2\2\u2887\u2888\7\u0323\2\2\u2888\u2889"+
		"\7\u039b\2\2\u2889\u28bc\7\u0419\2\2\u288a\u288b\7W\2\2\u288b\u288c\7"+
		"\u0323\2\2\u288c\u288d\7\u02df\2\2\u288d\u288e\7\u0129\2\2\u288e\u2893"+
		"\7\u0311\2\2\u288f\u2890\7\u00a7\2\2\u2890\u2891\7\u01a9\2\2\u2891\u2892"+
		"\7\u0498\2\2\u2892\u2894\7\u0179\2\2\u2893\u288f\3\2\2\2\u2893\u2894\3"+
		"\2\2\2\u2894\u2895\3\2\2\2\u2895\u28bc\5\u04ec\u0277\2\u2896\u2897\7W"+
		"\2\2\u2897\u2898\7\u0323\2\2\u2898\u2899\7\u01b0\2\2\u2899\u289a\7\u0129"+
		"\2\2\u289a\u28bc\7\u0311\2\2\u289b\u289c\7W\2\2\u289c\u289d\7\u0323\2"+
		"\2\u289d\u289e\7\u0121\2\2\u289e\u289f\7\u0398\2\2\u289f\u28a0\7\u02a2"+
		"\2\2\u28a0\u28bc\5\u050c\u0287\2\u28a1\u28a2\7W\2\2\u28a2\u28a3\7\u0323"+
		"\2\2\u28a3\u28a4\7\u0121\2\2\u28a4\u28a5\7\u03ed\2\2\u28a5\u28a6\7\u01a2"+
		"\2\2\u28a6\u28a7\7\u0364\2\2\u28a7\u28a8\5\u01a2\u00d2\2\u28a8\u28a9\7"+
		"\u0140\2\2\u28a9\u28aa\5\u01a2\u00d2\2\u28aa\u28ab\5,\27\2\u28ab\u28bc"+
		"\3\2\2\2\u28ac\u28ad\7W\2\2\u28ad\u28ae\7\u0323\2\2\u28ae\u28af\7U\2\2"+
		"\u28af\u28b0\7\u0269\2\2\u28b0\u28b1\7\u03c8\2\2\u28b1\u28bc\7\u04a3\2"+
		"\2\u28b2\u28b3\7W\2\2\u28b3\u28b4\7\u0323\2\2\u28b4\u28b5\7\u03b5\2\2"+
		"\u28b5\u28b6\7\u0269\2\2\u28b6\u28bc\7\u03c8\2\2\u28b7\u28b8\7W\2\2\u28b8"+
		"\u28b9\7\u0323\2\2\u28b9\u28ba\7\u0253\2\2\u28ba\u28bc\7\u013d\2\2\u28bb"+
		"\u263e\3\2\2\2\u28bb\u2645\3\2\2\2\u28bb\u265b\3\2\2\2\u28bb\u2668\3\2"+
		"\2\2\u28bb\u2672\3\2\2\2\u28bb\u2679\3\2\2\2\u28bb\u267e\3\2\2\2\u28bb"+
		"\u2685\3\2\2\2\u28bb\u268c\3\2\2\2\u28bb\u2693\3\2\2\2\u28bb\u269a\3\2"+
		"\2\2\u28bb\u26a1\3\2\2\2\u28bb\u26a6\3\2\2\2\u28bb\u26ad\3\2\2\2\u28bb"+
		"\u26b4\3\2\2\2\u28bb\u26bc\3\2\2\2\u28bb\u26c2\3\2\2\2\u28bb\u26c8\3\2"+
		"\2\2\u28bb\u26d0\3\2\2\2\u28bb\u26d7\3\2\2\2\u28bb\u26ea\3\2\2\2\u28bb"+
		"\u26ed\3\2\2\2\u28bb\u2706\3\2\2\2\u28bb\u2715\3\2\2\2\u28bb\u271c\3\2"+
		"\2\2\u28bb\u2724\3\2\2\2\u28bb\u272b\3\2\2\2\u28bb\u2731\3\2\2\2\u28bb"+
		"\u2745\3\2\2\2\u28bb\u274f\3\2\2\2\u28bb\u2763\3\2\2\2\u28bb\u276b\3\2"+
		"\2\2\u28bb\u277f\3\2\2\2\u28bb\u2786\3\2\2\2\u28bb\u278e\3\2\2\2\u28bb"+
		"\u2796\3\2\2\2\u28bb\u27ac\3\2\2\2\u28bb\u27b2\3\2\2\2\u28bb\u27b9\3\2"+
		"\2\2\u28bb\u27c1\3\2\2\2\u28bb\u27d8\3\2\2\2\u28bb\u27dc\3\2\2\2\u28bb"+
		"\u27e0\3\2\2\2\u28bb\u27e4\3\2\2\2\u28bb\u27e8\3\2\2\2\u28bb\u27f2\3\2"+
		"\2\2\u28bb\u27f8\3\2\2\2\u28bb\u2812\3\2\2\2\u28bb\u2823\3\2\2\2\u28bb"+
		"\u2837\3\2\2\2\u28bb\u284b\3\2\2\2\u28bb\u2855\3\2\2\2\u28bb\u2860\3\2"+
		"\2\2\u28bb\u2865\3\2\2\2\u28bb\u286d\3\2\2\2\u28bb\u2872\3\2\2\2\u28bb"+
		"\u287b\3\2\2\2\u28bb\u2880\3\2\2\2\u28bb\u2886\3\2\2\2\u28bb\u288a\3\2"+
		"\2\2\u28bb\u2896\3\2\2\2\u28bb\u289b\3\2\2\2\u28bb\u28a1\3\2\2\2\u28bb"+
		"\u28ac\3\2\2\2\u28bb\u28b2\3\2\2\2\u28bb\u28b7\3\2\2\2\u28bc\u04eb\3\2"+
		"\2\2\u28bd\u28be\7\u014e\2\2\u28be\u28bf\5\u04ee\u0278\2\u28bf\u04ed\3"+
		"\2\2\2\u28c0\u28c2\5\u04f0\u0279\2\u28c1\u28c3\5\u04ee\u0278\2\u28c2\u28c1"+
		"\3\2\2\2\u28c2\u28c3\3\2\2\2\u28c3\u04ef\3\2\2\2\u28c4\u28c7\t\u00a5\2"+
		"\2\u28c5\u28c7\t\u00a6\2\2\u28c6\u28c4\3\2\2\2\u28c6\u28c5\3\2\2\2\u28c7"+
		"\u28c8\3\2\2\2\u28c8\u28c9\7\u0493\2\2\u28c9\u28ce\5\u0200\u0101\2\u28ca"+
		"\u28cb\t\u00a7\2\2\u28cb\u28cc\7\u0493\2\2\u28cc\u28ce\7\u0179\2\2\u28cd"+
		"\u28c6\3\2\2\2\u28cd\u28ca\3\2\2\2\u28ce\u04f1\3\2\2\2\u28cf\u28d6\5\u01a2"+
		"\u00d2\2\u28d0\u28d2\7\u043b\2\2\u28d1\u28d3\7\u0493\2\2\u28d2\u28d1\3"+
		"\2\2\2\u28d2\u28d3\3\2\2\2\u28d3\u28d4\3\2\2\2\u28d4\u28d6\7\u0179\2\2"+
		"\u28d5\u28cf\3\2\2\2\u28d5\u28d0\3\2\2\2\u28d6\u04f3\3\2\2\2\u28d7\u28d8"+
		"\t\u00a8\2\2\u28d8\u04f5\3\2\2\2\u28d9\u28da\t\u00a9\2\2\u28da\u04f7\3"+
		"\2\2\2\u28db\u28dd\7\u0472\2\2\u28dc\u28de\7\u0493\2\2\u28dd\u28dc\3\2"+
		"\2\2\u28dd\u28de\3\2\2\2\u28de\u28df\3\2\2\2\u28df\u28e0\7\u0487\2\2\u28e0"+
		"\u28e1\5\u04fa\u027e\2\u28e1\u28e2\7\u048e\2\2\u28e2\u28e9\3\2\2\2\u28e3"+
		"\u28e5\7\u0472\2\2\u28e4\u28e6\7\u0493\2\2\u28e5\u28e4\3\2\2\2\u28e5\u28e6"+
		"\3\2\2\2\u28e6\u28e7\3\2\2\2\u28e7\u28e9\5\u04fa\u027e\2\u28e8\u28db\3"+
		"\2\2\2\u28e8\u28e3\3\2\2\2\u28e9\u04f9\3\2\2\2\u28ea\u28ef\5\u01a2\u00d2"+
		"\2\u28eb\u28ec\7\u0481\2\2\u28ec\u28ee\5\u01a2\u00d2\2\u28ed\u28eb\3\2"+
		"\2\2\u28ee\u28f1\3\2\2\2\u28ef\u28ed\3\2\2\2\u28ef\u28f0\3\2\2\2\u28f0"+
		"\u04fb\3\2\2\2\u28f1\u28ef\3\2\2\2\u28f2\u28f4\7\u0493\2\2\u28f3\u28f2"+
		"\3\2\2\2\u28f3\u28f4\3\2\2\2\u28f4\u28f5\3\2\2\2\u28f5\u28f6\5\u04fa\u027e"+
		"\2\u28f6\u04fd\3\2\2\2\u28f7\u28f9\7\u0291\2\2\u28f8\u28f7\3\2\2\2\u28f8"+
		"\u28f9\3\2\2\2\u28f9\u04ff\3\2\2\2\u28fa\u28ff\5\u0502\u0282\2\u28fb\u28fc"+
		"\7\u0481\2\2\u28fc\u28fe\5\u0502\u0282\2\u28fd\u28fb\3\2\2\2\u28fe\u2901"+
		"\3\2\2\2\u28ff\u28fd\3\2\2\2\u28ff\u2900\3\2\2\2\u2900\u0501\3\2\2\2\u2901"+
		"\u28ff\3\2\2\2\u2902\u2904\7\u0364\2\2\u2903\u2905\7\u0493\2\2\u2904\u2903"+
		"\3\2\2\2\u2904\u2905\3\2\2\2\u2905\u2906\3\2\2\2\u2906\u2907\5\u01a2\u00d2"+
		"\2\u2907\u2909\7\u02d8\2\2\u2908\u290a\7\u0493\2\2\u2909\u2908\3\2\2\2"+
		"\u2909\u290a\3\2\2\2\u290a\u290b\3\2\2\2\u290b\u290c\5\u01a2\u00d2\2\u290c"+
		"\u290e\7\u028e\2\2\u290d\u290f\7\u0493\2\2\u290e\u290d\3\2\2\2\u290e\u290f"+
		"\3\2\2\2\u290f\u2910\3\2\2\2\u2910\u2911\7\u04a3\2\2\u2911\u291e\3\2\2"+
		"\2\u2912\u2914\7\u02d8\2\2\u2913\u2915\7\u0493\2\2\u2914\u2913\3\2\2\2"+
		"\u2914\u2915\3\2\2\2\u2915\u2916\3\2\2\2\u2916\u2917\5\u01a2\u00d2\2\u2917"+
		"\u2919\7\u028e\2\2\u2918\u291a\7\u0493\2\2\u2919\u2918\3\2\2\2\u2919\u291a"+
		"\3\2\2\2\u291a\u291b\3\2\2\2\u291b\u291c\7\u04a3\2\2\u291c\u291e\3\2\2"+
		"\2\u291d\u2902\3\2\2\2\u291d\u2912\3\2\2\2\u291e\u0503\3\2\2\2\u291f\u2920"+
		"\7\u0481\2\2\u2920\u2921\7\'\2\2\u2921\u2922\5\u01a4\u00d3\2\u2922\u2923"+
		"\7\u04a3\2\2\u2923\u0505\3\2\2\2\u2924\u2930\7U\2\2\u2925\u2927\7\u031d"+
		"\2\2\u2926\u2925\3\2\2\2\u2926\u2927\3\2\2\2\u2927\u2928\3\2\2\2\u2928"+
		"\u2930\7\u008d\2\2\u2929\u2930\7\u01cb\2\2\u292a\u292c\7\u00a8\2\2\u292b"+
		"\u292a\3\2\2\2\u292b\u292c\3\2\2\2\u292c\u292d\3\2\2\2\u292d\u2930\7\u0184"+
		"\2\2\u292e\u2930\7\u02bf\2\2\u292f\u2924\3\2\2\2\u292f\u2926\3\2\2\2\u292f"+
		"\u2929\3\2\2\2\u292f\u292b\3\2\2\2\u292f\u292e\3\2\2\2\u2930\u0507\3\2"+
		"\2\2\u2931\u2936\7\u04a3\2\2\u2932\u2933\7\u0481\2\2\u2933\u2935\7\u04a3"+
		"\2\2\u2934\u2932\3\2\2\2\u2935\u2938\3\2\2\2\u2936\u2934\3\2\2\2\u2936"+
		"\u2937\3\2\2\2\u2937\u0509\3\2\2\2\u2938\u2936\3\2\2\2\u2939\u2941\7\u008d"+
		"\2\2\u293a\u2941\7\u01cb\2\2\u293b\u293d\7\u00a8\2\2\u293c\u293b\3\2\2"+
		"\2\u293c\u293d\3\2\2\2\u293d\u293e\3\2\2\2\u293e\u2941\7\u0184\2\2\u293f"+
		"\u2941\7\u02bf\2\2\u2940\u2939\3\2\2\2\u2940\u293a\3\2\2\2\u2940\u293c"+
		"\3\2\2\2\u2940\u293f\3\2\2\2\u2941\u050b\3\2\2\2\u2942\u2944\7\u028e\2"+
		"\2\u2943\u2945\7\u0493\2\2\u2944\u2943\3\2\2\2\u2944\u2945\3\2\2\2\u2945"+
		"\u2946\3\2\2\2\u2946\u294a\7\u04a3\2\2\u2947\u2948\7\u037e\2\2\u2948\u294a"+
		"\7\u04a3\2\2\u2949\u2942\3\2\2\2\u2949\u2947\3\2\2\2\u294a\u050d\3\2\2"+
		"\2\u294b\u294d\7\u02d8\2\2\u294c\u294e\7\u0493\2\2\u294d\u294c\3\2\2\2"+
		"\u294d\u294e\3\2\2\2\u294e\u294f\3\2\2\2\u294f\u2950\5\u01a2\u00d2\2\u2950"+
		"\u050f\3\2\2\2\u2951\u2953\7\u0310\2\2\u2952\u2954\7\u0493\2\2\u2953\u2952"+
		"\3\2\2\2\u2953\u2954\3\2\2\2\u2954\u2955\3\2\2\2\u2955\u2956\7\u04a3\2"+
		"\2\u2956\u0511\3\2\2\2\u2957\u295a\5\u050c\u0287\2\u2958\u295a\5\u050e"+
		"\u0288\2\u2959\u2957\3\2\2\2\u2959\u2958\3\2\2\2\u295a\u0513\3\2\2\2\u295b"+
		"\u295d\7\u0364\2\2\u295c\u295e\7\u0493\2\2\u295d\u295c\3\2\2\2\u295d\u295e"+
		"\3\2\2\2\u295e\u295f\3\2\2\2\u295f\u296b\5\u01a2\u00d2\2\u2960\u2962\7"+
		"\u0274\2\2\u2961\u2963\7\u0493\2\2\u2962\u2961\3\2\2\2\u2962\u2963\3\2"+
		"\2\2\u2963\u2964\3\2\2\2\u2964\u296b\5\u01a2\u00d2\2\u2965\u2967\7\u018d"+
		"\2\2\u2966\u2968\7\u0493\2\2\u2967\u2966\3\2\2\2\u2967\u2968\3\2\2\2\u2968"+
		"\u2969\3\2\2\2\u2969\u296b\5\u01a2\u00d2\2\u296a\u295b\3\2\2\2\u296a\u2960"+
		"\3\2\2\2\u296a\u2965\3\2\2\2\u296b\u0515\3\2\2\2\u296c\u296d\b\u028c\1"+
		"\2\u296d\u2970\5\u0514\u028b\2\u296e\u2970\5\u0642\u0322\2\u296f\u296c"+
		"\3\2\2\2\u296f\u296e\3\2\2\2\u2970\u2976\3\2\2\2\u2971\u2972\f\3\2\2\u2972"+
		"\u2973\7\u0481\2\2\u2973\u2975\5\u0514\u028b\2\u2974\u2971\3\2\2\2\u2975"+
		"\u2978\3\2\2\2\u2976\u2974\3\2\2\2\u2976\u2977\3\2\2\2\u2977\u0517\3\2"+
		"\2\2\u2978\u2976\3\2\2\2\u2979\u297a\t\u00aa\2\2\u297a\u0519\3\2\2\2\u297b"+
		"\u297c\7\u02fa\2\2\u297c\u297d\5\u01a4\u00d3\2\u297d\u297e\7\u04a3\2\2"+
		"\u297e\u051b\3\2\2\2\u297f\u2980\7\u00a7\2\2\u2980\u2981\5\u01a2\u00d2"+
		"\2\u2981\u051d\3\2\2\2\u2982\u2983\t\u00ab\2\2\u2983\u2984\5\u01a4\u00d3"+
		"\2\u2984\u2985\7\u04a3\2\2\u2985\u051f\3\2\2\2\u2986\u2988\7\u0237\2\2"+
		"\u2987\u2989\7\u0493\2\2\u2988\u2987\3\2\2\2\u2988\u2989\3\2\2\2\u2989"+
		"\u298a\3\2\2\2\u298a\u298b\7\u04a3\2\2\u298b\u0521\3\2\2\2\u298c\u298e"+
		"\7w\2\2\u298d\u298f\7\u0493\2\2\u298e\u298d\3\2\2\2\u298e\u298f\3\2\2"+
		"\2\u298f\u2990\3\2\2\2\u2990\u2991\7\u0179\2\2\u2991\u0523\3\2\2\2\u2992"+
		"\u2993\5\u0522\u0292\2\u2993\u2994\5\u050c\u0287\2\u2994\u2995\5\u053c"+
		"\u029f\2\u2995\u299f\3\2\2\2\u2996\u2998\5\u050c\u0287\2\u2997\u2999\5"+
		"\u053c\u029f\2\u2998\u2997\3\2\2\2\u2998\u2999\3\2\2\2\u2999\u299f\3\2"+
		"\2\2\u299a\u299c\5\u050e\u0288\2\u299b\u299d\5\u053c\u029f\2\u299c\u299b"+
		"\3\2\2\2\u299c\u299d\3\2\2\2\u299d\u299f\3\2\2\2\u299e\u2992\3\2\2\2\u299e"+
		"\u2996\3\2\2\2\u299e\u299a\3\2\2\2\u299f\u0525\3\2\2\2\u29a0\u29a1\t\u00ac"+
		"\2\2\u29a1\u0527\3\2\2\2\u29a2\u29a4\5\u052a\u0296\2\u29a3\u29a5\5\u0528"+
		"\u0295\2\u29a4\u29a3\3\2\2\2\u29a4\u29a5\3\2\2\2\u29a5\u0529\3\2\2\2\u29a6"+
		"\u29a9\5\u052c\u0297\2\u29a7\u29a9\5\u052e\u0298\2\u29a8\u29a6\3\2\2\2"+
		"\u29a8\u29a7\3\2\2\2\u29a9\u052b\3\2\2\2\u29aa\u29ac\7\u035c\2\2\u29ab"+
		"\u29ad\7\u0493\2\2\u29ac\u29ab\3\2\2\2\u29ac\u29ad\3\2\2\2\u29ad\u29ae"+
		"\3\2\2\2\u29ae\u29af\7\u04a3\2\2\u29af\u052d\3\2\2\2\u29b0\u29b2\7\u0247"+
		"\2\2\u29b1\u29b3\7\u0493\2\2\u29b2\u29b1\3\2\2\2\u29b2\u29b3\3\2\2\2\u29b3"+
		"\u29b4\3\2\2\2\u29b4\u29b5\7\u0179\2\2\u29b5\u052f\3\2\2\2\u29b6\u29b7"+
		"\t\u00ad\2\2\u29b7\u0531\3\2\2\2\u29b8\u29ba\7\u0379\2\2\u29b9\u29bb\7"+
		"\u0493\2\2\u29ba\u29b9\3\2\2\2\u29ba\u29bb\3\2\2\2\u29bb\u29bc\3\2\2\2"+
		"\u29bc\u29bd\7\u0179\2\2\u29bd\u0533\3\2\2\2\u29be\u29c0\7\u0439\2\2\u29bf"+
		"\u29c1\7\u0493\2\2\u29c0\u29bf\3\2\2\2\u29c0\u29c1\3\2\2\2\u29c1\u29c2"+
		"\3\2\2\2\u29c2\u29c3\7\u04a3\2\2\u29c3\u0535\3\2\2\2\u29c4\u29cb\5\u0534"+
		"\u029b\2\u29c5\u29c7\7\u0232\2\2\u29c6\u29c8\7\u0493\2\2\u29c7\u29c6\3"+
		"\2\2\2\u29c7\u29c8\3\2\2\2\u29c8\u29c9\3\2\2\2\u29c9\u29cb\7\u0179\2\2"+
		"\u29ca\u29c4\3\2\2\2\u29ca\u29c5\3\2\2\2\u29cb\u0537\3\2\2\2\u29cc\u29ce"+
		"\7]\2\2\u29cd\u29cf\7\u0493\2\2\u29ce\u29cd\3\2\2\2\u29ce\u29cf\3\2\2"+
		"\2\u29cf\u29d0\3\2\2\2\u29d0\u29d1\7\u04a3\2\2\u29d1\u0539\3\2\2\2\u29d2"+
		"\u29d3\5\u05e0\u02f1\2\u29d3\u29d4\7\u0493\2\2\u29d4\u29d5\5&\24\2\u29d5"+
		"\u053b\3\2\2\2\u29d6\u29d8\7\u0472\2\2\u29d7\u29d9\7\u0493\2\2\u29d8\u29d7"+
		"\3\2\2\2\u29d8\u29d9\3\2\2\2\u29d9\u29da\3\2\2\2\u29da\u29db\5\u01a2\u00d2"+
		"\2\u29db\u053d\3\2\2\2\u29dc\u29de\7\u0330\2\2\u29dd\u29df\7\u0493\2\2"+
		"\u29de\u29dd\3\2\2\2\u29de\u29df\3\2\2\2\u29df\u29e0\3\2\2\2\u29e0\u29e1"+
		"\5\u01a2\u00d2\2\u29e1\u053f\3\2\2\2\u29e2\u29e4\7\u01ff\2\2\u29e3\u29e5"+
		"\7\u0493\2\2\u29e4\u29e3\3\2\2\2\u29e4\u29e5\3\2\2\2\u29e5\u29e6\3\2\2"+
		"\2\u29e6\u29e7\7\u0179\2\2\u29e7\u0541\3\2\2\2\u29e8\u29e9\7\u0106\2\2"+
		"\u29e9\u29ec\7\u01bb\2\2\u29ea\u29ec\5\u0642\u0322\2\u29eb\u29e8\3\2\2"+
		"\2\u29eb\u29ea\3\2\2\2\u29ec\u0543\3\2\2\2\u29ed\u29f2\5\u0546\u02a4\2"+
		"\u29ee\u29ef\7\u0481\2\2\u29ef\u29f1\5\u0546\u02a4\2\u29f0\u29ee\3\2\2"+
		"\2\u29f1\u29f4\3\2\2\2\u29f2\u29f0\3\2\2\2\u29f2\u29f3\3\2\2\2\u29f3\u0545"+
		"\3\2\2\2\u29f4\u29f2\3\2\2\2\u29f5\u29f6\7\u04a2\2\2\u29f6\u29f7\7\u0493"+
		"\2\2\u29f7\u29fa\5,\27\2\u29f8\u29f9\7\u01ed\2\2\u29f9\u29fb\7\u04a3\2"+
		"\2\u29fa\u29f8\3\2\2\2\u29fa\u29fb\3\2\2\2\u29fb\u2a05\3\2\2\2\u29fc\u29fd"+
		"\7\u0273\2\2\u29fd\u29fe\7\u0493\2\2\u29fe\u2a06\7\u03d5\2\2\u29ff\u2a00"+
		"\7\u0273\2\2\u2a00\u2a01\7\u0493\2\2\u2a01\u2a06\7\u02d1\2\2\u2a02\u2a03"+
		"\7\u0273\2\2\u2a03\u2a04\7\u0493\2\2\u2a04\u2a06\7f\2\2\u2a05\u29fc\3"+
		"\2\2\2\u2a05\u29ff\3\2\2\2\u2a05\u2a02\3\2\2\2\u2a05\u2a06\3\2\2\2\u2a06"+
		"\u2a08\3\2\2\2\u2a07\u2a09\5\u0512\u028a\2\u2a08\u2a07\3\2\2\2\u2a08\u2a09"+
		"\3\2\2\2\u2a09\u2a0b\3\2\2\2\u2a0a\u2a0c\5\u053c\u029f\2\u2a0b\u2a0a\3"+
		"\2\2\2\u2a0b\u2a0c\3\2\2\2\u2a0c\u2ab6\3\2\2\2\u2a0d\u2a0e\7\u03f9\2\2"+
		"\u2a0e\u2a0f\7\u0493\2\2\u2a0f\u2a12\5,\27\2\u2a10\u2a11\7\u01ed\2\2\u2a11"+
		"\u2a13\7\u04a3\2\2\u2a12\u2a10\3\2\2\2\u2a12\u2a13\3\2\2\2\u2a13\u2a1d"+
		"\3\2\2\2\u2a14\u2a15\7\u0273\2\2\u2a15\u2a16\7\u0493\2\2\u2a16\u2a1e\7"+
		"\u03d5\2\2\u2a17\u2a18\7\u0273\2\2\u2a18\u2a19\7\u0493\2\2\u2a19\u2a1e"+
		"\7\u02d1\2\2\u2a1a\u2a1b\7\u0273\2\2\u2a1b\u2a1c\7\u0493\2\2\u2a1c\u2a1e"+
		"\7f\2\2\u2a1d\u2a14\3\2\2\2\u2a1d\u2a17\3\2\2\2\u2a1d\u2a1a\3\2\2\2\u2a1d"+
		"\u2a1e\3\2\2\2\u2a1e\u2a20\3\2\2\2\u2a1f\u2a21\5\u0512\u028a\2\u2a20\u2a1f"+
		"\3\2\2\2\u2a20\u2a21\3\2\2\2\u2a21\u2a23\3\2\2\2\u2a22\u2a24\5\u053c\u029f"+
		"\2\u2a23\u2a22\3\2\2\2\u2a23\u2a24\3\2\2\2\u2a24\u2ab6\3\2\2\2\u2a25\u2a26"+
		"\7\u027b\2\2\u2a26\u2a27\7\u0493\2\2\u2a27\u2a2a\5,\27\2\u2a28\u2a29\7"+
		"\u01ed\2\2\u2a29\u2a2b\7\u04a3\2\2\u2a2a\u2a28\3\2\2\2\u2a2a\u2a2b\3\2"+
		"\2\2\u2a2b\u2a35\3\2\2\2\u2a2c\u2a2d\7\u0273\2\2\u2a2d\u2a2e\7\u0493\2"+
		"\2\u2a2e\u2a36\7\u03d5\2\2\u2a2f\u2a30\7\u0273\2\2\u2a30\u2a31\7\u0493"+
		"\2\2\u2a31\u2a36\7\u02d1\2\2\u2a32\u2a33\7\u0273\2\2\u2a33\u2a34\7\u0493"+
		"\2\2\u2a34\u2a36\7f\2\2\u2a35\u2a2c\3\2\2\2\u2a35\u2a2f\3\2\2\2\u2a35"+
		"\u2a32\3\2\2\2\u2a35\u2a36\3\2\2\2\u2a36\u2a38\3\2\2\2\u2a37\u2a39\5\u0512"+
		"\u028a\2\u2a38\u2a37\3\2\2\2\u2a38\u2a39\3\2\2\2\u2a39\u2a3b\3\2\2\2\u2a3a"+
		"\u2a3c\5\u053c\u029f\2\u2a3b\u2a3a\3\2\2\2\u2a3b\u2a3c\3\2\2\2\u2a3c\u2ab6"+
		"\3\2\2\2\u2a3d\u2a3e\7\u0292\2\2\u2a3e\u2a3f\7\u0493\2\2\u2a3f\u2a42\7"+
		"\u04a3\2\2\u2a40\u2a41\7\u01ed\2\2\u2a41\u2a43\7\u04a3\2\2\u2a42\u2a40"+
		"\3\2\2\2\u2a42\u2a43\3\2\2\2\u2a43\u2a4d\3\2\2\2\u2a44\u2a45\7\u0273\2"+
		"\2\u2a45\u2a46\7\u0493\2\2\u2a46\u2a4e\7\u03d5\2\2\u2a47\u2a48\7\u0273"+
		"\2\2\u2a48\u2a49\7\u0493\2\2\u2a49\u2a4e\7\u02d1\2\2\u2a4a\u2a4b\7\u0273"+
		"\2\2\u2a4b\u2a4c\7\u0493\2\2\u2a4c\u2a4e\7f\2\2\u2a4d\u2a44\3\2\2\2\u2a4d"+
		"\u2a47\3\2\2\2\u2a4d\u2a4a\3\2\2\2\u2a4d\u2a4e\3\2\2\2\u2a4e\u2a50\3\2"+
		"\2\2\u2a4f\u2a51\5\u0512\u028a\2\u2a50\u2a4f\3\2\2\2\u2a50\u2a51\3\2\2"+
		"\2\u2a51\u2a53\3\2\2\2\u2a52\u2a54\5\u053c\u029f\2\u2a53\u2a52\3\2\2\2"+
		"\u2a53\u2a54\3\2\2\2\u2a54\u2ab6\3\2\2\2\u2a55\u2a56\7\u01a4\2\2\u2a56"+
		"\u2a57\7\u0493\2\2\u2a57\u2a5a\7\u04a3\2\2\u2a58\u2a59\7\u01ed\2\2\u2a59"+
		"\u2a5b\7\u04a3\2\2\u2a5a\u2a58\3\2\2\2\u2a5a\u2a5b\3\2\2\2\u2a5b\u2a65"+
		"\3\2\2\2\u2a5c\u2a5d\7\u0273\2\2\u2a5d\u2a5e\7\u0493\2\2\u2a5e\u2a66\7"+
		"\u03d5\2\2\u2a5f\u2a60\7\u0273\2\2\u2a60\u2a61\7\u0493\2\2\u2a61\u2a66"+
		"\7\u02d1\2\2\u2a62\u2a63\7\u0273\2\2\u2a63\u2a64\7\u0493\2\2\u2a64\u2a66"+
		"\7f\2\2\u2a65\u2a5c\3\2\2\2\u2a65\u2a5f\3\2\2\2\u2a65\u2a62\3\2\2\2\u2a65"+
		"\u2a66\3\2\2\2\u2a66\u2a68\3\2\2\2\u2a67\u2a69\5\u0512\u028a\2\u2a68\u2a67"+
		"\3\2\2\2\u2a68\u2a69\3\2\2\2\u2a69\u2a6b\3\2\2\2\u2a6a\u2a6c\5\u053c\u029f"+
		"\2\u2a6b\u2a6a\3\2\2\2\u2a6b\u2a6c\3\2\2\2\u2a6c\u2ab6\3\2\2\2\u2a6d\u2a6e"+
		"\7\u0392\2\2\u2a6e\u2a6f\7\u0493\2\2\u2a6f\u2a72\7\u04a3\2\2\u2a70\u2a71"+
		"\7\u01ed\2\2\u2a71\u2a73\7\u04a3\2\2\u2a72\u2a70\3\2\2\2\u2a72\u2a73\3"+
		"\2\2\2\u2a73\u2a7d\3\2\2\2\u2a74\u2a75\7\u0273\2\2\u2a75\u2a76\7\u0493"+
		"\2\2\u2a76\u2a7e\7\u03d5\2\2\u2a77\u2a78\7\u0273\2\2\u2a78\u2a79\7\u0493"+
		"\2\2\u2a79\u2a7e\7\u02d1\2\2\u2a7a\u2a7b\7\u0273\2\2\u2a7b\u2a7c\7\u0493"+
		"\2\2\u2a7c\u2a7e\7f\2\2\u2a7d\u2a74\3\2\2\2\u2a7d\u2a77\3\2\2\2\u2a7d"+
		"\u2a7a\3\2\2\2\u2a7d\u2a7e\3\2\2\2\u2a7e\u2a80\3\2\2\2\u2a7f\u2a81\5\u0512"+
		"\u028a\2\u2a80\u2a7f\3\2\2\2\u2a80\u2a81\3\2\2\2\u2a81\u2a83\3\2\2\2\u2a82"+
		"\u2a84\5\u053c\u029f\2\u2a83\u2a82\3\2\2\2\u2a83\u2a84\3\2\2\2\u2a84\u2ab6"+
		"\3\2\2\2\u2a85\u2a86\7\u0339\2\2\u2a86\u2a87\7\u0493\2\2\u2a87\u2a8a\7"+
		"\u04a3\2\2\u2a88\u2a89\7\u01ed\2\2\u2a89\u2a8b\7\u04a3\2\2\u2a8a\u2a88"+
		"\3\2\2\2\u2a8a\u2a8b\3\2\2\2\u2a8b\u2a95\3\2\2\2\u2a8c\u2a8d\7\u0273\2"+
		"\2\u2a8d\u2a8e\7\u0493\2\2\u2a8e\u2a96\7\u03d5\2\2\u2a8f\u2a90\7\u0273"+
		"\2\2\u2a90\u2a91\7\u0493\2\2\u2a91\u2a96\7\u02d1\2\2\u2a92\u2a93\7\u0273"+
		"\2\2\u2a93\u2a94\7\u0493\2\2\u2a94\u2a96\7f\2\2\u2a95\u2a8c\3\2\2\2\u2a95"+
		"\u2a8f\3\2\2\2\u2a95\u2a92\3\2\2\2\u2a95\u2a96\3\2\2\2\u2a96\u2a98\3\2"+
		"\2\2\u2a97\u2a99\5\u0512\u028a\2\u2a98\u2a97\3\2\2\2\u2a98\u2a99\3\2\2"+
		"\2\u2a99\u2a9b\3\2\2\2\u2a9a\u2a9c\5\u053c\u029f\2\u2a9b\u2a9a\3\2\2\2"+
		"\u2a9b\u2a9c\3\2\2\2\u2a9c\u2ab6\3\2\2\2\u2a9d\u2a9e\7\u0477\2\2\u2a9e"+
		"\u2a9f\7\u0493\2\2\u2a9f\u2aa2\7\u04a3\2\2\u2aa0\u2aa1\7\u01ed\2\2\u2aa1"+
		"\u2aa3\7\u04a3\2\2\u2aa2\u2aa0\3\2\2\2\u2aa2\u2aa3\3\2\2\2\u2aa3\u2aad"+
		"\3\2\2\2\u2aa4\u2aa5\7\u0273\2\2\u2aa5\u2aa6\7\u0493\2\2\u2aa6\u2aae\7"+
		"\u03d5\2\2\u2aa7\u2aa8\7\u0273\2\2\u2aa8\u2aa9\7\u0493\2\2\u2aa9\u2aae"+
		"\7\u02d1\2\2\u2aaa\u2aab\7\u0273\2\2\u2aab\u2aac\7\u0493\2\2\u2aac\u2aae"+
		"\7f\2\2\u2aad\u2aa4\3\2\2\2\u2aad\u2aa7\3\2\2\2\u2aad\u2aaa\3\2\2\2\u2aad"+
		"\u2aae\3\2\2\2\u2aae\u2ab0\3\2\2\2\u2aaf\u2ab1\5\u0512\u028a\2\u2ab0\u2aaf"+
		"\3\2\2\2\u2ab0\u2ab1\3\2\2\2\u2ab1\u2ab3\3\2\2\2\u2ab2\u2ab4\5\u053c\u029f"+
		"\2\u2ab3\u2ab2\3\2\2\2\u2ab3\u2ab4\3\2\2\2\u2ab4\u2ab6\3\2\2\2\u2ab5\u29f5"+
		"\3\2\2\2\u2ab5\u2a0d\3\2\2\2\u2ab5\u2a25\3\2\2\2\u2ab5\u2a3d\3\2\2\2\u2ab5"+
		"\u2a55\3\2\2\2\u2ab5\u2a6d\3\2\2\2\u2ab5\u2a85\3\2\2\2\u2ab5\u2a9d\3\2"+
		"\2\2\u2ab6\u0547\3\2\2\2\u2ab7\u2ab8\b\u02a5\1\2\u2ab8\u2abb\5\u054a\u02a6"+
		"\2\u2ab9\u2abb\5\u0642\u0322\2\u2aba\u2ab7\3\2\2\2\u2aba\u2ab9\3\2\2\2"+
		"\u2abb\u2ac1\3\2\2\2\u2abc\u2abd\f\3\2\2\u2abd\u2abe\7\u0481\2\2\u2abe"+
		"\u2ac0\5\u054a\u02a6\2\u2abf\u2abc\3\2\2\2\u2ac0\u2ac3\3\2\2\2\u2ac1\u2abf"+
		"\3\2\2\2\u2ac1\u2ac2\3\2\2\2\u2ac2\u0549\3\2\2\2\u2ac3\u2ac1\3\2\2\2\u2ac4"+
		"\u2ac6\7\u03ec\2\2\u2ac5\u2ac7\7\u0493\2\2\u2ac6\u2ac5\3\2\2\2\u2ac6\u2ac7"+
		"\3\2\2\2\u2ac7\u2ac8\3\2\2\2\u2ac8\u2ae3\7\u0179\2\2\u2ac9\u2acb\7\u0407"+
		"\2\2\u2aca\u2acc\7\u0493\2\2\u2acb\u2aca\3\2\2\2\u2acb\u2acc\3\2\2\2\u2acc"+
		"\u2acd\3\2\2\2\u2acd\u2ae3\5\u01a2\u00d2\2\u2ace\u2ad0\7\u045b\2\2\u2acf"+
		"\u2ad1\7\u0493\2\2\u2ad0\u2acf\3\2\2\2\u2ad0\u2ad1\3\2\2\2\u2ad1\u2ad2"+
		"\3\2\2\2\u2ad2\u2ae3\7\u0179\2\2\u2ad3\u2ad5\7\u0340\2\2\u2ad4\u2ad6\7"+
		"\u0493\2\2\u2ad5\u2ad4\3\2\2\2\u2ad5\u2ad6\3\2\2\2\u2ad6\u2ad7\3\2\2\2"+
		"\u2ad7\u2ae3\7\u0179\2\2\u2ad8\u2ada\7\u03a1\2\2\u2ad9\u2adb\7\u0493\2"+
		"\2\u2ada\u2ad9\3\2\2\2\u2ada\u2adb\3\2\2\2\u2adb\u2adc\3\2\2\2\u2adc\u2ae3"+
		"\7\u0179\2\2\u2add\u2adf\7\u00e9\2\2\u2ade\u2ae0\7\u0493\2\2\u2adf\u2ade"+
		"\3\2\2\2\u2adf\u2ae0\3\2\2\2\u2ae0\u2ae1\3\2\2\2\u2ae1\u2ae3\7\u0179\2"+
		"\2\u2ae2\u2ac4\3\2\2\2\u2ae2\u2ac9\3\2\2\2\u2ae2\u2ace\3\2\2\2\u2ae2\u2ad3"+
		"\3\2\2\2\u2ae2\u2ad8\3\2\2\2\u2ae2\u2add\3\2\2\2\u2ae3\u054b\3\2\2\2\u2ae4"+
		"\u2ae5\t\u00ae\2\2\u2ae5\u054d\3\2\2\2\u2ae6\u2ae7\t\u00af\2\2\u2ae7\u054f"+
		"\3\2\2\2\u2ae8\u2ae9\t\u00b0\2\2\u2ae9\u0551\3\2\2\2\u2aea\u2aeb\t\u00b1"+
		"\2\2\u2aeb\u0553\3\2\2\2\u2aec\u2af8\5\u0558\u02ad\2\u2aed\u2af8\5\u055a"+
		"\u02ae\2\u2aee\u2af8\5\u055c\u02af\2\u2aef\u2af8\5\u0564\u02b3\2\u2af0"+
		"\u2af8\5\u056e\u02b8\2\u2af1\u2af8\5\u0570\u02b9\2\u2af2\u2af8\5\u0576"+
		"\u02bc\2\u2af3\u2af8\5\u0578\u02bd\2\u2af4\u2af8\5\u057a\u02be\2\u2af5"+
		"\u2af8\5\u0594\u02cb\2\u2af6\u2af8\5\u059e\u02d0\2\u2af7\u2aec\3\2\2\2"+
		"\u2af7\u2aed\3\2\2\2\u2af7\u2aee\3\2\2\2\u2af7\u2aef\3\2\2\2\u2af7\u2af0"+
		"\3\2\2\2\u2af7\u2af1\3\2\2\2\u2af7\u2af2\3\2\2\2\u2af7\u2af3\3\2\2\2\u2af7"+
		"\u2af4\3\2\2\2\u2af7\u2af5\3\2\2\2\u2af7\u2af6\3\2\2\2\u2af8\u0555\3\2"+
		"\2\2\u2af9\u2afa\7\u04a2\2\2\u2afa\u0557\3\2\2\2\u2afb\u2afc\7\u03b9\2"+
		"\2\u2afc\u2afd\7\u0470\2\2\u2afd\u2afe\5\u0556\u02ac\2\u2afe\u2aff\7\u034d"+
		"\2\2\u2aff\u2b00\7\u04a3\2\2\u2b00\u0559\3\2\2\2\u2b01\u2b02\7\u017f\2"+
		"\2\u2b02\u2b03\7\u0470\2\2\u2b03\u2b04\5\u0556\u02ac\2\u2b04\u055b\3\2"+
		"\2\2\u2b05\u2b07\7\u01d6\2\2\u2b06\u2b08\t\u00b2\2\2\u2b07\u2b06\3\2\2"+
		"\2\u2b07\u2b08\3\2\2\2\u2b08\u2b09\3\2\2\2\u2b09\u2b0a\5\u055e\u02b0\2"+
		"\u2b0a\u055d\3\2\2\2\u2b0b\u2b0c\5\u0560\u02b1\2\u2b0c\u055f\3\2\2\2\u2b0d"+
		"\u2b12\5\u0562\u02b2\2\u2b0e\u2b0f\7\u0481\2\2\u2b0f\u2b11\5\u0562\u02b2"+
		"\2\u2b10\u2b0e\3\2\2\2\u2b11\u2b14\3\2\2\2\u2b12\u2b10\3\2\2\2\u2b12\u2b13"+
		"\3\2\2\2\u2b13\u0561\3\2\2\2\u2b14\u2b12\3\2\2\2\u2b15\u2b17\7\u01d8\2"+
		"\2\u2b16\u2b15\3\2\2\2\u2b16\u2b17\3\2\2\2\u2b17\u2b18\3\2\2\2\u2b18\u2b30"+
		"\7\u0380\2\2\u2b19\u2b1a\7\u0203\2\2\u2b1a\u2b30\7\u0380\2\2\u2b1b\u2b1c"+
		"\7\u028b\2\2\u2b1c\u2b30\7\u0380\2\2\u2b1d\u2b1e\7\u025a\2\2\u2b1e\u2b30"+
		"\7\u0380\2\2\u2b1f\u2b20\7d\2\2\u2b20\u2b30\7\u0380\2\2\u2b21\u2b25\7"+
		"\u03fc\2\2\u2b22\u2b23\7\u0416\2\2\u2b23\u2b26\7\u04a2\2\2\u2b24\u2b26"+
		"\7\u0380\2\2\u2b25\u2b22\3\2\2\2\u2b25\u2b24\3\2\2\2\u2b26\u2b30\3\2\2"+
		"\2\u2b27\u2b28\7\u030f\2\2\u2b28\u2b30\7\u0330\2\2\u2b29\u2b30\7\u02e0"+
		"\2\2\u2b2a\u2b30\7\u0216\2\2\u2b2b\u2b30\7\u01f9\2\2\u2b2c\u2b30\7\u034a"+
		"\2\2\u2b2d\u2b30\7J\2\2\u2b2e\u2b30\7\u0223\2\2\u2b2f\u2b16\3\2\2\2\u2b2f"+
		"\u2b19\3\2\2\2\u2b2f\u2b1b\3\2\2\2\u2b2f\u2b1d\3\2\2\2\u2b2f\u2b1f\3\2"+
		"\2\2\u2b2f\u2b21\3\2\2\2\u2b2f\u2b27\3\2\2\2\u2b2f\u2b29\3\2\2\2\u2b2f"+
		"\u2b2a\3\2\2\2\u2b2f\u2b2b\3\2\2\2\u2b2f\u2b2c\3\2\2\2\u2b2f\u2b2d\3\2"+
		"\2\2\u2b2f\u2b2e\3\2\2\2\u2b30\u0563\3\2\2\2\u2b31\u2b32\7\u0421\2\2\u2b32"+
		"\u2b33\5\u05e2\u02f2\2\u2b33\u2b35\7\u03de\2\2\u2b34\u2b36\5\u05e2\u02f2"+
		"\2\u2b35\u2b34\3\2\2\2\u2b35\u2b36\3\2\2\2\u2b36\u2b52\3\2\2\2\u2b37\u2b38"+
		"\7\u0421\2\2\u2b38\u2b39\5\u05e2\u02f2\2\u2b39\u2b3a\7\u03bd\2\2\u2b3a"+
		"\u2b52\3\2\2\2\u2b3b\u2b3c\7\u0421\2\2\u2b3c\u2b3d\5\u05e2\u02f2\2\u2b3d"+
		"\u2b3e\7\u010b\2\2\u2b3e\u2b52\3\2\2\2\u2b3f\u2b40\7\u0421\2\2\u2b40\u2b41"+
		"\5\u05e2\u02f2\2\u2b41\u2b42\7\u010b\2\2\u2b42\u2b47\5\u0566\u02b4\2\u2b43"+
		"\u2b44\7\u0158\2\2\u2b44\u2b45\5\u02d0\u0169\2\u2b45\u2b46\5:\36\2\u2b46"+
		"\u2b48\3\2\2\2\u2b47\u2b43\3\2\2\2\u2b47\u2b48\3\2\2\2\u2b48\u2b4f\3\2"+
		"\2\2\u2b49\u2b4a\7\u00d6\2\2\u2b4a\u2b4b\7\u0179\2\2\u2b4b\u2b4c\7\u0481"+
		"\2\2\u2b4c\u2b50\7\u0179\2\2\u2b4d\u2b4e\7\u00d6\2\2\u2b4e\u2b50\7\u0179"+
		"\2\2\u2b4f\u2b49\3\2\2\2\u2b4f\u2b4d\3\2\2\2\u2b4f\u2b50\3\2\2\2\u2b50"+
		"\u2b52\3\2\2\2\u2b51\u2b31\3\2\2\2\u2b51\u2b37\3\2\2\2\u2b51\u2b3b\3\2"+
		"\2\2\u2b51\u2b3f\3\2\2\2\u2b52\u0565\3\2\2\2\u2b53\u2b57\5\u0568\u02b5"+
		"\2\u2b54\u2b55\7\u04a2\2\2\u2b55\u2b57\5\u056a\u02b6\2\u2b56\u2b53\3\2"+
		"\2\2\u2b56\u2b54\3\2\2\2\u2b57\u0567\3\2\2\2\u2b58\u2b59\t\u00b3\2\2\u2b59"+
		"\u0569\3\2\2\2\u2b5a\u2b64\7\u0200\2\2\u2b5b\u2b64\7\u028f\2\2\u2b5c\u2b64"+
		"\7\u0252\2\2\u2b5d\u2b64\7\u0282\2\2\u2b5e\u2b5f\5\u056c\u02b7\2\u2b5f"+
		"\u2b60\7\u0487\2\2\u2b60\u2b61\5\32\16\2\u2b61\u2b62\7\u048e\2\2\u2b62"+
		"\u2b64\3\2\2\2\u2b63\u2b5a\3\2\2\2\u2b63\u2b5b\3\2\2\2\u2b63\u2b5c\3\2"+
		"\2\2\u2b63\u2b5d\3\2\2\2\u2b63\u2b5e\3\2\2\2\u2b64\u056b\3\2\2\2\u2b65"+
		"\u2b66\t\u00b4\2\2\u2b66\u056d\3\2\2\2\u2b67\u2b68\7\u0124\2\2\u2b68\u2b69"+
		"\7\u03ad\2\2\u2b69\u056f\3\2\2\2\u2b6a\u2b6b\7x\2\2\u2b6b\u2b6c\7\u028e"+
		"\2\2\u2b6c\u2b6d\7\u04a2\2\2\u2b6d\u2b6e\7\u00a3\2\2\u2b6e\u2b6f\7\u045c"+
		"\2\2\u2b6f\u2b70\7\u0219\2\2\u2b70\u2b71\7\u04a2\2\2\u2b71\u2b72\7\u025d"+
		"\2\2\u2b72\u2b73\7\u0487\2\2\u2b73\u2b74\5\u0572\u02ba\2\u2b74\u2b75\7"+
		"\u048e\2\2\u2b75\u0571\3\2\2\2\u2b76\u2b7b\5\u0574\u02bb\2\u2b77\u2b78"+
		"\7\u0481\2\2\u2b78\u2b7a\5\u0574\u02bb\2\u2b79\u2b77\3\2\2\2\u2b7a\u2b7d"+
		"\3\2\2\2\u2b7b\u2b79\3\2\2\2\u2b7b\u2b7c\3\2\2\2\u2b7c\u0573\3\2\2\2\u2b7d"+
		"\u2b7b\3\2\2\2\u2b7e\u2b7f\7\u02f4\2\2\u2b7f\u2b8d\7\u04a3\2\2\u2b80\u2b81"+
		"\7\u037e\2\2\u2b81\u2b8d\7\u04a3\2\2\u2b82\u2b83\7\u0085\2\2\u2b83\u2b8d"+
		"\7\u04a3\2\2\u2b84\u2b85\7\u03c0\2\2\u2b85\u2b8d\7\u04a3\2\2\u2b86\u2b87"+
		"\7\u0394\2\2\u2b87\u2b8d\7\u04a3\2\2\u2b88\u2b89\7\u01fd\2\2\u2b89\u2b8d"+
		"\7\u04a3\2\2\u2b8a\u2b8b\7\u01b1\2\2\u2b8b\u2b8d\7\u0179\2\2\u2b8c\u2b7e"+
		"\3\2\2\2\u2b8c\u2b80\3\2\2\2\u2b8c\u2b82\3\2\2\2\u2b8c\u2b84\3\2\2\2\u2b8c"+
		"\u2b86\3\2\2\2\u2b8c\u2b88\3\2\2\2\u2b8c\u2b8a\3\2\2\2\u2b8d\u0575\3\2"+
		"\2\2\u2b8e\u2b8f\7W\2\2\u2b8f\u2b90\7\u028e\2\2\u2b90\u2b91\7\u04a2\2"+
		"\2\u2b91\u2b92\7\u025d\2\2\u2b92\u2b93\7\u0487\2\2\u2b93\u2b94\5\u0572"+
		"\u02ba\2\u2b94\u2b95\7\u048e\2\2\u2b95\u0577\3\2\2\2\u2b96\u2b97\7\u0097"+
		"\2\2\u2b97\u2b9a\7\u028e\2\2\u2b98\u2b99\7\u00b6\2\2\u2b99\u2b9b\7\u009e"+
		"\2\2\u2b9a\u2b98\3\2\2\2\u2b9a\u2b9b\3\2\2\2\u2b9b\u2b9c\3\2\2\2\u2b9c"+
		"\u2b9d\7\u04a2\2\2\u2b9d\u0579\3\2\2\2\u2b9e\u2b9f\7x\2\2\u2b9f\u2ba0"+
		"\7\u0384\2\2\u2ba0\u2ba1\7\u00af\2\2\u2ba1\u2ba2\5\u057c\u02bf\2\u2ba2"+
		"\u057b\3\2\2\2\u2ba3\u2ba4\7\u04a2\2\2\u2ba4\u2ba5\5\u057e\u02c0\2\u2ba5"+
		"\u2ba6\5\u0584\u02c3\2\u2ba6\u057d\3\2\2\2\u2ba7\u2ba8\7U\2\2\u2ba8\u2bac"+
		"\5\u0580\u02c1\2\u2ba9\u2baa\7U\2\2\u2baa\u2bac\5\u0582\u02c2\2\u2bab"+
		"\u2ba7\3\2\2\2\u2bab\u2ba9\3\2\2\2\u2bac\u057f\3\2\2\2\u2bad\u2bae\7\u0180"+
		"\2\2\u2bae\u2baf\7\u04a3\2\2\u2baf\u0581\3\2\2\2\u2bb0\u2bb1\7\u01b6\2"+
		"\2\u2bb1\u2bb2\7\u04a3\2\2\u2bb2\u0583\3\2\2\2\u2bb3\u2bb5\5\u0586\u02c4"+
		"\2\u2bb4\u2bb3\3\2\2\2\u2bb4\u2bb5\3\2\2\2\u2bb5\u0585\3\2\2\2\u2bb6\u2bb7"+
		"\b\u02c4\1\2\u2bb7\u2bb8\5\u0588\u02c5\2\u2bb8\u2bc0\3\2\2\2\u2bb9\u2bba"+
		"\f\4\2\2\u2bba\u2bbf\5\u0588\u02c5\2\u2bbb\u2bbc\f\3\2\2\u2bbc\u2bbd\7"+
		"\u0481\2\2\u2bbd\u2bbf\5\u0588\u02c5\2\u2bbe\u2bb9\3\2\2\2\u2bbe\u2bbb"+
		"\3\2\2\2\u2bbf\u2bc2\3\2\2\2\u2bc0\u2bbe\3\2\2\2\u2bc0\u2bc1\3\2\2\2\u2bc1"+
		"\u0587\3\2\2\2\u2bc2\u2bc0\3\2\2\2\u2bc3\u2bcb\5\u058a\u02c6\2\u2bc4\u2bcb"+
		"\5\u058c\u02c7\2\u2bc5\u2bcb\5\u058e\u02c8\2\u2bc6\u2bcb\5\u0590\u02c9"+
		"\2\u2bc7\u2bcb\5\u05a8\u02d5\2\u2bc8\u2bcb\5\u05a6\u02d4\2\u2bc9\u2bcb"+
		"\5\u0592\u02ca\2\u2bca\u2bc3\3\2\2\2\u2bca\u2bc4\3\2\2\2\u2bca\u2bc5\3"+
		"\2\2\2\u2bca\u2bc6\3\2\2\2\u2bca\u2bc7\3\2\2\2\u2bca\u2bc8\3\2\2\2\u2bca"+
		"\u2bc9\3\2\2\2\u2bcb\u0589\3\2\2\2\u2bcc\u2bcd\7\u0424\2\2\u2bcd\u2bce"+
		"\5\u01a4\u00d3\2\u2bce\u2bcf\7\u0179\2\2\u2bcf\u058b\3\2\2\2\u2bd0\u2bd1"+
		"\7\u03cf\2\2\u2bd1\u2bd2\5\u01a4\u00d3\2\u2bd2\u2bd3\7\u0179\2\2\u2bd3"+
		"\u058d\3\2\2\2\u2bd4\u2bd5\7\u022a\2\2\u2bd5\u2bd6\5\u01a4\u00d3\2\u2bd6"+
		"\u2bd7\7\u0179\2\2\u2bd7\u058f\3\2\2\2\u2bd8\u2bd9\7\u02ec\2\2\u2bd9\u2bda"+
		"\5\u01a4\u00d3\2\u2bda\u2bdb\7\u0179\2\2\u2bdb\u0591\3\2\2\2\u2bdc\u2bdd"+
		"\7\u01ed\2\2\u2bdd\u2bde\5\u01a4\u00d3\2\u2bde\u2bdf\7\u04a3\2\2\u2bdf"+
		"\u0593\3\2\2\2\u2be0\u2be1\7W\2\2\u2be1\u2be2\7\u0384\2\2\u2be2\u2be3"+
		"\7\u00af\2\2\u2be3\u2be4\5\u0596\u02cc\2\u2be4\u0595\3\2\2\2\u2be5\u2be6"+
		"\7\u04a2\2\2\u2be6\u2be7\5\u057e\u02c0\2\u2be7\u2be8\5\u0598\u02cd\2\u2be8"+
		"\u0597\3\2\2\2\u2be9\u2beb\5\u059a\u02ce\2\u2bea\u2be9\3\2\2\2\u2bea\u2beb"+
		"\3\2\2\2\u2beb\u0599\3\2\2\2\u2bec\u2bed\b\u02ce\1\2\u2bed\u2bee\5\u059c"+
		"\u02cf\2\u2bee\u2bf6\3\2\2\2\u2bef\u2bf0\f\4\2\2\u2bf0\u2bf5\5\u059c\u02cf"+
		"\2\u2bf1\u2bf2\f\3\2\2\u2bf2\u2bf3\7\u0481\2\2\u2bf3\u2bf5\5\u059c\u02cf"+
		"\2\u2bf4\u2bef\3\2\2\2\u2bf4\u2bf1\3\2\2\2\u2bf5\u2bf8\3\2\2\2\u2bf6\u2bf4"+
		"\3\2\2\2\u2bf6\u2bf7\3\2\2\2\u2bf7\u059b\3\2\2\2\u2bf8\u2bf6\3\2\2\2\u2bf9"+
		"\u2bfd\5\u058a\u02c6\2\u2bfa\u2bfd\5\u05a8\u02d5\2\u2bfb\u2bfd\5\u05a6"+
		"\u02d4\2\u2bfc\u2bf9\3\2\2\2\u2bfc\u2bfa\3\2\2\2\u2bfc\u2bfb\3\2\2\2\u2bfd"+
		"\u059d\3\2\2\2\u2bfe\u2bff\7\u0097\2\2\u2bff\u2c00\7\u0384\2\2\u2c00\u2c01"+
		"\7\u00af\2\2\u2c01\u2c02\7\u04a2\2\2\u2c02\u2c03\5\u05a0\u02d1\2\u2c03"+
		"\u059f\3\2\2\2\u2c04\u2c06\5\u05a2\u02d2\2\u2c05\u2c04\3\2\2\2\u2c05\u2c06"+
		"\3\2\2\2\u2c06\u05a1\3\2\2\2\u2c07\u2c0b\b\u02d2\1\2\u2c08\u2c09\5\u0642"+
		"\u0322\2\u2c09\u2c0a\7\u0481\2\2\u2c0a\u2c0c\3\2\2\2\u2c0b\u2c08\3\2\2"+
		"\2\u2c0b\u2c0c\3\2\2\2\u2c0c\u2c0d\3\2\2\2\u2c0d\u2c0e\5\u05a4\u02d3\2"+
		"\u2c0e\u2c16\3\2\2\2\u2c0f\u2c10\f\4\2\2\u2c10\u2c15\5\u05a4\u02d3\2\u2c11"+
		"\u2c12\f\3\2\2\u2c12\u2c13\7\u0481\2\2\u2c13\u2c15\5\u05a4\u02d3\2\u2c14"+
		"\u2c0f\3\2\2\2\u2c14\u2c11\3\2\2\2\u2c15\u2c18\3\2\2\2\u2c16\u2c14\3\2"+
		"\2\2\u2c16\u2c17\3\2\2\2\u2c17\u05a3\3\2\2\2\u2c18\u2c16\3\2\2\2\u2c19"+
		"\u2c1c\5\u05a8\u02d5\2\u2c1a\u2c1c\5\u05a6\u02d4\2\u2c1b\u2c19\3\2\2\2"+
		"\u2c1b\u2c1a\3\2\2\2\u2c1c\u05a5\3\2\2\2\u2c1d\u2c1e\t\u00b5\2\2\u2c1e"+
		"\u05a7\3\2\2\2\u2c1f\u2c20\5\u03cc\u01e7\2\u2c20\u2c21\7\u0203\2\2\u2c21"+
		"\u2c22\5\u01a4\u00d3\2\u2c22\u2c23\tB\2\2\u2c23\u05a9\3\2\2\2\u2c24\u2c25"+
		"\5\u05ac\u02d7\2\u2c25\u05ab\3\2\2\2\u2c26\u2c28\5\u05ae\u02d8\2\u2c27"+
		"\u2c26\3\2\2\2\u2c28\u2c29\3\2\2\2\u2c29\u2c27\3\2\2\2\u2c29\u2c2a\3\2"+
		"\2\2\u2c2a\u05ad\3\2\2\2\u2c2b\u2c2e\5\u0394\u01cb\2\u2c2c\u2c2e\5\u0398"+
		"\u01cd\2\u2c2d\u2c2b\3\2\2\2\u2c2d\u2c2c\3\2\2\2\u2c2e\u05af\3\2\2\2\u2c2f"+
		"\u2c30\7\u0121\2\2\u2c30\u2c31\7\u02ba\2\2\u2c31\u2c33\5\u017e\u00c0\2"+
		"\u2c32\u2c34\5\u0180\u00c1\2\u2c33\u2c32\3\2\2\2\u2c33\u2c34\3\2\2\2\u2c34"+
		"\u05b1\3\2\2\2\u2c35\u2c36\7\u0121\2\2\u2c36\u2c37\5\u00f0y\2\u2c37\u2c38"+
		"\5\u017e\u00c0\2\u2c38\u05b3\3\2\2\2\u2c39\u2c41\7\u0121\2\2\u2c3a\u2c3c"+
		"\7\u0291\2\2\u2c3b\u2c3a\3\2\2\2\u2c3b\u2c3c\3\2\2\2\u2c3c\u2c3f\3\2\2"+
		"\2\u2c3d\u2c3f\7\u0430\2\2\u2c3e\u2c3b\3\2\2\2\u2c3e\u2c3d\3\2\2\2\u2c3f"+
		"\u2c42\3\2\2\2\u2c40\u2c42\7\u00dc\2\2\u2c41\u2c3e\3\2\2\2\u2c41\u2c40"+
		"\3\2\2\2\u2c42\u2c43\3\2\2\2\u2c43\u2c44\7\u01e8\2\2\u2c44\u2c45\5\u05b6"+
		"\u02dc\2\u2c45\u05b5\3\2\2\2\u2c46\u2c56\5\u05b8\u02dd\2\u2c47\u2c48\5"+
		"\u05b8\u02dd\2\u2c48\u2c49\7\u0481\2\2\u2c49\u2c4b\3\2\2\2\u2c4a\u2c47"+
		"\3\2\2\2\u2c4a\u2c4b\3\2\2\2\u2c4b\u2c4c\3\2\2\2\u2c4c\u2c4d\7\u02c2\2"+
		"\2\u2c4d\u2c4e\7\u0418\2\2\u2c4e\u2c56\5\u05ba\u02de\2\u2c4f\u2c50\7\u02c2"+
		"\2\2\u2c50\u2c51\7\u0418\2\2\u2c51\u2c52\5\u05ba\u02de\2\u2c52\u2c53\7"+
		"\u0481\2\2\u2c53\u2c54\5\u05b8\u02dd\2\u2c54\u2c56\3\2\2\2\u2c55\u2c46"+
		"\3\2\2\2\u2c55\u2c4a\3\2\2\2\u2c55\u2c4f\3\2\2\2\u2c56\u05b7\3\2\2\2\u2c57"+
		"\u2c58\7\u010b\2\2\u2c58\u2c5c\7\u0443\2\2\u2c59\u2c5a\7\u010b\2\2\u2c5a"+
		"\u2c5c\7\u0160\2\2\u2c5b\u2c57\3\2\2\2\u2c5b\u2c59\3\2\2\2\u2c5c\u05b9"+
		"\3\2\2\2\u2c5d\u2c5e\7\u010b\2\2\u2c5e\u2c65\7\u02ca\2\2\u2c5f\u2c60\7"+
		"\u010b\2\2\u2c60\u2c65\7\u0270\2\2\u2c61\u2c62\7\u02d2\2\2\u2c62\u2c65"+
		"\7\u010b\2\2\u2c63\u2c65\7\u0381\2\2\u2c64\u2c5d\3\2\2\2\u2c64\u2c5f\3"+
		"\2\2\2\u2c64\u2c61\3\2\2\2\u2c64\u2c63\3\2\2\2\u2c65\u05bb\3\2\2\2\u2c66"+
		"\u2c6b\5\u0642\u0322\2\u2c67\u2c68\7\u0471\2\2\u2c68\u2c69\7g\2\2\u2c69"+
		"\u2c6b\7\u04a3\2\2\u2c6a\u2c66\3\2\2\2\u2c6a\u2c67\3\2\2\2\u2c6b\u05bd"+
		"\3\2\2\2\u2c6c\u2c6d\7\u02f2\2\2\u2c6d\u2c6e\5\u05da\u02ee\2\u2c6e\u05bf"+
		"\3\2\2\2\u2c6f\u2c71\7\u0234\2\2\u2c70\u2c72\7\u0420\2\2\u2c71\u2c70\3"+
		"\2\2\2\u2c71\u2c72\3\2\2\2\u2c72\u2c73\3\2\2\2\u2c73\u2c74\7\u0140\2\2"+
		"\u2c74\u2c7a\5\u05da\u02ee\2\u2c75\u2c76\7\u0234\2\2\u2c76\u2c77\7\u0140"+
		"\2\2\u2c77\u2c78\7\u02f2\2\2\u2c78\u2c7a\5\u05da\u02ee\2\u2c79\u2c6f\3"+
		"\2\2\2\u2c79\u2c75\3\2\2\2\u2c7a\u05c1\3\2\2\2\u2c7b\u2c7c\7\u010f\2\2"+
		"\u2c7c\u2c7d\7\u02f2\2\2\u2c7d\u2c7e\5\u05da\u02ee\2\u2c7e\u05c3\3\2\2"+
		"\2\u2c7f\u2c80\7W\2\2\u2c80\u2c81\7\u0323\2\2\u2c81\u2c82\5\u05cc\u02e7"+
		"\2\u2c82\u2c83\7\u0289\2\2\u2c83\u2c96\3\2\2\2\u2c84\u2c85\7W\2\2\u2c85"+
		"\u2c86\7\u0323\2\2\u2c86\u2c87\5\u05cc\u02e7\2\u2c87\u2c89\5\u05c6\u02e4"+
		"\2\u2c88\u2c8a\7\u00a8\2\2\u2c89\u2c88\3\2\2\2\u2c89\u2c8a\3\2\2\2\u2c8a"+
		"\u2c96\3\2\2\2\u2c8b\u2c8c\7W\2\2\u2c8c\u2c8d\7\u0323\2\2\u2c8d\u2c8e"+
		"\5\u0518\u028d\2\u2c8e\u2c8f\7\u02ab\2\2\u2c8f\u2c91\5\u05c6\u02e4\2\u2c90"+
		"\u2c92\7\u0121\2\2\u2c91\u2c90\3\2\2\2\u2c91\u2c92\3\2\2\2\u2c92\u2c93"+
		"\3\2\2\2\u2c93\u2c94\5\u05c8\u02e5\2\u2c94\u2c96\3\2\2\2\u2c95\u2c7f\3"+
		"\2\2\2\u2c95\u2c84\3\2\2\2\u2c95\u2c8b\3\2\2\2\u2c96\u05c5\3\2\2\2\u2c97"+
		"\u2c98\5\u05d6\u02ec\2\u2c98\u2c9a\7\u027b\2\2\u2c99\u2c9b\7\u0493\2\2"+
		"\u2c9a\u2c99\3\2\2\2\u2c9a\u2c9b\3\2\2\2\u2c9b\u2c9c\3\2\2\2\u2c9c\u2c9d"+
		"\5,\27\2\u2c9d\u05c7\3\2\2\2\u2c9e\u2ca1\5\u05ca\u02e6\2\u2c9f\u2ca0\7"+
		"\u0481\2\2\u2ca0\u2ca2\5\u05c8\u02e5\2\u2ca1\u2c9f\3\2\2\2\u2ca1\u2ca2"+
		"\3\2\2\2\u2ca2\u05c9\3\2\2\2\u2ca3\u2ca5\7\u0292\2\2\u2ca4\u2ca6\7\u0493"+
		"\2\2\u2ca5\u2ca4\3\2\2\2\u2ca5\u2ca6\3\2\2\2\u2ca6\u2ca7\3\2\2\2\u2ca7"+
		"\u2cae\7\u04a3\2\2\u2ca8\u2caa\7\u045e\2\2\u2ca9\u2cab\7\u0493\2\2\u2caa"+
		"\u2ca9\3\2\2\2\u2caa\u2cab\3\2\2\2\u2cab\u2cac\3\2\2\2\u2cac\u2cae\5\u01a2"+
		"\u00d2\2\u2cad\u2ca3\3\2\2\2\u2cad\u2ca8\3\2\2\2\u2cae\u05cb\3\2\2\2\u2caf"+
		"\u2cb0\7U\2\2\u2cb0\u2cb7\7\u02ab\2\2\u2cb1\u2cb2\7\u02c5\2\2\u2cb2\u2cb7"+
		"\7\u02ab\2\2\u2cb3\u2cb4\tY\2\2\u2cb4\u2cb5\7\u02ab\2\2\u2cb5\u2cb7\7"+
		"\u031a\2\2\u2cb6\u2caf\3\2\2\2\u2cb6\u2cb1\3\2\2\2\u2cb6\u2cb3\3\2\2\2"+
		"\u2cb7\u05cd\3\2\2\2\u2cb8\u2cb9\7W\2\2\u2cb9\u2cba\7\u0323\2\2\u2cba"+
		"\u2cbc\5\u05d0\u02e9\2\u2cbb\u2cbd\7\u00a8\2\2\u2cbc\u2cbb\3\2\2\2\u2cbc"+
		"\u2cbd\3\2\2\2\u2cbd\u05cf\3\2\2\2\u2cbe\u2cbf\7\u02f1\2\2\u2cbf\u2cc0"+
		"\7\u0140\2\2\u2cc0\u2cc1\7\u03d0\2\2\u2cc1\u2cc2\7\u0140\2\2\u2cc2\u2cc6"+
		"\7\u0108\2\2\u2cc3\u2cc4\7\u015f\2\2\u2cc4\u2cc5\7\u0430\2\2\u2cc5\u2cc7"+
		"\7\u0293\2\2\u2cc6\u2cc3\3\2\2\2\u2cc6\u2cc7\3\2\2\2\u2cc7\u2cdf\3\2\2"+
		"\2\u2cc8\u2cc9\7\u02f1\2\2\u2cc9\u2cca\7\u0140\2\2\u2cca\u2ccb\7\u03d0"+
		"\2\2\u2ccb\u2ccc\7\u0140\2\2\u2ccc\u2ccd\7\u02cb\2\2\u2ccd\u2cd1\7\u041f"+
		"\2\2\u2cce\u2ccf\7\u015f\2\2\u2ccf\u2cd0\7\u0430\2\2\u2cd0\u2cd2\7\u0293"+
		"\2\2\u2cd1\u2cce\3\2\2\2\u2cd1\u2cd2\3\2\2\2\u2cd2\u2cdf\3\2\2\2\u2cd3"+
		"\u2cd4\7\u0408\2\2\u2cd4\u2cd5\7\u02cb\2\2\u2cd5\u2cd6\7\u041f\2\2\u2cd6"+
		"\u2cdf\7\u02ab\2\2\u2cd7\u2cd8\7s\2\2\u2cd8\u2cd9\7\u0140\2\2\u2cd9\u2cda"+
		"\7\u02cb\2\2\u2cda\u2cdf\7\u041f\2\2\u2cdb\u2cdc\7\u0257\2\2\u2cdc\u2cdd"+
		"\7\u0140\2\2\u2cdd\u2cdf\5\u05c6\u02e4\2\u2cde\u2cbe\3\2\2\2\u2cde\u2cc8"+
		"\3\2\2\2\u2cde\u2cd3\3\2\2\2\u2cde\u2cd7\3\2\2\2\u2cde\u2cdb\3\2\2\2\u2cdf"+
		"\u05d1\3\2\2\2\u2ce0\u2ce1\7W\2\2\u2ce1\u2ce2\7\u0323\2\2\u2ce2\u2ce3"+
		"\7\u0121\2\2\u2ce3\u2ce4\7\u041f\2\2\u2ce4\u2ce5\7\u02ab\2\2\u2ce5\u2ce6"+
		"\7\u0140\2\2\u2ce6\u2ce7\7\u036d\2\2\u2ce7\u2ce8\5\u05d4\u02eb\2\u2ce8"+
		"\u05d3\3\2\2\2\u2ce9\u2cea\t\u00b6\2\2\u2cea\u05d5\3\2\2\2\u2ceb\u2cee"+
		"\5\u05e2\u02f2\2\u2cec\u2cee\7\u04a3\2\2\u2ced\u2ceb\3\2\2\2\u2ced\u2cec"+
		"\3\2\2\2\u2cee\u05d7\3\2\2\2\u2cef\u2cf0\7W\2\2\u2cf0\u2cf1\7\u0323\2"+
		"\2\u2cf1\u2cf2\7\u0183\2\2\u2cf2\u2cf3\7\u041f\2\2\u2cf3\u2cf4\7\u02ab"+
		"\2\2\u2cf4\u2cf5\5\u05c6\u02e4\2\u2cf5\u2cf6\7\u0121\2\2\u2cf6\u2cf7\7"+
		"\u0295\2\2\u2cf7\u2cfa\5\u05d6\u02ec\2\u2cf8\u2cf9\7\u0392\2\2\u2cf9\u2cfb"+
		"\7\u04a3\2\2\u2cfa\u2cf8\3\2\2\2\u2cfa\u2cfb\3\2\2\2\u2cfb\u2cfd\3\2\2"+
		"\2\u2cfc\u2cfe\7\u00a8\2\2\u2cfd\u2cfc\3\2\2\2\u2cfd\u2cfe\3\2\2\2\u2cfe"+
		"\u2d00\3\2\2\2\u2cff\u2d01\7\u0289\2\2\u2d00\u2cff\3\2\2\2\u2d00\u2d01"+
		"\3\2\2\2\u2d01\u05d9\3\2\2\2\u2d02\u2d06\7\u04a2\2\2\u2d03\u2d06\5\u0638"+
		"\u031d\2\u2d04\u2d06\5\u05de\u02f0\2\u2d05\u2d02\3\2\2\2\u2d05\u2d03\3"+
		"\2\2\2\u2d05\u2d04\3\2\2\2\u2d06\u05db\3\2\2\2\u2d07\u2d08\t\u00b7\2\2"+
		"\u2d08\u05dd\3\2\2\2\u2d09\u2d0a\5\u05dc\u02ef\2\u2d0a\u2d0b\7\u048c\2"+
		"\2\u2d0b\u2d0c\5\u05e0\u02f1\2\u2d0c\u05df\3\2\2\2\u2d0d\u2d10\7\u04a2"+
		"\2\2\u2d0e\u2d10\5\u0634\u031b\2\u2d0f\u2d0d\3\2\2\2\u2d0f\u2d0e\3\2\2"+
		"\2\u2d10\u05e1\3\2\2\2\u2d11\u2d14\7\u04a2\2\2\u2d12\u2d14\5\u0634\u031b"+
		"\2\u2d13\u2d11\3\2\2\2\u2d13\u2d12\3\2\2\2\u2d14\u05e3\3\2\2\2\u2d15\u2d16"+
		"\t\u00b8\2\2\u2d16\u05e5\3\2\2\2\u2d17\u2d1a\7\u04a2\2\2\u2d18\u2d1a\5"+
		"\u0634\u031b\2\u2d19\u2d17\3\2\2\2\u2d19\u2d18\3\2\2\2\u2d1a\u05e7\3\2"+
		"\2\2\u2d1b\u2d1c\t\u00b9\2\2\u2d1c\u05e9\3\2\2\2\u2d1d\u2d1e\7W\2\2\u2d1e"+
		"\u2d1f\7\u0323\2\2\u2d1f\u2d20\5\u05ec\u02f7\2\u2d20\u2d21\7\u02da\2\2"+
		"\u2d21\u2d23\5\u05e2\u02f2\2\u2d22\u2d24\5\u053c\u029f\2\u2d23\u2d22\3"+
		"\2\2\2\u2d23\u2d24\3\2\2\2\u2d24\u05eb\3\2\2\2\u2d25\u2d26\t\u00ba\2\2"+
		"\u2d26\u05ed\3\2\2\2\u2d27\u2d28\7\u043f\2\2\u2d28\u2d29\7\u0487\2\2\u2d29"+
		"\u2d2a\58\35\2\u2d2a\u2d2b\7\u0481\2\2\u2d2b\u2d2c\5&\24\2\u2d2c\u2d2d"+
		"\5\u05f0\u02f9\2\u2d2d\u2d2e\7v\2\2\u2d2e\u2d2f\7\u0487\2\2\u2d2f\u2d30"+
		"\5\u05f2\u02fa\2\u2d30\u2d31\7\u048e\2\2\u2d31\u2d32\7\u048e\2\2\u2d32"+
		"\u05ef\3\2\2\2\u2d33\u2d34\5\u0642\u0322\2\u2d34\u05f1\3\2\2\2\u2d35\u2d3a"+
		"\5\u05f4\u02fb\2\u2d36\u2d37\7\u0481\2\2\u2d37\u2d39\5\u05f4\u02fb\2\u2d38"+
		"\u2d36\3\2\2\2\u2d39\u2d3c\3\2\2\2\u2d3a\u2d38\3\2\2\2\u2d3a\u2d3b\3\2"+
		"\2\2\u2d3b\u05f3\3\2\2\2\u2d3c\u2d3a\3\2\2\2\u2d3d\u2d42\5\u05f6\u02fc"+
		"\2\u2d3e\u2d42\5\u05f8\u02fd\2\u2d3f\u2d42\5\u05fa\u02fe\2\u2d40\u2d42"+
		"\5\u05fc\u02ff\2\u2d41\u2d3d\3\2\2\2\u2d41\u2d3e\3\2\2\2\u2d41\u2d3f\3"+
		"\2\2\2\u2d41\u2d40\3\2\2\2\u2d42\u05f5\3\2\2\2\u2d43\u2d44\5\u05e0\u02f1"+
		"\2\u2d44\u2d45\7\u00a7\2\2\u2d45\u2d46\7\u00c7\2\2\u2d46\u05f7\3\2\2\2"+
		"\u2d47\u2d48\5\u05e0\u02f1\2\u2d48\u2d4a\5\u014e\u00a8\2\u2d49\u2d4b\5"+
		"\u0180\u00c1\2\u2d4a\u2d49\3\2\2\2\u2d4a\u2d4b\3\2\2\2\u2d4b\u2d4c\3\2"+
		"\2\2\u2d4c\u2d4d\7\u009e\2\2\u2d4d\u2d4e\7\u02fa\2\2\u2d4e\u2d4f\5&\24"+
		"\2\u2d4f\u2d50\5\u05f0\u02f9\2\u2d50\u05f9\3\2\2\2\u2d51\u2d52\5\u05e0"+
		"\u02f1\2\u2d52\u2d54\5\u014e\u00a8\2\u2d53\u2d55\5\u0180\u00c1\2\u2d54"+
		"\u2d53\3\2\2\2\u2d54\u2d55\3\2\2\2\u2d55\u2d56\3\2\2\2\u2d56\u2d57\7\u02fa"+
		"\2\2\u2d57\u2d58\5&\24\2\u2d58\u2d59\5\u05fe\u0300\2\u2d59\u05fb\3\2\2"+
		"\2\u2d5a\u2d5c\7\u03b2\2\2\u2d5b\u2d5d\7\u02fa\2\2\u2d5c\u2d5b\3\2\2\2"+
		"\u2d5c\u2d5d\3\2\2\2\u2d5d\u2d5e\3\2\2\2\u2d5e\u2d5f\5&\24\2\u2d5f\u2d60"+
		"\7v\2\2\u2d60\u2d61\7\u0487\2\2\u2d61\u2d62\5\u05f2\u02fa\2\u2d62\u2d63"+
		"\7\u048e\2\2\u2d63\u05fd\3\2\2\2\u2d64\u2d65\5\u0620\u0311\2\u2d65\u2d66"+
		"\5\u0600\u0301\2\u2d66\u05ff\3\2\2\2\u2d67\u2d68\5\u0642\u0322\2\u2d68"+
		"\u0601\3\2\2\2\u2d69\u2d6e\5\u0604\u0303\2\u2d6a\u2d6b\7\u0481\2\2\u2d6b"+
		"\u2d6d\5\u0604\u0303\2\u2d6c\u2d6a\3\2\2\2\u2d6d\u2d70\3\2\2\2\u2d6e\u2d6c"+
		"\3\2\2\2\u2d6e\u2d6f\3\2\2\2\u2d6f\u0603\3\2\2\2\u2d70\u2d6e\3\2\2\2\u2d71"+
		"\u2d72\5\u05e2\u02f2\2\u2d72\u2d73\7\u0493\2\2\u2d73\u2d74\5\u0606\u0304"+
		"\2\u2d74\u0605\3\2\2\2\u2d75\u2d78\7\u0179\2\2\u2d76\u2d78\5\u05e2\u02f2"+
		"\2\u2d77\u2d75\3\2\2\2\u2d77\u2d76\3\2\2\2\u2d78\u0607\3\2\2\2\u2d79\u2d7a"+
		"\7\7\2\2\u2d7a\u2d7b\7\u0487\2\2\u2d7b\u2d7c\58\35\2\u2d7c\u2d7d\7\u0481"+
		"\2\2\u2d7d\u2d80\5\"\22\2\u2d7e\u2d7f\7\u0266\2\2\u2d7f\u2d81\5\u0144"+
		"\u00a3\2\u2d80\u2d7e\3\2\2\2\u2d80\u2d81\3\2\2\2\u2d81\u2d82\3\2\2\2\u2d82"+
		"\u2d83\5\u060a\u0306\2\u2d83\u2d84\7\u048e\2\2\u2d84\u0609\3\2\2\2\u2d85"+
		"\u2d87\7\u01a3\2\2\u2d86\u2d85\3\2\2\2\u2d86\u2d87\3\2\2\2\u2d87\u2d89"+
		"\3\2\2\2\u2d88\u2d8a\5\u060c\u0307\2\u2d89\u2d88\3\2\2\2\u2d89\u2d8a\3"+
		"\2\2\2\u2d8a\u2d8c\3\2\2\2\u2d8b\u2d8d\7\u01f5\2\2\u2d8c\u2d8b\3\2\2\2"+
		"\u2d8c\u2d8d\3\2\2\2\u2d8d\u2d8f\3\2\2\2\u2d8e\u2d90\7\u0326\2\2\u2d8f"+
		"\u2d8e\3\2\2\2\u2d8f\u2d90\3\2\2\2\u2d90\u2d92\3\2\2\2\u2d91\u2d93\5\u060e"+
		"\u0308\2\u2d92\u2d91\3\2\2\2\u2d92\u2d93\3\2\2\2\u2d93\u2d95\3\2\2\2\u2d94"+
		"\u2d96\7\61\2\2\u2d95\u2d94\3\2\2\2\u2d95\u2d96\3\2\2\2\u2d96\u2d98\3"+
		"\2\2\2\u2d97\u2d99\5\u0610\u0309\2\u2d98\u2d97\3\2\2\2\u2d98\u2d99\3\2"+
		"\2\2\u2d99\u2d9b\3\2\2\2\u2d9a\u2d9c\7&\2\2\u2d9b\u2d9a\3\2\2\2\u2d9b"+
		"\u2d9c\3\2\2\2\u2d9c\u060b\3\2\2\2\u2d9d\u2d9e\7\13\2\2\u2d9e\u2da2\7"+
		"\62\2\2\u2d9f\u2da0\7\33\2\2\u2da0\u2da2\7\62\2\2\u2da1\u2d9d\3\2\2\2"+
		"\u2da1\u2d9f\3\2\2\2\u2da2\u060d\3\2\2\2\u2da3\u2da4\7E\2\2\u2da4\u2dbc"+
		"\7\u0219\2\2\u2da5\u2da6\7E\2\2\u2da6\u2da7\7\30\2\2\u2da7\u2dbc\7\u0219"+
		"\2\2\u2da8\u2da9\7\u015f\2\2\u2da9\u2dbc\7\u0219\2\2\u2daa\u2dab\7\u015f"+
		"\2\2\u2dab\u2dac\7\30\2\2\u2dac\u2dbc\7\u0219\2\2\u2dad\u2dae\7\u015f"+
		"\2\2\u2dae\u2daf\7M\2\2\u2daf\u2dbc\7\u0219\2\2\u2db0\u2db1\7\u015f\2"+
		"\2\u2db1\u2db2\7\37\2\2\u2db2\u2dbc\7\u0219\2\2\u2db3\u2db4\7\u015f\2"+
		"\2\u2db4\u2db5\7M\2\2\u2db5\u2db6\7\30\2\2\u2db6\u2dbc\7\u0219\2\2\u2db7"+
		"\u2db8\7\u015f\2\2\u2db8\u2db9\7\37\2\2\u2db9\u2dba\7\30\2\2\u2dba\u2dbc"+
		"\7\u0219\2\2\u2dbb\u2da3\3\2\2\2\u2dbb\u2da5\3\2\2\2\u2dbb\u2da8\3\2\2"+
		"\2\u2dbb\u2daa\3\2\2\2\u2dbb\u2dad\3\2\2\2\u2dbb\u2db0\3\2\2\2\u2dbb\u2db3"+
		"\3\2\2\2\u2dbb\u2db7\3\2\2\2\u2dbc\u060f\3\2\2\2\u2dbd\u2dd5\5\u0618\u030d"+
		"\2\u2dbe\u2dd5\5\u0616\u030c\2\u2dbf\u2dd5\5\u0614\u030b\2\u2dc0\u2dc1"+
		"\5\u0616\u030c\2\u2dc1\u2dc2\5\u0618\u030d\2\u2dc2\u2dd5\3\2\2\2\u2dc3"+
		"\u2dc4\5\u0618\u030d\2\u2dc4\u2dc5\5\u0616\u030c\2\u2dc5\u2dd5\3\2\2\2"+
		"\u2dc6\u2dc7\5\u0616\u030c\2\u2dc7\u2dc8\5\u0614\u030b\2\u2dc8\u2dd5\3"+
		"\2\2\2\u2dc9\u2dca\5\u0618\u030d\2\u2dca\u2dcb\5\u0614\u030b\2\u2dcb\u2dd5"+
		"\3\2\2\2\u2dcc\u2dcd\5\u0616\u030c\2\u2dcd\u2dce\5\u0618\u030d\2\u2dce"+
		"\u2dcf\5\u0614\u030b\2\u2dcf\u2dd5\3\2\2\2\u2dd0\u2dd1\5\u0618\u030d\2"+
		"\u2dd1\u2dd2\5\u0616\u030c\2\u2dd2\u2dd3\5\u0614\u030b\2\u2dd3\u2dd5\3"+
		"\2\2\2\u2dd4\u2dbd\3\2\2\2\u2dd4\u2dbe\3\2\2\2\u2dd4\u2dbf\3\2\2\2\u2dd4"+
		"\u2dc0\3\2\2\2\u2dd4\u2dc3\3\2\2\2\u2dd4\u2dc6\3\2\2\2\u2dd4\u2dc9\3\2"+
		"\2\2\u2dd4\u2dcc\3\2\2\2\u2dd4\u2dd0\3\2\2\2\u2dd5\u0611\3\2\2\2\u2dd6"+
		"\u2dd7\t\u00bb\2\2\u2dd7\u0613\3\2\2\2\u2dd8\u2ddb\7\23\2\2\u2dd9\u2ddb"+
		"\5\u0612\u030a\2\u2dda\u2dd8\3\2\2\2\u2dda\u2dd9\3\2\2\2\u2ddb\u2ddc\3"+
		"\2\2\2\u2ddc\u2ddd\7\u00f7\2\2\u2ddd\u2dde\7H\2\2\u2dde\u0615\3\2\2\2"+
		"\u2ddf\u2de1\7\u03ff\2\2\u2de0\u2de2\7\30\2\2\u2de1\u2de0\3\2\2\2\u2de1"+
		"\u2de2\3\2\2\2\u2de2\u2de5\3\2\2\2\u2de3\u2de5\5\u0612\u030a\2\u2de4\u2ddf"+
		"\3\2\2\2\u2de4\u2de3\3\2\2\2\u2de5\u2de9\3\2\2\2\u2de6\u2de7\7\u03ff\2"+
		"\2\u2de7\u2de9\7\u0390\2\2\u2de8\u2de4\3\2\2\2\u2de8\u2de6\3\2\2\2\u2de9"+
		"\u2dea\3\2\2\2\u2dea\u2deb\7\u00f7\2\2\u2deb\u2dec\7\u01d8\2\2\u2dec\u0617"+
		"\3\2\2\2\u2ded\u2def\7\u03ff\2\2\u2dee\u2df0\7\30\2\2\u2def\u2dee\3\2"+
		"\2\2\u2def\u2df0\3\2\2\2\u2df0\u2df3\3\2\2\2\u2df1\u2df3\5\u0612\u030a"+
		"\2\u2df2\u2ded\3\2\2\2\u2df2\u2df1\3\2\2\2\u2df3\u2df7\3\2\2\2\u2df4\u2df5"+
		"\7\u03ff\2\2\u2df5\u2df7\7\u0390\2\2\u2df6\u2df2\3\2\2\2\u2df6\u2df4\3"+
		"\2\2\2\u2df7\u2df8\3\2\2\2\u2df8\u2df9\7\u00f7\2\2\u2df9\u2dfa\7\u03ff"+
		"\2\2\u2dfa\u0619\3\2\2\2\u2dfb\u2dfc\7\u018c\2\2\u2dfc\u2dfd\7\u0487\2"+
		"\2\u2dfd\u2dfe\58\35\2\u2dfe\u2dff\7\u0481\2\2\u2dff\u2e02\5\"\22\2\u2e00"+
		"\u2e01\7\u0266\2\2\u2e01\u2e03\5\u0144\u00a3\2\u2e02\u2e00\3\2\2\2\u2e02"+
		"\u2e03\3\2\2\2\u2e03\u2e04\3\2\2\2\u2e04\u2e05\5\u061c\u030f\2\u2e05\u2e06"+
		"\7\u048e\2\2\u2e06\u061b\3\2\2\2\u2e07\u2e09\7\u01a3\2\2\u2e08\u2e07\3"+
		"\2\2\2\u2e08\u2e09\3\2\2\2\u2e09\u2e0b\3\2\2\2\u2e0a\u2e0c\7\u0326\2\2"+
		"\u2e0b\u2e0a\3\2\2\2\u2e0b\u2e0c\3\2\2\2\u2e0c\u2e0e\3\2\2\2\u2e0d\u2e0f"+
		"\5\u061e\u0310\2\u2e0e\u2e0d\3\2\2\2\u2e0e\u2e0f\3\2\2\2\u2e0f\u061d\3"+
		"\2\2\2\u2e10\u2e16\5\u0622\u0312\2\u2e11\u2e16\5\u0624\u0313\2\u2e12\u2e13"+
		"\5\u0622\u0312\2\u2e13\u2e14\5\u0624\u0313\2\u2e14\u2e16\3\2\2\2\u2e15"+
		"\u2e10\3\2\2\2\u2e15\u2e11\3\2\2\2\u2e15\u2e12\3\2\2\2\u2e16\u061f\3\2"+
		"\2\2\u2e17\u2e1e\5\u0642\u0322\2\u2e18\u2e1a\5\u0622\u0312\2\u2e19\u2e1b"+
		"\5\u0624\u0313\2\u2e1a\u2e19\3\2\2\2\u2e1a\u2e1b\3\2\2\2\u2e1b\u2e1e\3"+
		"\2\2\2\u2e1c\u2e1e\5\u0624\u0313\2\u2e1d\u2e17\3\2\2\2\u2e1d\u2e18\3\2"+
		"\2\2\u2e1d\u2e1c\3\2\2\2\u2e1e\u0621\3\2\2\2\u2e1f\u2e20\5\u0626\u0314"+
		"\2\u2e20\u2e21\7\u00f7\2\2\u2e21\u2e22\7\u03ff\2\2\u2e22\u0623\3\2\2\2"+
		"\u2e23\u2e24\5\u0626\u0314\2\u2e24\u2e25\7\u00f7\2\2\u2e25\u2e26\7\u01d8"+
		"\2\2\u2e26\u0625\3\2\2\2\u2e27\u2e2c\7\u01d8\2\2\u2e28\u2e2c\7\u0178\2"+
		"\2\u2e29\u2e2a\7\u008b\2\2\u2e2a\u2e2c\5\u0188\u00c5\2\u2e2b\u2e27\3\2"+
		"\2\2\u2e2b\u2e28\3\2\2\2\u2e2b\u2e29\3\2\2\2\u2e2c\u0627\3\2\2\2\u2e2d"+
		"\u2e2e\b\u0315\1\2\u2e2e\u2e31\5\u0642\u0322\2\u2e2f\u2e31\5\u062a\u0316"+
		"\2\u2e30\u2e2d\3\2\2\2\u2e30\u2e2f\3\2\2\2\u2e31\u2e37\3\2\2\2\u2e32\u2e33"+
		"\f\3\2\2\u2e33\u2e34\7\u0481\2\2\u2e34\u2e36\5\u062a\u0316\2\u2e35\u2e32"+
		"\3\2\2\2\u2e36\u2e39\3\2\2\2\u2e37\u2e35\3\2\2\2\u2e37\u2e38\3\2\2\2\u2e38"+
		"\u0629\3\2\2\2\u2e39\u2e37\3\2\2\2\u2e3a\u2e3b\t\u00bc\2\2\u2e3b\u062b"+
		"\3\2\2\2\u2e3c\u2e3d\7\u021d\2\2\u2e3d\u2e41\7\u0179\2\2\u2e3e\u2e3f\7"+
		"\u021d\2\2\u2e3f\u2e41\7\u04a3\2\2\u2e40\u2e3c\3\2\2\2\u2e40\u2e3e\3\2"+
		"\2\2\u2e41\u062d\3\2\2\2\u2e42\u2e43\5\u062c\u0317\2\u2e43\u062f\3\2\2"+
		"\2\u2e44\u2e46\5\u062e\u0318\2\u2e45\u2e44\3\2\2\2\u2e46\u2e47\3\2\2\2"+
		"\u2e47\u2e45\3\2\2\2\u2e47\u2e48\3\2\2\2\u2e48\u0631\3\2\2\2\u2e49\u2e4a"+
		"\7\u033b\2\2\u2e4a\u2e4b\7\u0487\2\2\u2e4b\u2e4c\5\u05e0\u02f1\2\u2e4c"+
		"\u2e4d\7\u048e\2\2\u2e4d\u2e4e\7\u0475\2\2\u2e4e\u2e4f\7^\2\2\u2e4f\u2e50"+
		"\7\u0487\2\2\u2e50\u2e51\5\u0630\u0319\2\u2e51\u2e52\7\u048e\2\2\u2e52"+
		"\u0633\3\2\2\2\u2e53\u2e56\5\u0636\u031c\2\u2e54\u2e56\5\u063e\u0320\2"+
		"\u2e55\u2e53\3\2\2\2\u2e55\u2e54\3\2\2\2\u2e56\u0635\3\2\2\2\u2e57\u2e5b"+
		"\5\u0638\u031d\2\u2e58\u2e5b\5\u063a\u031e\2\u2e59\u2e5b\5\u063c\u031f"+
		"\2\u2e5a\u2e57\3\2\2\2\u2e5a\u2e58\3\2\2\2\u2e5a\u2e59\3\2\2\2\u2e5b\u0637"+
		"\3\2\2\2\u2e5c\u2e5d\t\u00bd\2\2\u2e5d\u0639\3\2\2\2\u2e5e\u2e5f\7\u0394"+
		"\2\2\u2e5f\u063b\3\2\2\2\u2e60\u2e61\7R\2\2\u2e61\u063d\3\2\2\2\u2e62"+
		"\u2e63\t\u00be\2\2\u2e63\u063f\3\2\2\2\u2e64\u2e65\t\u00bf\2\2\u2e65\u0641"+
		"\3\2\2\2\u2e66\u2e67\3\2\2\2\u2e67\u0643\3\2\2\2\u2e68\u2e69\5:\36\2\u2e69"+
		"\u2e6a\7\2\2\3\u2e6a\u0645\3\2\2\2\u2e6b\u2e6c\5\6\4\2\u2e6c\u2e6d\7\2"+
		"\2\3\u2e6d\u0647\3\2\2\2\u0551\u0652\u0654\u06c0\u06cc\u06d2\u06d8\u06da"+
		"\u06e1\u06e4\u06f1\u06f7\u0700\u0708\u070a\u071d\u0724\u072c\u0732\u0736"+
		"\u0738\u073c\u0741\u0745\u074b\u074d\u0750\u0759\u0767\u0772\u0778\u077d"+
		"\u0787\u0794\u07a6\u07a8\u07ad\u07b4\u07bd\u07c2\u07c6\u07ca\u07ce\u07d3"+
		"\u07dd\u07e2\u07ec\u07f7\u07f9\u0802\u0809\u081a\u0822\u0838\u0845\u084c"+
		"\u084e\u0855\u085f\u0862\u0864\u086b\u0875\u087c\u0880\u0884\u088b\u088f"+
		"\u08a6\u08b9\u08c3\u08c7\u08cb\u08e3\u08e8\u0901\u0913\u0915\u0919\u091d"+
		"\u0927\u0931\u0934\u0937\u0942\u0949\u0954\u0959\u0966\u096a\u097b\u0983"+
		"\u0990\u0994\u0998\u09c2\u0a2a\u0a33\u0a4e\u0a52\u0a91\u0a97\u0b0c\u0b15"+
		"\u0b1d\u0b23\u0b2c\u0b35\u0b3a\u0b3d\u0b42\u0b45\u0b4a\u0b4f\u0b55\u0b59"+
		"\u0b5c\u0b63\u0b6b\u0b74\u0b7b\u0b7d\u0b8d\u0b94\u0ba3\u0ba6\u0bb1\u0bb7"+
		"\u0bbf\u0bc2\u0bc5\u0bc9\u0bd0\u0bd2\u0bd7\u0be4\u0be7\u0bed\u0bf0\u0bf9"+
		"\u0bfc\u0bff\u0c06\u0c14\u0c1c\u0c25\u0c2d\u0c2f\u0c34\u0c3b\u0c40\u0c4b"+
		"\u0c4e\u0c52\u0c57\u0c5c\u0c64\u0c67\u0c6e\u0c76\u0c7e\u0c83\u0c88\u0c92"+
		"\u0c96\u0c9c\u0ca7\u0cd7\u0cd9\u0ce0\u0cea\u0cf2\u0cfb\u0d04\u0d08\u0d0f"+
		"\u0d13\u0d1a\u0d21\u0d26\u0d2b\u0d2f\u0d33\u0d38\u0d40\u0d45\u0d4d\u0d53"+
		"\u0d59\u0d5f\u0d62\u0d66\u0d6b\u0d73\u0d7a\u0d81\u0d85\u0d8b\u0d92\u0d96"+
		"\u0da5\u0db1\u0db4\u0dc0\u0dc8\u0dd5\u0ddf\u0de9\u0ded\u0dff\u0e03\u0e0c"+
		"\u0e10\u0e17\u0e1a\u0e1e\u0e23\u0e27\u0e2c\u0e31\u0e38\u0e3b\u0e41\u0e47"+
		"\u0e4e\u0e51\u0e57\u0e5c\u0e62\u0e68\u0e6d\u0e77\u0e7f\u0e83\u0e86\u0e8c"+
		"\u0e90\u0e99\u0e9e\u0ea5\u0eae\u0eb2\u0eb8\u0ebd\u0ec0\u0ec6\u0ecf\u0edc"+
		"\u0ee4\u0eed\u0ef4\u0ef8\u0efb\u0f04\u0f0b\u0f0f\u0f12\u0f15\u0f18\u0f23"+
		"\u0f29\u0f2c\u0f2f\u0f32\u0f3d\u0f42\u0f45\u0f48\u0f53\u0f57\u0f5a\u0f5d"+
		"\u0f61\u0f69\u0f76\u0f7e\u0f86\u0f8f\u0f95\u0f99\u0f9e\u0fa3\u0faa\u0fae"+
		"\u0fb3\u0fba\u0fc3\u0fc8\u0fcc\u0fcf\u0fd5\u0fd9\u0fdc\u0fe0\u0fe3\u0fe6"+
		"\u0fec\u0ff0\u0ff3\u0ff8\u0ffe\u1000\u1005\u1008\u100e\u1012\u1015\u1018"+
		"\u101e\u1022\u1025\u102e\u103d\u1044\u1047\u104e\u1054\u105b\u105e\u1061"+
		"\u1068\u106d\u1074\u1076\u1081\u108a\u1094\u109b\u109f\u10a4\u10a9\u10b2"+
		"\u10bf\u10c2\u10ce\u10d9\u10f2\u10f9\u1101\u110b\u1110\u1113\u111a\u111f"+
		"\u1122\u1124\u1131\u1135\u1138\u113b\u1141\u1145\u1147\u114a\u114d\u1150"+
		"\u1155\u1159\u115e\u1163\u1166\u1169\u116b\u1171\u1174\u1177\u117a\u117f"+
		"\u1182\u1187\u118a\u118f\u1192\u1197\u119a\u119f\u11a7\u11aa\u11b0\u11b3"+
		"\u11b9\u11be\u11c1\u11c8\u11ce\u11d5\u11dc\u11e1\u11e9\u11eb\u11f3\u11f8"+
		"\u11fa\u11ff\u1201\u1205\u1209\u120e\u121e\u1224\u1230\u1244\u1251\u1258"+
		"\u1265\u126d\u1271\u1278\u127b\u1280\u1287\u128d\u129a\u129f\u12a3\u12a7"+
		"\u12af\u12b4\u12b9\u12bd\u12c1\u12c6\u12ca\u12cf\u12d4\u12d9\u12e2\u12e7"+
		"\u12ec\u12f1\u12f6\u12fb\u1300\u1308\u1312\u1317\u131c\u1321\u1326\u132b"+
		"\u1334\u1339\u133e\u1343\u1348\u134d\u1352\u1358\u135e\u1363\u1368\u136d"+
		"\u1372\u1377\u137b\u1380\u1383\u1389\u138d\u1394\u13a2\u13a5\u13ab\u13bd"+
		"\u13c4\u13ce\u13d7\u13e2\u13eb\u13ee\u13f7\u1403\u1407\u140e\u1412\u1415"+
		"\u141e\u142a\u142e\u1431\u1435\u1438\u1442\u144a\u1451\u1456\u1496\u14af"+
		"\u14b9\u14bb\u14c6\u14cc\u14d2\u14d5\u14d8\u14e3\u14ee\u14f1\u14f4\u14ff"+
		"\u1509\u150c\u150f\u151a\u1524\u152f\u1539\u1544\u154d\u1552\u155b\u1563"+
		"\u156a\u156f\u1579\u1582\u1589\u158e\u1597\u159c\u15a2\u15a9\u15b3\u15b9"+
		"\u15c0\u15c4\u15cb\u15d2\u15d4\u15de\u15e7\u15eb\u15ed\u15f1\u15f3\u15f7"+
		"\u15fc\u1614\u161c\u1620\u1626\u162c\u1635\u1643\u1648\u164f\u1653\u1657"+
		"\u165b\u1660\u1665\u166a\u166d\u1674\u1678\u167d\u1681\u1685\u168a\u168e"+
		"\u1696\u169b\u16a0\u16aa\u16af\u16b4\u16b6\u16c0\u16c3\u16c7\u16ca\u16da"+
		"\u16fa\u1706\u170b\u1718\u171d\u1722\u1727\u172c\u172f\u173c\u1748\u174d"+
		"\u1753\u1757\u1759\u1765\u176c\u1770\u1778\u177c\u177f\u1784\u1789\u1792"+
		"\u1799\u179c\u17a0\u17a6\u17aa\u17ac\u17b1\u17b7\u17ce\u17da\u17de\u17e4"+
		"\u17e8\u17ed\u17f5\u17fa\u1800\u1805\u1808\u180d\u1818\u181b\u1821\u1826"+
		"\u1831\u1836\u183a\u1842\u1846\u184d\u1851\u1853\u185a\u1865\u1868\u186b"+
		"\u1873\u1877\u187a\u1881\u1884\u1887\u188b\u1892\u1895\u189a\u189f\u18a5"+
		"\u18a8\u18af\u18b4\u18bb\u18cb\u18d1\u18d8\u18dd\u18e0\u18e4\u18e7\u18eb"+
		"\u18ef\u18f6\u18fb\u1900\u1902\u1906\u1910\u1915\u1919\u191d\u191f\u1926"+
		"\u192d\u1931\u193a\u193d\u1944\u194b\u1950\u1954\u1957\u195d\u1960\u1967"+
		"\u196e\u1972\u1977\u197c\u1981\u1985\u198f\u1994\u1998\u199c\u19a6\u19a9"+
		"\u19ac\u19b2\u19b6\u19bf\u19ca\u19cd\u19d4\u19da\u19e0\u19e5\u19e8\u19ec"+
		"\u19ef\u19f5\u19fa\u19fe\u1a03\u1a08\u1a0b\u1a11\u1a18\u1a1d\u1a28\u1a2f"+
		"\u1a36\u1a3c\u1a43\u1a48\u1a8d\u1aa3\u1ab6\u1aba\u1abd\u1ac1\u1ace\u1ae0"+
		"\u1ae4\u1ae8\u1af0\u1af4\u1af9\u1b00\u1b05\u1b10\u1b15\u1b1a\u1b20\u1b24"+
		"\u1b27\u1b2e\u1b38\u1b40\u1b43\u1b4a\u1b53\u1b5e\u1b63\u1b67\u1b6b\u1b6f"+
		"\u1b73\u1b7c\u1b7e\u1b8b\u1b8e\u1b90\u1b94\u1b98\u1b9b\u1b9d\u1ba0\u1ba4"+
		"\u1ba7\u1bab\u1bad\u1bb3\u1bb5\u1bb7\u1bbd\u1bc0\u1bc7\u1bcb\u1bd0\u1bd2"+
		"\u1bd6\u1be1\u1be4\u1bec\u1bef\u1bf9\u1bff\u1c08\u1c1d\u1c21\u1c23\u1c2c"+
		"\u1c34\u1c3f\u1c44\u1c48\u1c4f\u1c55\u1c59\u1c5d\u1c63\u1c69\u1c6e\u1c76"+
		"\u1c7e\u1c82\u1c89\u1c95\u1c9a\u1ca0\u1caa\u1cac\u1cb2\u1cbc\u1cc8\u1cca"+
		"\u1cd1\u1cda\u1ce2\u1cf0\u1cf6\u1cfd\u1d0b\u1d11\u1d13\u1d1a\u1d1d\u1d20"+
		"\u1d26\u1d2a\u1d30\u1d39\u1d41\u1d46\u1d4a\u1d53\u1d60\u1d64\u1d6b\u1d8a"+
		"\u1d91\u1d96\u1d9b\u1da0\u1da2\u1daa\u1db1\u1db5\u1dbb\u1dc0\u1dca\u1dcc"+
		"\u1dd1\u1dd4\u1ddb\u1de0\u1de8\u1ded\u1df7\u1e00\u1e0a\u1e86\u1e8e\u1e97"+
		"\u1e9d\u1ea7\u1eac\u1eb6\u1ebd\u1ec5\u1ecf\u1ed7\u1ee1\u1eee\u1ef2\u1efd"+
		"\u1f0c\u1f1c\u1f29\u1f35\u1f41\u1f50\u1f54\u1f5c\u1f62\u1f66\u1f6b\u1f76"+
		"\u1f7b\u1f83\u1fa1\u1fa6\u1fb7\u1fc1\u1fd5\u1fda\u1fe3\u1fe7\u1feb\u1ff8"+
		"\u1fff\u2005\u200e\u2018\u201e\u202c\u202e\u2031\u203e\u2045\u204e\u2057"+
		"\u205b\u206c\u206f\u207a\u2084\u2088\u208b\u2092\u2097\u20a2\u20b5\u20bb"+
		"\u20c3\u20c7\u20cb\u20d2\u20d7\u20db\u20e1\u20e5\u20ec\u20f3\u20fa\u2106"+
		"\u2112\u2117\u211d\u2122\u2128\u2132\u2134\u213d\u2140\u2144\u214a\u214e"+
		"\u2154\u215c\u2165\u216e\u2177\u217f\u2188\u218e\u2193\u219b\u21a5\u21b5"+
		"\u21c5\u21cc\u21d4\u21d9\u21e0\u21f7\u21ff\u2204\u2208\u220d\u2215\u2219"+
		"\u221e\u2223\u2229\u2236\u223b\u2241\u2249\u2252\u2261\u2268\u226e\u2271"+
		"\u2275\u2287\u2289\u22a1\u22a4\u22a8\u22ad\u22af\u22b3\u22b6\u22be\u22d5"+
		"\u22d7\u22dc\u22de\u22e5\u22eb\u22f1\u22f3\u22fa\u2303\u230e\u2322\u232f"+
		"\u2336\u233b\u233f\u2341\u2347\u234c\u2356\u235b\u2366\u236b\u236f\u2379"+
		"\u237e\u2386\u2388\u2393\u239d\u23a5\u23ac\u23b1\u23b9\u23c5\u23ca\u23cf"+
		"\u23d9\u23ee\u23f3\u23fa\u2400\u2407\u2414\u2420\u2422\u2429\u242b\u2432"+
		"\u2439\u2440\u2445\u244a\u2452\u2455\u245c\u2462\u2467\u246e\u2474\u2478"+
		"\u247c\u2482";
	private static final String _serializedATNSegment5 =
		"\u2488\u248c\u2494\u2498\u249c\u24a2\u24ad\u24b6\u24bb\u24c8\u24ce\u24d7"+
		"\u24e1\u24f0\u24f4\u24fd\u2503\u250a\u2528\u2545\u2549\u255b\u2562\u2568"+
		"\u256e\u2580\u2588\u2595\u259a\u25a0\u25a5\u25ab\u25af\u25b6\u25bd\u25c6"+
		"\u25d6\u25e1\u25ec\u25f7\u25f9\u2602\u2604\u2608\u2611\u2613\u263c\u2643"+
		"\u264b\u264e\u2651\u2657\u2664\u266d\u2670\u2677\u2683\u2698\u269f\u26ab"+
		"\u26b2\u26ba\u26e3\u26e8\u26f9\u2701\u2704\u2712\u271a\u2722\u2737\u273d"+
		"\u2743\u274b\u2758\u275e\u2771\u2777\u277d\u2784\u278c\u2794\u279f\u27a7"+
		"\u27aa\u27af\u27b7\u27bf\u27ca\u27d0\u27d6\u2807\u280d\u2810\u281e\u2821"+
		"\u2832\u2835\u2846\u2849\u2853\u285e\u286b\u2879\u2893\u28bb\u28c2\u28c6"+
		"\u28cd\u28d2\u28d5\u28dd\u28e5\u28e8\u28ef\u28f3\u28f8\u28ff\u2904\u2909"+
		"\u290e\u2914\u2919\u291d\u2926\u292b\u292f\u2936\u293c\u2940\u2944\u2949"+
		"\u294d\u2953\u2959\u295d\u2962\u2967\u296a\u296f\u2976\u2988\u298e\u2998"+
		"\u299c\u299e\u29a4\u29a8\u29ac\u29b2\u29ba\u29c0\u29c7\u29ca\u29ce\u29d8"+
		"\u29de\u29e4\u29eb\u29f2\u29fa\u2a05\u2a08\u2a0b\u2a12\u2a1d\u2a20\u2a23"+
		"\u2a2a\u2a35\u2a38\u2a3b\u2a42\u2a4d\u2a50\u2a53\u2a5a\u2a65\u2a68\u2a6b"+
		"\u2a72\u2a7d\u2a80\u2a83\u2a8a\u2a95\u2a98\u2a9b\u2aa2\u2aad\u2ab0\u2ab3"+
		"\u2ab5\u2aba\u2ac1\u2ac6\u2acb\u2ad0\u2ad5\u2ada\u2adf\u2ae2\u2af7\u2b07"+
		"\u2b12\u2b16\u2b25\u2b2f\u2b35\u2b47\u2b4f\u2b51\u2b56\u2b63\u2b7b\u2b8c"+
		"\u2b9a\u2bab\u2bb4\u2bbe\u2bc0\u2bca\u2bea\u2bf4\u2bf6\u2bfc\u2c05\u2c0b"+
		"\u2c14\u2c16\u2c1b\u2c29\u2c2d\u2c33\u2c3b\u2c3e\u2c41\u2c4a\u2c55\u2c5b"+
		"\u2c64\u2c6a\u2c71\u2c79\u2c89\u2c91\u2c95\u2c9a\u2ca1\u2ca5\u2caa\u2cad"+
		"\u2cb6\u2cbc\u2cc6\u2cd1\u2cde\u2ced\u2cfa\u2cfd\u2d00\u2d05\u2d0f\u2d13"+
		"\u2d19\u2d23\u2d3a\u2d41\u2d4a\u2d54\u2d5c\u2d6e\u2d77\u2d80\u2d86\u2d89"+
		"\u2d8c\u2d8f\u2d92\u2d95\u2d98\u2d9b\u2da1\u2dbb\u2dd4\u2dda\u2de1\u2de4"+
		"\u2de8\u2def\u2df2\u2df6\u2e02\u2e08\u2e0b\u2e0e\u2e15\u2e1a\u2e1d\u2e2b"+
		"\u2e30\u2e37\u2e40\u2e47\u2e55\u2e5a";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4,
			_serializedATNSegment5
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}