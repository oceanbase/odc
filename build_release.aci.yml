version: "1.5"

# 流水线作业的触发选项
only:
  triggerType:
    - manual

stages:
  - 构建准备
  - 构建RPM
  - 构建Docker
  - 构建收尾


计算版本号:
  stage: 构建准备
  script:
    # 发布时使用日期戳作为 rpm_release，效果如 20210125
    # docker tag 和 rpm_release 保持一致，效果如 2.3.3-20210125
    # 注意除了 dev/test 开头的 docker tag，其它都会被认为是正式版，正式版的 docker 无法覆盖写入
    # 如果当前分支是个人开发分支，缺省的 docker tag 会加上 'test-' 前缀，避免误操作导致正式版 docker 发布
    # 为支持验证 release 打包过程和提供一定的构建灵活性，可在 pipeline 发起构建时，指定以下变量
    # - rpm_release，指定 rpm release 号，如指定为 2021011202
    # - image_tag，指定 docker image tag，如指定为 test-2.3.3-current.user-20210125
    - current_branch_name="${ACI_COMMIT_REF_NAME}"
    - sprint_branch_match_regex="(release|dev).*?$"
    - rpm_release_regex="^[0-9a-zA-Z_]+$"
    - tag_prefix=`[[ "${current_branch_name}" =~ ${sprint_branch_match_regex} ]] && echo "test" || echo "dev"`
    - export DEFAULT_RPM_RELEASE=$(date +%Y%m%d)
    - export RPM_RELEASE=${ACI_VAR_rpm_release:-$DEFAULT_RPM_RELEASE}
    - export RPM_RELEASE_CHECK_RESULT=`[[ "${RPM_RELEASE}" =~ ${rpm_release_regex} ]] && echo 1 || echo 0`
    - export DEFAULT_DOCKER_IMAGE_TAG="${tag_prefix}`cat distribution/odc-server-VER.txt`-${RPM_RELEASE}"
    - export DOCKER_IMAGE_TAG=${ACI_VAR_image_tag:-$DEFAULT_DOCKER_IMAGE_TAG}
    - export tag_x86=${DOCKER_IMAGE_TAG}
    - export tag_arm=${DOCKER_IMAGE_TAG}
    - if [ "$ACI_VAR_skip_build_x86" = "true" ]; then tag_x86="test-skip-${tag_x86}"; fi
    - if [ "$ACI_VAR_skip_build_arm" = "true" ]; then tag_arm="test-skip-${DOCKER_IMAGE_TAG}"; fi
    - export DOCKER_IMAGE_TAG_X86=${tag_x86}
    - export DOCKER_IMAGE_TAG_ARM=${tag_arm}
  variables:
    - RPM_RELEASE
    - DOCKER_IMAGE_TAG
    - DOCKER_IMAGE_TAG_X86
    - DOCKER_IMAGE_TAG_ARM
    - RPM_RELEASE_CHECK_RESULT
  checkRule:
    - RPM_RELEASE_CHECK_RESULT = 1

单元测试:
  only:
    triggerType:
      - pullRequest
  stage: 构建准备
  component: linkq-ut
  inputs:
    accurate: false
    ciConfig:
      jdkVersion: "17"
      mvnVersion: "3.6.3"
      encoding: "UTF-8"
      mvnArgs: "-Dmaven.gitcommitid.skip=false -Dmaven.repo.cache=false" #mvn参数 -D形式
      parallelCount: "4"
      coverageExclusions: "**/test/**,**/controller/**,**/*Exception*,**/*Entity*,**/*Repository*,
          **/*Configuration*,**/*Dao*,**/*Constant*,**/*Dto*,**/*Param*,**/*Req*,**/*Resp*,**/*Response*,
          **/*Request*,**/integration/**,**/model/**,**/constant/**"
    ciBeforeScript: script/build_libs.sh -s $(pwd)/settings.xml
    customEnvironmentVariables:
      ODC_CONFIG_SECRET: ${{parameters.ODC_CONFIG_SECRET}}
      ODC_OB_DEFAULT_MYSQL_COMMANDLINE: ${{parameters.ODC_OB_DEFAULT_MYSQL_COMMANDLINE}}
      ODC_OB_DEFAULT_ORACLE_COMMANDLINE: ${{parameters.ODC_OB_DEFAULT_ORACLE_COMMANDLINE}}
      ODC_MYSQL_DEFAULT_COMMANDLINE: ${{parameters.ODC_MYSQL_DEFAULT_COMMANDLINE}}
      ODC_DORIS_DEFAULT_COMMANDLINE: ${{parameters.ODC_DORIS_DEFAULT_COMMANDLINE}}
      ODC_ORACLE_DEFAULT_HOST: ${{parameters.ODC_ORACLE_DEFAULT_HOST}}
      ODC_ORACLE_DEFAULT_PORT: ${{parameters.ODC_ORACLE_DEFAULT_PORT}}
      ODC_ORACLE_DEFAULT_USERNAME: ${{parameters.ODC_ORACLE_DEFAULT_USERNAME}}
      ODC_ORACLE_DEFAULT_PASSWORD: ${{parameters.ODC_ORACLE_DEFAULT_PASSWORD}}
      ODC_ORACLE_DEFAULT_SID: ${{parameters.ODC_ORACLE_DEFAULT_SID}}
      ODC_ORACLE_DEFAULT_SERVICENAME: ${{parameters.ODC_ORACLE_DEFAULT_SERVICENAME}}
      ODC_ORACLE_DEFAULT_ROLE: ${{parameters.ODC_ORACLE_DEFAULT_ROLE}}
  config:
    afterExecute:
      checkRule:
        - ${{outputs.casePassRate}} >= 100 #通过率
        # - ${{outputs.lineCoverage}} >= 100 #全量行覆盖率
        # - ${{outputs.changeLineCoverage}} >= 100 #变更行覆盖率
        # - ${{outputs.branchCoverage}} >= 100 #分支覆盖率
        # - ${{outputs.changeBranchCoverage}} >= 100 #变更分支覆盖率

RPM&JAR打包:
  stage: 构建RPM
  plugin: ANT-BUILD
  passEnv: true            # 将outputs 的数据传递到其他任务
  pluginConfig:
    computeType: large
    image: reg.docker.alibaba-inc.com/oceanbase/odc-build:4.0.0
    script:
      # Build rpm package
      - TZ='Asia/Shanghai'; export TZ; echo "[ODC Pipeline] Begin rpm build at `date`"
      - echo "RPM_RELEASE=${RPM_RELEASE}"
      - CURRENT_DIR=$(pwd)
      - script/create_setting.sh "$CURRENT_DIR/settings.xml"
      - export odc_client_url=${ACI_VAR_odc_client_url}
      - git submodule set-url client "$odc_client_url" && git submodule sync && git submodule update --init --recursive
      - script/build_rpm.sh ${RPM_RELEASE} x86 "-s $CURRENT_DIR/settings.xml" && script/create_slim_jar.sh
      - ls distribution/docker/resources/x86/odc-server*.rpm && export BUILD_RPM_OK=$?
      - rpm_file_name="distribution/docker/resources/x86/$(ls distribution/docker/resources/x86 | grep odc-server)"
      - echo "rpm name=$(rpm -qp --queryformat '%{NAME}-%{VERSION}-%{RELEASE}' ${rpm_file_name})"
    outputs:
      - name: odc_server_x86_rpm
        type: custom # 存入OSS
        paths: [ "./distribution/docker/resources/x86/odc-server*.rpm" ]
        desc: "RPM of odc-server"
      - name: odc_server_fat_jar
        type: custom # 存入OSS
        paths: [ "./server/odc-server/target/odc-*executable.jar" ]
        desc: "fat jar of odc-server, with static resources"
      - name: odc_server_slim_jar
        type: custom # 存入OSS
        paths: [ "./server/odc-server/target/odc-*slim.jar" ]
        desc: "slim jar of odc-server, without static resources"
  variables:
    - BUILD_RPM_OK
  checkRule:
    - BUILD_RPM_OK = 0

AARCH-RPM&JAR打包:
  stage: 构建RPM
  plugin: ANT-BUILD
  passEnv: true            # 将outputs 的数据传递到其他任务
  pluginConfig:
    computeType: large
    image: reg.docker.alibaba-inc.com/oceanbase/odc-build-arm:4.0.0
    architecture: aarch64
    environments:
      GIT_SUBMODULE_STRATEGY: recursive
    script:
      # Build rpm package
      - TZ='Asia/Shanghai'; export TZ; echo "[ODC Pipeline] Begin rpm build at `date`"
      - export MAVEN_OPTS=${ACI_VAR_MAVEN_OPTS}
      - echo "RPM_RELEASE=${RPM_RELEASE}"
      - CURRENT_DIR=$(pwd)
      - script/create_setting.sh "$CURRENT_DIR/settings.xml"
      - export odc_client_url=${ACI_VAR_odc_client_url}
      - git submodule set-url client "$odc_client_url" && git submodule sync && git submodule update --init --recursive
      - script/build_rpm.sh ${RPM_RELEASE} aarch "-s $CURRENT_DIR/settings.xml"
      - ls distribution/docker/resources/aarch/odc-server*.rpm && export BUILD_AARCH_RPM_OK=$?
      - rpm_file_name="distribution/docker/resources/aarch/$(ls distribution/docker/resources/aarch | grep odc-server)"
      - echo "rpm name=$(rpm -qp --queryformat '%{NAME}-%{VERSION}-%{RELEASE}' ${rpm_file_name})"
    outputs:
      - name: odc_server_aarch_rpm
        type: custom # 存入OSS
        paths: [ "./distribution/docker/resources/aarch/odc-server*.rpm" ]
        desc: "Aarch RPM of odc-server"
    variables:
      - BUILD_AARCH_RPM_OK
    checkRule:
      - BUILD_AARCH_RPM_OK = 0

社区版Docker镜像打包_x86_64:
  stage: 构建Docker
  plugin: ANT-BUILD
  pluginConfig:
    image: reg.docker.alibaba-inc.com/oceanbase/odc-build:4.0.0
    script:
      - TZ='Asia/Shanghai'; export TZ; echo "[ODC Pipeline] Begin docker build at `date`"
      - filename=$(echo "${odc_server_x86_rpm}" | grep --only-matching 'odc-server.*rpm' ) || true
      - echo "filename is $filename"
      - curl --silent -o ${filename} -L "${odc_server_x86_rpm}"
      - ls *.rpm; cp *.rpm distribution/docker/resources/
      - sed -e "s/DATE_CHANGE/$(date)/" -i distribution/docker/odc/Dockerfile
      - echo "docker image tag=${DOCKER_IMAGE_TAG}"
    inputs:
      params:
        - name: DIRECTORY
          value: distribution/docker
        - name: DOCKERFILE
          value: distribution/docker/odc/Dockerfile
    outputs:
      - name: odc-server
        type: image
        repository: reg.docker.alibaba-inc.com
        namespace: oceanbase
        tag: ${DOCKER_IMAGE_TAG_X86}
        desc: "odc-server docker image(x86_64), release version"

Docker镜像打包_aarch64:
  stage: 构建Docker
  plugin: ANT-BUILD
  pluginConfig:
    image: reg.docker.alibaba-inc.com/oceanbase-platform/alios7u2-aarch64-min:latest
    architecture: aarch64
    beforeScript:
      - echo "skip_build_arm=$ACI_VAR_skip_build_arm"
    script:
      - TZ='Asia/Shanghai'; export TZ; echo "[ODC Pipeline] Begin docker build at `date`"
      - filename=$(echo "${odc_server_aarch_rpm}" | grep --only-matching 'odc-server.*rpm' ) || true
      - echo "filename is $filename"
      - curl --silent -o ${filename} -L "${odc_server_aarch_rpm}"
      - ls *.rpm; cp *.rpm distribution/docker/resources/
      - sed -e "s/DATE_CHANGE/$(date)/" -i distribution/docker/odc/Dockerfile
      - echo "DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}"
      - sh script/generate_arm_dockerfile.sh distribution/docker/odc/Dockerfile distribution/docker/odc/Dockerfile.arm
    inputs:
      params:
        - name: DIRECTORY
          value: distribution/docker
        - name: DOCKERFILE
          value: distribution/docker/odc/Dockerfile.arm
    outputs:
      - name: odc-server
        type: image
        repository: reg.docker.alibaba-inc.com
        namespace: oceanbase
        tag: ${DOCKER_IMAGE_TAG_ARM}_aarch64
        desc: "odc-server docker image(aarch64), release version"



打Tag:
  stage: 构建收尾
  plugin: GIT-TAG
  pluginConfig:
    tagName: release_${DOCKER_IMAGE_TAG}
    tagMsg: "ODC Release ${DOCKER_IMAGE_TAG}"
    tagReleaseNote: "ODC Release ${DOCKER_IMAGE_TAG}"
    gitBranch: ${ACI_COMMIT_REF_NAME}